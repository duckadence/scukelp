
pool_test_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b518  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139b8  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f05c  0801f05c  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  0801f05c  0801f05c  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f05c  0801f05c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f05c  0801f05c  0002f05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f060  0801f060  0002f060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801f064  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f38  20000070  0801f0d4  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fa8  0801f0d4  00032fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2b2  00000000  00000000  000300e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bec  00000000  00000000  0004a395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0004df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e22  00000000  00000000  0004f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a9b  00000000  00000000  0007357a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd517  00000000  00000000  00095015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001219  00000000  00000000  0017252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000669c  00000000  00000000  00173748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00179de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800b68c 	.word	0x0800b68c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	0800b68c 	.word	0x0800b68c

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__gedf2>:
 8000544:	f04f 3cff 	mov.w	ip, #4294967295
 8000548:	e006      	b.n	8000558 <__cmpdf2+0x4>
 800054a:	bf00      	nop

0800054c <__ledf2>:
 800054c:	f04f 0c01 	mov.w	ip, #1
 8000550:	e002      	b.n	8000558 <__cmpdf2+0x4>
 8000552:	bf00      	nop

08000554 <__cmpdf2>:
 8000554:	f04f 0c01 	mov.w	ip, #1
 8000558:	f84d cd04 	str.w	ip, [sp, #-4]!
 800055c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	bf18      	it	ne
 800056a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056e:	d01b      	beq.n	80005a8 <__cmpdf2+0x54>
 8000570:	b001      	add	sp, #4
 8000572:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000576:	bf0c      	ite	eq
 8000578:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800057c:	ea91 0f03 	teqne	r1, r3
 8000580:	bf02      	ittt	eq
 8000582:	ea90 0f02 	teqeq	r0, r2
 8000586:	2000      	moveq	r0, #0
 8000588:	4770      	bxeq	lr
 800058a:	f110 0f00 	cmn.w	r0, #0
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf58      	it	pl
 8000594:	4299      	cmppl	r1, r3
 8000596:	bf08      	it	eq
 8000598:	4290      	cmpeq	r0, r2
 800059a:	bf2c      	ite	cs
 800059c:	17d8      	asrcs	r0, r3, #31
 800059e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a2:	f040 0001 	orr.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	d102      	bne.n	80005b8 <__cmpdf2+0x64>
 80005b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b6:	d107      	bne.n	80005c8 <__cmpdf2+0x74>
 80005b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c0:	d1d6      	bne.n	8000570 <__cmpdf2+0x1c>
 80005c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c6:	d0d3      	beq.n	8000570 <__cmpdf2+0x1c>
 80005c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <__aeabi_cdrcmple>:
 80005d0:	4684      	mov	ip, r0
 80005d2:	4610      	mov	r0, r2
 80005d4:	4662      	mov	r2, ip
 80005d6:	468c      	mov	ip, r1
 80005d8:	4619      	mov	r1, r3
 80005da:	4663      	mov	r3, ip
 80005dc:	e000      	b.n	80005e0 <__aeabi_cdcmpeq>
 80005de:	bf00      	nop

080005e0 <__aeabi_cdcmpeq>:
 80005e0:	b501      	push	{r0, lr}
 80005e2:	f7ff ffb7 	bl	8000554 <__cmpdf2>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	bf48      	it	mi
 80005ea:	f110 0f00 	cmnmi.w	r0, #0
 80005ee:	bd01      	pop	{r0, pc}

080005f0 <__aeabi_dcmpeq>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff fff4 	bl	80005e0 <__aeabi_cdcmpeq>
 80005f8:	bf0c      	ite	eq
 80005fa:	2001      	moveq	r0, #1
 80005fc:	2000      	movne	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmplt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffea 	bl	80005e0 <__aeabi_cdcmpeq>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_dcmple>:
 8000618:	f84d ed08 	str.w	lr, [sp, #-8]!
 800061c:	f7ff ffe0 	bl	80005e0 <__aeabi_cdcmpeq>
 8000620:	bf94      	ite	ls
 8000622:	2001      	movls	r0, #1
 8000624:	2000      	movhi	r0, #0
 8000626:	f85d fb08 	ldr.w	pc, [sp], #8
 800062a:	bf00      	nop

0800062c <__aeabi_dcmpge>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff ffce 	bl	80005d0 <__aeabi_cdrcmple>
 8000634:	bf94      	ite	ls
 8000636:	2001      	movls	r0, #1
 8000638:	2000      	movhi	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmpgt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffc4 	bl	80005d0 <__aeabi_cdrcmple>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000654:	b480      	push	{r7}
 8000656:	b08b      	sub	sp, #44	; 0x2c
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000664:	e030      	b.n	80006c8 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1d1a      	adds	r2, r3, #4
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	60fa      	str	r2, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 800067a:	edd7 7a08 	vldr	s15, [r7, #32]
 800067e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000682:	edd7 7a07 	vldr	s15, [r7, #28]
 8000686:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800068a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1d1a      	adds	r2, r3, #4
 8000692:	60ba      	str	r2, [r7, #8]
 8000694:	edc7 7a06 	vstr	s15, [r7, #24]
 8000698:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800069a:	edd7 7a06 	vldr	s15, [r7, #24]
 800069e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	db07      	blt.n	80006b8 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 80006a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80006ac:	eef1 7ae7 	vsqrt.f32	s15, s15
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80006b6:	e004      	b.n	80006c2 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80006c0:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	3b01      	subs	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1cb      	bne.n	8000666 <arm_cmplx_mag_f32+0x12>
  }

}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	372c      	adds	r7, #44	; 0x2c
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	460b      	mov	r3, r1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	e043      	b.n	8000778 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	089b      	lsrs	r3, r3, #2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	3301      	adds	r3, #1
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	b29b      	uxth	r3, r3
 8000710:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	441a      	add	r2, r3
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	68f9      	ldr	r1, [r7, #12]
 800072c:	440b      	add	r3, r1
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	3301      	adds	r3, #1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	441a      	add	r2, r3
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	3301      	adds	r3, #1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	68f9      	ldr	r1, [r7, #12]
 800075e:	440b      	add	r3, r1
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	601a      	str	r2, [r3, #0]

    i += 2;
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3302      	adds	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000778:	897b      	ldrh	r3, [r7, #10]
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	429a      	cmp	r2, r3
 800077e:	d3b7      	bcc.n	80006f0 <arm_bitreversal_32+0x14>
  }
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b0a0      	sub	sp, #128	; 0x80
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800079e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80007b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007b4:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80007b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80007bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80007c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80007cc:	4413      	add	r3, r2
 80007ce:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80007d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007d6:	e1b6      	b.n	8000b46 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80007f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80007f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 80007fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8000802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8000808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800080e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8000814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800081a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8000820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8000826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800082c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8000832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8000838:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800083c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1d1a      	adds	r2, r3, #4
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800084e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000852:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	1d1a      	adds	r2, r3, #4
 800085a:	603a      	str	r2, [r7, #0]
 800085c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000860:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8000864:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000868:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	1d1a      	adds	r2, r3, #4
 8000870:	603a      	str	r2, [r7, #0]
 8000872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000876:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800087a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800087e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	1d1a      	adds	r2, r3, #4
 8000886:	603a      	str	r2, [r7, #0]
 8000888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800088c:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8000890:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000894:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80008a0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80008a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80008b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80008b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80008c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80008c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80008d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80008d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80008d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008da:	1d1a      	adds	r2, r3, #4
 80008dc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80008e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80008ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008f0:	1d1a      	adds	r2, r3, #4
 80008f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80008fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000900:	edd7 7a04 	vldr	s15, [r7, #16]
 8000904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000906:	1d1a      	adds	r2, r3, #4
 8000908:	67fa      	str	r2, [r7, #124]	; 0x7c
 800090a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000912:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000916:	edd7 7a05 	vldr	s15, [r7, #20]
 800091a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800091c:	1d1a      	adds	r2, r3, #4
 800091e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000924:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8000928:	ed97 7a02 	vldr	s14, [r7, #8]
 800092c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000934:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8000938:	ed97 7a03 	vldr	s14, [r7, #12]
 800093c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000944:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8000948:	ed97 7a04 	vldr	s14, [r7, #16]
 800094c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000954:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000958:	ed97 7a05 	vldr	s14, [r7, #20]
 800095c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000964:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8000968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800096a:	1d1a      	adds	r2, r3, #4
 800096c:	673a      	str	r2, [r7, #112]	; 0x70
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	673a      	str	r2, [r7, #112]	; 0x70
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800097c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000980:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000988:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800098c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000990:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000998:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800099c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80009a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80009a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80009ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80009bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009be:	1d1a      	adds	r2, r3, #4
 80009c0:	677a      	str	r2, [r7, #116]	; 0x74
 80009c2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80009c6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80009ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ce:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80009d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009d4:	1d1a      	adds	r2, r3, #4
 80009d6:	677a      	str	r2, [r7, #116]	; 0x74
 80009d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80009dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80009e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e4:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80009e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80009ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80009f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80009fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a04:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8000a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a0c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a14:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8000a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a1c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a24:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a2a:	1d1a      	adds	r2, r3, #4
 8000a2c:	67ba      	str	r2, [r7, #120]	; 0x78
 8000a2e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a32:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a40:	1d1a      	adds	r2, r3, #4
 8000a42:	67ba      	str	r2, [r7, #120]	; 0x78
 8000a44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a50:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8000a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a56:	1d1a      	adds	r2, r3, #4
 8000a58:	673a      	str	r2, [r7, #112]	; 0x70
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a60:	1d1a      	adds	r2, r3, #4
 8000a62:	673a      	str	r2, [r7, #112]	; 0x70
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8000a68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a6c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a74:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8000a78:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a7c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a84:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8000a88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000a8c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a94:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8000a98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a9c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8000aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aaa:	1d1a      	adds	r2, r3, #4
 8000aac:	677a      	str	r2, [r7, #116]	; 0x74
 8000aae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ab2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aba:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8000abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ac0:	1d1a      	adds	r2, r3, #4
 8000ac2:	677a      	str	r2, [r7, #116]	; 0x74
 8000ac4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000ac8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad0:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8000ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ad8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8000ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8000af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000af8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b00:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8000b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b16:	1d1a      	adds	r2, r3, #4
 8000b18:	67ba      	str	r2, [r7, #120]	; 0x78
 8000b1a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000b1e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b26:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b3c:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8000b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b42:	3b01      	subs	r3, #1
 8000b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f47f ae45 	bne.w	80007d8 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b50:	b299      	uxth	r1, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	2302      	movs	r3, #2
 8000b58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b5a:	f001 f80f 	bl	8001b7c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b60:	b299      	uxth	r1, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	2302      	movs	r3, #2
 8000b68:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000b6a:	f001 f807 	bl	8001b7c <arm_radix8_butterfly_f32>
}
 8000b6e:	bf00      	nop
 8000b70:	3780      	adds	r7, #128	; 0x80
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b0ac      	sub	sp, #176	; 0xb0
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8000b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8000b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8000baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bb4:	4413      	add	r3, r2
 8000bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8000bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bc2:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8000bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bc8:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8000bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bce:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8000bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bd4:	3b04      	subs	r3, #4
 8000bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8000bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bde:	3b04      	subs	r3, #4
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8000be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000be8:	3b04      	subs	r3, #4
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8000bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000bf8:	4413      	add	r3, r2
 8000bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8000c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c1a:	085b      	lsrs	r3, r3, #1
 8000c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	ed93 7a00 	vldr	s14, [r3]
 8000c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	ed93 7a00 	vldr	s14, [r3]
 8000c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c4c:	edd3 7a00 	vldr	s15, [r3]
 8000c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c54:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	ed93 7a00 	vldr	s14, [r3]
 8000c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c64:	3304      	adds	r3, #4
 8000c66:	edd3 7a00 	vldr	s15, [r3]
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	3304      	adds	r3, #4
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c7e:	3304      	adds	r3, #4
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c90:	3304      	adds	r3, #4
 8000c92:	ed93 7a00 	vldr	s14, [r3]
 8000c96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000cbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000cdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cec:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d06:	3304      	adds	r3, #4
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d10:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d18:	3304      	adds	r3, #4
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d34:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d3c:	ed93 7a00 	vldr	s14, [r3]
 8000d40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d54:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d5c:	ed93 7a00 	vldr	s14, [r3]
 8000d60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d6c:	edd3 7a00 	vldr	s15, [r3]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	1d1a      	adds	r2, r3, #4
 8000d74:	603a      	str	r2, [r7, #0]
 8000d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d82:	3304      	adds	r3, #4
 8000d84:	ed93 7a00 	vldr	s14, [r3]
 8000d88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d94:	3304      	adds	r3, #4
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	1d1a      	adds	r2, r3, #4
 8000d9e:	603a      	str	r2, [r7, #0]
 8000da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da4:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dac:	1d1a      	adds	r2, r3, #4
 8000dae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000db4:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8000db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dba:	1d1a      	adds	r2, r3, #4
 8000dbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dc2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8000dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dc8:	1d1a      	adds	r2, r3, #4
 8000dca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8000dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dd6:	1d1a      	adds	r2, r3, #4
 8000dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000ddc:	6a3a      	ldr	r2, [r7, #32]
 8000dde:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8000de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000de4:	1d1a      	adds	r2, r3, #4
 8000de6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8000dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000df2:	1d1a      	adds	r2, r3, #4
 8000df4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8000dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e04:	4413      	add	r3, r2
 8000e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8000e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e12:	4413      	add	r3, r2
 8000e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8000e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000e20:	4413      	add	r3, r2
 8000e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8000e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e32:	e31c      	b.n	800146e <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e46:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	3304      	adds	r3, #4
 8000e64:	ed93 7a00 	vldr	s14, [r3]
 8000e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	ed93 7a00 	vldr	s14, [r3]
 8000e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e86:	3304      	adds	r3, #4
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e90:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e98:	3304      	adds	r3, #4
 8000e9a:	ed93 7a00 	vldr	s14, [r3]
 8000e9e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eaa:	3304      	adds	r3, #4
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ebc:	edd3 7a00 	vldr	s15, [r3]
 8000ec0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000efc:	3304      	adds	r3, #4
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f0e:	3304      	adds	r3, #4
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f18:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f20:	3304      	adds	r3, #4
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f32:	3304      	adds	r3, #4
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f44:	ed93 7a00 	vldr	s14, [r3]
 8000f48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f64:	ed93 7a00 	vldr	s14, [r3]
 8000f68:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	603a      	str	r2, [r7, #0]
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	ed93 7a00 	vldr	s14, [r3]
 8000f90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	1d1a      	adds	r2, r3, #4
 8000fa6:	603a      	str	r2, [r7, #0]
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fb4:	3b04      	subs	r3, #4
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8000fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd0:	3b04      	subs	r3, #4
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fec:	ed93 7a00 	vldr	s14, [r3]
 8000ff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8001018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee37 7a67 	vsub.f32	s14, s14, s15
 800102c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800103c:	ed93 7a00 	vldr	s14, [r3]
 8001040:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001050:	3b04      	subs	r3, #4
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ee37 7a67 	vsub.f32	s14, s14, s15
 800105a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800105e:	3b04      	subs	r3, #4
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800106c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001070:	3b04      	subs	r3, #4
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800107a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800107e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001082:	3b04      	subs	r3, #4
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800109c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80010b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80010c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010cc:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80010d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010d4:	3b04      	subs	r3, #4
 80010d6:	ed93 7a00 	vldr	s14, [r3]
 80010da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010de:	3b04      	subs	r3, #4
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80010f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001110:	1f1a      	subs	r2, r3, #4
 8001112:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800111e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001122:	3b04      	subs	r3, #4
 8001124:	ed93 7a00 	vldr	s14, [r3]
 8001128:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001134:	3b04      	subs	r3, #4
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800113e:	1f1a      	subs	r2, r3, #4
 8001140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800114c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001150:	1d1a      	adds	r2, r3, #4
 8001152:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800115a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800115e:	1d1a      	adds	r2, r3, #4
 8001160:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8001168:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800116c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8001178:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800117c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8001188:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800118c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8001198:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800119c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80011a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80011b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80011c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011c6:	1d1a      	adds	r2, r3, #4
 80011c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80011cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80011d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80011dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80011e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80011ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80011fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001200:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800120c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001210:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800121c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001220:	1f1a      	subs	r2, r3, #4
 8001222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001226:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800122a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800122e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001232:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800123a:	1f1a      	subs	r2, r3, #4
 800123c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001240:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001244:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8001258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800125c:	3304      	adds	r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8001262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800126a:	4413      	add	r3, r2
 800126c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001270:	edd7 7a07 	vldr	s15, [r7, #28]
 8001274:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8001280:	edd7 7a08 	vldr	s15, [r7, #32]
 8001284:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001290:	edd7 7a08 	vldr	s15, [r7, #32]
 8001294:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80012b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012b4:	1d1a      	adds	r2, r3, #4
 80012b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80012be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80012ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ce:	1d1a      	adds	r2, r3, #4
 80012d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80012d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80012dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80012e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012e8:	eef1 7a67 	vneg.f32	s15, s15
 80012ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80012f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001308:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001318:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800131c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800132c:	1f1a      	subs	r2, r3, #4
 800132e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001332:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001336:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800133a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001346:	1f1a      	subs	r2, r3, #4
 8001348:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800134c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001350:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800135c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800136e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001376:	4413      	add	r3, r2
 8001378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800137c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001380:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800138c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001390:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800139c:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 80013ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80013bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c0:	1d1a      	adds	r2, r3, #4
 80013c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80013c6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80013ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80013d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013da:	1d1a      	adds	r2, r3, #4
 80013dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80013e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80013e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80013f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001400:	edd7 7a05 	vldr	s15, [r7, #20]
 8001404:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001410:	edd7 7a05 	vldr	s15, [r7, #20]
 8001414:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001420:	edd7 7a06 	vldr	s15, [r7, #24]
 8001424:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001434:	1f1a      	subs	r2, r3, #4
 8001436:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800143a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800143e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800144a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800144e:	1f1a      	subs	r2, r3, #4
 8001450:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001454:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001458:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001468:	3b01      	subs	r3, #1
 800146a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800146e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f acde 	bne.w	8000e34 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3304      	adds	r3, #4
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014b0:	3304      	adds	r3, #4
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014ca:	3304      	adds	r3, #4
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80014d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014dc:	3304      	adds	r3, #4
 80014de:	ed93 7a00 	vldr	s14, [r3]
 80014e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ee:	3304      	adds	r3, #4
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80014fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800153c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001540:	3304      	adds	r3, #4
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800154a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001552:	3304      	adds	r3, #4
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001564:	3304      	adds	r3, #4
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800156e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001576:	3304      	adds	r3, #4
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a0:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80015a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015a8:	ed93 7a00 	vldr	s14, [r3]
 80015ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	603a      	str	r2, [r7, #0]
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80015ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ce:	3304      	adds	r3, #4
 80015d0:	ed93 7a00 	vldr	s14, [r3]
 80015d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015e0:	3304      	adds	r3, #4
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	603a      	str	r2, [r7, #0]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80015f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80015fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001600:	3304      	adds	r3, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001606:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800160a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001616:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800161a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001626:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800162a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001636:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800163a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800164a:	1d1a      	adds	r2, r3, #4
 800164c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001650:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001654:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001664:	1d1a      	adds	r2, r3, #4
 8001666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800166a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800166e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800167a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001686:	3304      	adds	r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800168c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001690:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800169c:	edd7 7a08 	vldr	s15, [r7, #32]
 80016a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80016ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80016bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80016cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d0:	1d1a      	adds	r2, r3, #4
 80016d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016d6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80016da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80016e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ea:	1d1a      	adds	r2, r3, #4
 80016ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016f0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016f4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fc:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001708:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800170c:	3304      	adds	r3, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001712:	edd7 7a03 	vldr	s15, [r7, #12]
 8001716:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001742:	edd7 7a03 	vldr	s15, [r7, #12]
 8001746:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800175c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001760:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800176c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001770:	1d1a      	adds	r2, r3, #4
 8001772:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001776:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800177a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001782:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800178a:	b299      	uxth	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	2304      	movs	r3, #4
 8001792:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001794:	f000 f9f2 	bl	8001b7c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800179c:	b299      	uxth	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2304      	movs	r3, #4
 80017a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80017a6:	f000 f9e9 	bl	8001b7c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80017aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ae:	b299      	uxth	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	2304      	movs	r3, #4
 80017b6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017b8:	f000 f9e0 	bl	8001b7c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80017bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017c0:	b299      	uxth	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2304      	movs	r3, #4
 80017c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80017ca:	f000 f9d7 	bl	8001b7c <arm_radix8_butterfly_f32>
}
 80017ce:	bf00      	nop
 80017d0:	37b0      	adds	r7, #176	; 0xb0
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b088      	sub	sp, #32
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	4611      	mov	r1, r2
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d117      	bne.n	8001828 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3304      	adds	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e00d      	b.n	8001820 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eef1 7a67 	vneg.f32	s15, s15
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	3308      	adds	r3, #8
 8001818:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3ed      	bcc.n	8001804 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182e:	d040      	beq.n	80018b2 <arm_cfft_f32+0xdc>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001836:	d845      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800183e:	d033      	beq.n	80018a8 <arm_cfft_f32+0xd2>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001846:	d83d      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184e:	d026      	beq.n	800189e <arm_cfft_f32+0xc8>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001856:	d835      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185e:	d028      	beq.n	80018b2 <arm_cfft_f32+0xdc>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001866:	d82d      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186e:	d01b      	beq.n	80018a8 <arm_cfft_f32+0xd2>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001876:	d825      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	d00f      	beq.n	800189e <arm_cfft_f32+0xc8>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d81f      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b40      	cmp	r3, #64	; 0x40
 8001888:	d013      	beq.n	80018b2 <arm_cfft_f32+0xdc>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b40      	cmp	r3, #64	; 0x40
 800188e:	d819      	bhi.n	80018c4 <arm_cfft_f32+0xee>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d003      	beq.n	800189e <arm_cfft_f32+0xc8>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d005      	beq.n	80018a8 <arm_cfft_f32+0xd2>
 800189c:	e012      	b.n	80018c4 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7fe ff74 	bl	800078e <arm_cfft_radix8by2_f32>
    break;
 80018a6:	e00d      	b.n	80018c4 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff f963 	bl	8000b76 <arm_cfft_radix8by4_f32>
    break;
 80018b0:	e008      	b.n	80018c4 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	2301      	movs	r3, #1
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f000 f95d 	bl	8001b7c <arm_radix8_butterfly_f32>
    break;
 80018c2:	bf00      	nop
  }

  if ( bitReverseFlag )
 80018c4:	79bb      	ldrb	r3, [r7, #6]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8999      	ldrh	r1, [r3, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f7fe ff01 	bl	80006dc <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d130      	bne.n	8001942 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f2:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e01c      	b.n	800193a <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1d1a      	adds	r2, r3, #4
 8001904:	61ba      	str	r2, [r7, #24]
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	edd7 7a04 	vldr	s15, [r7, #16]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	eeb1 7a67 	vneg.f32	s14, s15
 8001920:	edd7 7a04 	vldr	s15, [r7, #16]
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3304      	adds	r3, #4
 8001932:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3de      	bcc.n	8001900 <arm_cfft_f32+0x12a>
    }
  }
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <arm_cfft_init_2048_f32+0x44>)
 8001968:	899a      	ldrh	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	819a      	strh	r2, [r3, #12]
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <arm_cfft_init_2048_f32+0x44>)
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <arm_cfft_init_2048_f32+0x44>)
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	0801ebcc 	.word	0x0801ebcc

08001994 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	801a      	strh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <arm_cfft_init_1024_f32+0x44>)
 80019b0:	899a      	ldrh	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	819a      	strh	r2, [r3, #12]
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <arm_cfft_init_1024_f32+0x44>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <arm_cfft_init_1024_f32+0x44>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	0801ebbc 	.word	0x0801ebbc

080019dc <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <arm_cfft_init_512_f32+0x44>)
 80019f8:	899a      	ldrh	r2, [r3, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	819a      	strh	r2, [r3, #12]
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <arm_cfft_init_512_f32+0x44>)
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <arm_cfft_init_512_f32+0x44>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	0801ebac 	.word	0x0801ebac

08001a24 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <arm_cfft_init_256_f32+0x44>)
 8001a40:	899a      	ldrh	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	819a      	strh	r2, [r3, #12]
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <arm_cfft_init_256_f32+0x44>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <arm_cfft_init_256_f32+0x44>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	0801eb9c 	.word	0x0801eb9c

08001a6c <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	801a      	strh	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <arm_cfft_init_128_f32+0x40>)
 8001a86:	899a      	ldrh	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	819a      	strh	r2, [r3, #12]
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <arm_cfft_init_128_f32+0x40>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <arm_cfft_init_128_f32+0x40>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	0801eb8c 	.word	0x0801eb8c

08001ab0 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <arm_cfft_init_64_f32+0x40>)
 8001aca:	899a      	ldrh	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	819a      	strh	r2, [r3, #12]
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <arm_cfft_init_64_f32+0x40>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <arm_cfft_init_64_f32+0x40>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	0801eb7c 	.word	0x0801eb7c

08001af4 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <arm_cfft_init_32_f32+0x40>)
 8001b0e:	899a      	ldrh	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	819a      	strh	r2, [r3, #12]
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <arm_cfft_init_32_f32+0x40>)
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <arm_cfft_init_32_f32+0x40>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	0801eb6c 	.word	0x0801eb6c

08001b38 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2210      	movs	r2, #16
 8001b48:	801a      	strh	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <arm_cfft_init_16_f32+0x40>)
 8001b52:	899a      	ldrh	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	819a      	strh	r2, [r3, #12]
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <arm_cfft_init_16_f32+0x40>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <arm_cfft_init_16_f32+0x40>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	0801eb5c 	.word	0x0801eb5c

08001b7c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b0bd      	sub	sp, #244	; 0xf4
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <arm_radix8_butterfly_f32+0x3c>)
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8001b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8001ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bb4:	e002      	b.n	8001bbc <arm_radix8_butterfly_f32+0x40>
 8001bb6:	bf00      	nop
 8001bb8:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8001bbc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8001bca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8001bd8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be0:	4413      	add	r3, r2
 8001be2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8001be6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bee:	4413      	add	r3, r2
 8001bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8001bf4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8001c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8001c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	ed93 7a00 	vldr	s14, [r3]
 8001c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	ed93 7a00 	vldr	s14, [r3]
 8001c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c62:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8001c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001caa:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001cae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	ed93 7a00 	vldr	s14, [r3]
 8001cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cce:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001cd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	ed93 7a00 	vldr	s14, [r3]
 8001d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001d1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8001d3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001d42:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8001d4e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001d52:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8001d5e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001d62:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8001d6e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001d72:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8001d7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001d8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8001d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001da6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001db2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	3304      	adds	r3, #4
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	ed93 7a00 	vldr	s14, [r3]
 8001dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	3304      	adds	r3, #4
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	3304      	adds	r3, #4
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	3304      	adds	r3, #4
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	3304      	adds	r3, #4
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	3304      	adds	r3, #4
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e26:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	3304      	adds	r3, #4
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	3304      	adds	r3, #4
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001e52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	3304      	adds	r3, #4
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	3304      	adds	r3, #4
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8001e7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	3304      	adds	r3, #4
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	3304      	adds	r3, #4
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	ed93 7a00 	vldr	s14, [r3]
 8001eb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	3304      	adds	r3, #4
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8001eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8001ef2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001ef6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8001f02:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001f06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8001f12:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f16:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8001f22:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f26:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8001f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3304      	adds	r3, #4
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001f42:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8001f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	3304      	adds	r3, #4
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8001f5e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8001f6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001f78:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8001f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001f92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001fae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8001fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001fca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8001fd6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001fda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8001fee:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001ff2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002006:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800200a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800200e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002012:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800201e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002022:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002036:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800203a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800203e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002042:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002046:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800204a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002056:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800205a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800205e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002062:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002066:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800206a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002076:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800207a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002086:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800208a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002096:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800209a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80020a6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80020aa:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80020b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80020c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80020d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80020de:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80020ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80020f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002112:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800211e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3304      	adds	r3, #4
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800212e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002136:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800213a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	3304      	adds	r3, #4
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800214a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	3304      	adds	r3, #4
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002166:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	3304      	adds	r3, #4
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002182:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800218e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002196:	4413      	add	r3, r2
 8002198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f4ff ad0a 	bcc.w	8001bbc <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80021a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ac:	2b07      	cmp	r3, #7
 80021ae:	f240 84e3 	bls.w	8002b78 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80021be:	893b      	ldrh	r3, [r7, #8]
 80021c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021c4:	4413      	add	r3, r2
 80021c6:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80021c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80021ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021d4:	4413      	add	r3, r2
 80021d6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80021d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021dc:	4413      	add	r3, r2
 80021de:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80021e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021e4:	4413      	add	r3, r2
 80021e6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80021e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ec:	4413      	add	r3, r2
 80021ee:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80021f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021f4:	4413      	add	r3, r2
 80021f6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80021f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80021fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021fc:	4413      	add	r3, r2
 80021fe:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002200:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800220e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800221a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800223e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800224a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002256:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	3304      	adds	r3, #4
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3304      	adds	r3, #4
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3304      	adds	r3, #4
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	3304      	adds	r3, #4
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	3304      	adds	r3, #4
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800229e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	3304      	adds	r3, #4
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 80022ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	3304      	adds	r3, #4
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 80022ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80022c2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	4413      	add	r3, r2
 80022cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80022d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d8:	4413      	add	r3, r2
 80022da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80022de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e6:	4413      	add	r3, r2
 80022e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80022ec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80022f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f4:	4413      	add	r3, r2
 80022f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80022fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002302:	4413      	add	r3, r2
 8002304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002308:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800230c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002310:	4413      	add	r3, r2
 8002312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002316:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800231a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231e:	4413      	add	r3, r2
 8002320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002348:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	ed93 7a00 	vldr	s14, [r3]
 8002356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002368:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800236c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80023b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80023d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4413      	add	r3, r2
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80023fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	ed93 7a00 	vldr	s14, [r3]
 800240a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002440:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002444:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002448:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800244c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002450:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002454:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002458:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800245c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002460:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002464:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002468:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800246c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002470:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002474:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002478:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002492:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800249e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80024a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80024a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80024ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3304      	adds	r3, #4
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	ed93 7a00 	vldr	s14, [r3]
 80024be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	3304      	adds	r3, #4
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80024d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3304      	adds	r3, #4
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	3304      	adds	r3, #4
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80024fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	3304      	adds	r3, #4
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	3304      	adds	r3, #4
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002522:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3304      	adds	r3, #4
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	3304      	adds	r3, #4
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800254e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	3304      	adds	r3, #4
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	ed93 7a00 	vldr	s14, [r3]
 800255e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3304      	adds	r3, #4
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3304      	adds	r3, #4
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3304      	adds	r3, #4
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800259e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3304      	adds	r3, #4
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	ed93 7a00 	vldr	s14, [r3]
 80025ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	3304      	adds	r3, #4
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c2:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80025c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	3304      	adds	r3, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80025ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80025f2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80025fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002602:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800260e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002612:	edd7 7a08 	vldr	s15, [r7, #32]
 8002616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800261e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002622:	edd7 7a08 	vldr	s15, [r7, #32]
 8002626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800262e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002632:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800263e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002642:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800264e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3304      	adds	r3, #4
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800265e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800266a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800266e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002676:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800267a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800267e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002686:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800268a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800268e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800269a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800269e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 80026aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80026ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 80026ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80026be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80026ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80026ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80026da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80026e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80026f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	3304      	adds	r3, #4
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	ed97 7a05 	vldr	s14, [r7, #20]
 8002704:	edd7 7a04 	vldr	s15, [r7, #16]
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002710:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002714:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002720:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002730:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002734:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002740:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002744:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002750:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	ed97 7a07 	vldr	s14, [r7, #28]
 800275e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002766:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800276a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	3304      	adds	r3, #4
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	ed97 7a05 	vldr	s14, [r7, #20]
 800277a:	edd7 7a04 	vldr	s15, [r7, #16]
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002786:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800278a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002796:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800279a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80027a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80027b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80027c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80027d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80027d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027dc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80027e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	3304      	adds	r3, #4
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80027f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80027fc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002800:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002808:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800280c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002810:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002814:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002818:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800282c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002830:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002838:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002844:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002848:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002858:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800285c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002860:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800286c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002870:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800287c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002880:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002888:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800288c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002890:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800289c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80028a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80028ac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80028b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80028bc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80028cc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80028dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028e0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80028ec:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028f0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80028fc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002900:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800290c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002910:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002918:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800291c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002920:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002928:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800292c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002930:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800293c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002940:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002948:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800294c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002950:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800295c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002960:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002968:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800296c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002970:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002978:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800297c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002980:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002988:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800298c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002990:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002998:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800299c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80029b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3304      	adds	r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ce:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80029d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80029d6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80029e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029e6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80029f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80029f6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8002a02:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002a06:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8002a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a28:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8002a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	3304      	adds	r3, #4
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a44:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8002a48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a4c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a54:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8002a58:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a64:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8002a68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8002a78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a7c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8002a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a96:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8002aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8002abe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ac2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8002ace:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ad2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8002ade:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ae2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aea:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8002aee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002af2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8002afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8002b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	3304      	adds	r3, #4
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b30:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8002b34:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f4ff abba 	bcc.w	80022c2 <arm_radix8_butterfly_f32+0x746>

         j++;
 8002b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b52:	3301      	adds	r3, #1
 8002b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8002b58:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f4ff ab2c 	bcc.w	80021be <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8002b66:	893b      	ldrh	r3, [r7, #8]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b70:	2b07      	cmp	r3, #7
 8002b72:	f63f a813 	bhi.w	8001b9c <arm_radix8_butterfly_f32+0x20>
}
 8002b76:	e000      	b.n	8002b7a <arm_radix8_butterfly_f32+0xffe>
         break;
 8002b78:	bf00      	nop
}
 8002b7a:	bf00      	nop
 8002b7c:	37f4      	adds	r7, #244	; 0xf4
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b095      	sub	sp, #84	; 0x54
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	1d1a      	adds	r2, r3, #4
 8002bc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8002bd6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8002be6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002bea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8002bf6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	1d1a      	adds	r2, r3, #4
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8002c14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	4413      	add	r3, r2
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	3308      	adds	r3, #8
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8002c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5c:	1d1a      	adds	r2, r3, #4
 8002c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8002c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c66:	1d1a      	adds	r2, r3, #4
 8002c68:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8002c6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8002c7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8002c8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002c92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8002c9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8002cae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8002cbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002cc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002cce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002cd2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1d1a      	adds	r2, r3, #4
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002cfc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002d00:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1d1a      	adds	r2, r3, #4
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d26:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8002d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	3b08      	subs	r3, #8
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f73f af7f 	bgt.w	8002c42 <stage_rfft_f32+0xba>
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3754      	adds	r7, #84	; 0x54
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b095      	sub	sp, #84	; 0x54
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8002d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8002d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8002d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d82:	3308      	adds	r3, #8
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8002d86:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8002da4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002da8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbe:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4413      	add	r3, r2
 8002dca:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	3308      	adds	r3, #8
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8002dd2:	e07c      	b.n	8002ece <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	1d1a      	adds	r2, r3, #4
 8002df0:	64ba      	str	r2, [r7, #72]	; 0x48
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	1d1a      	adds	r2, r3, #4
 8002dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8002e00:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8002e10:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1c:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8002e20:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002e24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8002e30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e34:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8002e40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8002e50:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002e54:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8002e60:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8002e8e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1d1a      	adds	r2, r3, #4
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb8:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	3b08      	subs	r3, #8
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f73f af7f 	bgt.w	8002dd4 <merge_rfft_f32+0x82>
   }

}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	3754      	adds	r7, #84	; 0x54
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7ff ff26 	bl	8002d52 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f7fe fc62 	bl	80017d6 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8002f12:	e00a      	b.n	8002f2a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	2301      	movs	r3, #1
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7fe fc5b 	bl	80017d6 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff fe2f 	bl	8002b88 <stage_rfft_f32>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <arm_rfft_fast_init_32_f32+0x14>
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e013      	b.n	8002f70 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fdf4 	bl	8001b38 <arm_cfft_init_16_f32>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8002f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	e006      	b.n	8002f70 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <arm_rfft_fast_init_32_f32+0x44>)
 8002f6c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	08016bdc 	.word	0x08016bdc

08002f7c <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <arm_rfft_fast_init_64_f32+0x14>
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	e013      	b.n	8002fb8 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fdae 	bl	8001af4 <arm_cfft_init_32_f32>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8002f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	e006      	b.n	8002fb8 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2240      	movs	r2, #64	; 0x40
 8002fae:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a03      	ldr	r2, [pc, #12]	; (8002fc0 <arm_rfft_fast_init_64_f32+0x44>)
 8002fb4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08016c5c 	.word	0x08016c5c

08002fc4 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <arm_rfft_fast_init_128_f32+0x14>
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e013      	b.n	8003000 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fd68 	bl	8001ab0 <arm_cfft_init_64_f32>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8002fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8002fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff0:	e006      	b.n	8003000 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a03      	ldr	r2, [pc, #12]	; (8003008 <arm_rfft_fast_init_128_f32+0x44>)
 8002ffc:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08016d5c 	.word	0x08016d5c

0800300c <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <arm_rfft_fast_init_256_f32+0x14>
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e014      	b.n	800304a <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fd22 	bl	8001a6c <arm_cfft_init_128_f32>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800302c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003038:	e007      	b.n	800304a <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003040:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a03      	ldr	r2, [pc, #12]	; (8003054 <arm_rfft_fast_init_256_f32+0x48>)
 8003046:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	08016f5c 	.word	0x08016f5c

08003058 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <arm_rfft_fast_init_512_f32+0x14>
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e014      	b.n	8003096 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fcd8 	bl	8001a24 <arm_cfft_init_256_f32>
 8003074:	4603      	mov	r3, r0
 8003076:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003084:	e007      	b.n	8003096 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <arm_rfft_fast_init_512_f32+0x48>)
 8003092:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	0801735c 	.word	0x0801735c

080030a4 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <arm_rfft_fast_init_1024_f32+0x14>
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e014      	b.n	80030e2 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fc8e 	bl	80019dc <arm_cfft_init_512_f32>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80030c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	e007      	b.n	80030e2 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a03      	ldr	r2, [pc, #12]	; (80030ec <arm_rfft_fast_init_1024_f32+0x48>)
 80030de:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	08017b5c 	.word	0x08017b5c

080030f0 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <arm_rfft_fast_init_2048_f32+0x14>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e014      	b.n	800312e <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fc44 	bl	8001994 <arm_cfft_init_1024_f32>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8003118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311c:	e007      	b.n	800312e <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003124:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a03      	ldr	r2, [pc, #12]	; (8003138 <arm_rfft_fast_init_2048_f32+0x48>)
 800312a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	08018b5c 	.word	0x08018b5c

0800313c <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <arm_rfft_fast_init_4096_f32+0x14>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e014      	b.n	800317a <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fbfa 	bl	800194c <arm_cfft_init_2048_f32>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003168:	e007      	b.n	800317a <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003170:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a03      	ldr	r2, [pc, #12]	; (8003184 <arm_rfft_fast_init_4096_f32+0x48>)
 8003176:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	0801ab5c 	.word	0x0801ab5c

08003188 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	d023      	beq.n	80031e4 <arm_rfft_fast_init_f32+0x5c>
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	dc50      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a6:	d023      	beq.n	80031f0 <arm_rfft_fast_init_f32+0x68>
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ac:	dc4a      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d023      	beq.n	80031fc <arm_rfft_fast_init_f32+0x74>
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b8:	dc44      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031be:	d023      	beq.n	8003208 <arm_rfft_fast_init_f32+0x80>
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c4:	dc3e      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d023      	beq.n	8003214 <arm_rfft_fast_init_f32+0x8c>
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	dc38      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d024      	beq.n	8003220 <arm_rfft_fast_init_f32+0x98>
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	dc34      	bgt.n	8003244 <arm_rfft_fast_init_f32+0xbc>
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d02c      	beq.n	8003238 <arm_rfft_fast_init_f32+0xb0>
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d024      	beq.n	800322c <arm_rfft_fast_init_f32+0xa4>
 80031e2:	e02f      	b.n	8003244 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ffa9 	bl	800313c <arm_rfft_fast_init_4096_f32>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
    break;
 80031ee:	e02c      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff7d 	bl	80030f0 <arm_rfft_fast_init_2048_f32>
 80031f6:	4603      	mov	r3, r0
 80031f8:	73fb      	strb	r3, [r7, #15]
    break;
 80031fa:	e026      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff51 	bl	80030a4 <arm_rfft_fast_init_1024_f32>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
    break;
 8003206:	e020      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff25 	bl	8003058 <arm_rfft_fast_init_512_f32>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    break;
 8003212:	e01a      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fef9 	bl	800300c <arm_rfft_fast_init_256_f32>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]
    break;
 800321e:	e014      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fecf 	bl	8002fc4 <arm_rfft_fast_init_128_f32>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]
    break;
 800322a:	e00e      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fea5 	bl	8002f7c <arm_rfft_fast_init_64_f32>
 8003232:	4603      	mov	r3, r0
 8003234:	73fb      	strb	r3, [r7, #15]
    break;
 8003236:	e008      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fe7b 	bl	8002f34 <arm_rfft_fast_init_32_f32>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
    break;
 8003242:	e002      	b.n	800324a <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e001      	b.n	800324e <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800325c:	f000 fdc7 	bl	8003dee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003260:	f000 f844 	bl	80032ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003264:	f000 f9c8 	bl	80035f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003268:	f000 f9a8 	bl	80035bc <MX_DMA_Init>
	MX_TIM2_Init();
 800326c:	f000 f934 	bl	80034d8 <MX_TIM2_Init>
	MX_ADC1_Init();
 8003270:	f000 f88e 	bl	8003390 <MX_ADC1_Init>
	MX_SPI3_Init();
 8003274:	f000 f8f2 	bl	800345c <MX_SPI3_Init>
	MX_FATFS_Init();
 8003278:	f005 f866 	bl	8008348 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 800327c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003280:	4814      	ldr	r0, [pc, #80]	; (80032d4 <main+0x7c>)
 8003282:	f7ff ff81 	bl	8003188 <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003286:	217f      	movs	r1, #127	; 0x7f
 8003288:	4813      	ldr	r0, [pc, #76]	; (80032d8 <main+0x80>)
 800328a:	f002 f93b 	bl	8005504 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 800328e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003292:	4912      	ldr	r1, [pc, #72]	; (80032dc <main+0x84>)
 8003294:	4810      	ldr	r0, [pc, #64]	; (80032d8 <main+0x80>)
 8003296:	f001 f961 	bl	800455c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 800329a:	4811      	ldr	r0, [pc, #68]	; (80032e0 <main+0x88>)
 800329c:	f004 f896 	bl	80073cc <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (halfFlag) {
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <main+0x8c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <main+0x60>
			process_data(0, BUFFER_SIZE / 2);
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	2000      	movs	r0, #0
 80032ae:	f000 fad9 	bl	8003864 <process_data>
			halfFlag = 0;
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <main+0x8c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		}
		if (fullFlag) {
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <main+0x90>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ee      	beq.n	80032a0 <main+0x48>
			process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 80032c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032c6:	2080      	movs	r0, #128	; 0x80
 80032c8:	f000 facc 	bl	8003864 <process_data>
			fullFlag = 0;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <main+0x90>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
		if (halfFlag) {
 80032d2:	e7e5      	b.n	80032a0 <main+0x48>
 80032d4:	200003f0 	.word	0x200003f0
 80032d8:	20000090 	.word	0x20000090
 80032dc:	200001ec 	.word	0x200001ec
 80032e0:	200001a0 	.word	0x200001a0
 80032e4:	200003ec 	.word	0x200003ec
 80032e8:	200003ed 	.word	0x200003ed

080032ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b096      	sub	sp, #88	; 0x58
 80032f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	2244      	movs	r2, #68	; 0x44
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f008 f936 	bl	800b56c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003300:	463b      	mov	r3, r7
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800330e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003312:	f002 fe23 	bl	8005f5c <HAL_PWREx_ControlVoltageScaling>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800331c:	f000 fb68 	bl	80039f0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003320:	2310      	movs	r3, #16
 8003322:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003324:	2301      	movs	r3, #1
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800332c:	2360      	movs	r3, #96	; 0x60
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003330:	2302      	movs	r3, #2
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003334:	2301      	movs	r3, #1
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003338:	2301      	movs	r3, #1
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 800333c:	2328      	movs	r3, #40	; 0x28
 800333e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003340:	2307      	movs	r3, #7
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003344:	2302      	movs	r3, #2
 8003346:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003348:	2302      	movs	r3, #2
 800334a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4618      	mov	r0, r3
 8003352:	f002 fe59 	bl	8006008 <HAL_RCC_OscConfig>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <SystemClock_Config+0x74>
		Error_Handler();
 800335c:	f000 fb48 	bl	80039f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003360:	230f      	movs	r3, #15
 8003362:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003364:	2303      	movs	r3, #3
 8003366:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003374:	463b      	mov	r3, r7
 8003376:	2104      	movs	r1, #4
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fa59 	bl	8006830 <HAL_RCC_ClockConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <SystemClock_Config+0x9c>
		Error_Handler();
 8003384:	f000 fb34 	bl	80039f0 <Error_Handler>
	}
}
 8003388:	bf00      	nop
 800338a:	3758      	adds	r7, #88	; 0x58
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003396:	463b      	mov	r3, r7
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <MX_ADC1_Init+0xc4>)
 80033aa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033b2:	4b27      	ldr	r3, [pc, #156]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033c6:	2204      	movs	r2, #4
 80033c8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033d8:	2201      	movs	r2, #1
 80033da:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033e6:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80033f4:	4b16      	ldr	r3, [pc, #88]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_ADC1_Init+0xc0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_ADC1_Init+0xc0>)
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800340a:	4811      	ldr	r0, [pc, #68]	; (8003450 <MX_ADC1_Init+0xc0>)
 800340c:	f000 ff64 	bl	80042d8 <HAL_ADC_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_ADC1_Init+0x8a>
		Error_Handler();
 8003416:	f000 faeb 	bl	80039f0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <MX_ADC1_Init+0xc8>)
 800341c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800341e:	2306      	movs	r3, #6
 8003420:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003422:	2306      	movs	r3, #6
 8003424:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003426:	237f      	movs	r3, #127	; 0x7f
 8003428:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800342a:	2304      	movs	r3, #4
 800342c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003432:	463b      	mov	r3, r7
 8003434:	4619      	mov	r1, r3
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <MX_ADC1_Init+0xc0>)
 8003438:	f001 fadc 	bl	80049f4 <HAL_ADC_ConfigChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_ADC1_Init+0xb6>
		Error_Handler();
 8003442:	f000 fad5 	bl	80039f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000090 	.word	0x20000090
 8003454:	50040000 	.word	0x50040000
 8003458:	14f00020 	.word	0x14f00020

0800345c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <MX_SPI3_Init+0x78>)
 8003464:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800346c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003476:	f44f 7240 	mov.w	r2, #768	; 0x300
 800347a:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <MX_SPI3_Init+0x74>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_SPI3_Init+0x74>)
 800348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_SPI3_Init+0x74>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_SPI3_Init+0x74>)
 800349e:	2200      	movs	r2, #0
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <MX_SPI3_Init+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_SPI3_Init+0x74>)
 80034aa:	2207      	movs	r2, #7
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_SPI3_Init+0x74>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_SPI3_Init+0x74>)
 80034b6:	2208      	movs	r2, #8
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_SPI3_Init+0x74>)
 80034bc:	f003 fe8c 	bl	80071d8 <HAL_SPI_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_SPI3_Init+0x6e>
		Error_Handler();
 80034c6:	f000 fa93 	bl	80039f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000013c 	.word	0x2000013c
 80034d4:	40003c00 	.word	0x40003c00

080034d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80034de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80034f8:	463b      	mov	r3, r7
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	615a      	str	r2, [r3, #20]
 8003508:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800350a:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800350c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003510:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 40 - 1;
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <MX_TIM2_Init+0xe0>)
 8003514:	2227      	movs	r2, #39	; 0x27
 8003516:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 50 - 1;
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <MX_TIM2_Init+0xe0>)
 8003520:	2231      	movs	r2, #49	; 0x31
 8003522:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <MX_TIM2_Init+0xe0>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003530:	4821      	ldr	r0, [pc, #132]	; (80035b8 <MX_TIM2_Init+0xe0>)
 8003532:	f003 fef4 	bl	800731e <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM2_Init+0x68>
		Error_Handler();
 800353c:	f000 fa58 	bl	80039f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354a:	4619      	mov	r1, r3
 800354c:	481a      	ldr	r0, [pc, #104]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800354e:	f004 fa09 	bl	8007964 <HAL_TIM_ConfigClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM2_Init+0x84>
		Error_Handler();
 8003558:	f000 fa4a 	bl	80039f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800355c:	4816      	ldr	r0, [pc, #88]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800355e:	f003 ff89 	bl	8007474 <HAL_TIM_PWM_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM2_Init+0x94>
		Error_Handler();
 8003568:	f000 fa42 	bl	80039f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800356c:	2320      	movs	r3, #32
 800356e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4619      	mov	r1, r3
 800357a:	480f      	ldr	r0, [pc, #60]	; (80035b8 <MX_TIM2_Init+0xe0>)
 800357c:	f004 fe60 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8003586:	f000 fa33 	bl	80039f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800358a:	2360      	movs	r3, #96	; 0x60
 800358c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800359a:	463b      	mov	r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	4619      	mov	r1, r3
 80035a0:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_TIM2_Init+0xe0>)
 80035a2:	f004 f8cb 	bl	800773c <HAL_TIM_PWM_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80035ac:	f000 fa20 	bl	80039f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80035b0:	bf00      	nop
 80035b2:	3738      	adds	r7, #56	; 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200001a0 	.word	0x200001a0

080035bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <MX_DMA_Init+0x38>)
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <MX_DMA_Init+0x38>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6493      	str	r3, [r2, #72]	; 0x48
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <MX_DMA_Init+0x38>)
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	200b      	movs	r0, #11
 80035e0:	f002 f8fd 	bl	80057de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035e4:	200b      	movs	r0, #11
 80035e6:	f002 f916 	bl	8005816 <HAL_NVIC_EnableIRQ>

}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80035fe:	f107 030c 	add.w	r3, r7, #12
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <MX_GPIO_Init+0x7c>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <MX_GPIO_Init+0x7c>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <MX_GPIO_Init+0x7c>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <MX_GPIO_Init+0x7c>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <MX_GPIO_Init+0x7c>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <MX_GPIO_Init+0x7c>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003648:	f002 fc62 	bl	8005f10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800364c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003650:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	4619      	mov	r1, r3
 8003664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003668:	f002 fae8 	bl	8005c3c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800366c:	bf00      	nop
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000

08003678 <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 8003678:	b5b0      	push	{r4, r5, r7, lr}
 800367a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003686:	f843 0c44 	str.w	r0, [r3, #-68]
 800368a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800368e:	f843 1c48 	str.w	r1, [r3, #-72]
	if (amount == 0) {
 8003692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003696:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8094 	beq.w	80037c8 <receive_bit+0x150>
		return;
	}
	for (int count = 0; count < round(amount / 28); count++) {
 80036a0:	2300      	movs	r3, #0
 80036a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80036a6:	f102 0204 	add.w	r2, r2, #4
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e06a      	b.n	8003784 <receive_bit+0x10c>
		FATFS *FatFs;                //Fatfs handle
		FIL fil;                  //File handle
		FRESULT fres;                 //Result after operations

		do {
			FatFs = malloc(sizeof(FATFS));
 80036ae:	f241 0038 	movw	r0, #4152	; 0x1038
 80036b2:	f007 fe9f 	bl	800b3f4 <malloc>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80036bc:	6013      	str	r3, [r2, #0]

			//Mount the SD Card
			fres = f_mount(FatFs, "", 0);    //1=mount now
 80036be:	2200      	movs	r2, #0
 80036c0:	4944      	ldr	r1, [pc, #272]	; (80037d4 <receive_bit+0x15c>)
 80036c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	f007 f888 	bl	800a7dc <f_mount>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036d2:	f102 021f 	add.w	r2, r2, #31
 80036d6:	7013      	strb	r3, [r2, #0]
			if (fres != FR_OK) {
 80036d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80036dc:	f103 031f 	add.w	r3, r3, #31
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d136      	bne.n	8003754 <receive_bit+0xdc>
				break;
			}

			//Open the file
			fres = f_open(&fil, "output.txt",
 80036e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ea:	3b1c      	subs	r3, #28
 80036ec:	2232      	movs	r2, #50	; 0x32
 80036ee:	493a      	ldr	r1, [pc, #232]	; (80037d8 <receive_bit+0x160>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f007 f8b9 	bl	800a868 <f_open>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80036fc:	f102 021f 	add.w	r2, r2, #31
 8003700:	7013      	strb	r3, [r2, #0]
			FA_OPEN_APPEND | FA_WRITE);
			if (fres != FR_OK) {
 8003702:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003706:	f103 031f 	add.w	r3, r3, #31
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d123      	bne.n	8003758 <receive_bit+0xe0>
				break;
			}

			//write the data
			if (bit == 0) {
 8003710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003714:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <receive_bit+0xb4>
				f_puts("0", &fil);
 800371c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003720:	3b1c      	subs	r3, #28
 8003722:	4619      	mov	r1, r3
 8003724:	482d      	ldr	r0, [pc, #180]	; (80037dc <receive_bit+0x164>)
 8003726:	f007 fd1e 	bl	800b166 <f_puts>
 800372a:	e00c      	b.n	8003746 <receive_bit+0xce>
			} else if (bit == 1) {
 800372c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003730:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <receive_bit+0xce>
				f_puts("1", &fil);
 8003738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373c:	3b1c      	subs	r3, #28
 800373e:	4619      	mov	r1, r3
 8003740:	4827      	ldr	r0, [pc, #156]	; (80037e0 <receive_bit+0x168>)
 8003742:	f007 fd10 	bl	800b166 <f_puts>
			}
			//close your file
			f_close(&fil);
 8003746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800374a:	3b1c      	subs	r3, #28
 800374c:	4618      	mov	r0, r3
 800374e:	f007 fc69 	bl	800b024 <f_close>
 8003752:	e002      	b.n	800375a <receive_bit+0xe2>
				break;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <receive_bit+0xe2>
				break;
 8003758:	bf00      	nop

		} while (0);

		//We're done, so de-mount the drive
		f_mount(NULL, "", 0);
 800375a:	2200      	movs	r2, #0
 800375c:	491d      	ldr	r1, [pc, #116]	; (80037d4 <receive_bit+0x15c>)
 800375e:	2000      	movs	r0, #0
 8003760:	f007 f83c 	bl	800a7dc <f_mount>

		free(FatFs);
 8003764:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	f007 fe4b 	bl	800b404 <free>
	for (int count = 0; count < round(amount / 28); count++) {
 800376e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003772:	f103 0304 	add.w	r3, r3, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800377e:	f102 0204 	add.w	r2, r2, #4
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003788:	f103 0304 	add.w	r3, r3, #4
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f7fc fe6f 	bl	8000470 <__aeabi_i2d>
 8003792:	4604      	mov	r4, r0
 8003794:	460d      	mov	r5, r1
 8003796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800379a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <receive_bit+0x16c>)
 80037a0:	fb82 1203 	smull	r1, r2, r2, r3
 80037a4:	441a      	add	r2, r3
 80037a6:	1112      	asrs	r2, r2, #4
 80037a8:	17db      	asrs	r3, r3, #31
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe5f 	bl	8000470 <__aeabi_i2d>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fc ff23 	bl	8000604 <__aeabi_dcmplt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f af74 	bne.w	80036ae <receive_bit+0x36>
	}
	return;
 80037c6:	e000      	b.n	80037ca <receive_bit+0x152>
		return;
 80037c8:	bf00      	nop
}
 80037ca:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}
 80037d4:	0800b6a4 	.word	0x0800b6a4
 80037d8:	0800b6a8 	.word	0x0800b6a8
 80037dc:	0800b6b4 	.word	0x0800b6b4
 80037e0:	0800b6b8 	.word	0x0800b6b8
 80037e4:	92492493 	.word	0x92492493

080037e8 <bit_detect>:

void bit_detect(int freq) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 50 && freq < ONE_FREQ + 50) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f640 1292 	movw	r2, #2450	; 0x992
 80037f6:	4293      	cmp	r3, r2
 80037f8:	dd0a      	ble.n	8003810 <bit_detect+0x28>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8003800:	4293      	cmp	r3, r2
 8003802:	dc05      	bgt.n	8003810 <bit_detect+0x28>
		oneCount++;
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <bit_detect+0x74>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a14      	ldr	r2, [pc, #80]	; (800385c <bit_detect+0x74>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e008      	b.n	8003822 <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <bit_detect+0x74>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	2001      	movs	r0, #1
 8003818:	f7ff ff2e 	bl	8003678 <receive_bit>
		oneCount = 0;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <bit_detect+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 50 && freq < ZERO_FREQ + 50) {
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f640 3266 	movw	r2, #2918	; 0xb66
 8003828:	4293      	cmp	r3, r2
 800382a:	dd0a      	ble.n	8003842 <bit_detect+0x5a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f640 32c9 	movw	r2, #3017	; 0xbc9
 8003832:	4293      	cmp	r3, r2
 8003834:	dc05      	bgt.n	8003842 <bit_detect+0x5a>
		zeroCount++;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <bit_detect+0x78>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	4a08      	ldr	r2, [pc, #32]	; (8003860 <bit_detect+0x78>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e008      	b.n	8003854 <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <bit_detect+0x78>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	2000      	movs	r0, #0
 800384a:	f7ff ff15 	bl	8003678 <receive_bit>
		zeroCount = 0;
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <bit_detect+0x78>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
	}
	return;
 8003854:	bf00      	nop
}
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20002c18 	.word	0x20002c18
 8003860:	20002c14 	.word	0x20002c14

08003864 <process_data>:

void process_data(int start, int end) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	float in;

	for (uint8_t count = start; count < end; count++) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e076      	b.n	8003962 <process_data+0xfe>
// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <process_data+0x110>)
 8003878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800387c:	b29b      	uxth	r3, r3
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003978 <process_data+0x114>
 800388a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800388e:	edc7 7a02 	vstr	s15, [r7, #8]

// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 8003892:	4b3a      	ldr	r3, [pc, #232]	; (800397c <process_data+0x118>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b21b      	sxth	r3, r3
 8003898:	4a39      	ldr	r2, [pc, #228]	; (8003980 <process_data+0x11c>)
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	601a      	str	r2, [r3, #0]
		fftIndex++;
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <process_data+0x118>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <process_data+0x118>)
 80038b2:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <process_data+0x118>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d14d      	bne.n	800395c <process_data+0xf8>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80038c0:	2300      	movs	r3, #0
 80038c2:	4a30      	ldr	r2, [pc, #192]	; (8003984 <process_data+0x120>)
 80038c4:	492e      	ldr	r1, [pc, #184]	; (8003980 <process_data+0x11c>)
 80038c6:	4830      	ldr	r0, [pc, #192]	; (8003988 <process_data+0x124>)
 80038c8:	f7ff fb0c 	bl	8002ee4 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 80038cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d0:	492e      	ldr	r1, [pc, #184]	; (800398c <process_data+0x128>)
 80038d2:	482c      	ldr	r0, [pc, #176]	; (8003984 <process_data+0x120>)
 80038d4:	f7fc febe 	bl	8000654 <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <process_data+0x12c>)
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <process_data+0x130>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 80038e6:	2301      	movs	r3, #1
 80038e8:	81bb      	strh	r3, [r7, #12]
 80038ea:	e02b      	b.n	8003944 <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 80038ec:	89bb      	ldrh	r3, [r7, #12]
 80038ee:	4a27      	ldr	r2, [pc, #156]	; (800398c <process_data+0x128>)
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	ed93 7a00 	vldr	s14, [r3]
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <process_data+0x12c>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	dd1a      	ble.n	800393e <process_data+0xda>
					peakVal = fftMagOut[index];
 8003908:	89bb      	ldrh	r3, [r7, #12]
 800390a:	4a20      	ldr	r2, [pc, #128]	; (800398c <process_data+0x128>)
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <process_data+0x12c>)
 8003914:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8003916:	89bb      	ldrh	r3, [r7, #12]
 8003918:	f649 4240 	movw	r2, #40000	; 0x9c40
 800391c:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 8003920:	ee07 3a90 	vmov	s15, r3
 8003924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003928:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003998 <process_data+0x134>
 800392c:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8003930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003934:	ee17 3a90 	vmov	r3, s15
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <process_data+0x130>)
 800393c:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 800393e:	89bb      	ldrh	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	81bb      	strh	r3, [r7, #12]
 8003944:	89bb      	ldrh	r3, [r7, #12]
 8003946:	2b7f      	cmp	r3, #127	; 0x7f
 8003948:	d9d0      	bls.n	80038ec <process_data+0x88>
				}
			}
			//printf("%d\n\r", (int) peakHz);
			bit_detect(peakHz);
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <process_data+0x130>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff49 	bl	80037e8 <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <process_data+0x118>)
 8003958:	2200      	movs	r2, #0
 800395a:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	3301      	adds	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	dc84      	bgt.n	8003874 <process_data+0x10>
		}
	}
	return;
 800396a:	bf00      	nop
}
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200001ec 	.word	0x200001ec
 8003978:	37fffffc 	.word	0x37fffffc
 800397c:	20002c08 	.word	0x20002c08
 8003980:	20000408 	.word	0x20000408
 8003984:	20001408 	.word	0x20001408
 8003988:	200003f0 	.word	0x200003f0
 800398c:	20002408 	.word	0x20002408
 8003990:	20002c0c 	.word	0x20002c0c
 8003994:	20002c10 	.word	0x20002c10
 8003998:	44800000 	.word	0x44800000

0800399c <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200003ec 	.word	0x200003ec

080039bc <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200003ed 	.word	0x200003ed

080039dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039f8:	e7fe      	b.n	80039f8 <Error_Handler+0x8>
	...

080039fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_MspInit+0x44>)
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_MspInit+0x44>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_MspInit+0x44>)
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_MspInit+0x44>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <HAL_MspInit+0x44>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_MspInit+0x44>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b09e      	sub	sp, #120	; 0x78
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	2254      	movs	r2, #84	; 0x54
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f007 fd81 	bl	800b56c <memset>
  if(hadc->Instance==ADC1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3f      	ldr	r2, [pc, #252]	; (8003b6c <HAL_ADC_MspInit+0x128>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d176      	bne.n	8003b62 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003a7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a7e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003a80:	2301      	movs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003a88:	2310      	movs	r3, #16
 8003a8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003a90:	2302      	movs	r3, #2
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003a94:	2302      	movs	r3, #2
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 f8b0 	bl	8006c08 <HAL_RCCEx_PeriphCLKConfig>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003aae:	f7ff ff9f 	bl	80039f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003ab8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <HAL_ADC_MspInit+0x12c>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ae6:	230b      	movs	r3, #11
 8003ae8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003af2:	4619      	mov	r1, r3
 8003af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af8:	f002 f8a0 	bl	8005c3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_ADC_MspInit+0x134>)
 8003b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b36:	480f      	ldr	r0, [pc, #60]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b38:	f001 fe88 	bl	800584c <HAL_DMA_Init>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8003b42:	f7ff ff55 	bl	80039f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b4c:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_ADC_MspInit+0x130>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2100      	movs	r1, #0
 8003b56:	2012      	movs	r0, #18
 8003b58:	f001 fe41 	bl	80057de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003b5c:	2012      	movs	r0, #18
 8003b5e:	f001 fe5a 	bl	8005816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b62:	bf00      	nop
 8003b64:	3778      	adds	r7, #120	; 0x78
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	50040000 	.word	0x50040000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	200000f4 	.word	0x200000f4
 8003b78:	40020008 	.word	0x40020008

08003b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_SPI_MspInit+0x7c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d127      	bne.n	8003bee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_SPI_MspInit+0x80>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003bce:	2338      	movs	r3, #56	; 0x38
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bde:	2306      	movs	r3, #6
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	4619      	mov	r1, r3
 8003be8:	4805      	ldr	r0, [pc, #20]	; (8003c00 <HAL_SPI_MspInit+0x84>)
 8003bea:	f002 f827 	bl	8005c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40003c00 	.word	0x40003c00
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	48000400 	.word	0x48000400

08003c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d113      	bne.n	8003c3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_TIM_Base_MspInit+0x44>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_TIM_Base_MspInit+0x44>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6593      	str	r3, [r2, #88]	; 0x58
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_TIM_Base_MspInit+0x44>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	201c      	movs	r0, #28
 8003c34:	f001 fdd3 	bl	80057de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c38:	201c      	movs	r0, #28
 8003c3a:	f001 fdec 	bl	8005816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000

08003c4c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003c50:	e7fe      	b.n	8003c50 <NMI_Handler+0x4>

08003c52 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003c56:	e7fe      	b.n	8003c56 <HardFault_Handler+0x4>

08003c58 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003c5c:	e7fe      	b.n	8003c5c <MemManage_Handler+0x4>

08003c5e <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003c62:	e7fe      	b.n	8003c62 <BusFault_Handler+0x4>

08003c64 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003c68:	e7fe      	b.n	8003c68 <UsageFault_Handler+0x4>

08003c6a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0)
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <SysTick_Handler+0x34>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <SysTick_Handler+0x18>
		Timer1--;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <SysTick_Handler+0x34>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <SysTick_Handler+0x34>)
 8003caa:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0)
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <SysTick_Handler+0x38>)
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <SysTick_Handler+0x2c>
		Timer2--;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <SysTick_Handler+0x38>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <SysTick_Handler+0x38>)
 8003cbe:	801a      	strh	r2, [r3, #0]
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003cc0:	f000 f8ea 	bl	8003e98 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000008c 	.word	0x2000008c
 8003ccc:	2000008e 	.word	0x2000008e

08003cd0 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8003cd6:	f001 fed1 	bl	8005a7c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200000f4 	.word	0x200000f4

08003ce4 <ADC1_IRQHandler>:

/**
 * @brief This function handles ADC1 global interrupt.
 */
void ADC1_IRQHandler(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_IRQn 0 */

	/* USER CODE END ADC1_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <ADC1_IRQHandler+0x10>)
 8003cea:	f000 fcbb 	bl	8004664 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_IRQn 1 */

	/* USER CODE END ADC1_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000090 	.word	0x20000090

08003cf8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <TIM2_IRQHandler+0x10>)
 8003cfe:	f003 fc1a 	bl	8007536 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200001a0 	.word	0x200001a0

08003d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <_sbrk+0x5c>)
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <_sbrk+0x60>)
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <_sbrk+0x64>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <_sbrk+0x64>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <_sbrk+0x68>)
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <_sbrk+0x64>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d207      	bcs.n	8003d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d3c:	f007 fc2e 	bl	800b59c <__errno>
 8003d40:	4603      	mov	r3, r0
 8003d42:	220c      	movs	r2, #12
 8003d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	e009      	b.n	8003d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <_sbrk+0x64>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	4a05      	ldr	r2, [pc, #20]	; (8003d70 <_sbrk+0x64>)
 8003d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20010000 	.word	0x20010000
 8003d6c:	00000400 	.word	0x00000400
 8003d70:	20002c1c 	.word	0x20002c1c
 8003d74:	20002fa8 	.word	0x20002fa8

08003d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <SystemInit+0x20>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <SystemInit+0x20>)
 8003d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003da0:	f7ff ffea 	bl	8003d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003da6:	490d      	ldr	r1, [pc, #52]	; (8003ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <LoopForever+0xe>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dbc:	4c0a      	ldr	r4, [pc, #40]	; (8003de8 <LoopForever+0x16>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dca:	f007 fbed 	bl	800b5a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dce:	f7ff fa43 	bl	8003258 <main>

08003dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003dd2:	e7fe      	b.n	8003dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003dd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ddc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003de0:	0801f064 	.word	0x0801f064
  ldr r2, =_sbss
 8003de4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003de8:	20002fa8 	.word	0x20002fa8

08003dec <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dec:	e7fe      	b.n	8003dec <CAN1_RX0_IRQHandler>

08003dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003df8:	2003      	movs	r0, #3
 8003dfa:	f001 fce5 	bl	80057c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f000 f80e 	bl	8003e20 <HAL_InitTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	71fb      	strb	r3, [r7, #7]
 8003e0e:	e001      	b.n	8003e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e10:	f7ff fdf4 	bl	80039fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e14:	79fb      	ldrb	r3, [r7, #7]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_InitTick+0x6c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d023      	beq.n	8003e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_InitTick+0x70>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_InitTick+0x6c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fcf1 	bl	8005832 <HAL_SYSTICK_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d809      	bhi.n	8003e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	f001 fcbb 	bl	80057de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_InitTick+0x74>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e007      	b.n	8003e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e004      	b.n	8003e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e001      	b.n	8003e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000008 	.word	0x20000008
 8003e90:	20000000 	.word	0x20000000
 8003e94:	20000004 	.word	0x20000004

08003e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_IncTick+0x20>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x24>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_IncTick+0x24>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	20002c20 	.word	0x20002c20

08003ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_GetTick+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20002c20 	.word	0x20002c20

08003ed8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3360      	adds	r3, #96	; 0x60
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <LL_ADC_SetOffset+0x44>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	03fff000 	.word	0x03fff000

08003f88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3360      	adds	r3, #96	; 0x60
 8003f96:	461a      	mov	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3360      	adds	r3, #96	; 0x60
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3330      	adds	r3, #48	; 0x30
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	211f      	movs	r1, #31
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	f003 011f 	and.w	r1, r3, #31
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	431a      	orrs	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3314      	adds	r3, #20
 800409e:	461a      	mov	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0e5b      	lsrs	r3, r3, #25
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	4413      	add	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	0d1b      	lsrs	r3, r3, #20
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2107      	movs	r1, #7
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	401a      	ands	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	0d1b      	lsrs	r3, r3, #20
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	431a      	orrs	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0318 	and.w	r3, r3, #24
 8004106:	4908      	ldr	r1, [pc, #32]	; (8004128 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004108:	40d9      	lsrs	r1, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	400b      	ands	r3, r1
 800410e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004112:	431a      	orrs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	0007ffff 	.word	0x0007ffff

0800412c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800413c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6093      	str	r3, [r2, #8]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004164:	d101      	bne.n	800416a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800418c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b4:	d101      	bne.n	80041ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004204:	f043 0202 	orr.w	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <LL_ADC_IsEnabled+0x18>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <LL_ADC_IsEnabled+0x1a>
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d101      	bne.n	8004256 <LL_ADC_IsDisableOngoing+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_ADC_IsDisableOngoing+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d101      	bne.n	80042a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d101      	bne.n	80042ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e126      	b.n	8004540 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fb9f 	bl	8003a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff19 	bl	8004150 <LL_ADC_IsDeepPowerDownEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff feff 	bl	800412c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff34 	bl	80041a0 <LL_ADC_IsInternalRegulatorEnabled>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d115      	bne.n	800436a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff18 	bl	8004178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004348:	4b7f      	ldr	r3, [pc, #508]	; (8004548 <HAL_ADC_Init+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	4a7f      	ldr	r2, [pc, #508]	; (800454c <HAL_ADC_Init+0x274>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800435c:	e002      	b.n	8004364 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b01      	subs	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f9      	bne.n	800435e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff16 	bl	80041a0 <LL_ADC_IsInternalRegulatorEnabled>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f043 0210 	orr.w	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff ff76 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 80043a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80bf 	bne.w	800452e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 80bb 	bne.w	800452e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043c0:	f043 0202 	orr.w	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff23 	bl	8004218 <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d8:	485d      	ldr	r0, [pc, #372]	; (8004550 <HAL_ADC_Init+0x278>)
 80043da:	f7ff ff1d 	bl	8004218 <LL_ADC_IsEnabled>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4619      	mov	r1, r3
 80043ea:	485a      	ldr	r0, [pc, #360]	; (8004554 <HAL_ADC_Init+0x27c>)
 80043ec:	f7ff fd74 	bl	8003ed8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7e5b      	ldrb	r3, [r3, #25]
 80043f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004400:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004406:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d106      	bne.n	800442c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	3b01      	subs	r3, #1
 8004424:	045b      	lsls	r3, r3, #17
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b42      	ldr	r3, [pc, #264]	; (8004558 <HAL_ADC_Init+0x280>)
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	430b      	orrs	r3, r1
 800445a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff26 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8004466:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d13d      	bne.n	80044ea <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d13a      	bne.n	80044ea <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004478:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004480:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004490:	f023 0302 	bic.w	r3, r3, #2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	430b      	orrs	r3, r1
 800449c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d118      	bne.n	80044da <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044b2:	f023 0304 	bic.w	r3, r3, #4
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ca:	430a      	orrs	r2, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	611a      	str	r2, [r3, #16]
 80044d8:	e007      	b.n	80044ea <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10c      	bne.n	800450c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f023 010f 	bic.w	r1, r3, #15
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
 800450a:	e007      	b.n	800451c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 020f 	bic.w	r2, r2, #15
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f023 0303 	bic.w	r3, r3, #3
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
 800452c:	e007      	b.n	800453e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800453e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000000 	.word	0x20000000
 800454c:	053e2d63 	.word	0x053e2d63
 8004550:	50040000 	.word	0x50040000
 8004554:	50040300 	.word	0x50040300
 8004558:	fff0c007 	.word	0xfff0c007

0800455c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fe8d 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d167      	bne.n	8004648 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_ADC_Start_DMA+0x2a>
 8004582:	2302      	movs	r3, #2
 8004584:	e063      	b.n	800464e <HAL_ADC_Start_DMA+0xf2>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fe12 	bl	80051b8 <ADC_Enable>
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d14f      	bne.n	800463e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f023 0206 	bic.w	r2, r3, #6
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ca:	e002      	b.n	80045d2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	4a20      	ldr	r2, [pc, #128]	; (8004658 <HAL_ADC_Start_DMA+0xfc>)
 80045d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_ADC_Start_DMA+0x100>)
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_ADC_Start_DMA+0x104>)
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	221c      	movs	r2, #28
 80045f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0210 	orr.w	r2, r2, #16
 8004608:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3340      	adds	r3, #64	; 0x40
 8004624:	4619      	mov	r1, r3
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f001 f9c7 	bl	80059bc <HAL_DMA_Start_IT>
 800462e:	4603      	mov	r3, r0
 8004630:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fe14 	bl	8004264 <LL_ADC_REG_StartConversion>
 800463c:	e006      	b.n	800464c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004646:	e001      	b.n	800464c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004648:	2302      	movs	r3, #2
 800464a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	08005383 	.word	0x08005383
 800465c:	0800545b 	.word	0x0800545b
 8004660:	08005477 	.word	0x08005477

08004664 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <HAL_ADC_IRQHandler+0x56>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d012      	beq.n	80046ba <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 ffb1 	bl	8005614 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2202      	movs	r2, #2
 80046b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_ADC_IRQHandler+0x6a>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05e      	beq.n	8004796 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d059      	beq.n	8004796 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fc73 	bl	8003fea <LL_ADC_REG_IsTriggerSourceSWStart>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03e      	beq.n	8004788 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d135      	bne.n	8004788 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b08      	cmp	r3, #8
 8004728:	d12e      	bne.n	8004788 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fdac 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11a      	bne.n	8004770 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 020c 	bic.w	r2, r2, #12
 8004748:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d112      	bne.n	8004788 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
 800476e:	e00b      	b.n	8004788 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f043 0210 	orr.w	r2, r3, #16
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004780:	f043 0201 	orr.w	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff f917 	bl	80039bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	220c      	movs	r2, #12
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <HAL_ADC_IRQHandler+0x146>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d072      	beq.n	800489a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06d      	beq.n	800489a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d105      	bne.n	80047d6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc44 	bl	8004068 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80047e0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fbff 	bl	8003fea <LL_ADC_REG_IsTriggerSourceSWStart>
 80047ec:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d047      	beq.n	800488c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_ADC_IRQHandler+0x1b2>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d03f      	beq.n	800488c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d13a      	bne.n	800488c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d133      	bne.n	800488c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d12e      	bne.n	800488c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fd3d 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11a      	bne.n	8004874 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800484c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d112      	bne.n	800488c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
 8004872:	e00b      	b.n	800488c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f043 0210 	orr.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fe99 	bl	80055c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2260      	movs	r2, #96	; 0x60
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d011      	beq.n	80048c8 <HAL_ADC_IRQHandler+0x264>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f886 	bl	80049cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <HAL_ADC_IRQHandler+0x294>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fe7f 	bl	80055ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <HAL_ADC_IRQHandler+0x2c4>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fe71 	bl	8005600 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02a      	beq.n	8004988 <HAL_ADC_IRQHandler+0x324>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d025      	beq.n	8004988 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8004944:	2301      	movs	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e008      	b.n	800495c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004958:	2301      	movs	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10e      	bne.n	8004980 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f830 	bl	80049e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2210      	movs	r2, #16
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	2b00      	cmp	r3, #0
 8004990:	d018      	beq.n	80049c4 <HAL_ADC_IRQHandler+0x360>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f043 0208 	orr.w	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049bc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fe0a 	bl	80055d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80049c4:	bf00      	nop
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b0b6      	sub	sp, #216	; 0xd8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x22>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e3bb      	b.n	800518e <HAL_ADC_ConfigChannel+0x79a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fc32 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 83a0 	bne.w	8005170 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d824      	bhi.n	8004a8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	3b02      	subs	r3, #2
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d81b      	bhi.n	8004a82 <HAL_ADC_ConfigChannel+0x8e>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <HAL_ADC_ConfigChannel+0x5c>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a61 	.word	0x08004a61
 8004a54:	08004a69 	.word	0x08004a69
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a79 	.word	0x08004a79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004a60:	230c      	movs	r3, #12
 8004a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a66:	e010      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004a68:	2312      	movs	r3, #18
 8004a6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a6e:	e00c      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004a70:	2318      	movs	r3, #24
 8004a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a76:	e008      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a80:	e003      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004a82:	2306      	movs	r3, #6
 8004a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a98:	f7ff faba 	bl	8004010 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fbf3 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 8004aa6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fbff 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8004ab4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 81a4 	bne.w	8004e0a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 819f 	bne.w	8004e0a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f7ff fad8 	bl	800408e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d00a      	beq.n	8004b16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6919      	ldr	r1, [r3, #16]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b10:	f7ff fa16 	bl	8003f40 <LL_ADC_SetOffset>
 8004b14:	e179      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fa33 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x14e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fa28 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	0e9b      	lsrs	r3, r3, #26
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	e01e      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x18c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fa1d 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e004      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x1a4>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	e018      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1d6>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ba4:	fa93 f3a3 	rbit	r3, r3
 8004ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e004      	b.n	8004bca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d106      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f9ec 	bl	8003fb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff f9d0 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x214>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff f9c5 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	0e9b      	lsrs	r3, r3, #26
 8004c02:	f003 021f 	and.w	r2, r3, #31
 8004c06:	e01e      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x252>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f9ba 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004c36:	2320      	movs	r3, #32
 8004c38:	e004      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c3e:	fab3 f383 	clz	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x26a>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	0e9b      	lsrs	r3, r3, #26
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	e018      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x29c>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e004      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d106      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff f989 	bl	8003fb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f96d 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x2da>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff f962 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	0e9b      	lsrs	r3, r3, #26
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	e01e      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x318>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff f957 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e004      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x330>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0e9b      	lsrs	r3, r3, #26
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	e014      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x35a>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e004      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d106      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f92a 	bl	8003fb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2103      	movs	r1, #3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff f90e 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x398>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f903 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004d82:	4603      	mov	r3, r0
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	e017      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x3c8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2103      	movs	r1, #3
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f8f8 	bl	8003f88 <LL_ADC_GetOffsetChannel>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004dae:	2320      	movs	r3, #32
 8004db0:	e003      	b.n	8004dba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x3e0>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	e011      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x404>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004dec:	2320      	movs	r3, #32
 8004dee:	e003      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d106      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2103      	movs	r1, #3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff f8d5 	bl	8003fb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fa02 	bl	8004218 <LL_ADC_IsEnabled>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 8140 	bne.w	800509c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f7ff f95b 	bl	80040e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4a8f      	ldr	r2, [pc, #572]	; (8005070 <HAL_ADC_ConfigChannel+0x67c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	f040 8131 	bne.w	800509c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x46e>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	0e9b      	lsrs	r3, r3, #26
 8004e50:	3301      	adds	r3, #1
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2b09      	cmp	r3, #9
 8004e58:	bf94      	ite	ls
 8004e5a:	2301      	movls	r3, #1
 8004e5c:	2300      	movhi	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e019      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x4a2>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e72:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	e003      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	bf94      	ite	ls
 8004e90:	2301      	movls	r3, #1
 8004e92:	2300      	movhi	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d079      	beq.n	8004f8e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x4c2>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	3301      	adds	r3, #1
 8004eae:	069b      	lsls	r3, r3, #26
 8004eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb4:	e015      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x4ee>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004ece:	2320      	movs	r3, #32
 8004ed0:	e003      	b.n	8004eda <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	3301      	adds	r3, #1
 8004edc:	069b      	lsls	r3, r3, #26
 8004ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x50e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	0e9b      	lsrs	r3, r3, #26
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2101      	movs	r1, #1
 8004efc:	fa01 f303 	lsl.w	r3, r1, r3
 8004f00:	e017      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x53e>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e003      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x564>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0e9b      	lsrs	r3, r3, #26
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f003 021f 	and.w	r2, r3, #31
 8004f4e:	4613      	mov	r3, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	4413      	add	r3, r2
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	e018      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x596>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f003 021f 	and.w	r2, r3, #31
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	e081      	b.n	8005092 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x5b6>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	0e9b      	lsrs	r3, r3, #26
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	069b      	lsls	r3, r3, #26
 8004fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fa8:	e015      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x5e2>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	e003      	b.n	8004fce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	fab3 f383 	clz	r3, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	069b      	lsls	r3, r3, #26
 8004fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x602>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0e9b      	lsrs	r3, r3, #26
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	e017      	b.n	8005026 <HAL_ADC_ConfigChannel+0x632>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	61bb      	str	r3, [r7, #24]
  return result;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800500e:	2320      	movs	r3, #32
 8005010:	e003      	b.n	800501a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	fab3 f383 	clz	r3, r3
 8005018:	b2db      	uxtb	r3, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	ea42 0103 	orr.w	r1, r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x65e>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0e9b      	lsrs	r3, r3, #26
 800503c:	3301      	adds	r3, #1
 800503e:	f003 021f 	and.w	r2, r3, #31
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	3b1e      	subs	r3, #30
 800504a:	051b      	lsls	r3, r3, #20
 800504c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005050:	e01e      	b.n	8005090 <HAL_ADC_ConfigChannel+0x69c>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	60fb      	str	r3, [r7, #12]
  return result;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e006      	b.n	800507c <HAL_ADC_ConfigChannel+0x688>
 800506e:	bf00      	nop
 8005070:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	3301      	adds	r3, #1
 800507e:	f003 021f 	and.w	r2, r3, #31
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	3b1e      	subs	r3, #30
 800508a:	051b      	lsls	r3, r3, #20
 800508c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005090:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005096:	4619      	mov	r1, r3
 8005098:	f7fe fff9 	bl	800408e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_ADC_ConfigChannel+0x7a4>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d06c      	beq.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050a8:	483c      	ldr	r0, [pc, #240]	; (800519c <HAL_ADC_ConfigChannel+0x7a8>)
 80050aa:	f7fe ff3b 	bl	8003f24 <LL_ADC_GetCommonPathInternalCh>
 80050ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a3a      	ldr	r2, [pc, #232]	; (80051a0 <HAL_ADC_ConfigChannel+0x7ac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d127      	bne.n	800510c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d121      	bne.n	800510c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <HAL_ADC_ConfigChannel+0x7b0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d157      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050da:	4619      	mov	r1, r3
 80050dc:	482f      	ldr	r0, [pc, #188]	; (800519c <HAL_ADC_ConfigChannel+0x7a8>)
 80050de:	f7fe ff0e 	bl	8003efe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_ADC_ConfigChannel+0x7b8>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80050fc:	e002      	b.n	8005104 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3b01      	subs	r3, #1
 8005102:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f9      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510a:	e03a      	b.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d113      	bne.n	800513e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800511a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d12a      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800512c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005134:	4619      	mov	r1, r3
 8005136:	4819      	ldr	r0, [pc, #100]	; (800519c <HAL_ADC_ConfigChannel+0x7a8>)
 8005138:	f7fe fee1 	bl	8003efe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800513c:	e021      	b.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d11c      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800514c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d116      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d111      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800515e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005166:	4619      	mov	r1, r3
 8005168:	480c      	ldr	r0, [pc, #48]	; (800519c <HAL_ADC_ConfigChannel+0x7a8>)
 800516a:	f7fe fec8 	bl	8003efe <LL_ADC_SetCommonPathInternalCh>
 800516e:	e008      	b.n	8005182 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800518a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800518e:	4618      	mov	r0, r3
 8005190:	37d8      	adds	r7, #216	; 0xd8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	80080000 	.word	0x80080000
 800519c:	50040300 	.word	0x50040300
 80051a0:	c7520000 	.word	0xc7520000
 80051a4:	50040000 	.word	0x50040000
 80051a8:	20000000 	.word	0x20000000
 80051ac:	053e2d63 	.word	0x053e2d63
 80051b0:	cb840000 	.word	0xcb840000
 80051b4:	80000001 	.word	0x80000001

080051b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f825 	bl	8004218 <LL_ADC_IsEnabled>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d169      	bne.n	80052a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <ADC_Enable+0xfc>)
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00d      	beq.n	80051fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f043 0210 	orr.w	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e055      	b.n	80052aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe ffe0 	bl	80041c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005208:	482b      	ldr	r0, [pc, #172]	; (80052b8 <ADC_Enable+0x100>)
 800520a:	f7fe fe8b 	bl	8003f24 <LL_ADC_GetCommonPathInternalCh>
 800520e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005218:	4b28      	ldr	r3, [pc, #160]	; (80052bc <ADC_Enable+0x104>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	4a28      	ldr	r2, [pc, #160]	; (80052c0 <ADC_Enable+0x108>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005232:	e002      	b.n	800523a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3b01      	subs	r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f9      	bne.n	8005234 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005240:	f7fe fe3e 	bl	8003ec0 <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005246:	e028      	b.n	800529a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe ffe3 	bl	8004218 <LL_ADC_IsEnabled>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe ffb3 	bl	80041c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005262:	f7fe fe2d 	bl	8003ec0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d914      	bls.n	800529a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d00d      	beq.n	800529a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0210 	orr.w	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d1cf      	bne.n	8005248 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	8000003f 	.word	0x8000003f
 80052b8:	50040300 	.word	0x50040300
 80052bc:	20000000 	.word	0x20000000
 80052c0:	053e2d63 	.word	0x053e2d63

080052c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe ffb4 	bl	800423e <LL_ADC_IsDisableOngoing>
 80052d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe ff9b 	bl	8004218 <LL_ADC_IsEnabled>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d047      	beq.n	8005378 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d144      	bne.n	8005378 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030d 	and.w	r3, r3, #13
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10c      	bne.n	8005316 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe ff75 	bl	80041f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2203      	movs	r2, #3
 800530c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800530e:	f7fe fdd7 	bl	8003ec0 <HAL_GetTick>
 8005312:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005314:	e029      	b.n	800536a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f043 0210 	orr.w	r2, r3, #16
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e023      	b.n	800537a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005332:	f7fe fdc5 	bl	8003ec0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d914      	bls.n	800536a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f043 0210 	orr.w	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	f043 0201 	orr.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e007      	b.n	800537a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1dc      	bne.n	8005332 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005398:	2b00      	cmp	r3, #0
 800539a:	d14b      	bne.n	8005434 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d021      	beq.n	80053fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fe15 	bl	8003fea <LL_ADC_REG_IsTriggerSourceSWStart>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d032      	beq.n	800542c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d12b      	bne.n	800542c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11f      	bne.n	800542c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
 80053f8:	e018      	b.n	800542c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d111      	bne.n	800542c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	f043 0201 	orr.w	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7fe fac5 	bl	80039bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005432:	e00e      	b.n	8005452 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff facd 	bl	80049e0 <HAL_ADC_ErrorCallback>
}
 8005446:	e004      	b.n	8005452 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7fe fa97 	bl	800399c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	f043 0204 	orr.w	r2, r3, #4
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff fa9f 	bl	80049e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <LL_ADC_StartCalibration>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80054bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_IsCalibrationOnGoing>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f0:	d101      	bne.n	80054f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_ADCEx_Calibration_Start+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e04d      	b.n	80055bc <HAL_ADCEx_Calibration_Start+0xb8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fecb 	bl	80052c4 <ADC_Disable>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d136      	bne.n	80055a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	f043 0202 	orr.w	r2, r3, #2
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ffa9 	bl	80054aa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005558:	e014      	b.n	8005584 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3301      	adds	r3, #1
 800555e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005566:	d30d      	bcc.n	8005584 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f023 0312 	bic.w	r3, r3, #18
 8005570:	f043 0210 	orr.w	r2, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e01b      	b.n	80055bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ffa7 	bl	80054dc <LL_ADC_IsCalibrationOnGoing>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e2      	bne.n	800555a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f023 0303 	bic.w	r3, r3, #3
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
 80055a4:	e005      	b.n	80055b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f043 0210 	orr.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <__NVIC_EnableIRQ+0x38>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	6039      	str	r1, [r7, #0]
 80056d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db0a      	blt.n	80056f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <__NVIC_SetPriority+0x4c>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	0112      	lsls	r2, r2, #4
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	440b      	add	r3, r1
 80056ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f0:	e00a      	b.n	8005708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4908      	ldr	r1, [pc, #32]	; (8005718 <__NVIC_SetPriority+0x50>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3b04      	subs	r3, #4
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	440b      	add	r3, r1
 8005706:	761a      	strb	r2, [r3, #24]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000e100 	.word	0xe000e100
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f1c3 0307 	rsb	r3, r3, #7
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf28      	it	cs
 800573a:	2304      	movcs	r3, #4
 800573c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3304      	adds	r3, #4
 8005742:	2b06      	cmp	r3, #6
 8005744:	d902      	bls.n	800574c <NVIC_EncodePriority+0x30>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3b03      	subs	r3, #3
 800574a:	e000      	b.n	800574e <NVIC_EncodePriority+0x32>
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	401a      	ands	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005764:	f04f 31ff 	mov.w	r1, #4294967295
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43d9      	mvns	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	4313      	orrs	r3, r2
         );
}
 8005776:	4618      	mov	r0, r3
 8005778:	3724      	adds	r7, #36	; 0x24
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005794:	d301      	bcc.n	800579a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005796:	2301      	movs	r3, #1
 8005798:	e00f      	b.n	80057ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <SysTick_Config+0x40>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057a2:	210f      	movs	r1, #15
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	f7ff ff8e 	bl	80056c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <SysTick_Config+0x40>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <SysTick_Config+0x40>)
 80057b4:	2207      	movs	r2, #7
 80057b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000e010 	.word	0xe000e010

080057c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff29 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	4603      	mov	r3, r0
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057f0:	f7ff ff3e 	bl	8005670 <__NVIC_GetPriorityGrouping>
 80057f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f7ff ff8e 	bl	800571c <NVIC_EncodePriority>
 8005800:	4602      	mov	r2, r0
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff ff5d 	bl	80056c8 <__NVIC_SetPriority>
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	4603      	mov	r3, r0
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff31 	bl	800568c <__NVIC_EnableIRQ>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ffa2 	bl	8005784 <SysTick_Config>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e098      	b.n	8005990 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	4b4d      	ldr	r3, [pc, #308]	; (800599c <HAL_DMA_Init+0x150>)
 8005866:	429a      	cmp	r2, r3
 8005868:	d80f      	bhi.n	800588a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <HAL_DMA_Init+0x154>)
 8005872:	4413      	add	r3, r2
 8005874:	4a4b      	ldr	r2, [pc, #300]	; (80059a4 <HAL_DMA_Init+0x158>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	091b      	lsrs	r3, r3, #4
 800587c:	009a      	lsls	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a48      	ldr	r2, [pc, #288]	; (80059a8 <HAL_DMA_Init+0x15c>)
 8005886:	641a      	str	r2, [r3, #64]	; 0x40
 8005888:	e00e      	b.n	80058a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4b46      	ldr	r3, [pc, #280]	; (80059ac <HAL_DMA_Init+0x160>)
 8005892:	4413      	add	r3, r2
 8005894:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <HAL_DMA_Init+0x158>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	009a      	lsls	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a42      	ldr	r2, [pc, #264]	; (80059b0 <HAL_DMA_Init+0x164>)
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005902:	d039      	beq.n	8005978 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <HAL_DMA_Init+0x15c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d11a      	bne.n	8005944 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_DMA_Init+0x168>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	f003 031c 	and.w	r3, r3, #28
 800591a:	210f      	movs	r1, #15
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	4924      	ldr	r1, [pc, #144]	; (80059b4 <HAL_DMA_Init+0x168>)
 8005924:	4013      	ands	r3, r2
 8005926:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005928:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <HAL_DMA_Init+0x168>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	f003 031c 	and.w	r3, r3, #28
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	491d      	ldr	r1, [pc, #116]	; (80059b4 <HAL_DMA_Init+0x168>)
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
 8005942:	e019      	b.n	8005978 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <HAL_DMA_Init+0x16c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	f003 031c 	and.w	r3, r3, #28
 8005950:	210f      	movs	r1, #15
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	4917      	ldr	r1, [pc, #92]	; (80059b8 <HAL_DMA_Init+0x16c>)
 800595a:	4013      	ands	r3, r2
 800595c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_DMA_Init+0x16c>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f003 031c 	and.w	r3, r3, #28
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	4911      	ldr	r1, [pc, #68]	; (80059b8 <HAL_DMA_Init+0x16c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40020407 	.word	0x40020407
 80059a0:	bffdfff8 	.word	0xbffdfff8
 80059a4:	cccccccd 	.word	0xcccccccd
 80059a8:	40020000 	.word	0x40020000
 80059ac:	bffdfbf8 	.word	0xbffdfbf8
 80059b0:	40020400 	.word	0x40020400
 80059b4:	400200a8 	.word	0x400200a8
 80059b8:	400204a8 	.word	0x400204a8

080059bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_DMA_Start_IT+0x20>
 80059d8:	2302      	movs	r3, #2
 80059da:	e04b      	b.n	8005a74 <HAL_DMA_Start_IT+0xb8>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d13a      	bne.n	8005a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f8e0 	bl	8005bda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 020e 	orr.w	r2, r2, #14
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e00f      	b.n	8005a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0204 	bic.w	r2, r2, #4
 8005a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 020a 	orr.w	r2, r2, #10
 8005a52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e005      	b.n	8005a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	f003 031c 	and.w	r3, r3, #28
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d026      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x7a>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d021      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0204 	bic.w	r2, r2, #4
 8005ace:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	f003 021c 	and.w	r2, r3, #28
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	2104      	movs	r1, #4
 8005ade:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d071      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005af4:	e06c      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f003 031c 	and.w	r3, r3, #28
 8005afe:	2202      	movs	r2, #2
 8005b00:	409a      	lsls	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d02e      	beq.n	8005b68 <HAL_DMA_IRQHandler+0xec>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d029      	beq.n	8005b68 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 020a 	bic.w	r2, r2, #10
 8005b30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	f003 021c 	and.w	r2, r3, #28
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	2102      	movs	r1, #2
 8005b48:	fa01 f202 	lsl.w	r2, r1, r2
 8005b4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d038      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b66:	e033      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6c:	f003 031c 	and.w	r3, r3, #28
 8005b70:	2208      	movs	r2, #8
 8005b72:	409a      	lsls	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02a      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x156>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d025      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 020e 	bic.w	r2, r2, #14
 8005b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f003 021c 	and.w	r2, r3, #28
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
}
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	f003 021c 	and.w	r2, r3, #28
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d108      	bne.n	8005c1e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c1c:	e007      	b.n	8005c2e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	60da      	str	r2, [r3, #12]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c4a:	e148      	b.n	8005ede <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 813a 	beq.w	8005ed8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d005      	beq.n	8005c7c <HAL_GPIO_Init+0x40>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d130      	bne.n	8005cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4013      	ands	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	f003 0201 	and.w	r2, r3, #1
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d017      	beq.n	8005d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d123      	bne.n	8005d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	08da      	lsrs	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3208      	adds	r2, #8
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4013      	ands	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	08da      	lsrs	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3208      	adds	r2, #8
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2203      	movs	r2, #3
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8094 	beq.w	8005ed8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db0:	4b52      	ldr	r3, [pc, #328]	; (8005efc <HAL_GPIO_Init+0x2c0>)
 8005db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db4:	4a51      	ldr	r2, [pc, #324]	; (8005efc <HAL_GPIO_Init+0x2c0>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6613      	str	r3, [r2, #96]	; 0x60
 8005dbc:	4b4f      	ldr	r3, [pc, #316]	; (8005efc <HAL_GPIO_Init+0x2c0>)
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005dc8:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_GPIO_Init+0x2c4>)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	3302      	adds	r3, #2
 8005dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	220f      	movs	r2, #15
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005df2:	d00d      	beq.n	8005e10 <HAL_GPIO_Init+0x1d4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a43      	ldr	r2, [pc, #268]	; (8005f04 <HAL_GPIO_Init+0x2c8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <HAL_GPIO_Init+0x1d0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a42      	ldr	r2, [pc, #264]	; (8005f08 <HAL_GPIO_Init+0x2cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_GPIO_Init+0x1cc>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e004      	b.n	8005e12 <HAL_GPIO_Init+0x1d6>
 8005e08:	2307      	movs	r3, #7
 8005e0a:	e002      	b.n	8005e12 <HAL_GPIO_Init+0x1d6>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <HAL_GPIO_Init+0x1d6>
 8005e10:	2300      	movs	r3, #0
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	f002 0203 	and.w	r2, r2, #3
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e22:	4937      	ldr	r1, [pc, #220]	; (8005f00 <HAL_GPIO_Init+0x2c4>)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	3302      	adds	r3, #2
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e30:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e54:	4a2d      	ldr	r2, [pc, #180]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e5a:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4013      	ands	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e7e:	4a23      	ldr	r2, [pc, #140]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005eae:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_GPIO_Init+0x2d0>)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3301      	adds	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f aeaf 	bne.w	8005c4c <HAL_GPIO_Init+0x10>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40010000 	.word	0x40010000
 8005f04:	48000400 	.word	0x48000400
 8005f08:	48000800 	.word	0x48000800
 8005f0c:	40010400 	.word	0x40010400

08005f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f20:	787b      	ldrb	r3, [r7, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f2c:	e002      	b.n	8005f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f2e:	887a      	ldrh	r2, [r7, #2]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40007000 	.word	0x40007000

08005f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6a:	d130      	bne.n	8005fce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f6c:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f78:	d038      	beq.n	8005fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2232      	movs	r2, #50	; 0x32
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	0c9b      	lsrs	r3, r3, #18
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa0:	e002      	b.n	8005fa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb4:	d102      	bne.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f2      	bne.n	8005fa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d110      	bne.n	8005fec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e00f      	b.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fda:	d007      	beq.n	8005fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fe4:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40007000 	.word	0x40007000
 8006000:	20000000 	.word	0x20000000
 8006004:	431bde83 	.word	0x431bde83

08006008 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f000 bc02 	b.w	8006820 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800601c:	4b96      	ldr	r3, [pc, #600]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006026:	4b94      	ldr	r3, [pc, #592]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80e4 	beq.w	8006206 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_RCC_OscConfig+0x4c>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b0c      	cmp	r3, #12
 8006048:	f040 808b 	bne.w	8006162 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b01      	cmp	r3, #1
 8006050:	f040 8087 	bne.w	8006162 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006054:	4b88      	ldr	r3, [pc, #544]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_OscConfig+0x64>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e3d9      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	4b81      	ldr	r3, [pc, #516]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_RCC_OscConfig+0x7e>
 800607c:	4b7e      	ldr	r3, [pc, #504]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006084:	e005      	b.n	8006092 <HAL_RCC_OscConfig+0x8a>
 8006086:	4b7c      	ldr	r3, [pc, #496]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006092:	4293      	cmp	r3, r2
 8006094:	d223      	bcs.n	80060de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fd54 	bl	8006b48 <RCC_SetFlashLatencyFromMSIRange>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e3ba      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060aa:	4b73      	ldr	r3, [pc, #460]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a72      	ldr	r2, [pc, #456]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060b0:	f043 0308 	orr.w	r3, r3, #8
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	4b70      	ldr	r3, [pc, #448]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	496d      	ldr	r1, [pc, #436]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c8:	4b6b      	ldr	r3, [pc, #428]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	4968      	ldr	r1, [pc, #416]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	604b      	str	r3, [r1, #4]
 80060dc:	e025      	b.n	800612a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a65      	ldr	r2, [pc, #404]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060e4:	f043 0308 	orr.w	r3, r3, #8
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4960      	ldr	r1, [pc, #384]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060fc:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	495b      	ldr	r1, [pc, #364]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fd14 	bl	8006b48 <RCC_SetFlashLatencyFromMSIRange>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e37a      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800612a:	f000 fc81 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 800612e:	4602      	mov	r2, r0
 8006130:	4b51      	ldr	r3, [pc, #324]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	4950      	ldr	r1, [pc, #320]	; (800627c <HAL_RCC_OscConfig+0x274>)
 800613c:	5ccb      	ldrb	r3, [r1, r3]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <HAL_RCC_OscConfig+0x278>)
 8006148:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800614a:	4b4e      	ldr	r3, [pc, #312]	; (8006284 <HAL_RCC_OscConfig+0x27c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fd fe66 	bl	8003e20 <HAL_InitTick>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d052      	beq.n	8006204 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	e35e      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d032      	beq.n	80061d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800616a:	4b43      	ldr	r3, [pc, #268]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a42      	ldr	r2, [pc, #264]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006176:	f7fd fea3 	bl	8003ec0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800617e:	f7fd fe9f 	bl	8003ec0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e347      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006190:	4b39      	ldr	r3, [pc, #228]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a35      	ldr	r2, [pc, #212]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061a2:	f043 0308 	orr.w	r3, r3, #8
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	4b33      	ldr	r3, [pc, #204]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	4930      	ldr	r1, [pc, #192]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	492b      	ldr	r1, [pc, #172]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	604b      	str	r3, [r1, #4]
 80061ce:	e01a      	b.n	8006206 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a28      	ldr	r2, [pc, #160]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061dc:	f7fd fe70 	bl	8003ec0 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e4:	f7fd fe6c 	bl	8003ec0 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e314      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x1dc>
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d073      	beq.n	80062fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d005      	beq.n	8006224 <HAL_RCC_OscConfig+0x21c>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b0c      	cmp	r3, #12
 800621c:	d10e      	bne.n	800623c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d10b      	bne.n	800623c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d063      	beq.n	80062f8 <HAL_RCC_OscConfig+0x2f0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d15f      	bne.n	80062f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e2f1      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d106      	bne.n	8006254 <HAL_RCC_OscConfig+0x24c>
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e025      	b.n	80062a0 <HAL_RCC_OscConfig+0x298>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800625c:	d114      	bne.n	8006288 <HAL_RCC_OscConfig+0x280>
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a05      	ldr	r2, [pc, #20]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a02      	ldr	r2, [pc, #8]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e013      	b.n	80062a0 <HAL_RCC_OscConfig+0x298>
 8006278:	40021000 	.word	0x40021000
 800627c:	0801ebdc 	.word	0x0801ebdc
 8006280:	20000000 	.word	0x20000000
 8006284:	20000004 	.word	0x20000004
 8006288:	4ba0      	ldr	r3, [pc, #640]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a9f      	ldr	r2, [pc, #636]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800628e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b9d      	ldr	r3, [pc, #628]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a9c      	ldr	r2, [pc, #624]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800629a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800629e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d013      	beq.n	80062d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fd fe0a 	bl	8003ec0 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b0:	f7fd fe06 	bl	8003ec0 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	; 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e2ae      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c2:	4b92      	ldr	r3, [pc, #584]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x2a8>
 80062ce:	e014      	b.n	80062fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d0:	f7fd fdf6 	bl	8003ec0 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d8:	f7fd fdf2 	bl	8003ec0 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	; 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e29a      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ea:	4b88      	ldr	r3, [pc, #544]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x2d0>
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d060      	beq.n	80063c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d005      	beq.n	8006318 <HAL_RCC_OscConfig+0x310>
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d119      	bne.n	8006346 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d116      	bne.n	8006346 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006318:	4b7c      	ldr	r3, [pc, #496]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_OscConfig+0x328>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e277      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006330:	4b76      	ldr	r3, [pc, #472]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	4973      	ldr	r1, [pc, #460]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006340:	4313      	orrs	r3, r2
 8006342:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006344:	e040      	b.n	80063c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d023      	beq.n	8006396 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634e:	4b6f      	ldr	r3, [pc, #444]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a6e      	ldr	r2, [pc, #440]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635a:	f7fd fdb1 	bl	8003ec0 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006362:	f7fd fdad 	bl	8003ec0 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e255      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006374:	4b65      	ldr	r3, [pc, #404]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b62      	ldr	r3, [pc, #392]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	061b      	lsls	r3, r3, #24
 800638e:	495f      	ldr	r1, [pc, #380]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
 8006394:	e018      	b.n	80063c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006396:	4b5d      	ldr	r3, [pc, #372]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5c      	ldr	r2, [pc, #368]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a2:	f7fd fd8d 	bl	8003ec0 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063aa:	f7fd fd89 	bl	8003ec0 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e231      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063bc:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f0      	bne.n	80063aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d03c      	beq.n	800644e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01c      	beq.n	8006416 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063dc:	4b4b      	ldr	r3, [pc, #300]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e2:	4a4a      	ldr	r2, [pc, #296]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fd fd68 	bl	8003ec0 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fd fd64 	bl	8003ec0 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e20c      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ef      	beq.n	80063f4 <HAL_RCC_OscConfig+0x3ec>
 8006414:	e01b      	b.n	800644e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006416:	4b3d      	ldr	r3, [pc, #244]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641c:	4a3b      	ldr	r2, [pc, #236]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006426:	f7fd fd4b 	bl	8003ec0 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642e:	f7fd fd47 	bl	8003ec0 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e1ef      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006440:	4b32      	ldr	r3, [pc, #200]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1ef      	bne.n	800642e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80a6 	beq.w	80065a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645c:	2300      	movs	r3, #0
 800645e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10d      	bne.n	8006488 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800646c:	4b27      	ldr	r3, [pc, #156]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	4a26      	ldr	r2, [pc, #152]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006476:	6593      	str	r3, [r2, #88]	; 0x58
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <HAL_RCC_OscConfig+0x504>)
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006484:	2301      	movs	r3, #1
 8006486:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006488:	4b21      	ldr	r3, [pc, #132]	; (8006510 <HAL_RCC_OscConfig+0x508>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d118      	bne.n	80064c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006494:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <HAL_RCC_OscConfig+0x508>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <HAL_RCC_OscConfig+0x508>)
 800649a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a0:	f7fd fd0e 	bl	8003ec0 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a8:	f7fd fd0a 	bl	8003ec0 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e1b2      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_RCC_OscConfig+0x508>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d108      	bne.n	80064e0 <HAL_RCC_OscConfig+0x4d8>
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d4:	4a0d      	ldr	r2, [pc, #52]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064de:	e029      	b.n	8006534 <HAL_RCC_OscConfig+0x52c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d115      	bne.n	8006514 <HAL_RCC_OscConfig+0x50c>
 80064e8:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	4a07      	ldr	r2, [pc, #28]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80064f0:	f043 0304 	orr.w	r3, r3, #4
 80064f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <HAL_RCC_OscConfig+0x504>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	4a03      	ldr	r2, [pc, #12]	; (800650c <HAL_RCC_OscConfig+0x504>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006508:	e014      	b.n	8006534 <HAL_RCC_OscConfig+0x52c>
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000
 8006510:	40007000 	.word	0x40007000
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	4a99      	ldr	r2, [pc, #612]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006524:	4b96      	ldr	r3, [pc, #600]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	4a95      	ldr	r2, [pc, #596]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d016      	beq.n	800656a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653c:	f7fd fcc0 	bl	8003ec0 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006542:	e00a      	b.n	800655a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006544:	f7fd fcbc 	bl	8003ec0 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e162      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800655a:	4b89      	ldr	r3, [pc, #548]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ed      	beq.n	8006544 <HAL_RCC_OscConfig+0x53c>
 8006568:	e015      	b.n	8006596 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656a:	f7fd fca9 	bl	8003ec0 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006570:	e00a      	b.n	8006588 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fd fca5 	bl	8003ec0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e14b      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006588:	4b7d      	ldr	r3, [pc, #500]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1ed      	bne.n	8006572 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006596:	7ffb      	ldrb	r3, [r7, #31]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	4a77      	ldr	r2, [pc, #476]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d03c      	beq.n	800662e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01c      	beq.n	80065f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065bc:	4b70      	ldr	r3, [pc, #448]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c2:	4a6f      	ldr	r2, [pc, #444]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065cc:	f7fd fc78 	bl	8003ec0 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065d4:	f7fd fc74 	bl	8003ec0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e11c      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065e6:	4b66      	ldr	r3, [pc, #408]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0ef      	beq.n	80065d4 <HAL_RCC_OscConfig+0x5cc>
 80065f4:	e01b      	b.n	800662e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065f6:	4b62      	ldr	r3, [pc, #392]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065fc:	4a60      	ldr	r2, [pc, #384]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80065fe:	f023 0301 	bic.w	r3, r3, #1
 8006602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006606:	f7fd fc5b 	bl	8003ec0 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800660e:	f7fd fc57 	bl	8003ec0 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e0ff      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006620:	4b57      	ldr	r3, [pc, #348]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ef      	bne.n	800660e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80f3 	beq.w	800681e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	2b02      	cmp	r3, #2
 800663e:	f040 80c9 	bne.w	80067d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006642:	4b4f      	ldr	r3, [pc, #316]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f003 0203 	and.w	r2, r3, #3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	429a      	cmp	r2, r3
 8006654:	d12c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	3b01      	subs	r3, #1
 8006662:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d123      	bne.n	80066b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006672:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006674:	429a      	cmp	r2, r3
 8006676:	d11b      	bne.n	80066b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d113      	bne.n	80066b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	3b01      	subs	r3, #1
 8006696:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d109      	bne.n	80066b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	3b01      	subs	r3, #1
 80066aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d06b      	beq.n	8006788 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d062      	beq.n	800677c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066b6:	4b32      	ldr	r3, [pc, #200]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e0ac      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2d      	ldr	r2, [pc, #180]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80066cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066d2:	f7fd fbf5 	bl	8003ec0 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066da:	f7fd fbf1 	bl	8003ec0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e099      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066f8:	4b21      	ldr	r3, [pc, #132]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	4b21      	ldr	r3, [pc, #132]	; (8006784 <HAL_RCC_OscConfig+0x77c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006708:	3a01      	subs	r2, #1
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	4311      	orrs	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006712:	0212      	lsls	r2, r2, #8
 8006714:	4311      	orrs	r1, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800671a:	0852      	lsrs	r2, r2, #1
 800671c:	3a01      	subs	r2, #1
 800671e:	0552      	lsls	r2, r2, #21
 8006720:	4311      	orrs	r1, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006726:	0852      	lsrs	r2, r2, #1
 8006728:	3a01      	subs	r2, #1
 800672a:	0652      	lsls	r2, r2, #25
 800672c:	4311      	orrs	r1, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006732:	06d2      	lsls	r2, r2, #27
 8006734:	430a      	orrs	r2, r1
 8006736:	4912      	ldr	r1, [pc, #72]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006738:	4313      	orrs	r3, r2
 800673a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0f      	ldr	r2, [pc, #60]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 800674e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006754:	f7fd fbb4 	bl	8003ec0 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675c:	f7fd fbb0 	bl	8003ec0 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e058      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <HAL_RCC_OscConfig+0x778>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800677a:	e050      	b.n	800681e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e04f      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
 8006780:	40021000 	.word	0x40021000
 8006784:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006788:	4b27      	ldr	r3, [pc, #156]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d144      	bne.n	800681e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006794:	4b24      	ldr	r3, [pc, #144]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a23      	ldr	r2, [pc, #140]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 800679a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800679e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a20      	ldr	r2, [pc, #128]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 80067a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067ac:	f7fd fb88 	bl	8003ec0 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fd fb84 	bl	8003ec0 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e02c      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c6:	4b18      	ldr	r3, [pc, #96]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x7ac>
 80067d2:	e024      	b.n	800681e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d01f      	beq.n	800681a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 80067e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e6:	f7fd fb6b 	bl	8003ec0 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ee:	f7fd fb67 	bl	8003ec0 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e00f      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1f0      	bne.n	80067ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	4905      	ldr	r1, [pc, #20]	; (8006828 <HAL_RCC_OscConfig+0x820>)
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_OscConfig+0x824>)
 8006814:	4013      	ands	r3, r2
 8006816:	60cb      	str	r3, [r1, #12]
 8006818:	e001      	b.n	800681e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40021000 	.word	0x40021000
 800682c:	feeefffc 	.word	0xfeeefffc

08006830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0e7      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006844:	4b75      	ldr	r3, [pc, #468]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d910      	bls.n	8006874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006852:	4b72      	ldr	r3, [pc, #456]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f023 0207 	bic.w	r2, r3, #7
 800685a:	4970      	ldr	r1, [pc, #448]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b6e      	ldr	r3, [pc, #440]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0cf      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	4b66      	ldr	r3, [pc, #408]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800688c:	429a      	cmp	r2, r3
 800688e:	d908      	bls.n	80068a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006890:	4b63      	ldr	r3, [pc, #396]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	4960      	ldr	r1, [pc, #384]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04c      	beq.n	8006948 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d107      	bne.n	80068c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068b6:	4b5a      	ldr	r3, [pc, #360]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d121      	bne.n	8006906 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0a6      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068ce:	4b54      	ldr	r3, [pc, #336]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d115      	bne.n	8006906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e09a      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068e6:	4b4e      	ldr	r3, [pc, #312]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e08e      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e086      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006906:	4b46      	ldr	r3, [pc, #280]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 0203 	bic.w	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4943      	ldr	r1, [pc, #268]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006914:	4313      	orrs	r3, r2
 8006916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006918:	f7fd fad2 	bl	8003ec0 <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691e:	e00a      	b.n	8006936 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f7fd face 	bl	8003ec0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e06e      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006936:	4b3a      	ldr	r3, [pc, #232]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 020c 	and.w	r2, r3, #12
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	429a      	cmp	r2, r3
 8006946:	d1eb      	bne.n	8006920 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d010      	beq.n	8006976 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006960:	429a      	cmp	r2, r3
 8006962:	d208      	bcs.n	8006976 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006964:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	492b      	ldr	r1, [pc, #172]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006976:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d210      	bcs.n	80069a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f023 0207 	bic.w	r2, r3, #7
 800698c:	4923      	ldr	r1, [pc, #140]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006994:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <HAL_RCC_ClockConfig+0x1ec>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e036      	b.n	8006a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	4918      	ldr	r1, [pc, #96]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4910      	ldr	r1, [pc, #64]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069e4:	f000 f824 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <HAL_RCC_ClockConfig+0x1f0>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	490b      	ldr	r1, [pc, #44]	; (8006a24 <HAL_RCC_ClockConfig+0x1f4>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006a00:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <HAL_RCC_ClockConfig+0x1f8>)
 8006a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a04:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <HAL_RCC_ClockConfig+0x1fc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fd fa09 	bl	8003e20 <HAL_InitTick>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a12:	7afb      	ldrb	r3, [r7, #11]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	40021000 	.word	0x40021000
 8006a24:	0801ebdc 	.word	0x0801ebdc
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	20000004 	.word	0x20000004

08006a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
 8006a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a48:	4b3b      	ldr	r3, [pc, #236]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x34>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d121      	bne.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d11e      	bne.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a64:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a70:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a76:	0a1b      	lsrs	r3, r3, #8
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e005      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a80:	4b2d      	ldr	r3, [pc, #180]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	091b      	lsrs	r3, r3, #4
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d102      	bne.n	8006aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aa8:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e004      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ab4:	4b23      	ldr	r3, [pc, #140]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b0c      	cmp	r3, #12
 8006abc:	d134      	bne.n	8006b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006abe:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d003      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0xac>
 8006ad4:	e005      	b.n	8006ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ad8:	617b      	str	r3, [r7, #20]
      break;
 8006ada:	e005      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ade:	617b      	str	r3, [r7, #20]
      break;
 8006ae0:	e002      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	617b      	str	r3, [r7, #20]
      break;
 8006ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ae8:	4b13      	ldr	r3, [pc, #76]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	3301      	adds	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006af6:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	fb03 f202 	mul.w	r2, r3, r2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	0e5b      	lsrs	r3, r3, #25
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	3301      	adds	r3, #1
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b28:	69bb      	ldr	r3, [r7, #24]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3724      	adds	r7, #36	; 0x24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	0801ebec 	.word	0x0801ebec
 8006b40:	00f42400 	.word	0x00f42400
 8006b44:	007a1200 	.word	0x007a1200

08006b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b54:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b60:	f7ff f9ee 	bl	8005f40 <HAL_PWREx_GetVoltageRange>
 8006b64:	6178      	str	r0, [r7, #20]
 8006b66:	e014      	b.n	8006b92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6c:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b72:	6593      	str	r3, [r2, #88]	; 0x58
 8006b74:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b80:	f7ff f9de 	bl	8005f40 <HAL_PWREx_GetVoltageRange>
 8006b84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	4a1d      	ldr	r2, [pc, #116]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b98:	d10b      	bne.n	8006bb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d919      	bls.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2ba0      	cmp	r3, #160	; 0xa0
 8006ba4:	d902      	bls.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	e013      	b.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bac:	2301      	movs	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	e010      	b.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d902      	bls.n	8006bbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006bb8:	2303      	movs	r3, #3
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	e00a      	b.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b80      	cmp	r3, #128	; 0x80
 8006bc2:	d102      	bne.n	8006bca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	e004      	b.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b70      	cmp	r3, #112	; 0x70
 8006bce:	d101      	bne.n	8006bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f023 0207 	bic.w	r2, r3, #7
 8006bdc:	4909      	ldr	r1, [pc, #36]	; (8006c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d001      	beq.n	8006bf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40021000 	.word	0x40021000
 8006c04:	40022000 	.word	0x40022000

08006c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c10:	2300      	movs	r3, #0
 8006c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c14:	2300      	movs	r3, #0
 8006c16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d031      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c2c:	d01a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c32:	d814      	bhi.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c3c:	d10f      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006c3e:	4b5d      	ldr	r3, [pc, #372]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a5c      	ldr	r2, [pc, #368]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c4a:	e00c      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f9ce 	bl	8006ff4 <RCCEx_PLLSAI1_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c5c:	e003      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	74fb      	strb	r3, [r7, #19]
      break;
 8006c62:	e000      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10b      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c6c:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	494e      	ldr	r1, [pc, #312]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c82:	e001      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	7cfb      	ldrb	r3, [r7, #19]
 8006c86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 809e 	beq.w	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c96:	2300      	movs	r3, #0
 8006c98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c9a:	4b46      	ldr	r3, [pc, #280]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00d      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb0:	4b40      	ldr	r3, [pc, #256]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb4:	4a3f      	ldr	r2, [pc, #252]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cba:	6593      	str	r3, [r2, #88]	; 0x58
 8006cbc:	4b3d      	ldr	r3, [pc, #244]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a39      	ldr	r2, [pc, #228]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cd8:	f7fd f8f2 	bl	8003ec0 <HAL_GetTick>
 8006cdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cde:	e009      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce0:	f7fd f8ee 	bl	8003ec0 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d902      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8006cf2:	e005      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cf4:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ef      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d15a      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d06:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01e      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d019      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d2e:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d4e:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fd f8ae 	bl	8003ec0 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d66:	e00b      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fd f8aa 	bl	8003ec0 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d902      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	74fb      	strb	r3, [r7, #19]
            break;
 8006d7e:	e006      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d80:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ec      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d94:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	4904      	ldr	r1, [pc, #16]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006daa:	e009      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	74bb      	strb	r3, [r7, #18]
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000
 8006db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc0:	7c7b      	ldrb	r3, [r7, #17]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc6:	4b8a      	ldr	r3, [pc, #552]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	4a89      	ldr	r2, [pc, #548]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dde:	4b84      	ldr	r3, [pc, #528]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de4:	f023 0203 	bic.w	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	4980      	ldr	r1, [pc, #512]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e00:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e06:	f023 020c 	bic.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	4978      	ldr	r1, [pc, #480]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e22:	4b73      	ldr	r3, [pc, #460]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	496f      	ldr	r1, [pc, #444]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e44:	4b6a      	ldr	r3, [pc, #424]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	4967      	ldr	r1, [pc, #412]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e66:	4b62      	ldr	r3, [pc, #392]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	495e      	ldr	r1, [pc, #376]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e88:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	4956      	ldr	r1, [pc, #344]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eaa:	4b51      	ldr	r3, [pc, #324]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	494d      	ldr	r1, [pc, #308]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d028      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ecc:	4b48      	ldr	r3, [pc, #288]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	4945      	ldr	r1, [pc, #276]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eea:	d106      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eec:	4b40      	ldr	r3, [pc, #256]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4a3f      	ldr	r2, [pc, #252]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ef6:	60d3      	str	r3, [r2, #12]
 8006ef8:	e011      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f872 	bl	8006ff4 <RCCEx_PLLSAI1_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f14:	7cfb      	ldrb	r3, [r7, #19]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006f1a:	7cfb      	ldrb	r3, [r7, #19]
 8006f1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d028      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f2a:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f38:	492d      	ldr	r1, [pc, #180]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f48:	d106      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a28      	ldr	r2, [pc, #160]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f54:	60d3      	str	r3, [r2, #12]
 8006f56:	e011      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3304      	adds	r3, #4
 8006f66:	2101      	movs	r1, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f843 	bl	8006ff4 <RCCEx_PLLSAI1_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f72:	7cfb      	ldrb	r3, [r7, #19]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006f78:	7cfb      	ldrb	r3, [r7, #19]
 8006f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01c      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	4916      	ldr	r1, [pc, #88]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa6:	d10c      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2102      	movs	r1, #2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f820 	bl	8006ff4 <RCCEx_PLLSAI1_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fb8:	7cfb      	ldrb	r3, [r7, #19]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006fbe:	7cfb      	ldrb	r3, [r7, #19]
 8006fc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fdc:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40021000 	.word	0x40021000

08006ff4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007002:	4b74      	ldr	r3, [pc, #464]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d018      	beq.n	8007040 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800700e:	4b71      	ldr	r3, [pc, #452]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0203 	and.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d10d      	bne.n	800703a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
       ||
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007026:	4b6b      	ldr	r3, [pc, #428]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
       ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d047      	beq.n	80070ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
 800703e:	e044      	b.n	80070ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d018      	beq.n	800707a <RCCEx_PLLSAI1_Config+0x86>
 8007048:	2b03      	cmp	r3, #3
 800704a:	d825      	bhi.n	8007098 <RCCEx_PLLSAI1_Config+0xa4>
 800704c:	2b01      	cmp	r3, #1
 800704e:	d002      	beq.n	8007056 <RCCEx_PLLSAI1_Config+0x62>
 8007050:	2b02      	cmp	r3, #2
 8007052:	d009      	beq.n	8007068 <RCCEx_PLLSAI1_Config+0x74>
 8007054:	e020      	b.n	8007098 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007056:	4b5f      	ldr	r3, [pc, #380]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11d      	bne.n	800709e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007066:	e01a      	b.n	800709e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007068:	4b5a      	ldr	r3, [pc, #360]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d116      	bne.n	80070a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007078:	e013      	b.n	80070a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800707a:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007086:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007096:	e006      	b.n	80070a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	e004      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800709e:	bf00      	nop
 80070a0:	e002      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80070ae:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6819      	ldr	r1, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	3b01      	subs	r3, #1
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	430b      	orrs	r3, r1
 80070c4:	4943      	ldr	r1, [pc, #268]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d17c      	bne.n	80071ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80070d0:	4b40      	ldr	r3, [pc, #256]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a3f      	ldr	r2, [pc, #252]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070dc:	f7fc fef0 	bl	8003ec0 <HAL_GetTick>
 80070e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070e2:	e009      	b.n	80070f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070e4:	f7fc feec 	bl	8003ec0 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d902      	bls.n	80070f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]
        break;
 80070f6:	e005      	b.n	8007104 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070f8:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ef      	bne.n	80070e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d15f      	bne.n	80071ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d110      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007110:	4b30      	ldr	r3, [pc, #192]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6892      	ldr	r2, [r2, #8]
 8007120:	0211      	lsls	r1, r2, #8
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68d2      	ldr	r2, [r2, #12]
 8007126:	06d2      	lsls	r2, r2, #27
 8007128:	430a      	orrs	r2, r1
 800712a:	492a      	ldr	r1, [pc, #168]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800712c:	4313      	orrs	r3, r2
 800712e:	610b      	str	r3, [r1, #16]
 8007130:	e027      	b.n	8007182 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d112      	bne.n	800715e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007138:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6892      	ldr	r2, [r2, #8]
 8007148:	0211      	lsls	r1, r2, #8
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6912      	ldr	r2, [r2, #16]
 800714e:	0852      	lsrs	r2, r2, #1
 8007150:	3a01      	subs	r2, #1
 8007152:	0552      	lsls	r2, r2, #21
 8007154:	430a      	orrs	r2, r1
 8007156:	491f      	ldr	r1, [pc, #124]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007158:	4313      	orrs	r3, r2
 800715a:	610b      	str	r3, [r1, #16]
 800715c:	e011      	b.n	8007182 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007166:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6892      	ldr	r2, [r2, #8]
 800716e:	0211      	lsls	r1, r2, #8
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6952      	ldr	r2, [r2, #20]
 8007174:	0852      	lsrs	r2, r2, #1
 8007176:	3a01      	subs	r2, #1
 8007178:	0652      	lsls	r2, r2, #25
 800717a:	430a      	orrs	r2, r1
 800717c:	4915      	ldr	r1, [pc, #84]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800717e:	4313      	orrs	r3, r2
 8007180:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007182:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800718c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718e:	f7fc fe97 	bl	8003ec0 <HAL_GetTick>
 8007192:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007194:	e009      	b.n	80071aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007196:	f7fc fe93 	bl	8003ec0 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d902      	bls.n	80071aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	73fb      	strb	r3, [r7, #15]
          break;
 80071a8:	e005      	b.n	80071b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071aa:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0ef      	beq.n	8007196 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071bc:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	4903      	ldr	r1, [pc, #12]	; (80071d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40021000 	.word	0x40021000

080071d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e095      	b.n	8007316 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fa:	d009      	beq.n	8007210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	61da      	str	r2, [r3, #28]
 8007202:	e005      	b.n	8007210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fc fca6 	bl	8003b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007250:	d902      	bls.n	8007258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e002      	b.n	800725e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800725c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007266:	d007      	beq.n	8007278 <HAL_SPI_Init+0xa0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007270:	d002      	beq.n	8007278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	ea42 0103 	orr.w	r1, r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 0204 	and.w	r2, r3, #4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	f003 0308 	and.w	r3, r3, #8
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80072f4:	ea42 0103 	orr.w	r1, r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e049      	b.n	80073c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fc fc5d 	bl	8003c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f000 fbf3 	bl	8007b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d001      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e03b      	b.n	800745c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a19      	ldr	r2, [pc, #100]	; (8007468 <HAL_TIM_Base_Start_IT+0x9c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_TIM_Base_Start_IT+0x4e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740e:	d004      	beq.n	800741a <HAL_TIM_Base_Start_IT+0x4e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <HAL_TIM_Base_Start_IT+0xa0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d115      	bne.n	8007446 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <HAL_TIM_Base_Start_IT+0xa4>)
 8007422:	4013      	ands	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b06      	cmp	r3, #6
 800742a:	d015      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x8c>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007432:	d011      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	e008      	b.n	8007458 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e000      	b.n	800745a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007458:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40014000 	.word	0x40014000
 8007470:	00010007 	.word	0x00010007

08007474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e049      	b.n	800751a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f841 	bl	8007522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 fb48 	bl	8007b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d020      	beq.n	800759a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01b      	beq.n	800759a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0202 	mvn.w	r2, #2
 800756a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fac2 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 8007586:	e005      	b.n	8007594 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fab4 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fac5 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0204 	mvn.w	r2, #4
 80075b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa9c 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fa8e 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa9f 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d020      	beq.n	8007632 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01b      	beq.n	8007632 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0208 	mvn.w	r2, #8
 8007602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa76 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 800761e:	e005      	b.n	800762c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fa68 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa79 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b00      	cmp	r3, #0
 800763a:	d020      	beq.n	800767e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01b      	beq.n	800767e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0210 	mvn.w	r2, #16
 800764e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2208      	movs	r2, #8
 8007654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa50 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 800766a:	e005      	b.n	8007678 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa42 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa53 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00c      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f06f 0201 	mvn.w	r2, #1
 800769a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7fc f99d 	bl	80039dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00c      	beq.n	80076c6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fe2d 	bl	8008320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00c      	beq.n	80076ea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fe25 	bl	8008334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa12 	bl	8007b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f06f 0220 	mvn.w	r2, #32
 800772a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fded 	bl	800830c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007756:	2302      	movs	r3, #2
 8007758:	e0ff      	b.n	800795a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b14      	cmp	r3, #20
 8007766:	f200 80f0 	bhi.w	800794a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800776a:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	080077c5 	.word	0x080077c5
 8007774:	0800794b 	.word	0x0800794b
 8007778:	0800794b 	.word	0x0800794b
 800777c:	0800794b 	.word	0x0800794b
 8007780:	08007805 	.word	0x08007805
 8007784:	0800794b 	.word	0x0800794b
 8007788:	0800794b 	.word	0x0800794b
 800778c:	0800794b 	.word	0x0800794b
 8007790:	08007847 	.word	0x08007847
 8007794:	0800794b 	.word	0x0800794b
 8007798:	0800794b 	.word	0x0800794b
 800779c:	0800794b 	.word	0x0800794b
 80077a0:	08007887 	.word	0x08007887
 80077a4:	0800794b 	.word	0x0800794b
 80077a8:	0800794b 	.word	0x0800794b
 80077ac:	0800794b 	.word	0x0800794b
 80077b0:	080078c9 	.word	0x080078c9
 80077b4:	0800794b 	.word	0x0800794b
 80077b8:	0800794b 	.word	0x0800794b
 80077bc:	0800794b 	.word	0x0800794b
 80077c0:	08007909 	.word	0x08007909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fa20 	bl	8007c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0208 	orr.w	r2, r2, #8
 80077de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0204 	bic.w	r2, r2, #4
 80077ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6999      	ldr	r1, [r3, #24]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	619a      	str	r2, [r3, #24]
      break;
 8007802:	e0a5      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fa7c 	bl	8007d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6999      	ldr	r1, [r3, #24]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	021a      	lsls	r2, r3, #8
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	619a      	str	r2, [r3, #24]
      break;
 8007844:	e084      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fad5 	bl	8007dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0208 	orr.w	r2, r2, #8
 8007860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0204 	bic.w	r2, r2, #4
 8007870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69d9      	ldr	r1, [r3, #28]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	61da      	str	r2, [r3, #28]
      break;
 8007884:	e064      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fb2d 	bl	8007eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69d9      	ldr	r1, [r3, #28]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	021a      	lsls	r2, r3, #8
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	61da      	str	r2, [r3, #28]
      break;
 80078c6:	e043      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fb6a 	bl	8007fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0208 	orr.w	r2, r2, #8
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0204 	bic.w	r2, r2, #4
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007906:	e023      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fba2 	bl	8008058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007922:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007932:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	021a      	lsls	r2, r3, #8
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007948:	e002      	b.n	8007950 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
      break;
 800794e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007958:	7dfb      	ldrb	r3, [r7, #23]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop

08007964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIM_ConfigClockSource+0x1c>
 800797c:	2302      	movs	r3, #2
 800797e:	e0b6      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x18a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800799e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d03e      	beq.n	8007a3c <HAL_TIM_ConfigClockSource+0xd8>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	f200 8087 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	f000 8086 	beq.w	8007ada <HAL_TIM_ConfigClockSource+0x176>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d87f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d01a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0xaa>
 80079d8:	2b70      	cmp	r3, #112	; 0x70
 80079da:	d87b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d050      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x11e>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d877      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d03c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0xfe>
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d873      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d058      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x13e>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d86f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d064      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15e>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d86b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d060      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d867      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d05c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d05a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8007a0c:	e062      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a1e:	f000 fbef 	bl	8008200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	609a      	str	r2, [r3, #8]
      break;
 8007a3a:	e04f      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a4c:	f000 fbd8 	bl	8008200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	609a      	str	r2, [r3, #8]
      break;
 8007a60:	e03c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 fb4c 	bl	800810c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2150      	movs	r1, #80	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fba5 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007a80:	e02c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 fb6b 	bl	800816a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2160      	movs	r1, #96	; 0x60
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fb95 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e01c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f000 fb2c 	bl	800810c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fb85 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007ac0:	e00c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 fb7c 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007ad2:	e003      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <TIM_Base_SetConfig+0xbc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x20>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <TIM_Base_SetConfig+0xbc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_Base_SetConfig+0x52>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d007      	beq.n	8007b9a <TIM_Base_SetConfig+0x52>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <TIM_Base_SetConfig+0xc0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_Base_SetConfig+0x52>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a1d      	ldr	r2, [pc, #116]	; (8007c0c <TIM_Base_SetConfig+0xc4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d108      	bne.n	8007bac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <TIM_Base_SetConfig+0xbc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_Base_SetConfig+0xa0>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <TIM_Base_SetConfig+0xc0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_Base_SetConfig+0xa0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <TIM_Base_SetConfig+0xc4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d103      	bne.n	8007bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	615a      	str	r2, [r3, #20]
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40014400 	.word	0x40014400

08007c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f023 0201 	bic.w	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <TIM_OC1_SetConfig+0xec>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <TIM_OC1_SetConfig+0x70>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a23      	ldr	r2, [pc, #140]	; (8007d00 <TIM_OC1_SetConfig+0xf0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_OC1_SetConfig+0x70>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a22      	ldr	r2, [pc, #136]	; (8007d04 <TIM_OC1_SetConfig+0xf4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10c      	bne.n	8007c9a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 0308 	bic.w	r3, r3, #8
 8007c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f023 0304 	bic.w	r3, r3, #4
 8007c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <TIM_OC1_SetConfig+0xec>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <TIM_OC1_SetConfig+0xa2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <TIM_OC1_SetConfig+0xf0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC1_SetConfig+0xa2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <TIM_OC1_SetConfig+0xf4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d111      	bne.n	8007cd6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	621a      	str	r2, [r3, #32]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400

08007d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	f023 0210 	bic.w	r2, r3, #16
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f023 0320 	bic.w	r3, r3, #32
 8007d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <TIM_OC2_SetConfig+0xe8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d10d      	bne.n	8007d88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <TIM_OC2_SetConfig+0xe8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC2_SetConfig+0x98>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <TIM_OC2_SetConfig+0xec>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC2_SetConfig+0x98>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <TIM_OC2_SetConfig+0xf0>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d113      	bne.n	8007dc8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40012c00 	.word	0x40012c00
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400

08007dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <TIM_OC3_SetConfig+0xe4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10d      	bne.n	8007e7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a18      	ldr	r2, [pc, #96]	; (8007ee0 <TIM_OC3_SetConfig+0xe4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d007      	beq.n	8007e92 <TIM_OC3_SetConfig+0x96>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a17      	ldr	r2, [pc, #92]	; (8007ee4 <TIM_OC3_SetConfig+0xe8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC3_SetConfig+0x96>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a16      	ldr	r2, [pc, #88]	; (8007ee8 <TIM_OC3_SetConfig+0xec>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d113      	bne.n	8007eba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	621a      	str	r2, [r3, #32]
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400

08007eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	031b      	lsls	r3, r3, #12
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a14      	ldr	r2, [pc, #80]	; (8007f9c <TIM_OC4_SetConfig+0xb0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_OC4_SetConfig+0x74>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <TIM_OC4_SetConfig+0xb4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_OC4_SetConfig+0x74>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a12      	ldr	r2, [pc, #72]	; (8007fa4 <TIM_OC4_SetConfig+0xb8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d109      	bne.n	8007f74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	019b      	lsls	r3, r3, #6
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400

08007fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a13      	ldr	r2, [pc, #76]	; (800804c <TIM_OC5_SetConfig+0xa4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <TIM_OC5_SetConfig+0x6a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a12      	ldr	r2, [pc, #72]	; (8008050 <TIM_OC5_SetConfig+0xa8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d003      	beq.n	8008012 <TIM_OC5_SetConfig+0x6a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a11      	ldr	r2, [pc, #68]	; (8008054 <TIM_OC5_SetConfig+0xac>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d109      	bne.n	8008026 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40012c00 	.word	0x40012c00
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400

08008058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800809e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a14      	ldr	r2, [pc, #80]	; (8008100 <TIM_OC6_SetConfig+0xa8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d007      	beq.n	80080c4 <TIM_OC6_SetConfig+0x6c>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a13      	ldr	r2, [pc, #76]	; (8008104 <TIM_OC6_SetConfig+0xac>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC6_SetConfig+0x6c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a12      	ldr	r2, [pc, #72]	; (8008108 <TIM_OC6_SetConfig+0xb0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d109      	bne.n	80080d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	029b      	lsls	r3, r3, #10
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	621a      	str	r2, [r3, #32]
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40014000 	.word	0x40014000
 8008108:	40014400 	.word	0x40014400

0800810c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f023 030a 	bic.w	r3, r3, #10
 8008148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800816a:	b480      	push	{r7}
 800816c:	b087      	sub	sp, #28
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	f023 0210 	bic.w	r2, r3, #16
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f043 0307 	orr.w	r3, r3, #7
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	609a      	str	r2, [r3, #8]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	021a      	lsls	r2, r3, #8
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	431a      	orrs	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	609a      	str	r2, [r3, #8]
}
 8008234:	bf00      	nop
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008254:	2302      	movs	r3, #2
 8008256:	e04f      	b.n	80082f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a21      	ldr	r2, [pc, #132]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008288:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a14      	ldr	r2, [pc, #80]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c0:	d004      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a10      	ldr	r2, [pc, #64]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d10c      	bne.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	40012c00 	.word	0x40012c00
 8008308:	40014000 	.word	0x40014000

0800830c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800834c:	4904      	ldr	r1, [pc, #16]	; (8008360 <MX_FATFS_Init+0x18>)
 800834e:	4805      	ldr	r0, [pc, #20]	; (8008364 <MX_FATFS_Init+0x1c>)
 8008350:	f002 ff7a 	bl	800b248 <FATFS_LinkDriver>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	4b03      	ldr	r3, [pc, #12]	; (8008368 <MX_FATFS_Init+0x20>)
 800835a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20002c28 	.word	0x20002c28
 8008364:	2000000c 	.word	0x2000000c
 8008368:	20002c24 	.word	0x20002c24

0800836c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008370:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008372:	4618      	mov	r0, r3
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <USER_initialize+0x24>)
 8008388:	2201      	movs	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800838c:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <USER_initialize+0x24>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000009 	.word	0x20000009

080083a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80083ae:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <USER_status+0x24>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80083b4:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <USER_status+0x24>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000009 	.word	0x20000009

080083cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80083dc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	603a      	str	r2, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	460b      	mov	r3, r1
 8008416:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
    return res;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <disk_status+0x30>)
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	79fa      	ldrb	r2, [r7, #7]
 8008444:	4905      	ldr	r1, [pc, #20]	; (800845c <disk_status+0x30>)
 8008446:	440a      	add	r2, r1
 8008448:	7a12      	ldrb	r2, [r2, #8]
 800844a:	4610      	mov	r0, r2
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20002e54 	.word	0x20002e54

08008460 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <disk_initialize+0x48>)
 8008472:	5cd3      	ldrb	r3, [r2, r3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d111      	bne.n	800849c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <disk_initialize+0x48>)
 800847c:	2101      	movs	r1, #1
 800847e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <disk_initialize+0x48>)
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	79fa      	ldrb	r2, [r7, #7]
 800848e:	4906      	ldr	r1, [pc, #24]	; (80084a8 <disk_initialize+0x48>)
 8008490:	440a      	add	r2, r1
 8008492:	7a12      	ldrb	r2, [r2, #8]
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20002e54 	.word	0x20002e54

080084ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <disk_read+0x3c>)
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	689c      	ldr	r4, [r3, #8]
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <disk_read+0x3c>)
 80084cc:	4413      	add	r3, r2
 80084ce:	7a18      	ldrb	r0, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	47a0      	blx	r4
 80084d8:	4603      	mov	r3, r0
 80084da:	75fb      	strb	r3, [r7, #23]
  return res;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd90      	pop	{r4, r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20002e54 	.word	0x20002e54

080084ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <disk_write+0x3c>)
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68dc      	ldr	r4, [r3, #12]
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	4a07      	ldr	r2, [pc, #28]	; (8008528 <disk_write+0x3c>)
 800850c:	4413      	add	r3, r2
 800850e:	7a18      	ldrb	r0, [r3, #8]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	47a0      	blx	r4
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
  return res;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
}
 800851e:	4618      	mov	r0, r3
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	bf00      	nop
 8008528:	20002e54 	.word	0x20002e54

0800852c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	603a      	str	r2, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
 8008538:	460b      	mov	r3, r1
 800853a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <disk_ioctl+0x38>)
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	79fa      	ldrb	r2, [r7, #7]
 800854a:	4906      	ldr	r1, [pc, #24]	; (8008564 <disk_ioctl+0x38>)
 800854c:	440a      	add	r2, r1
 800854e:	7a10      	ldrb	r0, [r2, #8]
 8008550:	79b9      	ldrb	r1, [r7, #6]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
  return res;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20002e54 	.word	0x20002e54

08008568 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008578:	89fb      	ldrh	r3, [r7, #14]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	b21a      	sxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b21b      	sxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b21b      	sxth	r3, r3
 8008588:	81fb      	strh	r3, [r7, #14]
	return rv;
 800858a:	89fb      	ldrh	r3, [r7, #14]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3303      	adds	r3, #3
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	3202      	adds	r2, #2
 80085b0:	7812      	ldrb	r2, [r2, #0]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	3201      	adds	r2, #1
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80085d0:	68fb      	ldr	r3, [r7, #12]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	887a      	ldrh	r2, [r7, #2]
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	887b      	ldrh	r3, [r7, #2]
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	887a      	ldrh	r2, [r7, #2]
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	0a1b      	lsrs	r3, r3, #8
 8008652:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	701a      	strb	r2, [r3, #0]
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	1c53      	adds	r3, r2, #1
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	6179      	str	r1, [r7, #20]
 8008692:	7812      	ldrb	r2, [r2, #0]
 8008694:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f1      	bne.n	8008686 <mem_cpy+0x1a>
	}
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	617a      	str	r2, [r7, #20]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	607b      	str	r3, [r7, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f3      	bne.n	80086be <mem_set+0x10>
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086e4:	b480      	push	{r7}
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	61fa      	str	r2, [r7, #28]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	61ba      	str	r2, [r7, #24]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	1acb      	subs	r3, r1, r3
 8008710:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3b01      	subs	r3, #1
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <mem_cmp+0x40>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0eb      	beq.n	80086fc <mem_cmp+0x18>

	return r;
 8008724:	697b      	ldr	r3, [r7, #20]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3724      	adds	r7, #36	; 0x24
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800873c:	e002      	b.n	8008744 <chk_chr+0x12>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3301      	adds	r3, #1
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <chk_chr+0x26>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	4293      	cmp	r3, r2
 8008756:	d1f2      	bne.n	800873e <chk_chr+0xc>
	return *str;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	781b      	ldrb	r3, [r3, #0]
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008772:	2300      	movs	r3, #0
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e029      	b.n	80087d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800877c:	4a27      	ldr	r2, [pc, #156]	; (800881c <chk_lock+0xb4>)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	4413      	add	r3, r2
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01d      	beq.n	80087c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800878a:	4a24      	ldr	r2, [pc, #144]	; (800881c <chk_lock+0xb4>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	4413      	add	r3, r2
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d116      	bne.n	80087ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <chk_lock+0xb4>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	4413      	add	r3, r2
 80087a4:	3304      	adds	r3, #4
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d10c      	bne.n	80087ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <chk_lock+0xb4>)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	4413      	add	r3, r2
 80087b8:	3308      	adds	r3, #8
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d102      	bne.n	80087ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087c4:	e007      	b.n	80087d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087c6:	2301      	movs	r3, #1
 80087c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d9d2      	bls.n	800877c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d109      	bne.n	80087f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <chk_lock+0x80>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d101      	bne.n	80087ec <chk_lock+0x84>
 80087e8:	2300      	movs	r3, #0
 80087ea:	e010      	b.n	800880e <chk_lock+0xa6>
 80087ec:	2312      	movs	r3, #18
 80087ee:	e00e      	b.n	800880e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <chk_lock+0xa0>
 80087f6:	4a09      	ldr	r2, [pc, #36]	; (800881c <chk_lock+0xb4>)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	4413      	add	r3, r2
 80087fe:	330c      	adds	r3, #12
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008806:	d101      	bne.n	800880c <chk_lock+0xa4>
 8008808:	2310      	movs	r3, #16
 800880a:	e000      	b.n	800880e <chk_lock+0xa6>
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20002c34 	.word	0x20002c34

08008820 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e002      	b.n	8008832 <enq_lock+0x12>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3301      	adds	r3, #1
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d806      	bhi.n	8008846 <enq_lock+0x26>
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <enq_lock+0x40>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	4413      	add	r3, r2
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f2      	bne.n	800882c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b02      	cmp	r3, #2
 800884a:	bf14      	ite	ne
 800884c:	2301      	movne	r3, #1
 800884e:	2300      	moveq	r3, #0
 8008850:	b2db      	uxtb	r3, r3
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20002c34 	.word	0x20002c34

08008864 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e01f      	b.n	80088b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008874:	4a41      	ldr	r2, [pc, #260]	; (800897c <inc_lock+0x118>)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	4413      	add	r3, r2
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d113      	bne.n	80088ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008886:	4a3d      	ldr	r2, [pc, #244]	; (800897c <inc_lock+0x118>)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	4413      	add	r3, r2
 800888e:	3304      	adds	r3, #4
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008896:	429a      	cmp	r2, r3
 8008898:	d109      	bne.n	80088ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800889a:	4a38      	ldr	r2, [pc, #224]	; (800897c <inc_lock+0x118>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	4413      	add	r3, r2
 80088a2:	3308      	adds	r3, #8
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d006      	beq.n	80088bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d9dc      	bls.n	8008874 <inc_lock+0x10>
 80088ba:	e000      	b.n	80088be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80088bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d132      	bne.n	800892a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	e002      	b.n	80088d0 <inc_lock+0x6c>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d806      	bhi.n	80088e4 <inc_lock+0x80>
 80088d6:	4a29      	ldr	r2, [pc, #164]	; (800897c <inc_lock+0x118>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	4413      	add	r3, r2
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1f2      	bne.n	80088ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d101      	bne.n	80088ee <inc_lock+0x8a>
 80088ea:	2300      	movs	r3, #0
 80088ec:	e040      	b.n	8008970 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4922      	ldr	r1, [pc, #136]	; (800897c <inc_lock+0x118>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	440b      	add	r3, r1
 80088fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	491e      	ldr	r1, [pc, #120]	; (800897c <inc_lock+0x118>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	440b      	add	r3, r1
 8008908:	3304      	adds	r3, #4
 800890a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695a      	ldr	r2, [r3, #20]
 8008910:	491a      	ldr	r1, [pc, #104]	; (800897c <inc_lock+0x118>)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	440b      	add	r3, r1
 8008918:	3308      	adds	r3, #8
 800891a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800891c:	4a17      	ldr	r2, [pc, #92]	; (800897c <inc_lock+0x118>)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	4413      	add	r3, r2
 8008924:	330c      	adds	r3, #12
 8008926:	2200      	movs	r2, #0
 8008928:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <inc_lock+0xe0>
 8008930:	4a12      	ldr	r2, [pc, #72]	; (800897c <inc_lock+0x118>)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	4413      	add	r3, r2
 8008938:	330c      	adds	r3, #12
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <inc_lock+0xe0>
 8008940:	2300      	movs	r3, #0
 8008942:	e015      	b.n	8008970 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d108      	bne.n	800895c <inc_lock+0xf8>
 800894a:	4a0c      	ldr	r2, [pc, #48]	; (800897c <inc_lock+0x118>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	4413      	add	r3, r2
 8008952:	330c      	adds	r3, #12
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	3301      	adds	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	e001      	b.n	8008960 <inc_lock+0xfc>
 800895c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008960:	4906      	ldr	r1, [pc, #24]	; (800897c <inc_lock+0x118>)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	440b      	add	r3, r1
 8008968:	330c      	adds	r3, #12
 800896a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20002c34 	.word	0x20002c34

08008980 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3b01      	subs	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d825      	bhi.n	80089e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008994:	4a17      	ldr	r2, [pc, #92]	; (80089f4 <dec_lock+0x74>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	4413      	add	r3, r2
 800899c:	330c      	adds	r3, #12
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089a2:	89fb      	ldrh	r3, [r7, #14]
 80089a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a8:	d101      	bne.n	80089ae <dec_lock+0x2e>
 80089aa:	2300      	movs	r3, #0
 80089ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80089ae:	89fb      	ldrh	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <dec_lock+0x3a>
 80089b4:	89fb      	ldrh	r3, [r7, #14]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089ba:	4a0e      	ldr	r2, [pc, #56]	; (80089f4 <dec_lock+0x74>)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	4413      	add	r3, r2
 80089c2:	330c      	adds	r3, #12
 80089c4:	89fa      	ldrh	r2, [r7, #14]
 80089c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <dec_lock+0x5a>
 80089ce:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <dec_lock+0x74>)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	4413      	add	r3, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	737b      	strb	r3, [r7, #13]
 80089de:	e001      	b.n	80089e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089e0:	2302      	movs	r3, #2
 80089e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20002c34 	.word	0x20002c34

080089f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e010      	b.n	8008a28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a06:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <clear_lock+0x44>)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	4413      	add	r3, r2
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d105      	bne.n	8008a22 <clear_lock+0x2a>
 8008a16:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <clear_lock+0x44>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d9eb      	bls.n	8008a06 <clear_lock+0xe>
	}
}
 8008a2e:	bf00      	nop
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20002c34 	.word	0x20002c34

08008a40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	78db      	ldrb	r3, [r3, #3]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d034      	beq.n	8008abe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	7858      	ldrb	r0, [r3, #1]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a64:	2301      	movs	r3, #1
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	f7ff fd40 	bl	80084ec <disk_write>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]
 8008a76:	e022      	b.n	8008abe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	1ad2      	subs	r2, r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d217      	bcs.n	8008abe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	e010      	b.n	8008ab8 <sync_window+0x78>
					wsect += fs->fsize;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7858      	ldrb	r0, [r3, #1]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aaa:	2301      	movs	r3, #1
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	f7ff fd1d 	bl	80084ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d8eb      	bhi.n	8008a96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d01b      	beq.n	8008b18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ffad 	bl	8008a40 <sync_window>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d113      	bne.n	8008b18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7858      	ldrb	r0, [r3, #1]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008afa:	2301      	movs	r3, #1
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	f7ff fcd5 	bl	80084ac <disk_read>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ff87 	bl	8008a40 <sync_window>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d159      	bne.n	8008bf0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d149      	bne.n	8008bd8 <sync_fs+0xb4>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	791b      	ldrb	r3, [r3, #4]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d145      	bne.n	8008bd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	899b      	ldrh	r3, [r3, #12]
 8008b56:	461a      	mov	r2, r3
 8008b58:	2100      	movs	r1, #0
 8008b5a:	f7ff fda8 	bl	80086ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3338      	adds	r3, #56	; 0x38
 8008b62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff fd37 	bl	80085de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3338      	adds	r3, #56	; 0x38
 8008b74:	4921      	ldr	r1, [pc, #132]	; (8008bfc <sync_fs+0xd8>)
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fd4c 	bl	8008614 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b84:	491e      	ldr	r1, [pc, #120]	; (8008c00 <sync_fs+0xdc>)
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fd44 	bl	8008614 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3338      	adds	r3, #56	; 0x38
 8008b90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7ff fd3a 	bl	8008614 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3338      	adds	r3, #56	; 0x38
 8008ba4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7ff fd30 	bl	8008614 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7858      	ldrb	r0, [r3, #1]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f7ff fc8d 	bl	80084ec <disk_write>
			fs->fsi_flag = 0;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fca3 	bl	800852c <disk_ioctl>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <sync_fs+0xcc>
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	41615252 	.word	0x41615252
 8008c00:	61417272 	.word	0x61417272

08008c04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	3b02      	subs	r3, #2
 8008c12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d301      	bcc.n	8008c24 <clust2sect+0x20>
 8008c20:	2300      	movs	r3, #0
 8008c22:	e008      	b.n	8008c36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	fb03 f202 	mul.w	r2, r3, r2
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	4413      	add	r3, r2
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d904      	bls.n	8008c62 <get_fat+0x20>
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d302      	bcc.n	8008c68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c62:	2301      	movs	r3, #1
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e0bb      	b.n	8008de0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	f000 8083 	beq.w	8008d7e <get_fat+0x13c>
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	f300 80a7 	bgt.w	8008dcc <get_fat+0x18a>
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d002      	beq.n	8008c88 <get_fat+0x46>
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d056      	beq.n	8008d34 <get_fat+0xf2>
 8008c86:	e0a1      	b.n	8008dcc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	899b      	ldrh	r3, [r3, #12]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f7ff ff0c 	bl	8008ac8 <move_window>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 808d 	bne.w	8008dd2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	60fa      	str	r2, [r7, #12]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	8992      	ldrh	r2, [r2, #12]
 8008cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cc6:	fb01 f202 	mul.w	r2, r1, r2
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	899b      	ldrh	r3, [r3, #12]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f7ff feec 	bl	8008ac8 <move_window>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d16f      	bne.n	8008dd6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	899b      	ldrh	r3, [r3, #12]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d02:	fb01 f202 	mul.w	r2, r1, r2
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	461a      	mov	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <get_fat+0xe8>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	091b      	lsrs	r3, r3, #4
 8008d28:	e002      	b.n	8008d30 <get_fat+0xee>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d30:	617b      	str	r3, [r7, #20]
			break;
 8008d32:	e055      	b.n	8008de0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	899b      	ldrh	r3, [r3, #12]
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d48:	4413      	add	r3, r2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6938      	ldr	r0, [r7, #16]
 8008d4e:	f7ff febb 	bl	8008ac8 <move_window>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d140      	bne.n	8008dda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	8992      	ldrh	r2, [r2, #12]
 8008d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d6a:	fb00 f202 	mul.w	r2, r0, r2
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	440b      	add	r3, r1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fbf8 	bl	8008568 <ld_word>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	617b      	str	r3, [r7, #20]
			break;
 8008d7c:	e030      	b.n	8008de0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	899b      	ldrh	r3, [r3, #12]
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d92:	4413      	add	r3, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f7ff fe96 	bl	8008ac8 <move_window>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d11d      	bne.n	8008dde <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	8992      	ldrh	r2, [r2, #12]
 8008db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db4:	fb00 f202 	mul.w	r2, r0, r2
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	440b      	add	r3, r1
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fbeb 	bl	8008598 <ld_dword>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008dc8:	617b      	str	r3, [r7, #20]
			break;
 8008dca:	e009      	b.n	8008de0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e006      	b.n	8008de0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dde:	bf00      	nop
		}
	}

	return val;
 8008de0:	697b      	ldr	r3, [r7, #20]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008dea:	b590      	push	{r4, r7, lr}
 8008dec:	b089      	sub	sp, #36	; 0x24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008df6:	2302      	movs	r3, #2
 8008df8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	f240 8109 	bls.w	8009014 <put_fat+0x22a>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	f080 8103 	bcs.w	8009014 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	f000 80b6 	beq.w	8008f84 <put_fat+0x19a>
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	f300 80fb 	bgt.w	8009014 <put_fat+0x22a>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d003      	beq.n	8008e2a <put_fat+0x40>
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	f000 8083 	beq.w	8008f2e <put_fat+0x144>
 8008e28:	e0f4      	b.n	8009014 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	4413      	add	r3, r2
 8008e36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	899b      	ldrh	r3, [r3, #12]
 8008e40:	4619      	mov	r1, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e48:	4413      	add	r3, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fe3b 	bl	8008ac8 <move_window>
 8008e52:	4603      	mov	r3, r0
 8008e54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e56:	7ffb      	ldrb	r3, [r7, #31]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f040 80d4 	bne.w	8009006 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	61ba      	str	r2, [r7, #24]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	8992      	ldrh	r2, [r2, #12]
 8008e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e72:	fb00 f202 	mul.w	r2, r0, r2
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	440b      	add	r3, r1
 8008e7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <put_fat+0xb8>
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b25b      	sxtb	r3, r3
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	b25a      	sxtb	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b25b      	sxtb	r3, r3
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	e001      	b.n	8008ea6 <put_fat+0xbc>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	899b      	ldrh	r3, [r3, #12]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fdff 	bl	8008ac8 <move_window>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ece:	7ffb      	ldrb	r3, [r7, #31]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 809a 	bne.w	800900a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	899b      	ldrh	r3, [r3, #12]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ee8:	fb00 f202 	mul.w	r2, r0, r2
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	440b      	add	r3, r1
 8008ef0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <put_fat+0x11a>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e00e      	b.n	8008f22 <put_fat+0x138>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	f023 030f 	bic.w	r3, r3, #15
 8008f0e:	b25a      	sxtb	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	b25b      	sxtb	r3, r3
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	70da      	strb	r2, [r3, #3]
			break;
 8008f2c:	e072      	b.n	8009014 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	899b      	ldrh	r3, [r3, #12]
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f42:	4413      	add	r3, r2
 8008f44:	4619      	mov	r1, r3
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fdbe 	bl	8008ac8 <move_window>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f50:	7ffb      	ldrb	r3, [r7, #31]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d15b      	bne.n	800900e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	8992      	ldrh	r2, [r2, #12]
 8008f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f68:	fb00 f202 	mul.w	r2, r0, r2
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	440b      	add	r3, r1
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	b292      	uxth	r2, r2
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fb31 	bl	80085de <st_word>
			fs->wflag = 1;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	70da      	strb	r2, [r3, #3]
			break;
 8008f82:	e047      	b.n	8009014 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	899b      	ldrh	r3, [r3, #12]
 8008f8c:	089b      	lsrs	r3, r3, #2
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f98:	4413      	add	r3, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff fd93 	bl	8008ac8 <move_window>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fa6:	7ffb      	ldrb	r3, [r7, #31]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d132      	bne.n	8009012 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	8992      	ldrh	r2, [r2, #12]
 8008fc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fc4:	fb00 f202 	mul.w	r2, r0, r2
 8008fc8:	1a9b      	subs	r3, r3, r2
 8008fca:	440b      	add	r3, r1
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fae3 	bl	8008598 <ld_dword>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fd8:	4323      	orrs	r3, r4
 8008fda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	8992      	ldrh	r2, [r2, #12]
 8008fea:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fee:	fb00 f202 	mul.w	r2, r0, r2
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fb0b 	bl	8008614 <st_dword>
			fs->wflag = 1;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	70da      	strb	r2, [r3, #3]
			break;
 8009004:	e006      	b.n	8009014 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009006:	bf00      	nop
 8009008:	e004      	b.n	8009014 <put_fat+0x22a>
			if (res != FR_OK) break;
 800900a:	bf00      	nop
 800900c:	e002      	b.n	8009014 <put_fat+0x22a>
			if (res != FR_OK) break;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009012:	bf00      	nop
		}
	}
	return res;
 8009014:	7ffb      	ldrb	r3, [r7, #31]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3724      	adds	r7, #36	; 0x24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd90      	pop	{r4, r7, pc}

0800901e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b088      	sub	sp, #32
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d904      	bls.n	8009044 <remove_chain+0x26>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d301      	bcc.n	8009048 <remove_chain+0x2a>
 8009044:	2302      	movs	r3, #2
 8009046:	e04b      	b.n	80090e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800904e:	f04f 32ff 	mov.w	r2, #4294967295
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	69b8      	ldr	r0, [r7, #24]
 8009056:	f7ff fec8 	bl	8008dea <put_fat>
 800905a:	4603      	mov	r3, r0
 800905c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <remove_chain+0x4a>
 8009064:	7ffb      	ldrb	r3, [r7, #31]
 8009066:	e03b      	b.n	80090e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fde9 	bl	8008c42 <get_fat>
 8009070:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d031      	beq.n	80090dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <remove_chain+0x64>
 800907e:	2302      	movs	r3, #2
 8009080:	e02e      	b.n	80090e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009088:	d101      	bne.n	800908e <remove_chain+0x70>
 800908a:	2301      	movs	r3, #1
 800908c:	e028      	b.n	80090e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800908e:	2200      	movs	r2, #0
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	69b8      	ldr	r0, [r7, #24]
 8009094:	f7ff fea9 	bl	8008dea <put_fat>
 8009098:	4603      	mov	r3, r0
 800909a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800909c:	7ffb      	ldrb	r3, [r7, #31]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <remove_chain+0x88>
 80090a2:	7ffb      	ldrb	r3, [r7, #31]
 80090a4:	e01c      	b.n	80090e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	3b02      	subs	r3, #2
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d20b      	bcs.n	80090cc <remove_chain+0xae>
			fs->free_clst++;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d3c6      	bcc.n	8009068 <remove_chain+0x4a>
 80090da:	e000      	b.n	80090de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80090dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10d      	bne.n	800911a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <create_chain+0x2c>
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	429a      	cmp	r2, r3
 8009112:	d31b      	bcc.n	800914c <create_chain+0x64>
 8009114:	2301      	movs	r3, #1
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	e018      	b.n	800914c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fd90 	bl	8008c42 <get_fat>
 8009122:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d801      	bhi.n	800912e <create_chain+0x46>
 800912a:	2301      	movs	r3, #1
 800912c:	e070      	b.n	8009210 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d101      	bne.n	800913a <create_chain+0x52>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	e06a      	b.n	8009210 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	429a      	cmp	r2, r3
 8009142:	d201      	bcs.n	8009148 <create_chain+0x60>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	e063      	b.n	8009210 <create_chain+0x128>
		scl = clst;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	3301      	adds	r3, #1
 8009154:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	429a      	cmp	r2, r3
 800915e:	d307      	bcc.n	8009170 <create_chain+0x88>
				ncl = 2;
 8009160:	2302      	movs	r3, #2
 8009162:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	429a      	cmp	r2, r3
 800916a:	d901      	bls.n	8009170 <create_chain+0x88>
 800916c:	2300      	movs	r3, #0
 800916e:	e04f      	b.n	8009210 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fd65 	bl	8008c42 <get_fat>
 8009178:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00e      	beq.n	800919e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d003      	beq.n	800918e <create_chain+0xa6>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d101      	bne.n	8009192 <create_chain+0xaa>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	e03e      	b.n	8009210 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	429a      	cmp	r2, r3
 8009198:	d1da      	bne.n	8009150 <create_chain+0x68>
 800919a:	2300      	movs	r3, #0
 800919c:	e038      	b.n	8009210 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800919e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	69f9      	ldr	r1, [r7, #28]
 80091a6:	6938      	ldr	r0, [r7, #16]
 80091a8:	f7ff fe1f 	bl	8008dea <put_fat>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <create_chain+0xe2>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d006      	beq.n	80091ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f7ff fe12 	bl	8008dea <put_fat>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d116      	bne.n	80091fe <create_chain+0x116>
		fs->last_clst = ncl;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	3b02      	subs	r3, #2
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d804      	bhi.n	80091ee <create_chain+0x106>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	1e5a      	subs	r2, r3, #1
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	791b      	ldrb	r3, [r3, #4]
 80091f2:	f043 0301 	orr.w	r3, r3, #1
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	711a      	strb	r2, [r3, #4]
 80091fc:	e007      	b.n	800920e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d102      	bne.n	800920a <create_chain+0x122>
 8009204:	f04f 33ff 	mov.w	r3, #4294967295
 8009208:	e000      	b.n	800920c <create_chain+0x124>
 800920a:	2301      	movs	r3, #1
 800920c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800920e:	69fb      	ldr	r3, [r7, #28]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	3304      	adds	r3, #4
 800922e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	899b      	ldrh	r3, [r3, #12]
 8009234:	461a      	mov	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	fbb3 f3f2 	udiv	r3, r3, r2
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	8952      	ldrh	r2, [r2, #10]
 8009240:	fbb3 f3f2 	udiv	r3, r3, r2
 8009244:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	613a      	str	r2, [r7, #16]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <clmt_clust+0x42>
 8009256:	2300      	movs	r3, #0
 8009258:	e010      	b.n	800927c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	429a      	cmp	r2, r3
 8009260:	d307      	bcc.n	8009272 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3304      	adds	r3, #4
 800926e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009270:	e7e9      	b.n	8009246 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009272:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	4413      	add	r3, r2
}
 800927c:	4618      	mov	r0, r3
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800929e:	d204      	bcs.n	80092aa <dir_sdi+0x22>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	f003 031f 	and.w	r3, r3, #31
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <dir_sdi+0x26>
		return FR_INT_ERR;
 80092aa:	2302      	movs	r3, #2
 80092ac:	e071      	b.n	8009392 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <dir_sdi+0x46>
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d902      	bls.n	80092ce <dir_sdi+0x46>
		clst = fs->dirbase;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10c      	bne.n	80092ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	8912      	ldrh	r2, [r2, #8]
 80092dc:	4293      	cmp	r3, r2
 80092de:	d301      	bcc.n	80092e4 <dir_sdi+0x5c>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e056      	b.n	8009392 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	61da      	str	r2, [r3, #28]
 80092ec:	e02d      	b.n	800934a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	895b      	ldrh	r3, [r3, #10]
 80092f2:	461a      	mov	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	899b      	ldrh	r3, [r3, #12]
 80092f8:	fb02 f303 	mul.w	r3, r2, r3
 80092fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092fe:	e019      	b.n	8009334 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6979      	ldr	r1, [r7, #20]
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff fc9c 	bl	8008c42 <get_fat>
 800930a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009312:	d101      	bne.n	8009318 <dir_sdi+0x90>
 8009314:	2301      	movs	r3, #1
 8009316:	e03c      	b.n	8009392 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d904      	bls.n	8009328 <dir_sdi+0xa0>
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	429a      	cmp	r2, r3
 8009326:	d301      	bcc.n	800932c <dir_sdi+0xa4>
 8009328:	2302      	movs	r3, #2
 800932a:	e032      	b.n	8009392 <dir_sdi+0x10a>
			ofs -= csz;
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d2e1      	bcs.n	8009300 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	6938      	ldr	r0, [r7, #16]
 8009340:	f7ff fc60 	bl	8008c04 <clust2sect>
 8009344:	4602      	mov	r2, r0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <dir_sdi+0xd4>
 8009358:	2302      	movs	r3, #2
 800935a:	e01a      	b.n	8009392 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	899b      	ldrh	r3, [r3, #12]
 8009364:	4619      	mov	r1, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	fbb3 f3f1 	udiv	r3, r3, r1
 800936c:	441a      	add	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	461a      	mov	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	fbb3 f0f2 	udiv	r0, r3, r2
 8009384:	fb00 f202 	mul.w	r2, r0, r2
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	18ca      	adds	r2, r1, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	3320      	adds	r3, #32
 80093b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <dir_next+0x28>
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093c0:	d301      	bcc.n	80093c6 <dir_next+0x2c>
 80093c2:	2304      	movs	r3, #4
 80093c4:	e0bb      	b.n	800953e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	461a      	mov	r2, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80093d2:	fb01 f202 	mul.w	r2, r1, r2
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f040 809d 	bne.w	8009518 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10b      	bne.n	8009408 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	095b      	lsrs	r3, r3, #5
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	8912      	ldrh	r2, [r2, #8]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	f0c0 808d 	bcc.w	8009518 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	61da      	str	r2, [r3, #28]
 8009404:	2304      	movs	r3, #4
 8009406:	e09a      	b.n	800953e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	899b      	ldrh	r3, [r3, #12]
 800940c:	461a      	mov	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	fbb3 f3f2 	udiv	r3, r3, r2
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	8952      	ldrh	r2, [r2, #10]
 8009418:	3a01      	subs	r2, #1
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d17b      	bne.n	8009518 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7ff fc0a 	bl	8008c42 <get_fat>
 800942e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d801      	bhi.n	800943a <dir_next+0xa0>
 8009436:	2302      	movs	r3, #2
 8009438:	e081      	b.n	800953e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d101      	bne.n	8009446 <dir_next+0xac>
 8009442:	2301      	movs	r3, #1
 8009444:	e07b      	b.n	800953e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	429a      	cmp	r2, r3
 800944e:	d359      	bcc.n	8009504 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d104      	bne.n	8009460 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	61da      	str	r2, [r3, #28]
 800945c:	2304      	movs	r3, #4
 800945e:	e06e      	b.n	800953e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f7ff fe3d 	bl	80090e8 <create_chain>
 800946e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <dir_next+0xe0>
 8009476:	2307      	movs	r3, #7
 8009478:	e061      	b.n	800953e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <dir_next+0xea>
 8009480:	2302      	movs	r3, #2
 8009482:	e05c      	b.n	800953e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d101      	bne.n	8009490 <dir_next+0xf6>
 800948c:	2301      	movs	r3, #1
 800948e:	e056      	b.n	800953e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fad5 	bl	8008a40 <sync_window>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <dir_next+0x106>
 800949c:	2301      	movs	r3, #1
 800949e:	e04e      	b.n	800953e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	899b      	ldrh	r3, [r3, #12]
 80094aa:	461a      	mov	r2, r3
 80094ac:	2100      	movs	r1, #0
 80094ae:	f7ff f8fe 	bl	80086ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094b2:	2300      	movs	r3, #0
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	6979      	ldr	r1, [r7, #20]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fba3 	bl	8008c04 <clust2sect>
 80094be:	4602      	mov	r2, r0
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	635a      	str	r2, [r3, #52]	; 0x34
 80094c4:	e012      	b.n	80094ec <dir_next+0x152>
						fs->wflag = 1;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fab7 	bl	8008a40 <sync_window>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <dir_next+0x142>
 80094d8:	2301      	movs	r3, #1
 80094da:	e030      	b.n	800953e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3301      	adds	r3, #1
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	635a      	str	r2, [r3, #52]	; 0x34
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	895b      	ldrh	r3, [r3, #10]
 80094f0:	461a      	mov	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d3e6      	bcc.n	80094c6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff fb79 	bl	8008c04 <clust2sect>
 8009512:	4602      	mov	r2, r0
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	899b      	ldrh	r3, [r3, #12]
 8009528:	461a      	mov	r2, r3
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009530:	fb00 f202 	mul.w	r2, r0, r2
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	18ca      	adds	r2, r1, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff fe95 	bl	8009288 <dir_sdi>
 800955e:	4603      	mov	r3, r0
 8009560:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d12b      	bne.n	80095c0 <dir_alloc+0x7a>
		n = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	4619      	mov	r1, r3
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff faa8 	bl	8008ac8 <move_window>
 8009578:	4603      	mov	r3, r0
 800957a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d11d      	bne.n	80095be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2be5      	cmp	r3, #229	; 0xe5
 800958a:	d004      	beq.n	8009596 <dir_alloc+0x50>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d107      	bne.n	80095a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	3301      	adds	r3, #1
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d102      	bne.n	80095aa <dir_alloc+0x64>
 80095a4:	e00c      	b.n	80095c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80095aa:	2101      	movs	r1, #1
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff fef4 	bl	800939a <dir_next>
 80095b2:	4603      	mov	r3, r0
 80095b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0d7      	beq.n	800956c <dir_alloc+0x26>
 80095bc:	e000      	b.n	80095c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80095be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d101      	bne.n	80095ca <dir_alloc+0x84>
 80095c6:	2307      	movs	r3, #7
 80095c8:	75fb      	strb	r3, [r7, #23]
	return res;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	331a      	adds	r3, #26
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe ffc0 	bl	8008568 <ld_word>
 80095e8:	4603      	mov	r3, r0
 80095ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d109      	bne.n	8009608 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	3314      	adds	r3, #20
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe ffb5 	bl	8008568 <ld_word>
 80095fe:	4603      	mov	r3, r0
 8009600:	041b      	lsls	r3, r3, #16
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009608:	68fb      	ldr	r3, [r7, #12]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	331a      	adds	r3, #26
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	b292      	uxth	r2, r2
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe ffd8 	bl	80085de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d109      	bne.n	800964a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f103 0214 	add.w	r2, r3, #20
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	0c1b      	lsrs	r3, r3, #16
 8009640:	b29b      	uxth	r3, r3
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe ffca 	bl	80085de <st_word>
	}
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009654:	b590      	push	{r4, r7, lr}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	331a      	adds	r3, #26
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe ff80 	bl	8008568 <ld_word>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <cmp_lfn+0x1e>
 800966e:	2300      	movs	r3, #0
 8009670:	e059      	b.n	8009726 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800967a:	1e5a      	subs	r2, r3, #1
 800967c:	4613      	mov	r3, r2
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009688:	2301      	movs	r3, #1
 800968a:	81fb      	strh	r3, [r7, #14]
 800968c:	2300      	movs	r3, #0
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	e033      	b.n	80096fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009692:	4a27      	ldr	r2, [pc, #156]	; (8009730 <cmp_lfn+0xdc>)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	4413      	add	r3, r2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	4413      	add	r3, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe ff61 	bl	8008568 <ld_word>
 80096a6:	4603      	mov	r3, r0
 80096a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80096aa:	89fb      	ldrh	r3, [r7, #14]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01a      	beq.n	80096e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2bfe      	cmp	r3, #254	; 0xfe
 80096b4:	d812      	bhi.n	80096dc <cmp_lfn+0x88>
 80096b6:	89bb      	ldrh	r3, [r7, #12]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 fe11 	bl	800b2e0 <ff_wtoupper>
 80096be:	4603      	mov	r3, r0
 80096c0:	461c      	mov	r4, r3
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	617a      	str	r2, [r7, #20]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 fe05 	bl	800b2e0 <ff_wtoupper>
 80096d6:	4603      	mov	r3, r0
 80096d8:	429c      	cmp	r4, r3
 80096da:	d001      	beq.n	80096e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80096dc:	2300      	movs	r3, #0
 80096de:	e022      	b.n	8009726 <cmp_lfn+0xd2>
			}
			wc = uc;
 80096e0:	89bb      	ldrh	r3, [r7, #12]
 80096e2:	81fb      	strh	r3, [r7, #14]
 80096e4:	e006      	b.n	80096f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80096e6:	89bb      	ldrh	r3, [r7, #12]
 80096e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d001      	beq.n	80096f4 <cmp_lfn+0xa0>
 80096f0:	2300      	movs	r3, #0
 80096f2:	e018      	b.n	8009726 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3301      	adds	r3, #1
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b0c      	cmp	r3, #12
 80096fe:	d9c8      	bls.n	8009692 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <cmp_lfn+0xd0>
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <cmp_lfn+0xd0>
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <cmp_lfn+0xd0>
 8009720:	2300      	movs	r3, #0
 8009722:	e000      	b.n	8009726 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009724:	2301      	movs	r3, #1
}
 8009726:	4618      	mov	r0, r3
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	bd90      	pop	{r4, r7, pc}
 800972e:	bf00      	nop
 8009730:	0801ec9c 	.word	0x0801ec9c

08009734 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4611      	mov	r1, r2
 8009740:	461a      	mov	r2, r3
 8009742:	460b      	mov	r3, r1
 8009744:	71fb      	strb	r3, [r7, #7]
 8009746:	4613      	mov	r3, r2
 8009748:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	330d      	adds	r3, #13
 800974e:	79ba      	ldrb	r2, [r7, #6]
 8009750:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	330b      	adds	r3, #11
 8009756:	220f      	movs	r2, #15
 8009758:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	330c      	adds	r3, #12
 800975e:	2200      	movs	r2, #0
 8009760:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	331a      	adds	r3, #26
 8009766:	2100      	movs	r1, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe ff38 	bl	80085de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	1e5a      	subs	r2, r3, #1
 8009772:	4613      	mov	r3, r2
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	82fb      	strh	r3, [r7, #22]
 8009782:	2300      	movs	r3, #0
 8009784:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009786:	8afb      	ldrh	r3, [r7, #22]
 8009788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800978c:	4293      	cmp	r3, r2
 800978e:	d007      	beq.n	80097a0 <put_lfn+0x6c>
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	61fa      	str	r2, [r7, #28]
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80097a0:	4a17      	ldr	r2, [pc, #92]	; (8009800 <put_lfn+0xcc>)
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	4413      	add	r3, r2
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	8afa      	ldrh	r2, [r7, #22]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe ff13 	bl	80085de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80097b8:	8afb      	ldrh	r3, [r7, #22]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d102      	bne.n	80097c4 <put_lfn+0x90>
 80097be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	3301      	adds	r3, #1
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	d9da      	bls.n	8009786 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80097d0:	8afb      	ldrh	r3, [r7, #22]
 80097d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d006      	beq.n	80097e8 <put_lfn+0xb4>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d103      	bne.n	80097f0 <put_lfn+0xbc>
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	79fa      	ldrb	r2, [r7, #7]
 80097f4:	701a      	strb	r2, [r3, #0]
}
 80097f6:	bf00      	nop
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	0801ec9c 	.word	0x0801ec9c

08009804 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08c      	sub	sp, #48	; 0x30
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009812:	220b      	movs	r2, #11
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7fe ff28 	bl	800866c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b05      	cmp	r3, #5
 8009820:	d92b      	bls.n	800987a <gen_numname+0x76>
		sr = seq;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009826:	e022      	b.n	800986e <gen_numname+0x6a>
			wc = *lfn++;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	1c9a      	adds	r2, r3, #2
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009832:	2300      	movs	r3, #0
 8009834:	62bb      	str	r3, [r7, #40]	; 0x28
 8009836:	e017      	b.n	8009868 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	005a      	lsls	r2, r3, #1
 800983c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009846:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <gen_numname+0x5e>
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800985c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009860:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	3301      	adds	r3, #1
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	2b0f      	cmp	r3, #15
 800986c:	d9e4      	bls.n	8009838 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1d8      	bne.n	8009828 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800987a:	2307      	movs	r3, #7
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	b2db      	uxtb	r3, r3
 8009888:	3330      	adds	r3, #48	; 0x30
 800988a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800988e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009892:	2b39      	cmp	r3, #57	; 0x39
 8009894:	d904      	bls.n	80098a0 <gen_numname+0x9c>
 8009896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800989a:	3307      	adds	r3, #7
 800989c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	1e5a      	subs	r2, r3, #1
 80098a4:	62ba      	str	r2, [r7, #40]	; 0x28
 80098a6:	3330      	adds	r3, #48	; 0x30
 80098a8:	443b      	add	r3, r7
 80098aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80098ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	091b      	lsrs	r3, r3, #4
 80098b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1df      	bne.n	800987e <gen_numname+0x7a>
	ns[i] = '~';
 80098be:	f107 0214 	add.w	r2, r7, #20
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	4413      	add	r3, r2
 80098c6:	227e      	movs	r2, #126	; 0x7e
 80098c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80098ca:	2300      	movs	r3, #0
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
 80098ce:	e002      	b.n	80098d6 <gen_numname+0xd2>
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	3301      	adds	r3, #1
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
 80098d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	429a      	cmp	r2, r3
 80098dc:	d205      	bcs.n	80098ea <gen_numname+0xe6>
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	4413      	add	r3, r2
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d1f2      	bne.n	80098d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	2b07      	cmp	r3, #7
 80098ee:	d807      	bhi.n	8009900 <gen_numname+0xfc>
 80098f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80098f6:	3330      	adds	r3, #48	; 0x30
 80098f8:	443b      	add	r3, r7
 80098fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80098fe:	e000      	b.n	8009902 <gen_numname+0xfe>
 8009900:	2120      	movs	r1, #32
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	627a      	str	r2, [r7, #36]	; 0x24
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	4413      	add	r3, r2
 800990c:	460a      	mov	r2, r1
 800990e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	2b07      	cmp	r3, #7
 8009914:	d9e9      	bls.n	80098ea <gen_numname+0xe6>
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	3730      	adds	r7, #48	; 0x30
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800992c:	230b      	movs	r3, #11
 800992e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	0852      	lsrs	r2, r2, #1
 8009936:	01db      	lsls	r3, r3, #7
 8009938:	4313      	orrs	r3, r2
 800993a:	b2da      	uxtb	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1c59      	adds	r1, r3, #1
 8009940:	6079      	str	r1, [r7, #4]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3b01      	subs	r3, #1
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1ed      	bne.n	8009930 <sum_sfn+0x10>
	return sum;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b086      	sub	sp, #24
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009970:	2100      	movs	r1, #0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff fc88 	bl	8009288 <dir_sdi>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <dir_find+0x24>
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	e0a9      	b.n	8009ada <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009986:	23ff      	movs	r3, #255	; 0xff
 8009988:	753b      	strb	r3, [r7, #20]
 800998a:	7d3b      	ldrb	r3, [r7, #20]
 800998c:	757b      	strb	r3, [r7, #21]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	4619      	mov	r1, r3
 800999c:	6938      	ldr	r0, [r7, #16]
 800999e:	f7ff f893 	bl	8008ac8 <move_window>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 8090 	bne.w	8009ace <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099b6:	7dbb      	ldrb	r3, [r7, #22]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <dir_find+0x60>
 80099bc:	2304      	movs	r3, #4
 80099be:	75fb      	strb	r3, [r7, #23]
 80099c0:	e08a      	b.n	8009ad8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	330b      	adds	r3, #11
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ce:	73fb      	strb	r3, [r7, #15]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	7bfa      	ldrb	r2, [r7, #15]
 80099d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80099d6:	7dbb      	ldrb	r3, [r7, #22]
 80099d8:	2be5      	cmp	r3, #229	; 0xe5
 80099da:	d007      	beq.n	80099ec <dir_find+0x8a>
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d009      	beq.n	80099fa <dir_find+0x98>
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	2b0f      	cmp	r3, #15
 80099ea:	d006      	beq.n	80099fa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099ec:	23ff      	movs	r3, #255	; 0xff
 80099ee:	757b      	strb	r3, [r7, #21]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f04f 32ff 	mov.w	r2, #4294967295
 80099f6:	631a      	str	r2, [r3, #48]	; 0x30
 80099f8:	e05e      	b.n	8009ab8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	2b0f      	cmp	r3, #15
 80099fe:	d136      	bne.n	8009a6e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d154      	bne.n	8009ab8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009a0e:	7dbb      	ldrb	r3, [r7, #22]
 8009a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00d      	beq.n	8009a34 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	7b5b      	ldrb	r3, [r3, #13]
 8009a1e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009a20:	7dbb      	ldrb	r3, [r7, #22]
 8009a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a26:	75bb      	strb	r3, [r7, #22]
 8009a28:	7dbb      	ldrb	r3, [r7, #22]
 8009a2a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	695a      	ldr	r2, [r3, #20]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a34:	7dba      	ldrb	r2, [r7, #22]
 8009a36:	7d7b      	ldrb	r3, [r7, #21]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d115      	bne.n	8009a68 <dir_find+0x106>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	330d      	adds	r3, #13
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	7d3a      	ldrb	r2, [r7, #20]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d10e      	bne.n	8009a68 <dir_find+0x106>
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	691a      	ldr	r2, [r3, #16]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7ff fdfd 	bl	8009654 <cmp_lfn>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <dir_find+0x106>
 8009a60:	7d7b      	ldrb	r3, [r7, #21]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	e000      	b.n	8009a6a <dir_find+0x108>
 8009a68:	23ff      	movs	r3, #255	; 0xff
 8009a6a:	757b      	strb	r3, [r7, #21]
 8009a6c:	e024      	b.n	8009ab8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a6e:	7d7b      	ldrb	r3, [r7, #21]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d109      	bne.n	8009a88 <dir_find+0x126>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff ff51 	bl	8009920 <sum_sfn>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	7d3b      	ldrb	r3, [r7, #20]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d024      	beq.n	8009ad2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10a      	bne.n	8009aac <dir_find+0x14a>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a18      	ldr	r0, [r3, #32]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3324      	adds	r3, #36	; 0x24
 8009a9e:	220b      	movs	r2, #11
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f7fe fe1f 	bl	80086e4 <mem_cmp>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d014      	beq.n	8009ad6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009aac:	23ff      	movs	r3, #255	; 0xff
 8009aae:	757b      	strb	r3, [r7, #21]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fc6d 	bl	800939a <dir_next>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f43f af65 	beq.w	8009996 <dir_find+0x34>
 8009acc:	e004      	b.n	8009ad8 <dir_find+0x176>
		if (res != FR_OK) break;
 8009ace:	bf00      	nop
 8009ad0:	e002      	b.n	8009ad8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009ad6:	bf00      	nop

	return res;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08c      	sub	sp, #48	; 0x30
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009af8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <dir_register+0x20>
 8009b00:	2306      	movs	r3, #6
 8009b02:	e0e0      	b.n	8009cc6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009b04:	2300      	movs	r3, #0
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
 8009b08:	e002      	b.n	8009b10 <dir_register+0x2c>
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f4      	bne.n	8009b0a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009b26:	f107 030c 	add.w	r3, r7, #12
 8009b2a:	220c      	movs	r2, #12
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe fd9d 	bl	800866c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d032      	beq.n	8009ba2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2240      	movs	r2, #64	; 0x40
 8009b40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b44:	2301      	movs	r3, #1
 8009b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b48:	e016      	b.n	8009b78 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	f107 010c 	add.w	r1, r7, #12
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	f7ff fe53 	bl	8009804 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff feff 	bl	8009962 <dir_find>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	3301      	adds	r3, #1
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	2b63      	cmp	r3, #99	; 0x63
 8009b7c:	d9e5      	bls.n	8009b4a <dir_register+0x66>
 8009b7e:	e000      	b.n	8009b82 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009b80:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	2b64      	cmp	r3, #100	; 0x64
 8009b86:	d101      	bne.n	8009b8c <dir_register+0xa8>
 8009b88:	2307      	movs	r3, #7
 8009b8a:	e09c      	b.n	8009cc6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d002      	beq.n	8009b9a <dir_register+0xb6>
 8009b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b98:	e095      	b.n	8009cc6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b9a:	7dfa      	ldrb	r2, [r7, #23]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <dir_register+0xd8>
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	330c      	adds	r3, #12
 8009bb0:	4a47      	ldr	r2, [pc, #284]	; (8009cd0 <dir_register+0x1ec>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	3301      	adds	r3, #1
 8009bba:	e000      	b.n	8009bbe <dir_register+0xda>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009bc0:	6a39      	ldr	r1, [r7, #32]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fcbf 	bl	8009546 <dir_alloc>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d148      	bne.n	8009c68 <dir_register+0x184>
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	623b      	str	r3, [r7, #32]
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d042      	beq.n	8009c68 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695a      	ldr	r2, [r3, #20]
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	015b      	lsls	r3, r3, #5
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fb4a 	bl	8009288 <dir_sdi>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d132      	bne.n	8009c68 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3324      	adds	r3, #36	; 0x24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fe8a 	bl	8009920 <sum_sfn>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	4619      	mov	r1, r3
 8009c16:	69f8      	ldr	r0, [r7, #28]
 8009c18:	f7fe ff56 	bl	8008ac8 <move_window>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d11d      	bne.n	8009c66 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	6918      	ldr	r0, [r3, #16]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a19      	ldr	r1, [r3, #32]
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	7efb      	ldrb	r3, [r7, #27]
 8009c38:	f7ff fd7c 	bl	8009734 <put_lfn>
				fs->wflag = 1;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c42:	2100      	movs	r1, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff fba8 	bl	800939a <dir_next>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d107      	bne.n	8009c68 <dir_register+0x184>
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	623b      	str	r3, [r7, #32]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1d5      	bne.n	8009c10 <dir_register+0x12c>
 8009c64:	e000      	b.n	8009c68 <dir_register+0x184>
				if (res != FR_OK) break;
 8009c66:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d128      	bne.n	8009cc2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	4619      	mov	r1, r3
 8009c76:	69f8      	ldr	r0, [r7, #28]
 8009c78:	f7fe ff26 	bl	8008ac8 <move_window>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d11b      	bne.n	8009cc2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	2100      	movs	r1, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fd0b 	bl	80086ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a18      	ldr	r0, [r3, #32]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3324      	adds	r3, #36	; 0x24
 8009ca0:	220b      	movs	r2, #11
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f7fe fce2 	bl	800866c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	f002 0218 	and.w	r2, r2, #24
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3730      	adds	r7, #48	; 0x30
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	4ec4ec4f 	.word	0x4ec4ec4f

08009cd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08a      	sub	sp, #40	; 0x28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	61ba      	str	r2, [r7, #24]
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d04:	2b1f      	cmp	r3, #31
 8009d06:	d940      	bls.n	8009d8a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8009d0c:	d006      	beq.n	8009d1c <create_name+0x48>
 8009d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d10:	2b5c      	cmp	r3, #92	; 0x5c
 8009d12:	d110      	bne.n	8009d36 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d14:	e002      	b.n	8009d1c <create_name+0x48>
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	61bb      	str	r3, [r7, #24]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	4413      	add	r3, r2
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b2f      	cmp	r3, #47	; 0x2f
 8009d26:	d0f6      	beq.n	8009d16 <create_name+0x42>
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b5c      	cmp	r3, #92	; 0x5c
 8009d32:	d0f0      	beq.n	8009d16 <create_name+0x42>
			break;
 8009d34:	e02a      	b.n	8009d8c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2bfe      	cmp	r3, #254	; 0xfe
 8009d3a:	d901      	bls.n	8009d40 <create_name+0x6c>
 8009d3c:	2306      	movs	r3, #6
 8009d3e:	e17d      	b.n	800a03c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d48:	2101      	movs	r1, #1
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fa8c 	bl	800b268 <ff_convert>
 8009d50:	4603      	mov	r3, r0
 8009d52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <create_name+0x8a>
 8009d5a:	2306      	movs	r3, #6
 8009d5c:	e16e      	b.n	800a03c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d60:	2b7f      	cmp	r3, #127	; 0x7f
 8009d62:	d809      	bhi.n	8009d78 <create_name+0xa4>
 8009d64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d66:	4619      	mov	r1, r3
 8009d68:	488d      	ldr	r0, [pc, #564]	; (8009fa0 <create_name+0x2cc>)
 8009d6a:	f7fe fce2 	bl	8008732 <chk_chr>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <create_name+0xa4>
 8009d74:	2306      	movs	r3, #6
 8009d76:	e161      	b.n	800a03c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	617a      	str	r2, [r7, #20]
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009d88:	e7b4      	b.n	8009cf4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009d8a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	441a      	add	r2, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d98:	2b1f      	cmp	r3, #31
 8009d9a:	d801      	bhi.n	8009da0 <create_name+0xcc>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	e000      	b.n	8009da2 <create_name+0xce>
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009da6:	e011      	b.n	8009dcc <create_name+0xf8>
		w = lfn[di - 1];
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009dae:	3b01      	subs	r3, #1
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d002      	beq.n	8009dc6 <create_name+0xf2>
 8009dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc4:	d106      	bne.n	8009dd4 <create_name+0x100>
		di--;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1ea      	bne.n	8009da8 <create_name+0xd4>
 8009dd2:	e000      	b.n	8009dd6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009dd4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <create_name+0x118>
 8009de8:	2306      	movs	r3, #6
 8009dea:	e127      	b.n	800a03c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	220b      	movs	r2, #11
 8009df2:	2120      	movs	r1, #32
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fc5a 	bl	80086ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61bb      	str	r3, [r7, #24]
 8009dfe:	e002      	b.n	8009e06 <create_name+0x132>
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61bb      	str	r3, [r7, #24]
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d0f5      	beq.n	8009e00 <create_name+0x12c>
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e20:	d0ee      	beq.n	8009e00 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <create_name+0x168>
 8009e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e2c:	f043 0303 	orr.w	r3, r3, #3
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009e34:	e002      	b.n	8009e3c <create_name+0x168>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d009      	beq.n	8009e56 <create_name+0x182>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	2b2e      	cmp	r3, #46	; 0x2e
 8009e54:	d1ef      	bne.n	8009e36 <create_name+0x162>

	i = b = 0; ni = 8;
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	623b      	str	r3, [r7, #32]
 8009e60:	2308      	movs	r3, #8
 8009e62:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	61ba      	str	r2, [r7, #24]
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 8090 	beq.w	8009f9c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d006      	beq.n	8009e90 <create_name+0x1bc>
 8009e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e84:	2b2e      	cmp	r3, #46	; 0x2e
 8009e86:	d10a      	bne.n	8009e9e <create_name+0x1ca>
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d006      	beq.n	8009e9e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e94:	f043 0303 	orr.w	r3, r3, #3
 8009e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e9c:	e07d      	b.n	8009f9a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e9e:	6a3a      	ldr	r2, [r7, #32]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d203      	bcs.n	8009eae <create_name+0x1da>
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d123      	bne.n	8009ef6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	2b0b      	cmp	r3, #11
 8009eb2:	d106      	bne.n	8009ec2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb8:	f043 0303 	orr.w	r3, r3, #3
 8009ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ec0:	e075      	b.n	8009fae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d005      	beq.n	8009ed6 <create_name+0x202>
 8009eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ece:	f043 0303 	orr.w	r3, r3, #3
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d866      	bhi.n	8009fac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	623b      	str	r3, [r7, #32]
 8009ee6:	230b      	movs	r3, #11
 8009ee8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ef4:	e051      	b.n	8009f9a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8009efa:	d914      	bls.n	8009f26 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 f9b1 	bl	800b268 <ff_convert>
 8009f06:	4603      	mov	r3, r0
 8009f08:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d004      	beq.n	8009f1a <create_name+0x246>
 8009f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f12:	3b80      	subs	r3, #128	; 0x80
 8009f14:	4a23      	ldr	r2, [pc, #140]	; (8009fa4 <create_name+0x2d0>)
 8009f16:	5cd3      	ldrb	r3, [r2, r3]
 8009f18:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f1e:	f043 0302 	orr.w	r3, r3, #2
 8009f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <create_name+0x268>
 8009f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f2e:	4619      	mov	r1, r3
 8009f30:	481d      	ldr	r0, [pc, #116]	; (8009fa8 <create_name+0x2d4>)
 8009f32:	f7fe fbfe 	bl	8008732 <chk_chr>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d008      	beq.n	8009f4e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009f3c:	235f      	movs	r3, #95	; 0x5f
 8009f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f44:	f043 0303 	orr.w	r3, r3, #3
 8009f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f4c:	e01b      	b.n	8009f86 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	d909      	bls.n	8009f68 <create_name+0x294>
 8009f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f56:	2b5a      	cmp	r3, #90	; 0x5a
 8009f58:	d806      	bhi.n	8009f68 <create_name+0x294>
					b |= 2;
 8009f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f66:	e00e      	b.n	8009f86 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f6a:	2b60      	cmp	r3, #96	; 0x60
 8009f6c:	d90b      	bls.n	8009f86 <create_name+0x2b2>
 8009f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f70:	2b7a      	cmp	r3, #122	; 0x7a
 8009f72:	d808      	bhi.n	8009f86 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f82:	3b20      	subs	r3, #32
 8009f84:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	623a      	str	r2, [r7, #32]
 8009f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f8e:	b2d1      	uxtb	r1, r2
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	460a      	mov	r2, r1
 8009f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f9a:	e763      	b.n	8009e64 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f9c:	bf00      	nop
 8009f9e:	e006      	b.n	8009fae <create_name+0x2da>
 8009fa0:	0800b6bc 	.word	0x0800b6bc
 8009fa4:	0801ec1c 	.word	0x0801ec1c
 8009fa8:	0800b6c8 	.word	0x0800b6c8
			if (si > di) break;			/* No extension */
 8009fac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fb4:	2be5      	cmp	r3, #229	; 0xe5
 8009fb6:	d103      	bne.n	8009fc0 <create_name+0x2ec>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2205      	movs	r2, #5
 8009fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	2b08      	cmp	r3, #8
 8009fc4:	d104      	bne.n	8009fd0 <create_name+0x2fc>
 8009fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fd4:	f003 030c 	and.w	r3, r3, #12
 8009fd8:	2b0c      	cmp	r3, #12
 8009fda:	d005      	beq.n	8009fe8 <create_name+0x314>
 8009fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d105      	bne.n	8009ff4 <create_name+0x320>
 8009fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fec:	f043 0302 	orr.w	r3, r3, #2
 8009ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d117      	bne.n	800a030 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d105      	bne.n	800a018 <create_name+0x344>
 800a00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a010:	f043 0310 	orr.w	r3, r3, #16
 800a014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	2b04      	cmp	r3, #4
 800a022:	d105      	bne.n	800a030 <create_name+0x35c>
 800a024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a028:	f043 0308 	orr.w	r3, r3, #8
 800a02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a036:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a03a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3728      	adds	r7, #40	; 0x28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a058:	e002      	b.n	800a060 <follow_path+0x1c>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	3301      	adds	r3, #1
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b2f      	cmp	r3, #47	; 0x2f
 800a066:	d0f8      	beq.n	800a05a <follow_path+0x16>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b5c      	cmp	r3, #92	; 0x5c
 800a06e:	d0f4      	beq.n	800a05a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2200      	movs	r2, #0
 800a074:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b1f      	cmp	r3, #31
 800a07c:	d80a      	bhi.n	800a094 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2280      	movs	r2, #128	; 0x80
 800a082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a086:	2100      	movs	r1, #0
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff f8fd 	bl	8009288 <dir_sdi>
 800a08e:	4603      	mov	r3, r0
 800a090:	75fb      	strb	r3, [r7, #23]
 800a092:	e048      	b.n	800a126 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a094:	463b      	mov	r3, r7
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff fe1b 	bl	8009cd4 <create_name>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d139      	bne.n	800a11c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fc5a 	bl	8009962 <dir_find>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d12c      	bne.n	800a120 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d127      	bne.n	800a120 <follow_path+0xdc>
 800a0d0:	2305      	movs	r3, #5
 800a0d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0d4:	e024      	b.n	800a120 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0d6:	7afb      	ldrb	r3, [r7, #11]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d121      	bne.n	800a124 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	799b      	ldrb	r3, [r3, #6]
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0ec:	2305      	movs	r3, #5
 800a0ee:	75fb      	strb	r3, [r7, #23]
 800a0f0:	e019      	b.n	800a126 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	8992      	ldrh	r2, [r2, #12]
 800a100:	fbb3 f0f2 	udiv	r0, r3, r2
 800a104:	fb00 f202 	mul.w	r2, r0, r2
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	440b      	add	r3, r1
 800a10c:	4619      	mov	r1, r3
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff fa60 	bl	80095d4 <ld_clust>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a11a:	e7bb      	b.n	800a094 <follow_path+0x50>
			if (res != FR_OK) break;
 800a11c:	bf00      	nop
 800a11e:	e002      	b.n	800a126 <follow_path+0xe2>
				break;
 800a120:	bf00      	nop
 800a122:	e000      	b.n	800a126 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a124:	bf00      	nop
			}
		}
	}

	return res;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d031      	beq.n	800a1aa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e002      	b.n	800a154 <get_ldnumber+0x24>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	3301      	adds	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b1f      	cmp	r3, #31
 800a15a:	d903      	bls.n	800a164 <get_ldnumber+0x34>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b3a      	cmp	r3, #58	; 0x3a
 800a162:	d1f4      	bne.n	800a14e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b3a      	cmp	r3, #58	; 0x3a
 800a16a:	d11c      	bne.n	800a1a6 <get_ldnumber+0x76>
			tp = *path;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	60fa      	str	r2, [r7, #12]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	3b30      	subs	r3, #48	; 0x30
 800a17c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b09      	cmp	r3, #9
 800a182:	d80e      	bhi.n	800a1a2 <get_ldnumber+0x72>
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d10a      	bne.n	800a1a2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d107      	bne.n	800a1a2 <get_ldnumber+0x72>
					vol = (int)i;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	3301      	adds	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	e002      	b.n	800a1ac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1aa:	693b      	ldr	r3, [r7, #16]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	70da      	strb	r2, [r3, #3]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fe fc78 	bl	8008ac8 <move_window>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <check_fs+0x2a>
 800a1de:	2304      	movs	r3, #4
 800a1e0:	e038      	b.n	800a254 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3338      	adds	r3, #56	; 0x38
 800a1e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe f9bc 	bl	8008568 <ld_word>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d001      	beq.n	800a200 <check_fs+0x48>
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e029      	b.n	800a254 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a206:	2be9      	cmp	r3, #233	; 0xe9
 800a208:	d009      	beq.n	800a21e <check_fs+0x66>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a210:	2beb      	cmp	r3, #235	; 0xeb
 800a212:	d11e      	bne.n	800a252 <check_fs+0x9a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a21a:	2b90      	cmp	r3, #144	; 0x90
 800a21c:	d119      	bne.n	800a252 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3338      	adds	r3, #56	; 0x38
 800a222:	3336      	adds	r3, #54	; 0x36
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe f9b7 	bl	8008598 <ld_dword>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a230:	4a0a      	ldr	r2, [pc, #40]	; (800a25c <check_fs+0xa4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d101      	bne.n	800a23a <check_fs+0x82>
 800a236:	2300      	movs	r3, #0
 800a238:	e00c      	b.n	800a254 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3338      	adds	r3, #56	; 0x38
 800a23e:	3352      	adds	r3, #82	; 0x52
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe f9a9 	bl	8008598 <ld_dword>
 800a246:	4603      	mov	r3, r0
 800a248:	4a05      	ldr	r2, [pc, #20]	; (800a260 <check_fs+0xa8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d101      	bne.n	800a252 <check_fs+0x9a>
 800a24e:	2300      	movs	r3, #0
 800a250:	e000      	b.n	800a254 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a252:	2302      	movs	r3, #2
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	00544146 	.word	0x00544146
 800a260:	33544146 	.word	0x33544146

0800a264 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b096      	sub	sp, #88	; 0x58
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff ff59 	bl	800a130 <get_ldnumber>
 800a27e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a282:	2b00      	cmp	r3, #0
 800a284:	da01      	bge.n	800a28a <find_volume+0x26>
 800a286:	230b      	movs	r3, #11
 800a288:	e265      	b.n	800a756 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a28a:	4a9f      	ldr	r2, [pc, #636]	; (800a508 <find_volume+0x2a4>)
 800a28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a292:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <find_volume+0x3a>
 800a29a:	230c      	movs	r3, #12
 800a29c:	e25b      	b.n	800a756 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	f023 0301 	bic.w	r3, r3, #1
 800a2aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01a      	beq.n	800a2ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe f8b7 	bl	800842c <disk_status>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10c      	bne.n	800a2ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <find_volume+0x82>
 800a2d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2da:	f003 0304 	and.w	r3, r3, #4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	e237      	b.n	800a756 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e235      	b.n	800a756 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe f8af 	bl	8008460 <disk_initialize>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a314:	2303      	movs	r3, #3
 800a316:	e21e      	b.n	800a756 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <find_volume+0xca>
 800a31e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a32a:	230a      	movs	r3, #10
 800a32c:	e213      	b.n	800a756 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	7858      	ldrb	r0, [r3, #1]
 800a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a334:	330c      	adds	r3, #12
 800a336:	461a      	mov	r2, r3
 800a338:	2102      	movs	r1, #2
 800a33a:	f7fe f8f7 	bl	800852c <disk_ioctl>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <find_volume+0xe4>
 800a344:	2301      	movs	r3, #1
 800a346:	e206      	b.n	800a756 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	899b      	ldrh	r3, [r3, #12]
 800a34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a350:	d80d      	bhi.n	800a36e <find_volume+0x10a>
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	899b      	ldrh	r3, [r3, #12]
 800a356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35a:	d308      	bcc.n	800a36e <find_volume+0x10a>
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	899b      	ldrh	r3, [r3, #12]
 800a360:	461a      	mov	r2, r3
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	899b      	ldrh	r3, [r3, #12]
 800a366:	3b01      	subs	r3, #1
 800a368:	4013      	ands	r3, r2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <find_volume+0x10e>
 800a36e:	2301      	movs	r3, #1
 800a370:	e1f1      	b.n	800a756 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a376:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a37a:	f7ff ff1d 	bl	800a1b8 <check_fs>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d149      	bne.n	800a420 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a38c:	2300      	movs	r3, #0
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40
 800a390:	e01e      	b.n	800a3d0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a3a0:	4413      	add	r3, r2
 800a3a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d006      	beq.n	800a3bc <find_volume+0x158>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe f8f0 	bl	8008598 <ld_dword>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	e000      	b.n	800a3be <find_volume+0x15a>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	3358      	adds	r3, #88	; 0x58
 800a3c4:	443b      	add	r3, r7
 800a3c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d9dd      	bls.n	800a392 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <find_volume+0x182>
 800a3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	3358      	adds	r3, #88	; 0x58
 800a3ec:	443b      	add	r3, r7
 800a3ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <find_volume+0x1a2>
 800a3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3fe:	f7ff fedb 	bl	800a1b8 <check_fs>
 800a402:	4603      	mov	r3, r0
 800a404:	e000      	b.n	800a408 <find_volume+0x1a4>
 800a406:	2303      	movs	r3, #3
 800a408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a40c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a410:	2b01      	cmp	r3, #1
 800a412:	d905      	bls.n	800a420 <find_volume+0x1bc>
 800a414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a416:	3301      	adds	r3, #1
 800a418:	643b      	str	r3, [r7, #64]	; 0x40
 800a41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d9e2      	bls.n	800a3e6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a424:	2b04      	cmp	r3, #4
 800a426:	d101      	bne.n	800a42c <find_volume+0x1c8>
 800a428:	2301      	movs	r3, #1
 800a42a:	e194      	b.n	800a756 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a42c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a430:	2b01      	cmp	r3, #1
 800a432:	d901      	bls.n	800a438 <find_volume+0x1d4>
 800a434:	230d      	movs	r3, #13
 800a436:	e18e      	b.n	800a756 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	3338      	adds	r3, #56	; 0x38
 800a43c:	330b      	adds	r3, #11
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe f892 	bl	8008568 <ld_word>
 800a444:	4603      	mov	r3, r0
 800a446:	461a      	mov	r2, r3
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	899b      	ldrh	r3, [r3, #12]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d001      	beq.n	800a454 <find_volume+0x1f0>
 800a450:	230d      	movs	r3, #13
 800a452:	e180      	b.n	800a756 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	3338      	adds	r3, #56	; 0x38
 800a458:	3316      	adds	r3, #22
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe f884 	bl	8008568 <ld_word>
 800a460:	4603      	mov	r3, r0
 800a462:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <find_volume+0x214>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	3338      	adds	r3, #56	; 0x38
 800a46e:	3324      	adds	r3, #36	; 0x24
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe f891 	bl	8008598 <ld_dword>
 800a476:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a47c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	789b      	ldrb	r3, [r3, #2]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d005      	beq.n	800a49c <find_volume+0x238>
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	789b      	ldrb	r3, [r3, #2]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d001      	beq.n	800a49c <find_volume+0x238>
 800a498:	230d      	movs	r3, #13
 800a49a:	e15c      	b.n	800a756 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	789b      	ldrb	r3, [r3, #2]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a4:	fb02 f303 	mul.w	r3, r2, r3
 800a4a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	895b      	ldrh	r3, [r3, #10]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <find_volume+0x26c>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	895b      	ldrh	r3, [r3, #10]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c6:	895b      	ldrh	r3, [r3, #10]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <find_volume+0x270>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e140      	b.n	800a756 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3338      	adds	r3, #56	; 0x38
 800a4d8:	3311      	adds	r3, #17
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe f844 	bl	8008568 <ld_word>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	891b      	ldrh	r3, [r3, #8]
 800a4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ee:	8992      	ldrh	r2, [r2, #12]
 800a4f0:	0952      	lsrs	r2, r2, #5
 800a4f2:	b292      	uxth	r2, r2
 800a4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4f8:	fb01 f202 	mul.w	r2, r1, r2
 800a4fc:	1a9b      	subs	r3, r3, r2
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	2b00      	cmp	r3, #0
 800a502:	d003      	beq.n	800a50c <find_volume+0x2a8>
 800a504:	230d      	movs	r3, #13
 800a506:	e126      	b.n	800a756 <find_volume+0x4f2>
 800a508:	20002c2c 	.word	0x20002c2c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	3338      	adds	r3, #56	; 0x38
 800a510:	3313      	adds	r3, #19
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe f828 	bl	8008568 <ld_word>
 800a518:	4603      	mov	r3, r0
 800a51a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a51c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <find_volume+0x2cc>
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	3338      	adds	r3, #56	; 0x38
 800a526:	3320      	adds	r3, #32
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe f835 	bl	8008598 <ld_dword>
 800a52e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	3338      	adds	r3, #56	; 0x38
 800a534:	330e      	adds	r3, #14
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe f816 	bl	8008568 <ld_word>
 800a53c:	4603      	mov	r3, r0
 800a53e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <find_volume+0x2e6>
 800a546:	230d      	movs	r3, #13
 800a548:	e105      	b.n	800a756 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a54a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54e:	4413      	add	r3, r2
 800a550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a552:	8911      	ldrh	r1, [r2, #8]
 800a554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a556:	8992      	ldrh	r2, [r2, #12]
 800a558:	0952      	lsrs	r2, r2, #5
 800a55a:	b292      	uxth	r2, r2
 800a55c:	fbb1 f2f2 	udiv	r2, r1, r2
 800a560:	b292      	uxth	r2, r2
 800a562:	4413      	add	r3, r2
 800a564:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d201      	bcs.n	800a572 <find_volume+0x30e>
 800a56e:	230d      	movs	r3, #13
 800a570:	e0f1      	b.n	800a756 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a57a:	8952      	ldrh	r2, [r2, #10]
 800a57c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <find_volume+0x328>
 800a588:	230d      	movs	r3, #13
 800a58a:	e0e4      	b.n	800a756 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a58c:	2303      	movs	r3, #3
 800a58e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a598:	4293      	cmp	r3, r2
 800a59a:	d802      	bhi.n	800a5a2 <find_volume+0x33e>
 800a59c:	2302      	movs	r3, #2
 800a59e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d802      	bhi.n	800a5b2 <find_volume+0x34e>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	1c9a      	adds	r2, r3, #2
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5be:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a5c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c4:	441a      	add	r2, r3
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a5ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	441a      	add	r2, r3
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d11e      	bne.n	800a61a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	332a      	adds	r3, #42	; 0x2a
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fd ffc0 	bl	8008568 <ld_word>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <find_volume+0x38e>
 800a5ee:	230d      	movs	r3, #13
 800a5f0:	e0b1      	b.n	800a756 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	891b      	ldrh	r3, [r3, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <find_volume+0x39a>
 800a5fa:	230d      	movs	r3, #13
 800a5fc:	e0ab      	b.n	800a756 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	3338      	adds	r3, #56	; 0x38
 800a602:	332c      	adds	r3, #44	; 0x2c
 800a604:	4618      	mov	r0, r3
 800a606:	f7fd ffc7 	bl	8008598 <ld_dword>
 800a60a:	4602      	mov	r2, r0
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	647b      	str	r3, [r7, #68]	; 0x44
 800a618:	e01f      	b.n	800a65a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	891b      	ldrh	r3, [r3, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <find_volume+0x3c2>
 800a622:	230d      	movs	r3, #13
 800a624:	e097      	b.n	800a756 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62c:	441a      	add	r2, r3
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a636:	2b02      	cmp	r3, #2
 800a638:	d103      	bne.n	800a642 <find_volume+0x3de>
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	e00a      	b.n	800a658 <find_volume+0x3f4>
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	69da      	ldr	r2, [r3, #28]
 800a646:	4613      	mov	r3, r2
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	4413      	add	r3, r2
 800a64c:	085a      	lsrs	r2, r3, #1
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a658:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	899b      	ldrh	r3, [r3, #12]
 800a662:	4619      	mov	r1, r3
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	440b      	add	r3, r1
 800a668:	3b01      	subs	r3, #1
 800a66a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a66c:	8989      	ldrh	r1, [r1, #12]
 800a66e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a672:	429a      	cmp	r2, r3
 800a674:	d201      	bcs.n	800a67a <find_volume+0x416>
 800a676:	230d      	movs	r3, #13
 800a678:	e06d      	b.n	800a756 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	619a      	str	r2, [r3, #24]
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	699a      	ldr	r2, [r3, #24]
 800a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a688:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	2280      	movs	r2, #128	; 0x80
 800a68e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a694:	2b03      	cmp	r3, #3
 800a696:	d149      	bne.n	800a72c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	3338      	adds	r3, #56	; 0x38
 800a69c:	3330      	adds	r3, #48	; 0x30
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fd ff62 	bl	8008568 <ld_word>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d140      	bne.n	800a72c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b2:	f7fe fa09 	bl	8008ac8 <move_window>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d137      	bne.n	800a72c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	2200      	movs	r2, #0
 800a6c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	3338      	adds	r3, #56	; 0x38
 800a6c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fd ff4c 	bl	8008568 <ld_word>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d127      	bne.n	800a72c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	3338      	adds	r3, #56	; 0x38
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fd ff59 	bl	8008598 <ld_dword>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	; (800a760 <find_volume+0x4fc>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d11e      	bne.n	800a72c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	3338      	adds	r3, #56	; 0x38
 800a6f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fd ff4e 	bl	8008598 <ld_dword>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4a19      	ldr	r2, [pc, #100]	; (800a764 <find_volume+0x500>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d113      	bne.n	800a72c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	3338      	adds	r3, #56	; 0x38
 800a708:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fd ff43 	bl	8008598 <ld_dword>
 800a712:	4602      	mov	r2, r0
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	3338      	adds	r3, #56	; 0x38
 800a71c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a720:	4618      	mov	r0, r3
 800a722:	f7fd ff39 	bl	8008598 <ld_dword>
 800a726:	4602      	mov	r2, r0
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a732:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <find_volume+0x504>)
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	3301      	adds	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <find_volume+0x504>)
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <find_volume+0x504>)
 800a742:	881a      	ldrh	r2, [r3, #0]
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	4a08      	ldr	r2, [pc, #32]	; (800a76c <find_volume+0x508>)
 800a74c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a74e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a750:	f7fe f952 	bl	80089f8 <clear_lock>
#endif
	return FR_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3758      	adds	r7, #88	; 0x58
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	41615252 	.word	0x41615252
 800a764:	61417272 	.word	0x61417272
 800a768:	20002c30 	.word	0x20002c30
 800a76c:	20002c54 	.word	0x20002c54

0800a770 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a77a:	2309      	movs	r3, #9
 800a77c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01c      	beq.n	800a7be <validate+0x4e>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d018      	beq.n	800a7be <validate+0x4e>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d013      	beq.n	800a7be <validate+0x4e>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	889a      	ldrh	r2, [r3, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	88db      	ldrh	r3, [r3, #6]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10c      	bne.n	800a7be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fd fe3e 	bl	800842c <disk_status>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <validate+0x4e>
			res = FR_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <validate+0x5a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	e000      	b.n	800a7cc <validate+0x5c>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	6013      	str	r3, [r2, #0]
	return res;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7ee:	f107 0310 	add.w	r3, r7, #16
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fc9c 	bl	800a130 <get_ldnumber>
 800a7f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da01      	bge.n	800a804 <f_mount+0x28>
 800a800:	230b      	movs	r3, #11
 800a802:	e02b      	b.n	800a85c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a804:	4a17      	ldr	r2, [pc, #92]	; (800a864 <f_mount+0x88>)
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a80c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a814:	69b8      	ldr	r0, [r7, #24]
 800a816:	f7fe f8ef 	bl	80089f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2200      	movs	r2, #0
 800a81e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	490d      	ldr	r1, [pc, #52]	; (800a864 <f_mount+0x88>)
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <f_mount+0x66>
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d001      	beq.n	800a846 <f_mount+0x6a>
 800a842:	2300      	movs	r3, #0
 800a844:	e00a      	b.n	800a85c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a846:	f107 010c 	add.w	r1, r7, #12
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	2200      	movs	r2, #0
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fd07 	bl	800a264 <find_volume>
 800a856:	4603      	mov	r3, r0
 800a858:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20002c2c 	.word	0x20002c2c

0800a868 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b09a      	sub	sp, #104	; 0x68
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <f_open+0x18>
 800a87c:	2309      	movs	r3, #9
 800a87e:	e1bb      	b.n	800abf8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a886:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a888:	79fa      	ldrb	r2, [r7, #7]
 800a88a:	f107 0114 	add.w	r1, r7, #20
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fce6 	bl	800a264 <find_volume>
 800a898:	4603      	mov	r3, r0
 800a89a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a89e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f040 819f 	bne.w	800abe6 <f_open+0x37e>
		dj.obj.fs = fs;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	f107 0318 	add.w	r3, r7, #24
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fbc5 	bl	800a044 <follow_path>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d11a      	bne.n	800a8fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	da03      	bge.n	800a8da <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8d2:	2306      	movs	r3, #6
 800a8d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8d8:	e011      	b.n	800a8fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	f023 0301 	bic.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf14      	ite	ne
 800a8e4:	2301      	movne	r3, #1
 800a8e6:	2300      	moveq	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f107 0318 	add.w	r3, r7, #24
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fd ff38 	bl	8008768 <chk_lock>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	f003 031c 	and.w	r3, r3, #28
 800a904:	2b00      	cmp	r3, #0
 800a906:	d07f      	beq.n	800aa08 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d017      	beq.n	800a940 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a914:	2b04      	cmp	r3, #4
 800a916:	d10e      	bne.n	800a936 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a918:	f7fd ff82 	bl	8008820 <enq_lock>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d006      	beq.n	800a930 <f_open+0xc8>
 800a922:	f107 0318 	add.w	r3, r7, #24
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff f8dc 	bl	8009ae4 <dir_register>
 800a92c:	4603      	mov	r3, r0
 800a92e:	e000      	b.n	800a932 <f_open+0xca>
 800a930:	2312      	movs	r3, #18
 800a932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	f043 0308 	orr.w	r3, r3, #8
 800a93c:	71fb      	strb	r3, [r7, #7]
 800a93e:	e010      	b.n	800a962 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a940:	7fbb      	ldrb	r3, [r7, #30]
 800a942:	f003 0311 	and.w	r3, r3, #17
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <f_open+0xea>
					res = FR_DENIED;
 800a94a:	2307      	movs	r3, #7
 800a94c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a950:	e007      	b.n	800a962 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <f_open+0xfa>
 800a95c:	2308      	movs	r3, #8
 800a95e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a966:	2b00      	cmp	r3, #0
 800a968:	d168      	bne.n	800aa3c <f_open+0x1d4>
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b00      	cmp	r3, #0
 800a972:	d063      	beq.n	800aa3c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a974:	f7fd fcfa 	bl	800836c <get_fattime>
 800a978:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	330e      	adds	r3, #14
 800a97e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a980:	4618      	mov	r0, r3
 800a982:	f7fd fe47 	bl	8008614 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	3316      	adds	r3, #22
 800a98a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd fe41 	bl	8008614 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	330b      	adds	r3, #11
 800a996:	2220      	movs	r2, #32
 800a998:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fe17 	bl	80095d4 <ld_clust>
 800a9a6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fe2f 	bl	8009612 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	331c      	adds	r3, #28
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fe2a 	bl	8008614 <st_dword>
					fs->wflag = 1;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a9c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d037      	beq.n	800aa3c <f_open+0x1d4>
						dw = fs->winsect;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a9d2:	f107 0318 	add.w	r3, r7, #24
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fb1f 	bl	800901e <remove_chain>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a9e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d126      	bne.n	800aa3c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe f868 	bl	8008ac8 <move_window>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa02:	3a01      	subs	r2, #1
 800aa04:	615a      	str	r2, [r3, #20]
 800aa06:	e019      	b.n	800aa3c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d115      	bne.n	800aa3c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa10:	7fbb      	ldrb	r3, [r7, #30]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aa1a:	2304      	movs	r3, #4
 800aa1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa20:	e00c      	b.n	800aa3c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <f_open+0x1d4>
 800aa2c:	7fbb      	ldrb	r3, [r7, #30]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <f_open+0x1d4>
						res = FR_DENIED;
 800aa36:	2307      	movs	r3, #7
 800aa38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d128      	bne.n	800aa96 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	f023 0301 	bic.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bf14      	ite	ne
 800aa6e:	2301      	movne	r3, #1
 800aa70:	2300      	moveq	r3, #0
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	f107 0318 	add.w	r3, r7, #24
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fd fef1 	bl	8008864 <inc_lock>
 800aa82:	4602      	mov	r2, r0
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <f_open+0x22e>
 800aa90:	2302      	movs	r3, #2
 800aa92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f040 80a3 	bne.w	800abe6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fd94 	bl	80095d4 <ld_clust>
 800aaac:	4602      	mov	r2, r0
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	331c      	adds	r3, #28
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fd fd6e 	bl	8008598 <ld_dword>
 800aabc:	4602      	mov	r2, r0
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	88da      	ldrh	r2, [r3, #6]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	79fa      	ldrb	r2, [r7, #7]
 800aada:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3330      	adds	r3, #48	; 0x30
 800aaf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd fdd8 	bl	80086ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d06e      	beq.n	800abe6 <f_open+0x37e>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d06a      	beq.n	800abe6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	895b      	ldrh	r3, [r3, #10]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	899b      	ldrh	r3, [r3, #12]
 800ab22:	fb02 f303 	mul.w	r3, r2, r3
 800ab26:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab34:	e016      	b.n	800ab64 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe f881 	bl	8008c42 <get_fat>
 800ab40:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d802      	bhi.n	800ab4e <f_open+0x2e6>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab54:	d102      	bne.n	800ab5c <f_open+0x2f4>
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <f_open+0x30c>
 800ab6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d8e0      	bhi.n	800ab36 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d131      	bne.n	800abe6 <f_open+0x37e>
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	899b      	ldrh	r3, [r3, #12]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab8e:	fb01 f202 	mul.w	r2, r1, r2
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d026      	beq.n	800abe6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe f831 	bl	8008c04 <clust2sect>
 800aba2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <f_open+0x34a>
						res = FR_INT_ERR;
 800abaa:	2302      	movs	r3, #2
 800abac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abb0:	e019      	b.n	800abe6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	899b      	ldrh	r3, [r3, #12]
 800abb6:	461a      	mov	r2, r3
 800abb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abba:	fbb3 f2f2 	udiv	r2, r3, r2
 800abbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc0:	441a      	add	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	7858      	ldrb	r0, [r3, #1]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a1a      	ldr	r2, [r3, #32]
 800abd4:	2301      	movs	r3, #1
 800abd6:	f7fd fc69 	bl	80084ac <disk_read>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <f_open+0x37e>
 800abe0:	2301      	movs	r3, #1
 800abe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <f_open+0x38c>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3768      	adds	r7, #104	; 0x68
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08c      	sub	sp, #48	; 0x30
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f107 0210 	add.w	r2, r7, #16
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fda5 	bl	800a770 <validate>
 800ac26:	4603      	mov	r3, r0
 800ac28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d107      	bne.n	800ac44 <f_write+0x44>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	7d5b      	ldrb	r3, [r3, #21]
 800ac38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <f_write+0x4a>
 800ac44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac48:	e16a      	b.n	800af20 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	7d1b      	ldrb	r3, [r3, #20]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <f_write+0x5a>
 800ac56:	2307      	movs	r3, #7
 800ac58:	e162      	b.n	800af20 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	441a      	add	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	f080 814c 	bcs.w	800af04 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	43db      	mvns	r3, r3
 800ac72:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac74:	e146      	b.n	800af04 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	8992      	ldrh	r2, [r2, #12]
 800ac7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac82:	fb01 f202 	mul.w	r2, r1, r2
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 80f1 	bne.w	800ae70 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	8992      	ldrh	r2, [r2, #12]
 800ac96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	8952      	ldrh	r2, [r2, #10]
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	4013      	ands	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d143      	bne.n	800ad32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10c      	bne.n	800accc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d11a      	bne.n	800acf4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2100      	movs	r1, #0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fa10 	bl	80090e8 <create_chain>
 800acc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800acca:	e013      	b.n	800acf4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d007      	beq.n	800ace4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	4619      	mov	r1, r3
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7fe fa9c 	bl	8009218 <clmt_clust>
 800ace0:	62b8      	str	r0, [r7, #40]	; 0x28
 800ace2:	e007      	b.n	800acf4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f7fe f9fb 	bl	80090e8 <create_chain>
 800acf2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8109 	beq.w	800af0e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d104      	bne.n	800ad0c <f_write+0x10c>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2202      	movs	r2, #2
 800ad06:	755a      	strb	r2, [r3, #21]
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e109      	b.n	800af20 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d104      	bne.n	800ad1e <f_write+0x11e>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2201      	movs	r2, #1
 800ad18:	755a      	strb	r2, [r3, #21]
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e100      	b.n	800af20 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <f_write+0x132>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	7d1b      	ldrb	r3, [r3, #20]
 800ad36:	b25b      	sxtb	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	da18      	bge.n	800ad6e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	7858      	ldrb	r0, [r3, #1]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1a      	ldr	r2, [r3, #32]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f7fd fbce 	bl	80084ec <disk_write>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <f_write+0x160>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	755a      	strb	r2, [r3, #21]
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0df      	b.n	800af20 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	7d1b      	ldrb	r3, [r3, #20]
 800ad64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fd ff44 	bl	8008c04 <clust2sect>
 800ad7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <f_write+0x18e>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2202      	movs	r2, #2
 800ad88:	755a      	strb	r2, [r3, #21]
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	e0c8      	b.n	800af20 <f_write+0x320>
			sect += csect;
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	4413      	add	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	899b      	ldrh	r3, [r3, #12]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ada2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d043      	beq.n	800ae32 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	4413      	add	r3, r2
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	8952      	ldrh	r2, [r2, #10]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d905      	bls.n	800adc4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	895b      	ldrh	r3, [r3, #10]
 800adbc:	461a      	mov	r2, r3
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	7858      	ldrb	r0, [r3, #1]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	f7fd fb8d 	bl	80084ec <disk_write>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <f_write+0x1e2>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	755a      	strb	r2, [r3, #21]
 800adde:	2301      	movs	r3, #1
 800ade0:	e09e      	b.n	800af20 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6a1a      	ldr	r2, [r3, #32]
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	429a      	cmp	r2, r3
 800adee:	d918      	bls.n	800ae22 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6a1a      	ldr	r2, [r3, #32]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	8992      	ldrh	r2, [r2, #12]
 800ae02:	fb02 f303 	mul.w	r3, r2, r3
 800ae06:	69fa      	ldr	r2, [r7, #28]
 800ae08:	18d1      	adds	r1, r2, r3
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	899b      	ldrh	r3, [r3, #12]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f7fd fc2c 	bl	800866c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	7d1b      	ldrb	r3, [r3, #20]
 800ae18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	899b      	ldrh	r3, [r3, #12]
 800ae26:	461a      	mov	r2, r3
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae30:	e04b      	b.n	800aeca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d016      	beq.n	800ae6a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	699a      	ldr	r2, [r3, #24]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d210      	bcs.n	800ae6a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	7858      	ldrb	r0, [r3, #1]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae52:	2301      	movs	r3, #1
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	f7fd fb29 	bl	80084ac <disk_read>
 800ae5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	755a      	strb	r2, [r3, #21]
 800ae66:	2301      	movs	r3, #1
 800ae68:	e05a      	b.n	800af20 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	899b      	ldrh	r3, [r3, #12]
 800ae74:	4618      	mov	r0, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	8992      	ldrh	r2, [r2, #12]
 800ae7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae82:	fb01 f202 	mul.w	r2, r1, r2
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	1ac3      	subs	r3, r0, r3
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d901      	bls.n	800ae98 <f_write+0x298>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	8992      	ldrh	r2, [r2, #12]
 800aea6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeaa:	fb00 f202 	mul.w	r2, r0, r2
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb4:	69f9      	ldr	r1, [r7, #28]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fd fbd8 	bl	800866c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	7d1b      	ldrb	r3, [r3, #20]
 800aec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aeca:	69fa      	ldr	r2, [r7, #28]
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	4413      	add	r3, r2
 800aed0:	61fb      	str	r3, [r7, #28]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	699a      	ldr	r2, [r3, #24]
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	441a      	add	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	619a      	str	r2, [r3, #24]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	68da      	ldr	r2, [r3, #12]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	bf38      	it	cc
 800aeea:	461a      	movcc	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	60da      	str	r2, [r3, #12]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	441a      	add	r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f47f aeb5 	bne.w	800ac76 <f_write+0x76>
 800af0c:	e000      	b.n	800af10 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	7d1b      	ldrb	r3, [r3, #20]
 800af14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3730      	adds	r7, #48	; 0x30
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f107 0208 	add.w	r2, r7, #8
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fc19 	bl	800a770 <validate>
 800af3e:	4603      	mov	r3, r0
 800af40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af42:	7dfb      	ldrb	r3, [r7, #23]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d168      	bne.n	800b01a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7d1b      	ldrb	r3, [r3, #20]
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d062      	beq.n	800b01a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7d1b      	ldrb	r3, [r3, #20]
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	da15      	bge.n	800af8a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	7858      	ldrb	r0, [r3, #1]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a1a      	ldr	r2, [r3, #32]
 800af6c:	2301      	movs	r3, #1
 800af6e:	f7fd fabd 	bl	80084ec <disk_write>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <f_sync+0x54>
 800af78:	2301      	movs	r3, #1
 800af7a:	e04f      	b.n	800b01c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	7d1b      	ldrb	r3, [r3, #20]
 800af80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af84:	b2da      	uxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af8a:	f7fd f9ef 	bl	800836c <get_fattime>
 800af8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	4619      	mov	r1, r3
 800af98:	4610      	mov	r0, r2
 800af9a:	f7fd fd95 	bl	8008ac8 <move_window>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d138      	bne.n	800b01a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	330b      	adds	r3, #11
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	330b      	adds	r3, #11
 800afb8:	f042 0220 	orr.w	r2, r2, #32
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	461a      	mov	r2, r3
 800afca:	68f9      	ldr	r1, [r7, #12]
 800afcc:	f7fe fb21 	bl	8009612 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f103 021c 	add.w	r2, r3, #28
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	4619      	mov	r1, r3
 800afdc:	4610      	mov	r0, r2
 800afde:	f7fd fb19 	bl	8008614 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3316      	adds	r3, #22
 800afe6:	6939      	ldr	r1, [r7, #16]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fd fb13 	bl	8008614 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3312      	adds	r3, #18
 800aff2:	2100      	movs	r1, #0
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fd faf2 	bl	80085de <st_word>
					fs->wflag = 1;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2201      	movs	r2, #1
 800affe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f7fd fd8e 	bl	8008b24 <sync_fs>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b014:	b2da      	uxtb	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff ff7b 	bl	800af28 <f_sync>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d118      	bne.n	800b06e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f107 0208 	add.w	r2, r7, #8
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fb93 	bl	800a770 <validate>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10c      	bne.n	800b06e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fd fc91 	bl	8008980 <dec_lock>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	2b0a      	cmp	r3, #10
 800b088:	d103      	bne.n	800b092 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b08a:	210d      	movs	r1, #13
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff fff3 	bl	800b078 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	db25      	blt.n	800b0ea <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	60fa      	str	r2, [r7, #12]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b3c      	cmp	r3, #60	; 0x3c
 800b0b0:	dd12      	ble.n	800b0d8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f103 010c 	add.w	r1, r3, #12
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	f107 0308 	add.w	r3, r7, #8
 800b0c2:	f7ff fd9d 	bl	800ac00 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d101      	bne.n	800b0d2 <putc_bfd+0x5a>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e001      	b.n	800b0d6 <putc_bfd+0x5e>
 800b0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	e000      	b.n	800b0ec <putc_bfd+0x74>
	if (i < 0) return;
 800b0ea:	bf00      	nop
}
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	db16      	blt.n	800b130 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f103 010c 	add.w	r1, r3, #12
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	461a      	mov	r2, r3
 800b112:	f107 030c 	add.w	r3, r7, #12
 800b116:	f7ff fd73 	bl	800ac00 <f_write>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d107      	bne.n	800b130 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	4293      	cmp	r3, r2
 800b128:	d102      	bne.n	800b130 <putc_flush+0x3e>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	e001      	b.n	800b134 <putc_flush+0x42>
	return EOF;
 800b130:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	609a      	str	r2, [r3, #8]
}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b096      	sub	sp, #88	; 0x58
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b170:	f107 030c 	add.w	r3, r7, #12
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff ffe0 	bl	800b13c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b17c:	e009      	b.n	800b192 <f_puts+0x2c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	f107 030c 	add.w	r3, r7, #12
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff ff73 	bl	800b078 <putc_bfd>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1f1      	bne.n	800b17e <f_puts+0x18>
	return putc_flush(&pb);
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff ffa7 	bl	800b0f2 <putc_flush>
 800b1a4:	4603      	mov	r3, r0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3758      	adds	r7, #88	; 0x58
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1c8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d131      	bne.n	800b234 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1d0:	4b1c      	ldr	r3, [pc, #112]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1d2:	7a5b      	ldrb	r3, [r3, #9]
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	4b1a      	ldr	r3, [pc, #104]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1da:	2100      	movs	r1, #0
 800b1dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b1de:	4b19      	ldr	r3, [pc, #100]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1e0:	7a5b      	ldrb	r3, [r3, #9]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	4a17      	ldr	r2, [pc, #92]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1ee:	4b15      	ldr	r3, [pc, #84]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1f0:	7a5b      	ldrb	r3, [r3, #9]
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4b13      	ldr	r3, [pc, #76]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b1f8:	4413      	add	r3, r2
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b1fe:	4b11      	ldr	r3, [pc, #68]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b200:	7a5b      	ldrb	r3, [r3, #9]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	b2d1      	uxtb	r1, r2
 800b208:	4a0e      	ldr	r2, [pc, #56]	; (800b244 <FATFS_LinkDriverEx+0x94>)
 800b20a:	7251      	strb	r1, [r2, #9]
 800b20c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b20e:	7dbb      	ldrb	r3, [r7, #22]
 800b210:	3330      	adds	r3, #48	; 0x30
 800b212:	b2da      	uxtb	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3301      	adds	r3, #1
 800b21c:	223a      	movs	r2, #58	; 0x3a
 800b21e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	3302      	adds	r3, #2
 800b224:	222f      	movs	r2, #47	; 0x2f
 800b226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3303      	adds	r3, #3
 800b22c:	2200      	movs	r2, #0
 800b22e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b234:	7dfb      	ldrb	r3, [r7, #23]
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	20002e54 	.word	0x20002e54

0800b248 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b252:	2200      	movs	r2, #0
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff ffaa 	bl	800b1b0 <FATFS_LinkDriverEx>
 800b25c:	4603      	mov	r3, r0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	2b7f      	cmp	r3, #127	; 0x7f
 800b278:	d802      	bhi.n	800b280 <ff_convert+0x18>
		c = chr;
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	81fb      	strh	r3, [r7, #14]
 800b27e:	e025      	b.n	800b2cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00b      	beq.n	800b29e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	2bff      	cmp	r3, #255	; 0xff
 800b28a:	d805      	bhi.n	800b298 <ff_convert+0x30>
 800b28c:	88fb      	ldrh	r3, [r7, #6]
 800b28e:	3b80      	subs	r3, #128	; 0x80
 800b290:	4a12      	ldr	r2, [pc, #72]	; (800b2dc <ff_convert+0x74>)
 800b292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b296:	e000      	b.n	800b29a <ff_convert+0x32>
 800b298:	2300      	movs	r3, #0
 800b29a:	81fb      	strh	r3, [r7, #14]
 800b29c:	e016      	b.n	800b2cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b29e:	2300      	movs	r3, #0
 800b2a0:	81fb      	strh	r3, [r7, #14]
 800b2a2:	e009      	b.n	800b2b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b2a4:	89fb      	ldrh	r3, [r7, #14]
 800b2a6:	4a0d      	ldr	r2, [pc, #52]	; (800b2dc <ff_convert+0x74>)
 800b2a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ac:	88fa      	ldrh	r2, [r7, #6]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d006      	beq.n	800b2c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b2b2:	89fb      	ldrh	r3, [r7, #14]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	81fb      	strh	r3, [r7, #14]
 800b2b8:	89fb      	ldrh	r3, [r7, #14]
 800b2ba:	2b7f      	cmp	r3, #127	; 0x7f
 800b2bc:	d9f2      	bls.n	800b2a4 <ff_convert+0x3c>
 800b2be:	e000      	b.n	800b2c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b2c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	3380      	adds	r3, #128	; 0x80
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b2cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	0801ecac 	.word	0x0801ecac

0800b2e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f0:	d201      	bcs.n	800b2f6 <ff_wtoupper+0x16>
 800b2f2:	4b3e      	ldr	r3, [pc, #248]	; (800b3ec <ff_wtoupper+0x10c>)
 800b2f4:	e000      	b.n	800b2f8 <ff_wtoupper+0x18>
 800b2f6:	4b3e      	ldr	r3, [pc, #248]	; (800b3f0 <ff_wtoupper+0x110>)
 800b2f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	1c9a      	adds	r2, r3, #2
 800b2fe:	617a      	str	r2, [r7, #20]
 800b300:	881b      	ldrh	r3, [r3, #0]
 800b302:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b304:	8a7b      	ldrh	r3, [r7, #18]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d068      	beq.n	800b3dc <ff_wtoupper+0xfc>
 800b30a:	88fa      	ldrh	r2, [r7, #6]
 800b30c:	8a7b      	ldrh	r3, [r7, #18]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d364      	bcc.n	800b3dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	1c9a      	adds	r2, r3, #2
 800b316:	617a      	str	r2, [r7, #20]
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	823b      	strh	r3, [r7, #16]
 800b31c:	8a3b      	ldrh	r3, [r7, #16]
 800b31e:	0a1b      	lsrs	r3, r3, #8
 800b320:	81fb      	strh	r3, [r7, #14]
 800b322:	8a3b      	ldrh	r3, [r7, #16]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b328:	88fa      	ldrh	r2, [r7, #6]
 800b32a:	8a79      	ldrh	r1, [r7, #18]
 800b32c:	8a3b      	ldrh	r3, [r7, #16]
 800b32e:	440b      	add	r3, r1
 800b330:	429a      	cmp	r2, r3
 800b332:	da49      	bge.n	800b3c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	2b08      	cmp	r3, #8
 800b338:	d84f      	bhi.n	800b3da <ff_wtoupper+0xfa>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <ff_wtoupper+0x60>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b365 	.word	0x0800b365
 800b344:	0800b377 	.word	0x0800b377
 800b348:	0800b38d 	.word	0x0800b38d
 800b34c:	0800b395 	.word	0x0800b395
 800b350:	0800b39d 	.word	0x0800b39d
 800b354:	0800b3a5 	.word	0x0800b3a5
 800b358:	0800b3ad 	.word	0x0800b3ad
 800b35c:	0800b3b5 	.word	0x0800b3b5
 800b360:	0800b3bd 	.word	0x0800b3bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b364:	88fa      	ldrh	r2, [r7, #6]
 800b366:	8a7b      	ldrh	r3, [r7, #18]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	80fb      	strh	r3, [r7, #6]
 800b374:	e027      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b376:	88fa      	ldrh	r2, [r7, #6]
 800b378:	8a7b      	ldrh	r3, [r7, #18]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	b29b      	uxth	r3, r3
 800b384:	88fa      	ldrh	r2, [r7, #6]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	80fb      	strh	r3, [r7, #6]
 800b38a:	e01c      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	3b10      	subs	r3, #16
 800b390:	80fb      	strh	r3, [r7, #6]
 800b392:	e018      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	3b20      	subs	r3, #32
 800b398:	80fb      	strh	r3, [r7, #6]
 800b39a:	e014      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	3b30      	subs	r3, #48	; 0x30
 800b3a0:	80fb      	strh	r3, [r7, #6]
 800b3a2:	e010      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	3b1a      	subs	r3, #26
 800b3a8:	80fb      	strh	r3, [r7, #6]
 800b3aa:	e00c      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b3ac:	88fb      	ldrh	r3, [r7, #6]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	80fb      	strh	r3, [r7, #6]
 800b3b2:	e008      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b3b4:	88fb      	ldrh	r3, [r7, #6]
 800b3b6:	3b50      	subs	r3, #80	; 0x50
 800b3b8:	80fb      	strh	r3, [r7, #6]
 800b3ba:	e004      	b.n	800b3c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b3c2:	80fb      	strh	r3, [r7, #6]
 800b3c4:	bf00      	nop
			}
			break;
 800b3c6:	e008      	b.n	800b3da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d195      	bne.n	800b2fa <ff_wtoupper+0x1a>
 800b3ce:	8a3b      	ldrh	r3, [r7, #16]
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b3d8:	e78f      	b.n	800b2fa <ff_wtoupper+0x1a>
			break;
 800b3da:	bf00      	nop
	}

	return chr;
 800b3dc:	88fb      	ldrh	r3, [r7, #6]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	0801edac 	.word	0x0801edac
 800b3f0:	0801efa0 	.word	0x0801efa0

0800b3f4 <malloc>:
 800b3f4:	4b02      	ldr	r3, [pc, #8]	; (800b400 <malloc+0xc>)
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	6818      	ldr	r0, [r3, #0]
 800b3fa:	f000 b82b 	b.w	800b454 <_malloc_r>
 800b3fe:	bf00      	nop
 800b400:	2000006c 	.word	0x2000006c

0800b404 <free>:
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <free+0xc>)
 800b406:	4601      	mov	r1, r0
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f000 b8f3 	b.w	800b5f4 <_free_r>
 800b40e:	bf00      	nop
 800b410:	2000006c 	.word	0x2000006c

0800b414 <sbrk_aligned>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4e0e      	ldr	r6, [pc, #56]	; (800b450 <sbrk_aligned+0x3c>)
 800b418:	460c      	mov	r4, r1
 800b41a:	6831      	ldr	r1, [r6, #0]
 800b41c:	4605      	mov	r5, r0
 800b41e:	b911      	cbnz	r1, 800b426 <sbrk_aligned+0x12>
 800b420:	f000 f8ac 	bl	800b57c <_sbrk_r>
 800b424:	6030      	str	r0, [r6, #0]
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f000 f8a7 	bl	800b57c <_sbrk_r>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d00a      	beq.n	800b448 <sbrk_aligned+0x34>
 800b432:	1cc4      	adds	r4, r0, #3
 800b434:	f024 0403 	bic.w	r4, r4, #3
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d007      	beq.n	800b44c <sbrk_aligned+0x38>
 800b43c:	1a21      	subs	r1, r4, r0
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 f89c 	bl	800b57c <_sbrk_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d101      	bne.n	800b44c <sbrk_aligned+0x38>
 800b448:	f04f 34ff 	mov.w	r4, #4294967295
 800b44c:	4620      	mov	r0, r4
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	20002e64 	.word	0x20002e64

0800b454 <_malloc_r>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	1ccd      	adds	r5, r1, #3
 800b45a:	f025 0503 	bic.w	r5, r5, #3
 800b45e:	3508      	adds	r5, #8
 800b460:	2d0c      	cmp	r5, #12
 800b462:	bf38      	it	cc
 800b464:	250c      	movcc	r5, #12
 800b466:	2d00      	cmp	r5, #0
 800b468:	4607      	mov	r7, r0
 800b46a:	db01      	blt.n	800b470 <_malloc_r+0x1c>
 800b46c:	42a9      	cmp	r1, r5
 800b46e:	d905      	bls.n	800b47c <_malloc_r+0x28>
 800b470:	230c      	movs	r3, #12
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	2600      	movs	r6, #0
 800b476:	4630      	mov	r0, r6
 800b478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b550 <_malloc_r+0xfc>
 800b480:	f000 f868 	bl	800b554 <__malloc_lock>
 800b484:	f8d8 3000 	ldr.w	r3, [r8]
 800b488:	461c      	mov	r4, r3
 800b48a:	bb5c      	cbnz	r4, 800b4e4 <_malloc_r+0x90>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4638      	mov	r0, r7
 800b490:	f7ff ffc0 	bl	800b414 <sbrk_aligned>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	4604      	mov	r4, r0
 800b498:	d155      	bne.n	800b546 <_malloc_r+0xf2>
 800b49a:	f8d8 4000 	ldr.w	r4, [r8]
 800b49e:	4626      	mov	r6, r4
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	d145      	bne.n	800b530 <_malloc_r+0xdc>
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	d048      	beq.n	800b53a <_malloc_r+0xe6>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	eb04 0903 	add.w	r9, r4, r3
 800b4b2:	f000 f863 	bl	800b57c <_sbrk_r>
 800b4b6:	4581      	cmp	r9, r0
 800b4b8:	d13f      	bne.n	800b53a <_malloc_r+0xe6>
 800b4ba:	6821      	ldr	r1, [r4, #0]
 800b4bc:	1a6d      	subs	r5, r5, r1
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff ffa7 	bl	800b414 <sbrk_aligned>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d037      	beq.n	800b53a <_malloc_r+0xe6>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	442b      	add	r3, r5
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d038      	beq.n	800b54a <_malloc_r+0xf6>
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	42a2      	cmp	r2, r4
 800b4dc:	d12b      	bne.n	800b536 <_malloc_r+0xe2>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	e00f      	b.n	800b504 <_malloc_r+0xb0>
 800b4e4:	6822      	ldr	r2, [r4, #0]
 800b4e6:	1b52      	subs	r2, r2, r5
 800b4e8:	d41f      	bmi.n	800b52a <_malloc_r+0xd6>
 800b4ea:	2a0b      	cmp	r2, #11
 800b4ec:	d917      	bls.n	800b51e <_malloc_r+0xca>
 800b4ee:	1961      	adds	r1, r4, r5
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	6025      	str	r5, [r4, #0]
 800b4f4:	bf18      	it	ne
 800b4f6:	6059      	strne	r1, [r3, #4]
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	bf08      	it	eq
 800b4fc:	f8c8 1000 	streq.w	r1, [r8]
 800b500:	5162      	str	r2, [r4, r5]
 800b502:	604b      	str	r3, [r1, #4]
 800b504:	4638      	mov	r0, r7
 800b506:	f104 060b 	add.w	r6, r4, #11
 800b50a:	f000 f829 	bl	800b560 <__malloc_unlock>
 800b50e:	f026 0607 	bic.w	r6, r6, #7
 800b512:	1d23      	adds	r3, r4, #4
 800b514:	1af2      	subs	r2, r6, r3
 800b516:	d0ae      	beq.n	800b476 <_malloc_r+0x22>
 800b518:	1b9b      	subs	r3, r3, r6
 800b51a:	50a3      	str	r3, [r4, r2]
 800b51c:	e7ab      	b.n	800b476 <_malloc_r+0x22>
 800b51e:	42a3      	cmp	r3, r4
 800b520:	6862      	ldr	r2, [r4, #4]
 800b522:	d1dd      	bne.n	800b4e0 <_malloc_r+0x8c>
 800b524:	f8c8 2000 	str.w	r2, [r8]
 800b528:	e7ec      	b.n	800b504 <_malloc_r+0xb0>
 800b52a:	4623      	mov	r3, r4
 800b52c:	6864      	ldr	r4, [r4, #4]
 800b52e:	e7ac      	b.n	800b48a <_malloc_r+0x36>
 800b530:	4634      	mov	r4, r6
 800b532:	6876      	ldr	r6, [r6, #4]
 800b534:	e7b4      	b.n	800b4a0 <_malloc_r+0x4c>
 800b536:	4613      	mov	r3, r2
 800b538:	e7cc      	b.n	800b4d4 <_malloc_r+0x80>
 800b53a:	230c      	movs	r3, #12
 800b53c:	603b      	str	r3, [r7, #0]
 800b53e:	4638      	mov	r0, r7
 800b540:	f000 f80e 	bl	800b560 <__malloc_unlock>
 800b544:	e797      	b.n	800b476 <_malloc_r+0x22>
 800b546:	6025      	str	r5, [r4, #0]
 800b548:	e7dc      	b.n	800b504 <_malloc_r+0xb0>
 800b54a:	605b      	str	r3, [r3, #4]
 800b54c:	deff      	udf	#255	; 0xff
 800b54e:	bf00      	nop
 800b550:	20002e60 	.word	0x20002e60

0800b554 <__malloc_lock>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__malloc_lock+0x8>)
 800b556:	f000 b84b 	b.w	800b5f0 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	20002fa4 	.word	0x20002fa4

0800b560 <__malloc_unlock>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__malloc_unlock+0x8>)
 800b562:	f000 b846 	b.w	800b5f2 <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	20002fa4 	.word	0x20002fa4

0800b56c <memset>:
 800b56c:	4402      	add	r2, r0
 800b56e:	4603      	mov	r3, r0
 800b570:	4293      	cmp	r3, r2
 800b572:	d100      	bne.n	800b576 <memset+0xa>
 800b574:	4770      	bx	lr
 800b576:	f803 1b01 	strb.w	r1, [r3], #1
 800b57a:	e7f9      	b.n	800b570 <memset+0x4>

0800b57c <_sbrk_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d06      	ldr	r5, [pc, #24]	; (800b598 <_sbrk_r+0x1c>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	f7f8 fbc0 	bl	8003d0c <_sbrk>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_sbrk_r+0x1a>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_sbrk_r+0x1a>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20002fa0 	.word	0x20002fa0

0800b59c <__errno>:
 800b59c:	4b01      	ldr	r3, [pc, #4]	; (800b5a4 <__errno+0x8>)
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000006c 	.word	0x2000006c

0800b5a8 <__libc_init_array>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	4d0d      	ldr	r5, [pc, #52]	; (800b5e0 <__libc_init_array+0x38>)
 800b5ac:	4c0d      	ldr	r4, [pc, #52]	; (800b5e4 <__libc_init_array+0x3c>)
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	d109      	bne.n	800b5cc <__libc_init_array+0x24>
 800b5b8:	4d0b      	ldr	r5, [pc, #44]	; (800b5e8 <__libc_init_array+0x40>)
 800b5ba:	4c0c      	ldr	r4, [pc, #48]	; (800b5ec <__libc_init_array+0x44>)
 800b5bc:	f000 f866 	bl	800b68c <_init>
 800b5c0:	1b64      	subs	r4, r4, r5
 800b5c2:	10a4      	asrs	r4, r4, #2
 800b5c4:	2600      	movs	r6, #0
 800b5c6:	42a6      	cmp	r6, r4
 800b5c8:	d105      	bne.n	800b5d6 <__libc_init_array+0x2e>
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d0:	4798      	blx	r3
 800b5d2:	3601      	adds	r6, #1
 800b5d4:	e7ee      	b.n	800b5b4 <__libc_init_array+0xc>
 800b5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5da:	4798      	blx	r3
 800b5dc:	3601      	adds	r6, #1
 800b5de:	e7f2      	b.n	800b5c6 <__libc_init_array+0x1e>
 800b5e0:	0801f05c 	.word	0x0801f05c
 800b5e4:	0801f05c 	.word	0x0801f05c
 800b5e8:	0801f05c 	.word	0x0801f05c
 800b5ec:	0801f060 	.word	0x0801f060

0800b5f0 <__retarget_lock_acquire_recursive>:
 800b5f0:	4770      	bx	lr

0800b5f2 <__retarget_lock_release_recursive>:
 800b5f2:	4770      	bx	lr

0800b5f4 <_free_r>:
 800b5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5f6:	2900      	cmp	r1, #0
 800b5f8:	d044      	beq.n	800b684 <_free_r+0x90>
 800b5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5fe:	9001      	str	r0, [sp, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f1a1 0404 	sub.w	r4, r1, #4
 800b606:	bfb8      	it	lt
 800b608:	18e4      	addlt	r4, r4, r3
 800b60a:	f7ff ffa3 	bl	800b554 <__malloc_lock>
 800b60e:	4a1e      	ldr	r2, [pc, #120]	; (800b688 <_free_r+0x94>)
 800b610:	9801      	ldr	r0, [sp, #4]
 800b612:	6813      	ldr	r3, [r2, #0]
 800b614:	b933      	cbnz	r3, 800b624 <_free_r+0x30>
 800b616:	6063      	str	r3, [r4, #4]
 800b618:	6014      	str	r4, [r2, #0]
 800b61a:	b003      	add	sp, #12
 800b61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b620:	f7ff bf9e 	b.w	800b560 <__malloc_unlock>
 800b624:	42a3      	cmp	r3, r4
 800b626:	d908      	bls.n	800b63a <_free_r+0x46>
 800b628:	6825      	ldr	r5, [r4, #0]
 800b62a:	1961      	adds	r1, r4, r5
 800b62c:	428b      	cmp	r3, r1
 800b62e:	bf01      	itttt	eq
 800b630:	6819      	ldreq	r1, [r3, #0]
 800b632:	685b      	ldreq	r3, [r3, #4]
 800b634:	1949      	addeq	r1, r1, r5
 800b636:	6021      	streq	r1, [r4, #0]
 800b638:	e7ed      	b.n	800b616 <_free_r+0x22>
 800b63a:	461a      	mov	r2, r3
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	b10b      	cbz	r3, 800b644 <_free_r+0x50>
 800b640:	42a3      	cmp	r3, r4
 800b642:	d9fa      	bls.n	800b63a <_free_r+0x46>
 800b644:	6811      	ldr	r1, [r2, #0]
 800b646:	1855      	adds	r5, r2, r1
 800b648:	42a5      	cmp	r5, r4
 800b64a:	d10b      	bne.n	800b664 <_free_r+0x70>
 800b64c:	6824      	ldr	r4, [r4, #0]
 800b64e:	4421      	add	r1, r4
 800b650:	1854      	adds	r4, r2, r1
 800b652:	42a3      	cmp	r3, r4
 800b654:	6011      	str	r1, [r2, #0]
 800b656:	d1e0      	bne.n	800b61a <_free_r+0x26>
 800b658:	681c      	ldr	r4, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	6053      	str	r3, [r2, #4]
 800b65e:	440c      	add	r4, r1
 800b660:	6014      	str	r4, [r2, #0]
 800b662:	e7da      	b.n	800b61a <_free_r+0x26>
 800b664:	d902      	bls.n	800b66c <_free_r+0x78>
 800b666:	230c      	movs	r3, #12
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	e7d6      	b.n	800b61a <_free_r+0x26>
 800b66c:	6825      	ldr	r5, [r4, #0]
 800b66e:	1961      	adds	r1, r4, r5
 800b670:	428b      	cmp	r3, r1
 800b672:	bf04      	itt	eq
 800b674:	6819      	ldreq	r1, [r3, #0]
 800b676:	685b      	ldreq	r3, [r3, #4]
 800b678:	6063      	str	r3, [r4, #4]
 800b67a:	bf04      	itt	eq
 800b67c:	1949      	addeq	r1, r1, r5
 800b67e:	6021      	streq	r1, [r4, #0]
 800b680:	6054      	str	r4, [r2, #4]
 800b682:	e7ca      	b.n	800b61a <_free_r+0x26>
 800b684:	b003      	add	sp, #12
 800b686:	bd30      	pop	{r4, r5, pc}
 800b688:	20002e60 	.word	0x20002e60

0800b68c <_init>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr

0800b698 <_fini>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr
