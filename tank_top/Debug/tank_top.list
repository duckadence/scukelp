
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013638  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c1bc  0801c1bc  0003009c  2**0
                  CONTENTS
  4 .ARM          00000000  0801c1bc  0801c1bc  0003009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c1bc  0801c1bc  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c1bc  0801c1bc  0002c1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c1c0  0801c1c0  0002c1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801c1c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a514  2000009c  0801c260  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a5b0  0801c260  0003a5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001577b  00000000  00000000  0003010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321a  00000000  00000000  0004588a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00048aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f46  00000000  00000000  00049da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c6  00000000  00000000  0006bcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d95d2  00000000  00000000  000854b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000e46  00000000  00000000  0015ea86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005074  00000000  00000000  0015f8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00164940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b6c 	.word	0x08008b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08008b6c 	.word	0x08008b6c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000acc:	e030      	b.n	8000b30 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1d1a      	adds	r2, r3, #4
 8000ad2:	60fa      	str	r2, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	60fa      	str	r2, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000ae2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ae6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000aea:	edd7 7a07 	vldr	s15, [r7, #28]
 8000aee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1d1a      	adds	r2, r3, #4
 8000afa:	60ba      	str	r2, [r7, #8]
 8000afc:	edc7 7a06 	vstr	s15, [r7, #24]
 8000b00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000b02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0e:	db07      	blt.n	8000b20 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000b10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b14:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000b1e:	e004      	b.n	8000b2a <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000b28:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1cb      	bne.n	8000ace <arm_cmplx_mag_f32+0x12>
  }

}
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	372c      	adds	r7, #44	; 0x2c
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	e043      	b.n	8000be0 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4413      	add	r3, r2
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	440b      	add	r3, r1
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	440b      	add	r3, r1
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

    i += 2;
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000be0:	897b      	ldrh	r3, [r7, #10]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3b7      	bcc.n	8000b58 <arm_bitreversal_32+0x14>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b0a0      	sub	sp, #128	; 0x80
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c1c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c34:	4413      	add	r3, r2
 8000c36:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c3e:	e1b6      	b.n	8000fae <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8000c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8000c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8000c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8000c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8000c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8000c76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8000c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8000c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8000c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8000c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8000c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8000c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8000ca0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ca4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	1d1a      	adds	r2, r3, #4
 8000cac:	603a      	str	r2, [r7, #0]
 8000cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8000cb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	1d1a      	adds	r2, r3, #4
 8000cc2:	603a      	str	r2, [r7, #0]
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8000ccc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000cd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	1d1a      	adds	r2, r3, #4
 8000cd8:	603a      	str	r2, [r7, #0]
 8000cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cde:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000ce2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ce6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	603a      	str	r2, [r7, #0]
 8000cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf4:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8000cf8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000cfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d04:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8000d08:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8000d18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000d28:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8000d38:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d42:	1d1a      	adds	r2, r3, #4
 8000d44:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8000d4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d58:	1d1a      	adds	r2, r3, #4
 8000d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8000d64:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d6e:	1d1a      	adds	r2, r3, #4
 8000d70:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000d7a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d84:	1d1a      	adds	r2, r3, #4
 8000d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8c:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8000d90:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d94:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9c:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8000da0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dac:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8000db0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000db4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbc:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000dc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dcc:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8000dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dd2:	1d1a      	adds	r2, r3, #4
 8000dd4:	673a      	str	r2, [r7, #112]	; 0x70
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ddc:	1d1a      	adds	r2, r3, #4
 8000dde:	673a      	str	r2, [r7, #112]	; 0x70
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8000de4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000de8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8000df4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000df8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e00:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8000e04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e10:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8000e14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e18:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8000e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	677a      	str	r2, [r7, #116]	; 0x74
 8000e2a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e2e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e36:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8000e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e3c:	1d1a      	adds	r2, r3, #4
 8000e3e:	677a      	str	r2, [r7, #116]	; 0x74
 8000e40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e44:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4c:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8000e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e54:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8000e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e64:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8000e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e74:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8000e80:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e84:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e92:	1d1a      	adds	r2, r3, #4
 8000e94:	67ba      	str	r2, [r7, #120]	; 0x78
 8000e96:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ea8:	1d1a      	adds	r2, r3, #4
 8000eaa:	67ba      	str	r2, [r7, #120]	; 0x78
 8000eac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000eb0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb8:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8000ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ebe:	1d1a      	adds	r2, r3, #4
 8000ec0:	673a      	str	r2, [r7, #112]	; 0x70
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8000ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ec8:	1d1a      	adds	r2, r3, #4
 8000eca:	673a      	str	r2, [r7, #112]	; 0x70
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8000ed0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000ed4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000edc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8000ee0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ee4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8000ef0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ef4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8000f00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f04:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8000f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f12:	1d1a      	adds	r2, r3, #4
 8000f14:	677a      	str	r2, [r7, #116]	; 0x74
 8000f16:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f1a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f22:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8000f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f28:	1d1a      	adds	r2, r3, #4
 8000f2a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000f30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f38:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8000f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f40:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8000f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f50:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f58:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8000f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f60:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8000f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f70:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8000f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f7e:	1d1a      	adds	r2, r3, #4
 8000f80:	67ba      	str	r2, [r7, #120]	; 0x78
 8000f82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f86:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8000f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f94:	1d1a      	adds	r2, r3, #4
 8000f96:	67ba      	str	r2, [r7, #120]	; 0x78
 8000f98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000f9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8000fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000faa:	3b01      	subs	r3, #1
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f ae45 	bne.w	8000c40 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000fc2:	f001 f80f 	bl	8001fe4 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2302      	movs	r3, #2
 8000fd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000fd2:	f001 f807 	bl	8001fe4 <arm_radix8_butterfly_f32>
}
 8000fd6:	bf00      	nop
 8000fd8:	3780      	adds	r7, #128	; 0x80
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b0ac      	sub	sp, #176	; 0xb0
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8000ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800100c:	4413      	add	r3, r2
 800100e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800101c:	4413      	add	r3, r2
 800101e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800102a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800102c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001030:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001036:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8001038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800103c:	3b04      	subs	r3, #4
 800103e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001046:	3b04      	subs	r3, #4
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800104c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001050:	3b04      	subs	r3, #4
 8001052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001060:	4413      	add	r3, r2
 8001062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800106e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800107e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800108c:	2304      	movs	r3, #4
 800108e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001090:	2306      	movs	r3, #6
 8001092:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010bc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3304      	adds	r3, #4
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010cc:	3304      	adds	r3, #4
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3304      	adds	r3, #4
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010e6:	3304      	adds	r3, #4
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80010f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010f8:	3304      	adds	r3, #4
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800110a:	3304      	adds	r3, #4
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800115c:	3304      	adds	r3, #4
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001166:	ee37 7a67 	vsub.f32	s14, s14, s15
 800116a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800116e:	3304      	adds	r3, #4
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800117c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001180:	3304      	adds	r3, #4
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800118a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001192:	3304      	adds	r3, #4
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80011a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80011ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80011c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80011cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	1d1a      	adds	r2, r3, #4
 80011dc:	603a      	str	r2, [r7, #0]
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80011e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ea:	3304      	adds	r3, #4
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80011f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011fc:	3304      	adds	r3, #4
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	1d1a      	adds	r2, r3, #4
 8001206:	603a      	str	r2, [r7, #0]
 8001208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120c:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8001210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001214:	1d1a      	adds	r2, r3, #4
 8001216:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800121a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800121c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800121e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001222:	1d1a      	adds	r2, r3, #4
 8001224:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800122c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001230:	1d1a      	adds	r2, r3, #4
 8001232:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800123a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800126c:	4413      	add	r3, r2
 800126e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800127a:	4413      	add	r3, r2
 800127c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001288:	4413      	add	r3, r2
 800128a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800128e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001292:	3b02      	subs	r3, #2
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800129a:	e31c      	b.n	80018d6 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	ed93 7a00 	vldr	s14, [r3]
 80012b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3304      	adds	r3, #4
 80012cc:	ed93 7a00 	vldr	s14, [r3]
 80012d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012d4:	3304      	adds	r3, #4
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3304      	adds	r3, #4
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ee:	3304      	adds	r3, #4
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80012fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001300:	3304      	adds	r3, #4
 8001302:	ed93 7a00 	vldr	s14, [r3]
 8001306:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800130a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001312:	3304      	adds	r3, #4
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800132c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800134c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001364:	3304      	adds	r3, #4
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800136e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001376:	3304      	adds	r3, #4
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001388:	3304      	adds	r3, #4
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800139a:	3304      	adds	r3, #4
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80013a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ac:	ed93 7a00 	vldr	s14, [r3]
 80013b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80013c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80013d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	1d1a      	adds	r2, r3, #4
 80013e4:	603a      	str	r2, [r7, #0]
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80013ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80013fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001404:	3304      	adds	r3, #4
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	1d1a      	adds	r2, r3, #4
 800140e:	603a      	str	r2, [r7, #0]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800141c:	3b04      	subs	r3, #4
 800141e:	ed93 7a00 	vldr	s14, [r3]
 8001422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001426:	3b04      	subs	r3, #4
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001438:	3b04      	subs	r3, #4
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001442:	3b04      	subs	r3, #4
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8001450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8001480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001494:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80014a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014b8:	3b04      	subs	r3, #4
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014c6:	3b04      	subs	r3, #4
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80014d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014d8:	3b04      	subs	r3, #4
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80014e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014ea:	3b04      	subs	r3, #4
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80014f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8001518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800153c:	3b04      	subs	r3, #4
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001546:	3b04      	subs	r3, #4
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001550:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800155c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001578:	1f1a      	subs	r2, r3, #4
 800157a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800158a:	3b04      	subs	r3, #4
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800159c:	3b04      	subs	r3, #4
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015a6:	1f1a      	subs	r2, r3, #4
 80015a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80015b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015b8:	1d1a      	adds	r2, r3, #4
 80015ba:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 80015c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015c6:	1d1a      	adds	r2, r3, #4
 80015c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 80015d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 80015e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 80015f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8001600:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001604:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8001610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001614:	1d1a      	adds	r2, r3, #4
 8001616:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800161a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800161e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800162a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162e:	1d1a      	adds	r2, r3, #4
 8001630:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001634:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001638:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001640:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8001644:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001648:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8001654:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001658:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8001664:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001668:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8001674:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001678:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8001684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001688:	1f1a      	subs	r2, r3, #4
 800168a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800168e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001692:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800169e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a2:	1f1a      	subs	r2, r3, #4
 80016a4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80016a8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 80016b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 80016c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016c4:	3304      	adds	r3, #4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 80016ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016d2:	4413      	add	r3, r2
 80016d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 80016d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 80016e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 80016f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001708:	edd7 7a07 	vldr	s15, [r7, #28]
 800170c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800171c:	1d1a      	adds	r2, r3, #4
 800171e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001722:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001726:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800173c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001740:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800174c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001750:	eef1 7a67 	vneg.f32	s15, s15
 8001754:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8001760:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001764:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001770:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001774:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001780:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001784:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001794:	1f1a      	subs	r2, r3, #4
 8001796:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800179a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800179e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 80017aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ae:	1f1a      	subs	r2, r3, #4
 80017b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80017b4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80017b8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 80017c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 80017cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 80017d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017de:	4413      	add	r3, r2
 80017e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 80017e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 80017f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8001804:	edd7 7a04 	vldr	s15, [r7, #16]
 8001808:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8001814:	edd7 7a03 	vldr	s15, [r7, #12]
 8001818:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8001824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001828:	1d1a      	adds	r2, r3, #4
 800182a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800182e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001832:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800183e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001842:	1d1a      	adds	r2, r3, #4
 8001844:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001848:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800184c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001854:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001858:	edd7 7a06 	vldr	s15, [r7, #24]
 800185c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001868:	edd7 7a05 	vldr	s15, [r7, #20]
 800186c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001878:	edd7 7a05 	vldr	s15, [r7, #20]
 800187c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001888:	edd7 7a06 	vldr	s15, [r7, #24]
 800188c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800189c:	1f1a      	subs	r2, r3, #4
 800189e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80018a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80018a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ae:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 80018b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018b6:	1f1a      	subs	r2, r3, #4
 80018b8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80018bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80018cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d0:	3b01      	subs	r3, #1
 80018d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f acde 	bne.w	800129c <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3304      	adds	r3, #4
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001918:	3304      	adds	r3, #4
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3304      	adds	r3, #4
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001932:	3304      	adds	r3, #4
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001944:	3304      	adds	r3, #4
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800194e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001956:	3304      	adds	r3, #4
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001970:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80019a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019a8:	3304      	adds	r3, #4
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80019b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019ba:	3304      	adds	r3, #4
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80019c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019cc:	3304      	adds	r3, #4
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80019d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019de:	3304      	adds	r3, #4
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80019ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	603a      	str	r2, [r7, #0]
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a36:	3304      	adds	r3, #4
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a48:	3304      	adds	r3, #4
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	603a      	str	r2, [r7, #0]
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001a6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a72:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001a7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001a8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a92:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001a9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001aa2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab2:	1d1a      	adds	r2, r3, #4
 8001ab4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001ab8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001abc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001acc:	1d1a      	adds	r2, r3, #4
 8001ace:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001ad2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ade:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001b04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001b14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b38:	1d1a      	adds	r2, r3, #4
 8001b3a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b74:	3304      	adds	r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001b8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bbe:	1d1a      	adds	r2, r3, #4
 8001bc0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bc4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd8:	1d1a      	adds	r2, r3, #4
 8001bda:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bde:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001be2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001bfc:	f000 f9f2 	bl	8001fe4 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c04:	b299      	uxth	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001c0e:	f000 f9e9 	bl	8001fe4 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c16:	b299      	uxth	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c20:	f000 f9e0 	bl	8001fe4 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2304      	movs	r3, #4
 8001c30:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c32:	f000 f9d7 	bl	8001fe4 <arm_radix8_butterfly_f32>
}
 8001c36:	bf00      	nop
 8001c38:	37b0      	adds	r7, #176	; 0xb0
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b088      	sub	sp, #32
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d117      	bne.n	8001c90 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3304      	adds	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e00d      	b.n	8001c88 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	eef1 7a67 	vneg.f32	s15, s15
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3ed      	bcc.n	8001c6c <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c96:	d040      	beq.n	8001d1a <arm_cfft_f32+0xdc>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9e:	d845      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca6:	d033      	beq.n	8001d10 <arm_cfft_f32+0xd2>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cae:	d83d      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d026      	beq.n	8001d06 <arm_cfft_f32+0xc8>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d835      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc6:	d028      	beq.n	8001d1a <arm_cfft_f32+0xdc>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cce:	d82d      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd6:	d01b      	beq.n	8001d10 <arm_cfft_f32+0xd2>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cde:	d825      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	d00f      	beq.n	8001d06 <arm_cfft_f32+0xc8>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b80      	cmp	r3, #128	; 0x80
 8001cea:	d81f      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d013      	beq.n	8001d1a <arm_cfft_f32+0xdc>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d819      	bhi.n	8001d2c <arm_cfft_f32+0xee>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d003      	beq.n	8001d06 <arm_cfft_f32+0xc8>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d005      	beq.n	8001d10 <arm_cfft_f32+0xd2>
 8001d04:	e012      	b.n	8001d2c <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7fe ff74 	bl	8000bf6 <arm_cfft_radix8by2_f32>
    break;
 8001d0e:	e00d      	b.n	8001d2c <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff f963 	bl	8000fde <arm_cfft_radix8by4_f32>
    break;
 8001d18:	e008      	b.n	8001d2c <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	b299      	uxth	r1, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	2301      	movs	r3, #1
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f000 f95d 	bl	8001fe4 <arm_radix8_butterfly_f32>
    break;
 8001d2a:	bf00      	nop
  }

  if ( bitReverseFlag )
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8999      	ldrh	r1, [r3, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f7fe ff01 	bl	8000b44 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d130      	bne.n	8001daa <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e01c      	b.n	8001da2 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	61ba      	str	r2, [r7, #24]
 8001d6e:	ed93 7a00 	vldr	s14, [r3]
 8001d72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eeb1 7a67 	vneg.f32	s14, s15
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3de      	bcc.n	8001d68 <arm_cfft_f32+0x12a>
    }
  }
}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <arm_cfft_init_2048_f32+0x44>)
 8001dd0:	899a      	ldrh	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	819a      	strh	r2, [r3, #12]
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <arm_cfft_init_2048_f32+0x44>)
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <arm_cfft_init_2048_f32+0x44>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	0801c04c 	.word	0x0801c04c

08001dfc <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <arm_cfft_init_1024_f32+0x44>)
 8001e18:	899a      	ldrh	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	819a      	strh	r2, [r3, #12]
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <arm_cfft_init_1024_f32+0x44>)
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <arm_cfft_init_1024_f32+0x44>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	0801c03c 	.word	0x0801c03c

08001e44 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <arm_cfft_init_512_f32+0x44>)
 8001e60:	899a      	ldrh	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	819a      	strh	r2, [r3, #12]
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <arm_cfft_init_512_f32+0x44>)
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <arm_cfft_init_512_f32+0x44>)
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	0801c02c 	.word	0x0801c02c

08001e8c <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <arm_cfft_init_256_f32+0x44>)
 8001ea8:	899a      	ldrh	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	819a      	strh	r2, [r3, #12]
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <arm_cfft_init_256_f32+0x44>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <arm_cfft_init_256_f32+0x44>)
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	0801c01c 	.word	0x0801c01c

08001ed4 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <arm_cfft_init_128_f32+0x40>)
 8001eee:	899a      	ldrh	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	819a      	strh	r2, [r3, #12]
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <arm_cfft_init_128_f32+0x40>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <arm_cfft_init_128_f32+0x40>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	0801c00c 	.word	0x0801c00c

08001f18 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <arm_cfft_init_64_f32+0x40>)
 8001f32:	899a      	ldrh	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	819a      	strh	r2, [r3, #12]
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <arm_cfft_init_64_f32+0x40>)
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <arm_cfft_init_64_f32+0x40>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	0801bffc 	.word	0x0801bffc

08001f5c <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <arm_cfft_init_32_f32+0x40>)
 8001f76:	899a      	ldrh	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	819a      	strh	r2, [r3, #12]
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <arm_cfft_init_32_f32+0x40>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <arm_cfft_init_32_f32+0x40>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	0801bfec 	.word	0x0801bfec

08001fa0 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <arm_cfft_init_16_f32+0x40>)
 8001fba:	899a      	ldrh	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	819a      	strh	r2, [r3, #12]
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <arm_cfft_init_16_f32+0x40>)
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <arm_cfft_init_16_f32+0x40>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	0801bfdc 	.word	0x0801bfdc

08001fe4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b0bd      	sub	sp, #244	; 0xf4
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <arm_radix8_butterfly_f32+0x3c>)
 8001ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8002004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800200c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800201c:	e002      	b.n	8002024 <arm_radix8_butterfly_f32+0x40>
 800201e:	bf00      	nop
 8002020:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002024:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800202c:	4413      	add	r3, r2
 800202e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002032:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	4413      	add	r3, r2
 800203c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002040:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002048:	4413      	add	r3, r2
 800204a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800204e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002056:	4413      	add	r3, r2
 8002058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800205c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002064:	4413      	add	r3, r2
 8002066:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800206a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002072:	4413      	add	r3, r2
 8002074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800207c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002080:	4413      	add	r3, r2
 8002082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	ed93 7a00 	vldr	s14, [r3]
 8002094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80020aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	ed93 7a00 	vldr	s14, [r3]
 80020b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80020ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80020f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4413      	add	r3, r2
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800213a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800215e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	ed93 7a00 	vldr	s14, [r3]
 800216c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4413      	add	r3, r2
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80021a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021aa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80021b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80021c6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80021ca:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80021d6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80021da:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80021e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80021f4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800220e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002216:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800221a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	3304      	adds	r3, #4
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3304      	adds	r3, #4
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	3304      	adds	r3, #4
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	3304      	adds	r3, #4
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002266:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800226a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	3304      	adds	r3, #4
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	3304      	adds	r3, #4
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3304      	adds	r3, #4
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4413      	add	r3, r2
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	3304      	adds	r3, #4
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80022ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	3304      	adds	r3, #4
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4413      	add	r3, r2
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	3304      	adds	r3, #4
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4413      	add	r3, r2
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80022e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3304      	adds	r3, #4
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3304      	adds	r3, #4
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800230a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	3304      	adds	r3, #4
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	3304      	adds	r3, #4
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	3304      	adds	r3, #4
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	3304      	adds	r3, #4
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002356:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800235a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800235e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002366:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800236a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800236e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800237a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800237e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002386:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800238a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800238e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002396:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800239a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3304      	adds	r3, #4
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80023aa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80023b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	3304      	adds	r3, #4
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80023c6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80023ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80023d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80023e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80023ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80023fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80023fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002402:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002406:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	3304      	adds	r3, #4
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002416:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	3304      	adds	r3, #4
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002432:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800243e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002442:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002456:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800245a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800246e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002472:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002486:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800248a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800249e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80024a2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80024a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024aa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80024ae:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80024b2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80024b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80024be:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80024c2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80024c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80024ce:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80024d2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80024de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80024e2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80024e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ea:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80024ee:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80024f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80024fe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002502:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800250e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002512:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800251e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800252c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002534:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002546:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002560:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800256c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800257a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3304      	adds	r3, #4
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002596:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80025a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	3304      	adds	r3, #4
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80025b2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80025be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3304      	adds	r3, #4
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80025ce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80025da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3304      	adds	r3, #4
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4413      	add	r3, r2
 80025e6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80025ea:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f2:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80025f6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80025fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025fe:	4413      	add	r3, r2
 8002600:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800260a:	429a      	cmp	r2, r3
 800260c:	f4ff ad0a 	bcc.w	8002024 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002614:	2b07      	cmp	r3, #7
 8002616:	f240 84e3 	bls.w	8002fe0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800262c:	4413      	add	r3, r2
 800262e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002636:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800263a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800263c:	4413      	add	r3, r2
 800263e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002640:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002644:	4413      	add	r3, r2
 8002646:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002648:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800264a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800264c:	4413      	add	r3, r2
 800264e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002650:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002654:	4413      	add	r3, r2
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800265a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800265c:	4413      	add	r3, r2
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002664:	4413      	add	r3, r2
 8002666:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002668:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800268e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800269a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80026a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80026b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80026be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	3304      	adds	r3, #4
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80026ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	3304      	adds	r3, #4
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80026dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	3304      	adds	r3, #4
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80026ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	3304      	adds	r3, #4
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	3304      	adds	r3, #4
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	3304      	adds	r3, #4
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3304      	adds	r3, #4
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800272a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	4413      	add	r3, r2
 8002734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002738:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002740:	4413      	add	r3, r2
 8002742:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	4413      	add	r3, r2
 8002750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002754:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	4413      	add	r3, r2
 800275e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002762:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	4413      	add	r3, r2
 800276c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002778:	4413      	add	r3, r2
 800277a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800277e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002786:	4413      	add	r3, r2
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800278c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80027b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	ed93 7a00 	vldr	s14, [r3]
 80027be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80027d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80027f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002818:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800281c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	ed93 7a00 	vldr	s14, [r3]
 800284e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	ed93 7a00 	vldr	s14, [r3]
 8002872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002884:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80028ac:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028b0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80028bc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80028cc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80028d0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80028d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80028dc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80028e0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80028ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028fa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002906:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800290a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	3304      	adds	r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3304      	adds	r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800293e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed93 7a00 	vldr	s14, [r3]
 800294e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002962:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	3304      	adds	r3, #4
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800298e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3304      	adds	r3, #4
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	ed93 7a00 	vldr	s14, [r3]
 800299e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	3304      	adds	r3, #4
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80029b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3304      	adds	r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3304      	adds	r3, #4
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80029de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	3304      	adds	r3, #4
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	3304      	adds	r3, #4
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a02:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	ed93 7a00 	vldr	s14, [r3]
 8002a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3304      	adds	r3, #4
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	ed93 7a00 	vldr	s14, [r3]
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	3304      	adds	r3, #4
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a52:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002a56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a62:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002a66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a6a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002a76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a82:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002a86:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002a96:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002a9a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002aa6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002aaa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	3304      	adds	r3, #4
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002ad2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ad6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002ae2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ae6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002af2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002af6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002b02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b06:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002b12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002b22:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002b32:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b50:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	3304      	adds	r3, #4
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002b78:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b84:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002b88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002b8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b94:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002b98:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002ba8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002bac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002bb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	3304      	adds	r3, #4
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bea:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002bee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002bf2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002bfe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002c02:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002c0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c12:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002c1e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002c22:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	3304      	adds	r3, #4
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c60:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002c64:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002c68:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c70:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c78:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002c7c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002c80:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c90:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8002c94:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002c98:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002cac:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002cb0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8002cc4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002cc8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8002cd4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002cd8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8002ce4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ce8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8002cf4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002cf8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8002d04:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d10:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8002d14:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d20:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8002d24:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002d28:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8002d34:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002d38:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d40:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8002d44:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002d48:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d50:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8002d54:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002d58:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d60:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8002d64:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002d68:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d70:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8002d74:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002d78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d80:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8002d84:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d88:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8002d94:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d98:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8002da4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002da8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8002db4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002db8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8002dc4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002dc8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8002dd4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8002de4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002de8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8002df4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002df8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e00:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8002e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3304      	adds	r3, #4
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e36:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8002e3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e3e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8002e4a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002e4e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8002e5a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e5e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8002e6a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002e6e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8002e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8002e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eac:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8002eb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002eb4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8002ec0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ec4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ecc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8002ed0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002ed4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002edc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8002ee0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ee4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8002ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002efe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f06:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8002f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3304      	adds	r3, #4
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f22:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8002f26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f2a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8002f36:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f3a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8002f46:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002f4a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8002f56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f5a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8002f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8002f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	3304      	adds	r3, #4
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f98:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8002f9c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f4ff abba 	bcc.w	800272a <arm_radix8_butterfly_f32+0x746>

         j++;
 8002fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8002fc0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f4ff ab2c 	bcc.w	8002626 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8002fce:	893b      	ldrh	r3, [r7, #8]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	f63f a813 	bhi.w	8002004 <arm_radix8_butterfly_f32+0x20>
}
 8002fde:	e000      	b.n	8002fe2 <arm_radix8_butterfly_f32+0xffe>
         break;
 8002fe0:	bf00      	nop
}
 8002fe2:	bf00      	nop
 8002fe4:	37f4      	adds	r7, #244	; 0xf4
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b095      	sub	sp, #84	; 0x54
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800301e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	64ba      	str	r2, [r7, #72]	; 0x48
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800303e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003042:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800304e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003052:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800305e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003062:	edd7 7a08 	vldr	s15, [r7, #32]
 8003066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	1d1a      	adds	r2, r3, #4
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003078:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800307c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003080:	edd7 7a08 	vldr	s15, [r7, #32]
 8003084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003096:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80030a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a6:	3308      	adds	r3, #8
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80030b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c4:	1d1a      	adds	r2, r3, #4
 80030c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80030cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80030d6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80030e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80030ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f2:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80030f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80030fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003106:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800310a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003116:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800311a:	edd7 7a08 	vldr	s15, [r7, #32]
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8003126:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800312a:	edd7 7a08 	vldr	s15, [r7, #32]
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8003136:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800313a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800313e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003142:	edd7 7a07 	vldr	s15, [r7, #28]
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314a:	edd7 7a04 	vldr	s15, [r7, #16]
 800314e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1d1a      	adds	r2, r3, #4
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800315c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003160:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003164:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003168:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800316c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003170:	edd7 7a06 	vldr	s15, [r7, #24]
 8003174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003178:	edd7 7a05 	vldr	s15, [r7, #20]
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800318a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800318e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8003192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003194:	3308      	adds	r3, #8
 8003196:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	3b08      	subs	r3, #8
 800319c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	3b01      	subs	r3, #1
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f73f af7f 	bgt.w	80030aa <stage_rfft_f32+0xba>
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3754      	adds	r7, #84	; 0x54
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b095      	sub	sp, #84	; 0x54
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80031dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80031e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80031e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ea:	3308      	adds	r3, #8
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80031ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80031f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003208:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800320c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003210:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003226:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800322a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4413      	add	r3, r2
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8003234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003236:	3308      	adds	r3, #8
 8003238:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800323a:	e07c      	b.n	8003336 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8003242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8003248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8003254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	64ba      	str	r2, [r7, #72]	; 0x48
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800325e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	64ba      	str	r2, [r7, #72]	; 0x48
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8003268:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800326c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8003278:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800327c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003284:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003288:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800328c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8003298:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800329c:	edd7 7a08 	vldr	s15, [r7, #32]
 80032a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80032a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80032ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80032b8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80032bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80032c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80032d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f2:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80032f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80032fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003302:	edd7 7a05 	vldr	s15, [r7, #20]
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	edd7 7a04 	vldr	s15, [r7, #16]
 800330e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003320:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8003324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003326:	3308      	adds	r3, #8
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	3b08      	subs	r3, #8
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8003330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003332:	3b01      	subs	r3, #1
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	2b00      	cmp	r3, #0
 800333a:	f73f af7f 	bgt.w	800323c <merge_rfft_f32+0x82>
   }

}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	3754      	adds	r7, #84	; 0x54
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff ff26 	bl	80031ba <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	2301      	movs	r3, #1
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	6978      	ldr	r0, [r7, #20]
 8003376:	f7fe fc62 	bl	8001c3e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800337a:	e00a      	b.n	8003392 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	2301      	movs	r3, #1
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7fe fc5b 	bl	8001c3e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fe2f 	bl	8002ff0 <stage_rfft_f32>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <arm_rfft_fast_init_32_f32+0x14>
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
 80033ae:	e013      	b.n	80033d8 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fdf4 	bl	8001fa0 <arm_cfft_init_16_f32>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80033bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	e006      	b.n	80033d8 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <arm_rfft_fast_init_32_f32+0x44>)
 80033d4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	0801405c 	.word	0x0801405c

080033e4 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <arm_rfft_fast_init_64_f32+0x14>
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	e013      	b.n	8003420 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fdae 	bl	8001f5c <arm_cfft_init_32_f32>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 800340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003410:	e006      	b.n	8003420 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <arm_rfft_fast_init_64_f32+0x44>)
 800341c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	080140dc 	.word	0x080140dc

0800342c <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <arm_rfft_fast_init_128_f32+0x14>
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	e013      	b.n	8003468 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fd68 	bl	8001f18 <arm_cfft_init_64_f32>
 8003448:	4603      	mov	r3, r0
 800344a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003458:	e006      	b.n	8003468 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a03      	ldr	r2, [pc, #12]	; (8003470 <arm_rfft_fast_init_128_f32+0x44>)
 8003464:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	080141dc 	.word	0x080141dc

08003474 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <arm_rfft_fast_init_256_f32+0x14>
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e014      	b.n	80034b2 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fd22 	bl	8001ed4 <arm_cfft_init_128_f32>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 800349c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a0:	e007      	b.n	80034b2 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <arm_rfft_fast_init_256_f32+0x48>)
 80034ae:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	080143dc 	.word	0x080143dc

080034c0 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <arm_rfft_fast_init_512_f32+0x14>
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e014      	b.n	80034fe <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fcd8 	bl	8001e8c <arm_cfft_init_256_f32>
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80034e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	e007      	b.n	80034fe <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a03      	ldr	r2, [pc, #12]	; (8003508 <arm_rfft_fast_init_512_f32+0x48>)
 80034fa:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	080147dc 	.word	0x080147dc

0800350c <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <arm_rfft_fast_init_1024_f32+0x14>
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e014      	b.n	800354a <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fc8e 	bl	8001e44 <arm_cfft_init_512_f32>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8003534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003538:	e007      	b.n	800354a <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003540:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a03      	ldr	r2, [pc, #12]	; (8003554 <arm_rfft_fast_init_1024_f32+0x48>)
 8003546:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08014fdc 	.word	0x08014fdc

08003558 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <arm_rfft_fast_init_2048_f32+0x14>
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	e014      	b.n	8003596 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fc44 	bl	8001dfc <arm_cfft_init_1024_f32>
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8003580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003584:	e007      	b.n	8003596 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a03      	ldr	r2, [pc, #12]	; (80035a0 <arm_rfft_fast_init_2048_f32+0x48>)
 8003592:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	08015fdc 	.word	0x08015fdc

080035a4 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <arm_rfft_fast_init_4096_f32+0x14>
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	e014      	b.n	80035e2 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fbfa 	bl	8001db4 <arm_cfft_init_2048_f32>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80035c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 80035cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d0:	e007      	b.n	80035e2 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035d8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a03      	ldr	r2, [pc, #12]	; (80035ec <arm_rfft_fast_init_4096_f32+0x48>)
 80035de:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	08017fdc 	.word	0x08017fdc

080035f0 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003602:	d023      	beq.n	800364c <arm_rfft_fast_init_f32+0x5c>
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	dc50      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 800360a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360e:	d023      	beq.n	8003658 <arm_rfft_fast_init_f32+0x68>
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003614:	dc4a      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d023      	beq.n	8003664 <arm_rfft_fast_init_f32+0x74>
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	dc44      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 8003622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003626:	d023      	beq.n	8003670 <arm_rfft_fast_init_f32+0x80>
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	dc3e      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d023      	beq.n	800367c <arm_rfft_fast_init_f32+0x8c>
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	dc38      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d024      	beq.n	8003688 <arm_rfft_fast_init_f32+0x98>
 800363e:	2b80      	cmp	r3, #128	; 0x80
 8003640:	dc34      	bgt.n	80036ac <arm_rfft_fast_init_f32+0xbc>
 8003642:	2b20      	cmp	r3, #32
 8003644:	d02c      	beq.n	80036a0 <arm_rfft_fast_init_f32+0xb0>
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d024      	beq.n	8003694 <arm_rfft_fast_init_f32+0xa4>
 800364a:	e02f      	b.n	80036ac <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ffa9 	bl	80035a4 <arm_rfft_fast_init_4096_f32>
 8003652:	4603      	mov	r3, r0
 8003654:	73fb      	strb	r3, [r7, #15]
    break;
 8003656:	e02c      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff7d 	bl	8003558 <arm_rfft_fast_init_2048_f32>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
    break;
 8003662:	e026      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff51 	bl	800350c <arm_rfft_fast_init_1024_f32>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
    break;
 800366e:	e020      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff25 	bl	80034c0 <arm_rfft_fast_init_512_f32>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
    break;
 800367a:	e01a      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fef9 	bl	8003474 <arm_rfft_fast_init_256_f32>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
    break;
 8003686:	e014      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fecf 	bl	800342c <arm_rfft_fast_init_128_f32>
 800368e:	4603      	mov	r3, r0
 8003690:	73fb      	strb	r3, [r7, #15]
    break;
 8003692:	e00e      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff fea5 	bl	80033e4 <arm_rfft_fast_init_64_f32>
 800369a:	4603      	mov	r3, r0
 800369c:	73fb      	strb	r3, [r7, #15]
    break;
 800369e:	e008      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fe7b 	bl	800339c <arm_rfft_fast_init_32_f32>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
    break;
 80036aa:	e002      	b.n	80036b2 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	e001      	b.n	80036b6 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036c4:	f000 fd65 	bl	8004192 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80036c8:	f000 f8ac 	bl	8003824 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036cc:	f000 fa36 	bl	8003b3c <MX_GPIO_Init>
	MX_TIM2_Init();
 80036d0:	f000 f96e 	bl	80039b0 <MX_TIM2_Init>
	MX_TIM15_Init();
 80036d4:	f000 f9e0 	bl	8003a98 <MX_TIM15_Init>
	MX_ADC1_Init();
 80036d8:	f000 f906 	bl	80038e8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80036dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036e0:	4844      	ldr	r0, [pc, #272]	; (80037f4 <main+0x134>)
 80036e2:	f7ff ff85 	bl	80035f0 <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80036e6:	217f      	movs	r1, #127	; 0x7f
 80036e8:	4843      	ldr	r0, [pc, #268]	; (80037f8 <main+0x138>)
 80036ea:	f001 ff0d 	bl	8005508 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 80036ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f2:	4942      	ldr	r1, [pc, #264]	; (80037fc <main+0x13c>)
 80036f4:	4840      	ldr	r0, [pc, #256]	; (80037f8 <main+0x138>)
 80036f6:	f001 f8f1 	bl	80048dc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80036fa:	4841      	ldr	r0, [pc, #260]	; (8003800 <main+0x140>)
 80036fc:	f003 fc58 	bl	8006fb0 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init_TMR(&htim15);
 8003700:	4840      	ldr	r0, [pc, #256]	; (8003804 <main+0x144>)
 8003702:	f004 fd75 	bl	80081f0 <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 10);
 8003706:	210a      	movs	r1, #10
 8003708:	2000      	movs	r0, #0
 800370a:	f004 fdbd 	bl	8008288 <STEPPER_SetSpeed>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (halfFlag) {
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <main+0x148>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <main+0x66>
			process_data(0, BUFFER_SIZE / 2);
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	2000      	movs	r0, #0
 800371c:	f000 fb2c 	bl	8003d78 <process_data>
			halfFlag = 0;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <main+0x148>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
		}

		if (fullFlag) {
 8003726:	4b39      	ldr	r3, [pc, #228]	; (800380c <main+0x14c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <main+0x80>
			process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 8003730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003734:	2080      	movs	r0, #128	; 0x80
 8003736:	f000 fb1f 	bl	8003d78 <process_data>
			fullFlag = 0;
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <main+0x14c>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
		}

		if (updatedFlag) {
 8003740:	4b33      	ldr	r3, [pc, #204]	; (8003810 <main+0x150>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0e1      	beq.n	800370e <main+0x4e>
			curTime = HAL_GetTick();
 800374a:	f000 fd8b 	bl	8004264 <HAL_GetTick>
 800374e:	4603      	mov	r3, r0
 8003750:	4a30      	ldr	r2, [pc, #192]	; (8003814 <main+0x154>)
 8003752:	6013      	str	r3, [r2, #0]

			if (temp < minTemp + 3) {
 8003754:	2306      	movs	r3, #6
 8003756:	3303      	adds	r3, #3
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <main+0x158>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	dd17      	ble.n	80037a0 <main+0xe0>
				depth -= 5;
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <main+0x15c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3b05      	subs	r3, #5
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <main+0x15c>)
 8003778:	6013      	str	r3, [r2, #0]
				Stepper1_Dir = DIR_CW;
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <main+0x160>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
				STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <main+0x160>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800378a:	2000      	movs	r0, #0
 800378c:	f005 f836 	bl	80087fc <STEPPER_Step_Blocking>
				if (depth < 0) depth = 0;
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <main+0x15c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da28      	bge.n	80037ea <main+0x12a>
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <main+0x15c>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e024      	b.n	80037ea <main+0x12a>
			} else if (temp > maxTemp - 3) {
 80037a0:	230e      	movs	r3, #14
 80037a2:	3b03      	subs	r3, #3
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <main+0x158>)
 80037ae:	edd3 7a00 	vldr	s15, [r3]
 80037b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	d516      	bpl.n	80037ea <main+0x12a>
				depth += 5;
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <main+0x15c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3305      	adds	r3, #5
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <main+0x15c>)
 80037c4:	6013      	str	r3, [r2, #0]
				Stepper1_Dir = DIR_CCW;
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <main+0x160>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
				STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <main+0x160>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80037d6:	2000      	movs	r0, #0
 80037d8:	f005 f810 	bl	80087fc <STEPPER_Step_Blocking>
				if (depth > 200) depth = 200;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <main+0x15c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2bc8      	cmp	r3, #200	; 0xc8
 80037e2:	dd02      	ble.n	80037ea <main+0x12a>
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <main+0x15c>)
 80037e6:	22c8      	movs	r2, #200	; 0xc8
 80037e8:	601a      	str	r2, [r3, #0]
			}

			updatedFlag = 0;
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <main+0x150>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
		if (halfFlag) {
 80037f0:	e78d      	b.n	800370e <main+0x4e>
 80037f2:	bf00      	nop
 80037f4:	200003b8 	.word	0x200003b8
 80037f8:	200000b8 	.word	0x200000b8
 80037fc:	200001b4 	.word	0x200001b4
 8003800:	2000011c 	.word	0x2000011c
 8003804:	20000168 	.word	0x20000168
 8003808:	200003b4 	.word	0x200003b4
 800380c:	200003b5 	.word	0x200003b5
 8003810:	200003b6 	.word	0x200003b6
 8003814:	2000a458 	.word	0x2000a458
 8003818:	2000a450 	.word	0x2000a450
 800381c:	2000a454 	.word	0x2000a454
 8003820:	2000a45c 	.word	0x2000a45c

08003824 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b096      	sub	sp, #88	; 0x58
 8003828:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	2244      	movs	r2, #68	; 0x44
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f005 f968 	bl	8008b08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003838:	463b      	mov	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8003846:	f44f 7000 	mov.w	r0, #512	; 0x200
 800384a:	f002 f9ff 	bl	8005c4c <HAL_PWREx_ControlVoltageScaling>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8003854:	f000 fb57 	bl	8003f06 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8003858:	f002 f9da 	bl	8005c10 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <SystemClock_Config+0xc0>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <SystemClock_Config+0xc0>)
 8003864:	f023 0318 	bic.w	r3, r3, #24
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800386c:	2314      	movs	r3, #20
 800386e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003870:	2301      	movs	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800387c:	2360      	movs	r3, #96	; 0x60
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003880:	2302      	movs	r3, #2
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003884:	2301      	movs	r3, #1
 8003886:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003888:	2301      	movs	r3, #1
 800388a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 800388c:	2328      	movs	r3, #40	; 0x28
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003890:	2307      	movs	r3, #7
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003894:	2302      	movs	r3, #2
 8003896:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003898:	2302      	movs	r3, #2
 800389a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 fa29 	bl	8005cf8 <HAL_RCC_OscConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <SystemClock_Config+0x8c>
		Error_Handler();
 80038ac:	f000 fb2b 	bl	8003f06 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80038b0:	230f      	movs	r3, #15
 80038b2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b4:	2303      	movs	r3, #3
 80038b6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80038c4:	463b      	mov	r3, r7
 80038c6:	2104      	movs	r1, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fe29 	bl	8006520 <HAL_RCC_ClockConfig>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <SystemClock_Config+0xb4>
		Error_Handler();
 80038d4:	f000 fb17 	bl	8003f06 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80038d8:	f003 fa10 	bl	8006cfc <HAL_RCCEx_EnableMSIPLLMode>
}
 80038dc:	bf00      	nop
 80038de:	3758      	adds	r7, #88	; 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000

080038e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80038ee:	463b      	mov	r3, r7
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
 80038fc:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003900:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <MX_ADC1_Init+0xc0>)
 8003902:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800390a:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800391e:	2204      	movs	r2, #4
 8003920:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003924:	2200      	movs	r2, #0
 8003926:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800392a:	2200      	movs	r2, #0
 800392c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003930:	2201      	movs	r2, #1
 8003932:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003944:	2200      	movs	r2, #0
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003952:	2200      	movs	r2, #0
 8003954:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800395e:	4811      	ldr	r0, [pc, #68]	; (80039a4 <MX_ADC1_Init+0xbc>)
 8003960:	f000 fe7a 	bl	8004658 <HAL_ADC_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_ADC1_Init+0x86>
		Error_Handler();
 800396a:	f000 facc 	bl	8003f06 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <MX_ADC1_Init+0xc4>)
 8003970:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003972:	2306      	movs	r3, #6
 8003974:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800397a:	237f      	movs	r3, #127	; 0x7f
 800397c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800397e:	2304      	movs	r3, #4
 8003980:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003986:	463b      	mov	r3, r7
 8003988:	4619      	mov	r1, r3
 800398a:	4806      	ldr	r0, [pc, #24]	; (80039a4 <MX_ADC1_Init+0xbc>)
 800398c:	f001 f834 	bl	80049f8 <HAL_ADC_ConfigChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_ADC1_Init+0xb2>
		Error_Handler();
 8003996:	f000 fab6 	bl	8003f06 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200000b8 	.word	0x200000b8
 80039a8:	50040000 	.word	0x50040000
 80039ac:	14f00020 	.word	0x14f00020

080039b0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80039b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80039d0:	463b      	mov	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <MX_TIM2_Init+0xe4>)
 80039e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039e8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3;
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <MX_TIM2_Init+0xe4>)
 80039ec:	2203      	movs	r2, #3
 80039ee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <MX_TIM2_Init+0xe4>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <MX_TIM2_Init+0xe4>)
 80039f8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80039fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003a0a:	4822      	ldr	r0, [pc, #136]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a0c:	f003 fa78 	bl	8006f00 <HAL_TIM_Base_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8003a16:	f000 fa76 	bl	8003f06 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a24:	4619      	mov	r1, r3
 8003a26:	481b      	ldr	r0, [pc, #108]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a28:	f003 fd8e 	bl	8007548 <HAL_TIM_ConfigClockSource>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM2_Init+0x86>
		Error_Handler();
 8003a32:	f000 fa68 	bl	8003f06 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003a36:	4817      	ldr	r0, [pc, #92]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a38:	f003 fb0e 	bl	8007058 <HAL_TIM_PWM_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM2_Init+0x96>
		Error_Handler();
 8003a42:	f000 fa60 	bl	8003f06 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003a4e:	f107 031c 	add.w	r3, r7, #28
 8003a52:	4619      	mov	r1, r3
 8003a54:	480f      	ldr	r0, [pc, #60]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a56:	f004 f9e5 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8003a60:	f000 fa51 	bl	8003f06 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a64:	2360      	movs	r3, #96	; 0x60
 8003a66:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003a74:	463b      	mov	r3, r7
 8003a76:	2200      	movs	r2, #0
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4806      	ldr	r0, [pc, #24]	; (8003a94 <MX_TIM2_Init+0xe4>)
 8003a7c:	f003 fc50 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8003a86:	f000 fa3e 	bl	8003f06 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	3738      	adds	r7, #56	; 0x38
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000011c 	.word	0x2000011c

08003a98 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <MX_TIM15_Init+0xa0>)
 8003aba:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac2:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ace:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ae2:	4814      	ldr	r0, [pc, #80]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003ae4:	f003 fa0c 	bl	8006f00 <HAL_TIM_Base_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM15_Init+0x5a>
		Error_Handler();
 8003aee:	f000 fa0a 	bl	8003f06 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003af8:	f107 0310 	add.w	r3, r7, #16
 8003afc:	4619      	mov	r1, r3
 8003afe:	480d      	ldr	r0, [pc, #52]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003b00:	f003 fd22 	bl	8007548 <HAL_TIM_ConfigClockSource>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_TIM15_Init+0x76>
		Error_Handler();
 8003b0a:	f000 f9fc 	bl	8003f06 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4806      	ldr	r0, [pc, #24]	; (8003b34 <MX_TIM15_Init+0x9c>)
 8003b1c:	f004 f982 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_TIM15_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 8003b26:	f000 f9ee 	bl	8003f06 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000168 	.word	0x20000168
 8003b38:	40014000 	.word	0x40014000

08003b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_GPIO_Init+0x78>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
 8003b82:	2200      	movs	r2, #0
 8003b84:	211e      	movs	r1, #30
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8a:	f002 f829 	bl	8005be0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA2 PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8003b8e:	231e      	movs	r3, #30
 8003b90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba8:	f001 feb0 	bl	800590c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003bac:	bf00      	nop
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 8003bb8:	b5b0      	push	{r4, r5, r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8089 	beq.w	8003cdc <receive_bit+0x124>
		return;
	}
	for (int count = 0; count < floor(amount / 15); count++) {
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e00d      	b.n	8003bec <receive_bit+0x34>
		received[receivedIndex] = bit;
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <receive_bit+0x12c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4944      	ldr	r1, [pc, #272]	; (8003ce8 <receive_bit+0x130>)
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 8003bdc:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <receive_bit+0x12c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a40      	ldr	r2, [pc, #256]	; (8003ce4 <receive_bit+0x12c>)
 8003be4:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < floor(amount / 15); count++) {
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	6978      	ldr	r0, [r7, #20]
 8003bee:	f7fc fc41 	bl	8000474 <__aeabi_i2d>
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	4a3c      	ldr	r2, [pc, #240]	; (8003cec <receive_bit+0x134>)
 8003bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8003bfe:	441a      	add	r2, r3
 8003c00:	10d2      	asrs	r2, r2, #3
 8003c02:	17db      	asrs	r3, r3, #31
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fc34 	bl	8000474 <__aeabi_i2d>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc ff0a 	bl	8000a2c <__aeabi_dcmplt>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d8      	bne.n	8003bd0 <receive_bit+0x18>
	}
	if (receivedIndex > 23) {
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <receive_bit+0x12c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b17      	cmp	r3, #23
 8003c24:	dd5b      	ble.n	8003cde <receive_bit+0x126>
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 }
		 sprintf(msg, "\r\n");
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 */
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	2310      	movs	r3, #16
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	e033      	b.n	8003c9c <receive_bit+0xe4>
				count1++, count2++, count3++) {
			if (received[count1] + received[count2] + received[count3] >= 2) {
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <receive_bit+0x130>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c3c:	492a      	ldr	r1, [pc, #168]	; (8003ce8 <receive_bit+0x130>)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c44:	441a      	add	r2, r3
 8003c46:	4928      	ldr	r1, [pc, #160]	; (8003ce8 <receive_bit+0x130>)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c4e:	4413      	add	r3, r2
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	dd05      	ble.n	8003c60 <receive_bit+0xa8>
				message[count1] = '1';
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <receive_bit+0x138>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	2231      	movs	r2, #49	; 0x31
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e014      	b.n	8003c8a <receive_bit+0xd2>
			} else if (received[count1] + received[count2] + received[count3]
 8003c60:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <receive_bit+0x130>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c68:	491f      	ldr	r1, [pc, #124]	; (8003ce8 <receive_bit+0x130>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c70:	441a      	add	r2, r3
 8003c72:	491d      	ldr	r1, [pc, #116]	; (8003ce8 <receive_bit+0x130>)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	dc04      	bgt.n	8003c8a <receive_bit+0xd2>
					<= 1) {
				message[count1] = '0';
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <receive_bit+0x138>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	2230      	movs	r2, #48	; 0x30
 8003c88:	701a      	strb	r2, [r3, #0]
				count1++, count2++, count3++) {
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b07      	cmp	r3, #7
 8003ca0:	ddc8      	ble.n	8003c34 <receive_bit+0x7c>
			}
		}

		temp = strtol(message, NULL, 2);
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4812      	ldr	r0, [pc, #72]	; (8003cf0 <receive_bit+0x138>)
 8003ca8:	f004 ff24 	bl	8008af4 <strtol>
 8003cac:	ee07 0a90 	vmov	s15, r0
 8003cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <receive_bit+0x13c>)
 8003cb6:	edc3 7a00 	vstr	s15, [r3]
		temp /= 10;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <receive_bit+0x13c>)
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <receive_bit+0x13c>)
 8003cca:	edc3 7a00 	vstr	s15, [r3]

		updatedFlag = 1;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <receive_bit+0x140>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
		receivedIndex = 0;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <receive_bit+0x12c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e000      	b.n	8003cde <receive_bit+0x126>
		return;
 8003cdc:	bf00      	nop

	}
}
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce4:	2000a444 	.word	0x2000a444
 8003ce8:	2000a3e4 	.word	0x2000a3e4
 8003cec:	88888889 	.word	0x88888889
 8003cf0:	2000a3dc 	.word	0x2000a3dc
 8003cf4:	2000a450 	.word	0x2000a450
 8003cf8:	200003b6 	.word	0x200003b6

08003cfc <bit_detect>:

void bit_detect(int freq) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 100 && freq < ONE_FREQ + 100) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f240 726c 	movw	r2, #1900	; 0x76c
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	dd0a      	ble.n	8003d24 <bit_detect+0x28>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f640 0233 	movw	r2, #2099	; 0x833
 8003d14:	4293      	cmp	r3, r2
 8003d16:	dc05      	bgt.n	8003d24 <bit_detect+0x28>
		oneCount++;
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <bit_detect+0x74>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <bit_detect+0x74>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e008      	b.n	8003d36 <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <bit_detect+0x74>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f7ff ff44 	bl	8003bb8 <receive_bit>
		oneCount = 0;
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <bit_detect+0x74>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 100 && freq < ZERO_FREQ + 100) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003d3c:	dd0a      	ble.n	8003d54 <bit_detect+0x58>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f240 424b 	movw	r2, #1099	; 0x44b
 8003d44:	4293      	cmp	r3, r2
 8003d46:	dc05      	bgt.n	8003d54 <bit_detect+0x58>
		zeroCount++;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <bit_detect+0x78>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <bit_detect+0x78>)
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e009      	b.n	8003d68 <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <bit_detect+0x78>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7ff ff2c 	bl	8003bb8 <receive_bit>
		zeroCount = 0;
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <bit_detect+0x78>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
	}
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	2000a44c 	.word	0x2000a44c
 8003d74:	2000a448 	.word	0x2000a448

08003d78 <process_data>:

void process_data(int start, int end) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	 }
	 */
	float in;

	for (uint8_t count = start; count < end; count++) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	e076      	b.n	8003e76 <process_data+0xfe>
		// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <process_data+0x110>)
 8003d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003e8c <process_data+0x114>
 8003d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da2:	edc7 7a02 	vstr	s15, [r7, #8]

		// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <process_data+0x118>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <process_data+0x11c>)
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	601a      	str	r2, [r3, #0]
		fftIndex++;
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <process_data+0x118>)
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b21a      	sxth	r2, r3
 8003dc4:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <process_data+0x118>)
 8003dc6:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <process_data+0x118>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d14d      	bne.n	8003e70 <process_data+0xf8>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4a30      	ldr	r2, [pc, #192]	; (8003e98 <process_data+0x120>)
 8003dd8:	492e      	ldr	r1, [pc, #184]	; (8003e94 <process_data+0x11c>)
 8003dda:	4830      	ldr	r0, [pc, #192]	; (8003e9c <process_data+0x124>)
 8003ddc:	f7ff fab6 	bl	800334c <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 8003de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de4:	492e      	ldr	r1, [pc, #184]	; (8003ea0 <process_data+0x128>)
 8003de6:	482c      	ldr	r0, [pc, #176]	; (8003e98 <process_data+0x120>)
 8003de8:	f7fc fe68 	bl	8000abc <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 8003dec:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <process_data+0x12c>)
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <process_data+0x130>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	81bb      	strh	r3, [r7, #12]
 8003dfe:	e02b      	b.n	8003e58 <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 8003e00:	89bb      	ldrh	r3, [r7, #12]
 8003e02:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <process_data+0x128>)
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	ed93 7a00 	vldr	s14, [r3]
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <process_data+0x12c>)
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	dd1a      	ble.n	8003e52 <process_data+0xda>
					peakVal = fftMagOut[index];
 8003e1c:	89bb      	ldrh	r3, [r7, #12]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <process_data+0x128>)
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <process_data+0x12c>)
 8003e28:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8003e2a:	89bb      	ldrh	r3, [r7, #12]
 8003e2c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e3c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003eac <process_data+0x134>
 8003e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e48:	ee17 3a90 	vmov	r3, s15
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <process_data+0x130>)
 8003e50:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 8003e52:	89bb      	ldrh	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	81bb      	strh	r3, [r7, #12]
 8003e58:	89bb      	ldrh	r3, [r7, #12]
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5e:	d3cf      	bcc.n	8003e00 <process_data+0x88>
			}
			/*
			 sprintf(msg, "%hu\r\n", peakHz);
			 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			 */
			bit_detect(peakHz);
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <process_data+0x130>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff49 	bl	8003cfc <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <process_data+0x118>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	3301      	adds	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	dc84      	bgt.n	8003d88 <process_data+0x10>
		}
	}

}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200001b4 	.word	0x200001b4
 8003e8c:	37fffffc 	.word	0x37fffffc
 8003e90:	2000a3d0 	.word	0x2000a3d0
 8003e94:	200003d0 	.word	0x200003d0
 8003e98:	200043d0 	.word	0x200043d0
 8003e9c:	200003b8 	.word	0x200003b8
 8003ea0:	200083d0 	.word	0x200083d0
 8003ea4:	2000a3d4 	.word	0x2000a3d4
 8003ea8:	2000a3d8 	.word	0x2000a3d8
 8003eac:	45800000 	.word	0x45800000

08003eb0 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	200003b4 	.word	0x200003b4

08003ed0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_ADC_ConvCpltCallback+0x1c>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	200003b5 	.word	0x200003b5

08003ef0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f004 fcd3 	bl	80088a4 <STEPPER_TMR_OVF_ISR>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0a:	b672      	cpsid	i
}
 8003f0c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003f0e:	e7fe      	b.n	8003f0e <Error_Handler+0x8>

08003f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_MspInit+0x44>)
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <HAL_MspInit+0x44>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6613      	str	r3, [r2, #96]	; 0x60
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_MspInit+0x44>)
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_MspInit+0x44>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_MspInit+0x44>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_MspInit+0x44>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b09e      	sub	sp, #120	; 0x78
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f70:	f107 0310 	add.w	r3, r7, #16
 8003f74:	2254      	movs	r2, #84	; 0x54
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 fdc5 	bl	8008b08 <memset>
  if(hadc->Instance==ADC1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_ADC_MspInit+0xc0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d143      	bne.n	8004010 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003f8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f92:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb2:	f107 0310 	add.w	r3, r7, #16
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f002 fcaa 	bl	8006910 <HAL_RCCEx_PeriphCLKConfig>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003fc2:	f7ff ffa0 	bl	8003f06 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_ADC_MspInit+0xc4>)
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ffa:	230b      	movs	r3, #11
 8003ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800400c:	f001 fc7e 	bl	800590c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004010:	bf00      	nop
 8004012:	3778      	adds	r7, #120	; 0x78
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	50040000 	.word	0x50040000
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d114      	bne.n	800405c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6593      	str	r3, [r2, #88]	; 0x58
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	201c      	movs	r0, #28
 8004050:	f001 fb95 	bl	800577e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004054:	201c      	movs	r0, #28
 8004056:	f001 fbae 	bl	80057b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800405a:	e018      	b.n	800408e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0e      	ldr	r2, [pc, #56]	; (800409c <HAL_TIM_Base_MspInit+0x7c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6613      	str	r3, [r2, #96]	; 0x60
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_TIM_Base_MspInit+0x78>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	2018      	movs	r0, #24
 8004084:	f001 fb7b 	bl	800577e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004088:	2018      	movs	r0, #24
 800408a:	f001 fb94 	bl	80057b6 <HAL_NVIC_EnableIRQ>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	40014000 	.word	0x40014000

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <NMI_Handler+0x4>

080040a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <HardFault_Handler+0x4>

080040ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <MemManage_Handler+0x4>

080040b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040b6:	e7fe      	b.n	80040b6 <BusFault_Handler+0x4>

080040b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040bc:	e7fe      	b.n	80040bc <UsageFault_Handler+0x4>

080040be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ec:	f000 f8a6 	bl	800423c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80040fa:	f003 f80e 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000168 	.word	0x20000168

08004108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <TIM2_IRQHandler+0x10>)
 800410e:	f003 f804 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000011c 	.word	0x2000011c

0800411c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <SystemInit+0x20>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	4a05      	ldr	r2, [pc, #20]	; (800413c <SystemInit+0x20>)
 8004128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800412c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004144:	f7ff ffea 	bl	800411c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004148:	480c      	ldr	r0, [pc, #48]	; (800417c <LoopForever+0x6>)
  ldr r1, =_edata
 800414a:	490d      	ldr	r1, [pc, #52]	; (8004180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <LoopForever+0xe>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004150:	e002      	b.n	8004158 <LoopCopyDataInit>

08004152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004156:	3304      	adds	r3, #4

08004158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800415a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800415c:	d3f9      	bcc.n	8004152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415e:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004160:	4c0a      	ldr	r4, [pc, #40]	; (800418c <LoopForever+0x16>)
  movs r3, #0
 8004162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004164:	e001      	b.n	800416a <LoopFillZerobss>

08004166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004168:	3204      	adds	r2, #4

0800416a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800416a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800416c:	d3fb      	bcc.n	8004166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800416e:	f004 fcd9 	bl	8008b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004172:	f7ff faa5 	bl	80036c0 <main>

08004176 <LoopForever>:

LoopForever:
    b LoopForever
 8004176:	e7fe      	b.n	8004176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004178:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800417c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004180:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004184:	0801c1c4 	.word	0x0801c1c4
  ldr r2, =_sbss
 8004188:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800418c:	2000a5b0 	.word	0x2000a5b0

08004190 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004190:	e7fe      	b.n	8004190 <ADC1_IRQHandler>

08004192 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800419c:	2003      	movs	r0, #3
 800419e:	f001 fae3 	bl	8005768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041a2:	2000      	movs	r0, #0
 80041a4:	f000 f80e 	bl	80041c4 <HAL_InitTick>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	71fb      	strb	r3, [r7, #7]
 80041b2:	e001      	b.n	80041b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041b4:	f7ff feac 	bl	8003f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b8:	79fb      	ldrb	r3, [r7, #7]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_InitTick+0x6c>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d023      	beq.n	8004220 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_InitTick+0x70>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_InitTick+0x6c>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	4619      	mov	r1, r3
 80041e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 faef 	bl	80057d2 <HAL_SYSTICK_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d809      	bhi.n	8004214 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004200:	2200      	movs	r2, #0
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	f001 fab9 	bl	800577e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_InitTick+0x74>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e007      	b.n	8004224 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e004      	b.n	8004224 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e001      	b.n	8004224 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000008 	.word	0x20000008
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x20>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x24>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_IncTick+0x24>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000008 	.word	0x20000008
 8004260:	2000a460 	.word	0x2000a460

08004264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return uwTick;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_GetTick+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000a460 	.word	0x2000a460

0800427c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3360      	adds	r3, #96	; 0x60
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <LL_ADC_SetOffset+0x44>)
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	03fff000 	.word	0x03fff000

0800432c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3360      	adds	r3, #96	; 0x60
 800433a:	461a      	mov	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3360      	adds	r3, #96	; 0x60
 8004368:	461a      	mov	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	431a      	orrs	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3330      	adds	r3, #48	; 0x30
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	4413      	add	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	211f      	movs	r1, #31
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	401a      	ands	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0e9b      	lsrs	r3, r3, #26
 80043ec:	f003 011f 	and.w	r1, r3, #31
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	431a      	orrs	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3314      	adds	r3, #20
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	0e5b      	lsrs	r3, r3, #25
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0d1b      	lsrs	r3, r3, #20
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2107      	movs	r1, #7
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	401a      	ands	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0d1b      	lsrs	r3, r3, #20
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	43db      	mvns	r3, r3
 800447e:	401a      	ands	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0318 	and.w	r3, r3, #24
 8004486:	4908      	ldr	r1, [pc, #32]	; (80044a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004488:	40d9      	lsrs	r1, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	400b      	ands	r3, r1
 800448e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	0007ffff 	.word	0x0007ffff

080044ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80044bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6093      	str	r3, [r2, #8]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e4:	d101      	bne.n	80044ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800450c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004534:	d101      	bne.n	800453a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004584:	f043 0202 	orr.w	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <LL_ADC_IsEnabled+0x18>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <LL_ADC_IsEnabled+0x1a>
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d101      	bne.n	80045d6 <LL_ADC_IsDisableOngoing+0x18>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_ADC_IsDisableOngoing+0x1a>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d101      	bne.n	8004624 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d101      	bne.n	800464a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e126      	b.n	80048c0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fc69 	bl	8003f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff19 	bl	80044d0 <LL_ADC_IsDeepPowerDownEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff feff 	bl	80044ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff34 	bl	8004520 <LL_ADC_IsInternalRegulatorEnabled>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d115      	bne.n	80046ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ff18 	bl	80044f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046c8:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <HAL_ADC_Init+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	4a7f      	ldr	r2, [pc, #508]	; (80048cc <HAL_ADC_Init+0x274>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	099b      	lsrs	r3, r3, #6
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046dc:	e002      	b.n	80046e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f9      	bne.n	80046de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff ff16 	bl	8004520 <LL_ADC_IsInternalRegulatorEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f043 0210 	orr.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff76 	bl	800460c <LL_ADC_REG_IsConversionOngoing>
 8004720:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 80bf 	bne.w	80048ae <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 80bb 	bne.w	80048ae <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004740:	f043 0202 	orr.w	r2, r3, #2
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff23 	bl	8004598 <LL_ADC_IsEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004758:	485d      	ldr	r0, [pc, #372]	; (80048d0 <HAL_ADC_Init+0x278>)
 800475a:	f7ff ff1d 	bl	8004598 <LL_ADC_IsEnabled>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	485a      	ldr	r0, [pc, #360]	; (80048d4 <HAL_ADC_Init+0x27c>)
 800476c:	f7ff fd86 	bl	800427c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7e5b      	ldrb	r3, [r3, #25]
 8004774:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800477a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004780:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004786:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	3b01      	subs	r3, #1
 80047a4:	045b      	lsls	r3, r3, #17
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <HAL_ADC_Init+0x280>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff26 	bl	8004632 <LL_ADC_INJ_IsConversionOngoing>
 80047e6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13d      	bne.n	800486a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d13a      	bne.n	800486a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047f8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004800:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004810:	f023 0302 	bic.w	r3, r3, #2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004824:	2b01      	cmp	r3, #1
 8004826:	d118      	bne.n	800485a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800484a:	430a      	orrs	r2, r1
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	611a      	str	r2, [r3, #16]
 8004858:	e007      	b.n	800486a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10c      	bne.n	800488c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	f023 010f 	bic.w	r1, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
 800488a:	e007      	b.n	800489c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020f 	bic.w	r2, r2, #15
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
 80048ac:	e007      	b.n	80048be <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048be:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000000 	.word	0x20000000
 80048cc:	053e2d63 	.word	0x053e2d63
 80048d0:	50040000 	.word	0x50040000
 80048d4:	50040300 	.word	0x50040300
 80048d8:	fff0c007 	.word	0xfff0c007

080048dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fe8d 	bl	800460c <LL_ADC_REG_IsConversionOngoing>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d167      	bne.n	80049c8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_ADC_Start_DMA+0x2a>
 8004902:	2302      	movs	r3, #2
 8004904:	e063      	b.n	80049ce <HAL_ADC_Start_DMA+0xf2>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fc54 	bl	80051bc <ADC_Enable>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d14f      	bne.n	80049be <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f023 0206 	bic.w	r2, r3, #6
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	659a      	str	r2, [r3, #88]	; 0x58
 800494a:	e002      	b.n	8004952 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_ADC_Start_DMA+0xfc>)
 8004958:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_ADC_Start_DMA+0x100>)
 8004960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <HAL_ADC_Start_DMA+0x104>)
 8004968:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	221c      	movs	r2, #28
 8004970:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0210 	orr.w	r2, r2, #16
 8004988:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3340      	adds	r3, #64	; 0x40
 80049a4:	4619      	mov	r1, r3
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f000 ff1e 	bl	80057ea <HAL_DMA_Start_IT>
 80049ae:	4603      	mov	r3, r0
 80049b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fe14 	bl	80045e4 <LL_ADC_REG_StartConversion>
 80049bc:	e006      	b.n	80049cc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049c6:	e001      	b.n	80049cc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
 80049ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	08005387 	.word	0x08005387
 80049dc:	0800545f 	.word	0x0800545f
 80049e0:	0800547b 	.word	0x0800547b

080049e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0b6      	sub	sp, #216	; 0xd8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x22>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e3bb      	b.n	8005192 <HAL_ADC_ConfigChannel+0x79a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fdf0 	bl	800460c <LL_ADC_REG_IsConversionOngoing>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 83a0 	bne.w	8005174 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d824      	bhi.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b02      	subs	r3, #2
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d81b      	bhi.n	8004a86 <HAL_ADC_ConfigChannel+0x8e>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_ADC_ConfigChannel+0x5c>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a6d 	.word	0x08004a6d
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004a64:	230c      	movs	r3, #12
 8004a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a6a:	e010      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004a6c:	2312      	movs	r3, #18
 8004a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a72:	e00c      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004a74:	2318      	movs	r3, #24
 8004a76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a7a:	e008      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a84:	e003      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004a86:	2306      	movs	r3, #6
 8004a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a9c:	f7ff fc8a 	bl	80043b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fdb1 	bl	800460c <LL_ADC_REG_IsConversionOngoing>
 8004aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fdbd 	bl	8004632 <LL_ADC_INJ_IsConversionOngoing>
 8004ab8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f040 81a4 	bne.w	8004e0e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 819f 	bne.w	8004e0e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f7ff fc95 	bl	800440c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d00a      	beq.n	8004b1a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6919      	ldr	r1, [r3, #16]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b14:	f7ff fbe6 	bl	80042e4 <LL_ADC_SetOffset>
 8004b18:	e179      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fc03 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x14e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fbf8 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	f003 021f 	and.w	r2, r3, #31
 8004b44:	e01e      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x18c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fbed 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b5c:	fa93 f3a3 	rbit	r3, r3
 8004b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004b74:	2320      	movs	r3, #32
 8004b76:	e004      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004b78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b7c:	fab3 f383 	clz	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x1a4>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	e018      	b.n	8004bce <HAL_ADC_ConfigChannel+0x1d6>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e004      	b.n	8004bce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bc8:	fab3 f383 	clz	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d106      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fbbc 	bl	8004358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fba0 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x214>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fb95 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004c02:	4603      	mov	r3, r0
 8004c04:	0e9b      	lsrs	r3, r3, #26
 8004c06:	f003 021f 	and.w	r2, r3, #31
 8004c0a:	e01e      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x252>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2101      	movs	r1, #1
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fb8a 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	e004      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x26a>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	e018      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x29c>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e004      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d106      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fb59 	bl	8004358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2102      	movs	r1, #2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fb3d 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x2da>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fb32 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	e01e      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x318>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fb27 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e004      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x330>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	0e9b      	lsrs	r3, r3, #26
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	e014      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x35a>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004d44:	2320      	movs	r3, #32
 8004d46:	e004      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d106      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fafa 	bl	8004358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2103      	movs	r1, #3
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fade 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x398>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2103      	movs	r1, #3
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fad3 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004d86:	4603      	mov	r3, r0
 8004d88:	0e9b      	lsrs	r3, r3, #26
 8004d8a:	f003 021f 	and.w	r2, r3, #31
 8004d8e:	e017      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x3c8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2103      	movs	r1, #3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fac8 	bl	800432c <LL_ADC_GetOffsetChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da2:	fa93 f3a3 	rbit	r3, r3
 8004da6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004daa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e003      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x3e0>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	e011      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x404>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004df0:	2320      	movs	r3, #32
 8004df2:	e003      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d106      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2103      	movs	r1, #3
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff faa5 	bl	8004358 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fbc0 	bl	8004598 <LL_ADC_IsEnabled>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f040 8140 	bne.w	80050a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6819      	ldr	r1, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f7ff fb19 	bl	8004464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a8f      	ldr	r2, [pc, #572]	; (8005074 <HAL_ADC_ConfigChannel+0x67c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	f040 8131 	bne.w	80050a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x46e>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	0e9b      	lsrs	r3, r3, #26
 8004e54:	3301      	adds	r3, #1
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	bf94      	ite	ls
 8004e5e:	2301      	movls	r3, #1
 8004e60:	2300      	movhi	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e019      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x4a2>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e76:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2b09      	cmp	r3, #9
 8004e92:	bf94      	ite	ls
 8004e94:	2301      	movls	r3, #1
 8004e96:	2300      	movhi	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d079      	beq.n	8004f92 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x4c2>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	0e9b      	lsrs	r3, r3, #26
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	069b      	lsls	r3, r3, #26
 8004eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb8:	e015      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x4ee>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	e003      	b.n	8004ede <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	3301      	adds	r3, #1
 8004ee0:	069b      	lsls	r3, r3, #26
 8004ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x50e>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	2101      	movs	r1, #1
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	e017      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x53e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004f1e:	2320      	movs	r3, #32
 8004f20:	e003      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	ea42 0103 	orr.w	r1, r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x564>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	0e9b      	lsrs	r3, r3, #26
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f003 021f 	and.w	r2, r3, #31
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	051b      	lsls	r3, r3, #20
 8004f5a:	e018      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x596>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004f74:	2320      	movs	r3, #32
 8004f76:	e003      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	f003 021f 	and.w	r2, r3, #31
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	e081      	b.n	8005096 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x5b6>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	0e9b      	lsrs	r3, r3, #26
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	069b      	lsls	r3, r3, #26
 8004fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fac:	e015      	b.n	8004fda <HAL_ADC_ConfigChannel+0x5e2>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	e003      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	069b      	lsls	r3, r3, #26
 8004fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x602>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	0e9b      	lsrs	r3, r3, #26
 8004fec:	3301      	adds	r3, #1
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	e017      	b.n	800502a <HAL_ADC_ConfigChannel+0x632>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	fa93 f3a3 	rbit	r3, r3
 8005006:	61bb      	str	r3, [r7, #24]
  return result;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005012:	2320      	movs	r3, #32
 8005014:	e003      	b.n	800501e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	3301      	adds	r3, #1
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2101      	movs	r1, #1
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	ea42 0103 	orr.w	r1, r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x65e>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	0e9b      	lsrs	r3, r3, #26
 8005040:	3301      	adds	r3, #1
 8005042:	f003 021f 	and.w	r2, r3, #31
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	3b1e      	subs	r3, #30
 800504e:	051b      	lsls	r3, r3, #20
 8005050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005054:	e01e      	b.n	8005094 <HAL_ADC_ConfigChannel+0x69c>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	60fb      	str	r3, [r7, #12]
  return result;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800506e:	2320      	movs	r3, #32
 8005070:	e006      	b.n	8005080 <HAL_ADC_ConfigChannel+0x688>
 8005072:	bf00      	nop
 8005074:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3301      	adds	r3, #1
 8005082:	f003 021f 	and.w	r2, r3, #31
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	3b1e      	subs	r3, #30
 800508e:	051b      	lsls	r3, r3, #20
 8005090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005094:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800509a:	4619      	mov	r1, r3
 800509c:	f7ff f9b6 	bl	800440c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b3d      	ldr	r3, [pc, #244]	; (800519c <HAL_ADC_ConfigChannel+0x7a4>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d06c      	beq.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050ac:	483c      	ldr	r0, [pc, #240]	; (80051a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80050ae:	f7ff f90b 	bl	80042c8 <LL_ADC_GetCommonPathInternalCh>
 80050b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <HAL_ADC_ConfigChannel+0x7ac>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d127      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d121      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a35      	ldr	r2, [pc, #212]	; (80051a8 <HAL_ADC_ConfigChannel+0x7b0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d157      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050de:	4619      	mov	r1, r3
 80050e0:	482f      	ldr	r0, [pc, #188]	; (80051a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80050e2:	f7ff f8de 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <HAL_ADC_ConfigChannel+0x7b4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <HAL_ADC_ConfigChannel+0x7b8>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005100:	e002      	b.n	8005108 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f9      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800510e:	e03a      	b.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <HAL_ADC_ConfigChannel+0x7bc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d113      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800511a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800511e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <HAL_ADC_ConfigChannel+0x7b0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d12a      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005138:	4619      	mov	r1, r3
 800513a:	4819      	ldr	r0, [pc, #100]	; (80051a0 <HAL_ADC_ConfigChannel+0x7a8>)
 800513c:	f7ff f8b1 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005140:	e021      	b.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d11c      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800514c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_ADC_ConfigChannel+0x7b0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800516a:	4619      	mov	r1, r3
 800516c:	480c      	ldr	r0, [pc, #48]	; (80051a0 <HAL_ADC_ConfigChannel+0x7a8>)
 800516e:	f7ff f898 	bl	80042a2 <LL_ADC_SetCommonPathInternalCh>
 8005172:	e008      	b.n	8005186 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800518e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005192:	4618      	mov	r0, r3
 8005194:	37d8      	adds	r7, #216	; 0xd8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	80080000 	.word	0x80080000
 80051a0:	50040300 	.word	0x50040300
 80051a4:	c7520000 	.word	0xc7520000
 80051a8:	50040000 	.word	0x50040000
 80051ac:	20000000 	.word	0x20000000
 80051b0:	053e2d63 	.word	0x053e2d63
 80051b4:	cb840000 	.word	0xcb840000
 80051b8:	80000001 	.word	0x80000001

080051bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff f9e3 	bl	8004598 <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d169      	bne.n	80052ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <ADC_Enable+0xfc>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f043 0210 	orr.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e055      	b.n	80052ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff f99e 	bl	8004548 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800520c:	482b      	ldr	r0, [pc, #172]	; (80052bc <ADC_Enable+0x100>)
 800520e:	f7ff f85b 	bl	80042c8 <LL_ADC_GetCommonPathInternalCh>
 8005212:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <ADC_Enable+0x104>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	4a28      	ldr	r2, [pc, #160]	; (80052c4 <ADC_Enable+0x108>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	099b      	lsrs	r3, r3, #6
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	4613      	mov	r3, r2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005236:	e002      	b.n	800523e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3b01      	subs	r3, #1
 800523c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f9      	bne.n	8005238 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005244:	f7ff f80e 	bl	8004264 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800524a:	e028      	b.n	800529e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff f9a1 	bl	8004598 <LL_ADC_IsEnabled>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f971 	bl	8004548 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005266:	f7fe fffd 	bl	8004264 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d914      	bls.n	800529e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b01      	cmp	r3, #1
 8005280:	d00d      	beq.n	800529e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e007      	b.n	80052ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d1cf      	bne.n	800524c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	8000003f 	.word	0x8000003f
 80052bc:	50040300 	.word	0x50040300
 80052c0:	20000000 	.word	0x20000000
 80052c4:	053e2d63 	.word	0x053e2d63

080052c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff f972 	bl	80045be <LL_ADC_IsDisableOngoing>
 80052da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f959 	bl	8004598 <LL_ADC_IsEnabled>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d047      	beq.n	800537c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d144      	bne.n	800537c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 030d 	and.w	r3, r3, #13
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10c      	bne.n	800531a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f933 	bl	8004570 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2203      	movs	r2, #3
 8005310:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005312:	f7fe ffa7 	bl	8004264 <HAL_GetTick>
 8005316:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005318:	e029      	b.n	800536e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0210 	orr.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	f043 0201 	orr.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e023      	b.n	800537e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005336:	f7fe ff95 	bl	8004264 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d914      	bls.n	800536e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0210 	orr.w	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e007      	b.n	800537e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1dc      	bne.n	8005336 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800539c:	2b00      	cmp	r3, #0
 800539e:	d14b      	bne.n	8005438 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d021      	beq.n	80053fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe ffe5 	bl	800438e <LL_ADC_REG_IsTriggerSourceSWStart>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d032      	beq.n	8005430 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d12b      	bne.n	8005430 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11f      	bne.n	8005430 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
 80053fc:	e018      	b.n	8005430 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d111      	bne.n	8005430 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe fd4d 	bl	8003ed0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005436:	e00e      	b.n	8005456 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff facd 	bl	80049e4 <HAL_ADC_ErrorCallback>
}
 800544a:	e004      	b.n	8005456 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7fe fd1f 	bl	8003eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f043 0204 	orr.w	r2, r3, #4
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fa9f 	bl	80049e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <LL_ADC_StartCalibration>:
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80054c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f4:	d101      	bne.n	80054fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_ADCEx_Calibration_Start+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e04d      	b.n	80055c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fecb 	bl	80052c8 <ADC_Disable>
 8005532:	4603      	mov	r3, r0
 8005534:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d136      	bne.n	80055aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005544:	f023 0302 	bic.w	r3, r3, #2
 8005548:	f043 0202 	orr.w	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ffa9 	bl	80054ae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800555c:	e014      	b.n	8005588 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3301      	adds	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800556a:	d30d      	bcc.n	8005588 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	f023 0312 	bic.w	r3, r3, #18
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e01b      	b.n	80055c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ffa7 	bl	80054e0 <LL_ADC_IsCalibrationOnGoing>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e2      	bne.n	800555e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	f023 0303 	bic.w	r3, r3, #3
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
 80055a8:	e005      	b.n	80055b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f043 0210 	orr.w	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <__NVIC_SetPriorityGrouping+0x44>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055e4:	4013      	ands	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <__NVIC_SetPriorityGrouping+0x44>)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	60d3      	str	r3, [r2, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <__NVIC_GetPriorityGrouping+0x18>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	f003 0307 	and.w	r3, r3, #7
}
 800561e:	4618      	mov	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db0b      	blt.n	8005656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	f003 021f 	and.w	r2, r3, #31
 8005644:	4907      	ldr	r1, [pc, #28]	; (8005664 <__NVIC_EnableIRQ+0x38>)
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2001      	movs	r0, #1
 800564e:	fa00 f202 	lsl.w	r2, r0, r2
 8005652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	e000e100 	.word	0xe000e100

08005668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	db0a      	blt.n	8005692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	490c      	ldr	r1, [pc, #48]	; (80056b4 <__NVIC_SetPriority+0x4c>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	0112      	lsls	r2, r2, #4
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	440b      	add	r3, r1
 800568c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005690:	e00a      	b.n	80056a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	4908      	ldr	r1, [pc, #32]	; (80056b8 <__NVIC_SetPriority+0x50>)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3b04      	subs	r3, #4
 80056a0:	0112      	lsls	r2, r2, #4
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	440b      	add	r3, r1
 80056a6:	761a      	strb	r2, [r3, #24]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000e100 	.word	0xe000e100
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f1c3 0307 	rsb	r3, r3, #7
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	bf28      	it	cs
 80056da:	2304      	movcs	r3, #4
 80056dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d902      	bls.n	80056ec <NVIC_EncodePriority+0x30>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3b03      	subs	r3, #3
 80056ea:	e000      	b.n	80056ee <NVIC_EncodePriority+0x32>
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43da      	mvns	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	401a      	ands	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005704:	f04f 31ff 	mov.w	r1, #4294967295
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	43d9      	mvns	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005714:	4313      	orrs	r3, r2
         );
}
 8005716:	4618      	mov	r0, r3
 8005718:	3724      	adds	r7, #36	; 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3b01      	subs	r3, #1
 8005730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005734:	d301      	bcc.n	800573a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005736:	2301      	movs	r3, #1
 8005738:	e00f      	b.n	800575a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <SysTick_Config+0x40>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005742:	210f      	movs	r1, #15
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	f7ff ff8e 	bl	8005668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <SysTick_Config+0x40>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <SysTick_Config+0x40>)
 8005754:	2207      	movs	r2, #7
 8005756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	e000e010 	.word	0xe000e010

08005768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff29 	bl	80055c8 <__NVIC_SetPriorityGrouping>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	4603      	mov	r3, r0
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005790:	f7ff ff3e 	bl	8005610 <__NVIC_GetPriorityGrouping>
 8005794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	6978      	ldr	r0, [r7, #20]
 800579c:	f7ff ff8e 	bl	80056bc <NVIC_EncodePriority>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff5d 	bl	8005668 <__NVIC_SetPriority>
}
 80057ae:	bf00      	nop
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	4603      	mov	r3, r0
 80057be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff ff31 	bl	800562c <__NVIC_EnableIRQ>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff ffa2 	bl	8005724 <SysTick_Config>
 80057e0:	4603      	mov	r3, r0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_DMA_Start_IT+0x20>
 8005806:	2302      	movs	r3, #2
 8005808:	e04b      	b.n	80058a2 <HAL_DMA_Start_IT+0xb8>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d13a      	bne.n	8005894 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f831 	bl	80058aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 020e 	orr.w	r2, r2, #14
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e00f      	b.n	8005882 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0204 	bic.w	r2, r2, #4
 8005870:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 020a 	orr.w	r2, r2, #10
 8005880:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e005      	b.n	80058a0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	f003 021c 	and.w	r2, r3, #28
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d108      	bne.n	80058ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ec:	e007      	b.n	80058fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	60da      	str	r2, [r3, #12]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800591a:	e148      	b.n	8005bae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	2101      	movs	r1, #1
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	4013      	ands	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 813a 	beq.w	8005ba8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d005      	beq.n	800594c <HAL_GPIO_Init+0x40>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d130      	bne.n	80059ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2203      	movs	r2, #3
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005982:	2201      	movs	r2, #1
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0201 	and.w	r2, r3, #1
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d017      	beq.n	80059ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d123      	bne.n	8005a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	08da      	lsrs	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3208      	adds	r2, #8
 80059fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	220f      	movs	r2, #15
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	08da      	lsrs	r2, r3, #3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3208      	adds	r2, #8
 8005a38:	6939      	ldr	r1, [r7, #16]
 8005a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	2203      	movs	r2, #3
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f003 0203 	and.w	r2, r3, #3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8094 	beq.w	8005ba8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <HAL_GPIO_Init+0x2c0>)
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	4a51      	ldr	r2, [pc, #324]	; (8005bcc <HAL_GPIO_Init+0x2c0>)
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8005a8c:	4b4f      	ldr	r3, [pc, #316]	; (8005bcc <HAL_GPIO_Init+0x2c0>)
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a98:	4a4d      	ldr	r2, [pc, #308]	; (8005bd0 <HAL_GPIO_Init+0x2c4>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	220f      	movs	r2, #15
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_GPIO_Init+0x1d4>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a43      	ldr	r2, [pc, #268]	; (8005bd4 <HAL_GPIO_Init+0x2c8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <HAL_GPIO_Init+0x1d0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a42      	ldr	r2, [pc, #264]	; (8005bd8 <HAL_GPIO_Init+0x2cc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_GPIO_Init+0x1cc>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e004      	b.n	8005ae2 <HAL_GPIO_Init+0x1d6>
 8005ad8:	2307      	movs	r3, #7
 8005ada:	e002      	b.n	8005ae2 <HAL_GPIO_Init+0x1d6>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_GPIO_Init+0x1d6>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	f002 0203 	and.w	r2, r2, #3
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	4093      	lsls	r3, r2
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005af2:	4937      	ldr	r1, [pc, #220]	; (8005bd0 <HAL_GPIO_Init+0x2c4>)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b00:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b24:	4a2d      	ldr	r2, [pc, #180]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4013      	ands	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b4e:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b54:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4013      	ands	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b7e:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <HAL_GPIO_Init+0x2d0>)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f47f aeaf 	bne.w	800591c <HAL_GPIO_Init+0x10>
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	48000400 	.word	0x48000400
 8005bd8:	48000800 	.word	0x48000800
 8005bdc:	40010400 	.word	0x40010400

08005be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	807b      	strh	r3, [r7, #2]
 8005bec:	4613      	mov	r3, r2
 8005bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bf0:	787b      	ldrb	r3, [r7, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bfc:	e002      	b.n	8005c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bfe:	887a      	ldrh	r2, [r7, #2]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1e:	6013      	str	r3, [r2, #0]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40007000 	.word	0x40007000

08005c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40007000 	.word	0x40007000

08005c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5a:	d130      	bne.n	8005cbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c5c:	4b23      	ldr	r3, [pc, #140]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c68:	d038      	beq.n	8005cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c72:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2232      	movs	r2, #50	; 0x32
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0c9b      	lsrs	r3, r3, #18
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c90:	e002      	b.n	8005c98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	d102      	bne.n	8005cac <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f2      	bne.n	8005c92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb8:	d110      	bne.n	8005cdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e00f      	b.n	8005cde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cca:	d007      	beq.n	8005cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40007000 	.word	0x40007000
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	431bde83 	.word	0x431bde83

08005cf8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f000 bc02 	b.w	8006510 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d0c:	4b96      	ldr	r3, [pc, #600]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d16:	4b94      	ldr	r3, [pc, #592]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80e4 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_RCC_OscConfig+0x4c>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	f040 808b 	bne.w	8005e52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	f040 8087 	bne.w	8005e52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d44:	4b88      	ldr	r3, [pc, #544]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_OscConfig+0x64>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e3d9      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1a      	ldr	r2, [r3, #32]
 8005d60:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_RCC_OscConfig+0x7e>
 8005d6c:	4b7e      	ldr	r3, [pc, #504]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d74:	e005      	b.n	8005d82 <HAL_RCC_OscConfig+0x8a>
 8005d76:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d223      	bcs.n	8005dce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fd60 	bl	8006850 <RCC_SetFlashLatencyFromMSIRange>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e3ba      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d9a:	4b73      	ldr	r3, [pc, #460]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a72      	ldr	r2, [pc, #456]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b70      	ldr	r3, [pc, #448]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	496d      	ldr	r1, [pc, #436]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005db8:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	4968      	ldr	r1, [pc, #416]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
 8005dcc:	e025      	b.n	8005e1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dce:	4b66      	ldr	r3, [pc, #408]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a65      	ldr	r2, [pc, #404]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dd4:	f043 0308 	orr.w	r3, r3, #8
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	4960      	ldr	r1, [pc, #384]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dec:	4b5e      	ldr	r3, [pc, #376]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	495b      	ldr	r1, [pc, #364]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fd20 	bl	8006850 <RCC_SetFlashLatencyFromMSIRange>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e37a      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e1a:	f000 fc81 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	4b51      	ldr	r3, [pc, #324]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	4950      	ldr	r1, [pc, #320]	; (8005f6c <HAL_RCC_OscConfig+0x274>)
 8005e2c:	5ccb      	ldrb	r3, [r1, r3]
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	fa22 f303 	lsr.w	r3, r2, r3
 8005e36:	4a4e      	ldr	r2, [pc, #312]	; (8005f70 <HAL_RCC_OscConfig+0x278>)
 8005e38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e3a:	4b4e      	ldr	r3, [pc, #312]	; (8005f74 <HAL_RCC_OscConfig+0x27c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe f9c0 	bl	80041c4 <HAL_InitTick>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d052      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	e35e      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d032      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e5a:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a42      	ldr	r2, [pc, #264]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e66:	f7fe f9fd 	bl	8004264 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e6e:	f7fe f9f9 	bl	8004264 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e347      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e80:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e8c:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a35      	ldr	r2, [pc, #212]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e92:	f043 0308 	orr.w	r3, r3, #8
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	4930      	ldr	r1, [pc, #192]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	492b      	ldr	r1, [pc, #172]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	604b      	str	r3, [r1, #4]
 8005ebe:	e01a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ec0:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ecc:	f7fe f9ca 	bl	8004264 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ed4:	f7fe f9c6 	bl	8004264 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e314      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x1dc>
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d073      	beq.n	8005fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_OscConfig+0x21c>
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d10e      	bne.n	8005f2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d063      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x2f0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d15f      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e2f1      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f34:	d106      	bne.n	8005f44 <HAL_RCC_OscConfig+0x24c>
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a0b      	ldr	r2, [pc, #44]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e025      	b.n	8005f90 <HAL_RCC_OscConfig+0x298>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f4c:	d114      	bne.n	8005f78 <HAL_RCC_OscConfig+0x280>
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a02      	ldr	r2, [pc, #8]	; (8005f68 <HAL_RCC_OscConfig+0x270>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e013      	b.n	8005f90 <HAL_RCC_OscConfig+0x298>
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0801c05c 	.word	0x0801c05c
 8005f70:	20000000 	.word	0x20000000
 8005f74:	20000004 	.word	0x20000004
 8005f78:	4ba0      	ldr	r3, [pc, #640]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a9f      	ldr	r2, [pc, #636]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4b9d      	ldr	r3, [pc, #628]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a9c      	ldr	r2, [pc, #624]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d013      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe f964 	bl	8004264 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa0:	f7fe f960 	bl	8004264 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e2ae      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fb2:	4b92      	ldr	r3, [pc, #584]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x2a8>
 8005fbe:	e014      	b.n	8005fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fe f950 	bl	8004264 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc8:	f7fe f94c 	bl	8004264 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	; 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e29a      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fda:	4b88      	ldr	r3, [pc, #544]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x2d0>
 8005fe6:	e000      	b.n	8005fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d060      	beq.n	80060b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_OscConfig+0x310>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d119      	bne.n	8006036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d116      	bne.n	8006036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006008:	4b7c      	ldr	r3, [pc, #496]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <HAL_RCC_OscConfig+0x328>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e277      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006020:	4b76      	ldr	r3, [pc, #472]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	4973      	ldr	r1, [pc, #460]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006034:	e040      	b.n	80060b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d023      	beq.n	8006086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800603e:	4b6f      	ldr	r3, [pc, #444]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a6e      	ldr	r2, [pc, #440]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fe f90b 	bl	8004264 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006052:	f7fe f907 	bl	8004264 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e255      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006064:	4b65      	ldr	r3, [pc, #404]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006070:	4b62      	ldr	r3, [pc, #392]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	495f      	ldr	r1, [pc, #380]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	e018      	b.n	80060b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006086:	4b5d      	ldr	r3, [pc, #372]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5c      	ldr	r2, [pc, #368]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 800608c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006092:	f7fe f8e7 	bl	8004264 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800609a:	f7fe f8e3 	bl	8004264 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e231      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060ac:	4b53      	ldr	r3, [pc, #332]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d03c      	beq.n	800613e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01c      	beq.n	8006106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060cc:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80060ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d2:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fe f8c2 	bl	8004264 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7fe f8be 	bl	8004264 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e20c      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060f6:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0ef      	beq.n	80060e4 <HAL_RCC_OscConfig+0x3ec>
 8006104:	e01b      	b.n	800613e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800610c:	4a3b      	ldr	r2, [pc, #236]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fe f8a5 	bl	8004264 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611e:	f7fe f8a1 	bl	8004264 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e1ef      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006130:	4b32      	ldr	r3, [pc, #200]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ef      	bne.n	800611e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80a6 	beq.w	8006298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614c:	2300      	movs	r3, #0
 800614e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006150:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10d      	bne.n	8006178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615c:	4b27      	ldr	r3, [pc, #156]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	4a26      	ldr	r2, [pc, #152]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6593      	str	r3, [r2, #88]	; 0x58
 8006168:	4b24      	ldr	r3, [pc, #144]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006174:	2301      	movs	r3, #1
 8006176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006178:	4b21      	ldr	r3, [pc, #132]	; (8006200 <HAL_RCC_OscConfig+0x508>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d118      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006184:	4b1e      	ldr	r3, [pc, #120]	; (8006200 <HAL_RCC_OscConfig+0x508>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <HAL_RCC_OscConfig+0x508>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006190:	f7fe f868 	bl	8004264 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fe f864 	bl	8004264 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e1b2      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <HAL_RCC_OscConfig+0x508>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d108      	bne.n	80061d0 <HAL_RCC_OscConfig+0x4d8>
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061ce:	e029      	b.n	8006224 <HAL_RCC_OscConfig+0x52c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d115      	bne.n	8006204 <HAL_RCC_OscConfig+0x50c>
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	4a07      	ldr	r2, [pc, #28]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_RCC_OscConfig+0x504>)
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061f8:	e014      	b.n	8006224 <HAL_RCC_OscConfig+0x52c>
 80061fa:	bf00      	nop
 80061fc:	40021000 	.word	0x40021000
 8006200:	40007000 	.word	0x40007000
 8006204:	4b9a      	ldr	r3, [pc, #616]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	4a99      	ldr	r2, [pc, #612]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006214:	4b96      	ldr	r3, [pc, #600]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	4a95      	ldr	r2, [pc, #596]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800621c:	f023 0304 	bic.w	r3, r3, #4
 8006220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d016      	beq.n	800625a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fe f81a 	bl	8004264 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fe f816 	bl	8004264 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e162      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624a:	4b89      	ldr	r3, [pc, #548]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ed      	beq.n	8006234 <HAL_RCC_OscConfig+0x53c>
 8006258:	e015      	b.n	8006286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fe f803 	bl	8004264 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd ffff 	bl	8004264 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e14b      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006278:	4b7d      	ldr	r3, [pc, #500]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ed      	bne.n	8006262 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006286:	7ffb      	ldrb	r3, [r7, #31]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d105      	bne.n	8006298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628c:	4b78      	ldr	r3, [pc, #480]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	4a77      	ldr	r2, [pc, #476]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03c      	beq.n	800631e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01c      	beq.n	80062e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062ac:	4b70      	ldr	r3, [pc, #448]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80062ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062b2:	4a6f      	ldr	r2, [pc, #444]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fd ffd2 	bl	8004264 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c4:	f7fd ffce 	bl	8004264 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e11c      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062d6:	4b66      	ldr	r3, [pc, #408]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80062d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ef      	beq.n	80062c4 <HAL_RCC_OscConfig+0x5cc>
 80062e4:	e01b      	b.n	800631e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062e6:	4b62      	ldr	r3, [pc, #392]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80062e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ec:	4a60      	ldr	r2, [pc, #384]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f6:	f7fd ffb5 	bl	8004264 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062fe:	f7fd ffb1 	bl	8004264 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e0ff      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ef      	bne.n	80062fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80f3 	beq.w	800650e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	2b02      	cmp	r3, #2
 800632e:	f040 80c9 	bne.w	80064c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006332:	4b4f      	ldr	r3, [pc, #316]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f003 0203 	and.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	429a      	cmp	r2, r3
 8006344:	d12c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	3b01      	subs	r3, #1
 8006352:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006354:	429a      	cmp	r2, r3
 8006356:	d123      	bne.n	80063a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006364:	429a      	cmp	r2, r3
 8006366:	d11b      	bne.n	80063a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006374:	429a      	cmp	r2, r3
 8006376:	d113      	bne.n	80063a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	3b01      	subs	r3, #1
 8006386:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006388:	429a      	cmp	r2, r3
 800638a:	d109      	bne.n	80063a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	3b01      	subs	r3, #1
 800639a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d06b      	beq.n	8006478 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d062      	beq.n	800646c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063a6:	4b32      	ldr	r3, [pc, #200]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0ac      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063b6:	4b2e      	ldr	r3, [pc, #184]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2d      	ldr	r2, [pc, #180]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80063bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063c2:	f7fd ff4f 	bl	8004264 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ca:	f7fd ff4b 	bl	8004264 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e099      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f0      	bne.n	80063ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	4b21      	ldr	r3, [pc, #132]	; (8006474 <HAL_RCC_OscConfig+0x77c>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063f8:	3a01      	subs	r2, #1
 80063fa:	0112      	lsls	r2, r2, #4
 80063fc:	4311      	orrs	r1, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006402:	0212      	lsls	r2, r2, #8
 8006404:	4311      	orrs	r1, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800640a:	0852      	lsrs	r2, r2, #1
 800640c:	3a01      	subs	r2, #1
 800640e:	0552      	lsls	r2, r2, #21
 8006410:	4311      	orrs	r1, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006416:	0852      	lsrs	r2, r2, #1
 8006418:	3a01      	subs	r2, #1
 800641a:	0652      	lsls	r2, r2, #25
 800641c:	4311      	orrs	r1, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006422:	06d2      	lsls	r2, r2, #27
 8006424:	430a      	orrs	r2, r1
 8006426:	4912      	ldr	r1, [pc, #72]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006428:	4313      	orrs	r3, r2
 800642a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006438:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 800643e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006444:	f7fd ff0e 	bl	8004264 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644c:	f7fd ff0a 	bl	8004264 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e058      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <HAL_RCC_OscConfig+0x778>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800646a:	e050      	b.n	800650e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e04f      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
 8006470:	40021000 	.word	0x40021000
 8006474:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006478:	4b27      	ldr	r3, [pc, #156]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d144      	bne.n	800650e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a23      	ldr	r2, [pc, #140]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 800648a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006490:	4b21      	ldr	r3, [pc, #132]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a20      	ldr	r2, [pc, #128]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 8006496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800649a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800649c:	f7fd fee2 	bl	8004264 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fd fede 	bl	8004264 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e02c      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x7ac>
 80064c2:	e024      	b.n	800650e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d01f      	beq.n	800650a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 80064d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fd fec5 	bl	8004264 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064de:	f7fd fec1 	bl	8004264 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e00f      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064f0:	4b09      	ldr	r3, [pc, #36]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f0      	bne.n	80064de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	4905      	ldr	r1, [pc, #20]	; (8006518 <HAL_RCC_OscConfig+0x820>)
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_RCC_OscConfig+0x824>)
 8006504:	4013      	ands	r3, r2
 8006506:	60cb      	str	r3, [r1, #12]
 8006508:	e001      	b.n	800650e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40021000 	.word	0x40021000
 800651c:	feeefffc 	.word	0xfeeefffc

08006520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0e7      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b75      	ldr	r3, [pc, #468]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d910      	bls.n	8006564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b72      	ldr	r3, [pc, #456]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0207 	bic.w	r2, r3, #7
 800654a:	4970      	ldr	r1, [pc, #448]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006552:	4b6e      	ldr	r3, [pc, #440]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d001      	beq.n	8006564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0cf      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	4b66      	ldr	r3, [pc, #408]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800657c:	429a      	cmp	r2, r3
 800657e:	d908      	bls.n	8006592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006580:	4b63      	ldr	r3, [pc, #396]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4960      	ldr	r1, [pc, #384]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 800658e:	4313      	orrs	r3, r2
 8006590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d04c      	beq.n	8006638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d107      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065a6:	4b5a      	ldr	r3, [pc, #360]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d121      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0a6      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065be:	4b54      	ldr	r3, [pc, #336]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d115      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e09a      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065d6:	4b4e      	ldr	r3, [pc, #312]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e08e      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065e6:	4b4a      	ldr	r3, [pc, #296]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e086      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065f6:	4b46      	ldr	r3, [pc, #280]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f023 0203 	bic.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4943      	ldr	r1, [pc, #268]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006604:	4313      	orrs	r3, r2
 8006606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006608:	f7fd fe2c 	bl	8004264 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	e00a      	b.n	8006626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006610:	f7fd fe28 	bl	8004264 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	; 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e06e      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	4b3a      	ldr	r3, [pc, #232]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 020c 	and.w	r2, r3, #12
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	429a      	cmp	r2, r3
 8006636:	d1eb      	bne.n	8006610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	4b31      	ldr	r3, [pc, #196]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006650:	429a      	cmp	r2, r3
 8006652:	d208      	bcs.n	8006666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	492b      	ldr	r1, [pc, #172]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d210      	bcs.n	8006696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006674:	4b25      	ldr	r3, [pc, #148]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f023 0207 	bic.w	r2, r3, #7
 800667c:	4923      	ldr	r1, [pc, #140]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_RCC_ClockConfig+0x1ec>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d001      	beq.n	8006696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e036      	b.n	8006704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	4918      	ldr	r1, [pc, #96]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066c0:	4b13      	ldr	r3, [pc, #76]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4910      	ldr	r1, [pc, #64]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066d4:	f000 f824 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <HAL_RCC_ClockConfig+0x1f0>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	091b      	lsrs	r3, r3, #4
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	490b      	ldr	r1, [pc, #44]	; (8006714 <HAL_RCC_ClockConfig+0x1f4>)
 80066e6:	5ccb      	ldrb	r3, [r1, r3]
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	4a09      	ldr	r2, [pc, #36]	; (8006718 <HAL_RCC_ClockConfig+0x1f8>)
 80066f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_ClockConfig+0x1fc>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd fd63 	bl	80041c4 <HAL_InitTick>
 80066fe:	4603      	mov	r3, r0
 8006700:	72fb      	strb	r3, [r7, #11]

  return status;
 8006702:	7afb      	ldrb	r3, [r7, #11]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40022000 	.word	0x40022000
 8006710:	40021000 	.word	0x40021000
 8006714:	0801c05c 	.word	0x0801c05c
 8006718:	20000000 	.word	0x20000000
 800671c:	20000004 	.word	0x20000004

08006720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672e:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006738:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x34>
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0c      	cmp	r3, #12
 800674c:	d121      	bne.n	8006792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d11e      	bne.n	8006792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006754:	4b34      	ldr	r3, [pc, #208]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006760:	4b31      	ldr	r3, [pc, #196]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 8006762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	e005      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006770:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800677c:	4a2b      	ldr	r2, [pc, #172]	; (800682c <HAL_RCC_GetSysClockFreq+0x10c>)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10d      	bne.n	80067a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006790:	e00a      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d102      	bne.n	800679e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <HAL_RCC_GetSysClockFreq+0x110>)
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e004      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d101      	bne.n	80067a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <HAL_RCC_GetSysClockFreq+0x114>)
 80067a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b0c      	cmp	r3, #12
 80067ac:	d134      	bne.n	8006818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067ae:	4b1e      	ldr	r3, [pc, #120]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d003      	beq.n	80067c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d003      	beq.n	80067cc <HAL_RCC_GetSysClockFreq+0xac>
 80067c4:	e005      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <HAL_RCC_GetSysClockFreq+0x110>)
 80067c8:	617b      	str	r3, [r7, #20]
      break;
 80067ca:	e005      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_RCC_GetSysClockFreq+0x114>)
 80067ce:	617b      	str	r3, [r7, #20]
      break;
 80067d0:	e002      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	617b      	str	r3, [r7, #20]
      break;
 80067d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	3301      	adds	r3, #1
 80067e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	fb03 f202 	mul.w	r2, r3, r2
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067fe:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <HAL_RCC_GetSysClockFreq+0x108>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	0e5b      	lsrs	r3, r3, #25
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	3301      	adds	r3, #1
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006818:	69bb      	ldr	r3, [r7, #24]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40021000 	.word	0x40021000
 800682c:	0801c06c 	.word	0x0801c06c
 8006830:	00f42400 	.word	0x00f42400
 8006834:	007a1200 	.word	0x007a1200

08006838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCC_GetHCLKFreq+0x14>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000000 	.word	0x20000000

08006850 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800685c:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006868:	f7ff f9e2 	bl	8005c30 <HAL_PWREx_GetVoltageRange>
 800686c:	6178      	str	r0, [r7, #20]
 800686e:	e014      	b.n	800689a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006870:	4b25      	ldr	r3, [pc, #148]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006874:	4a24      	ldr	r2, [pc, #144]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687a:	6593      	str	r3, [r2, #88]	; 0x58
 800687c:	4b22      	ldr	r3, [pc, #136]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006888:	f7ff f9d2 	bl	8005c30 <HAL_PWREx_GetVoltageRange>
 800688c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800688e:	4b1e      	ldr	r3, [pc, #120]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006892:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006898:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d10b      	bne.n	80068ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d919      	bls.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2ba0      	cmp	r3, #160	; 0xa0
 80068ac:	d902      	bls.n	80068b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068ae:	2302      	movs	r3, #2
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	e013      	b.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068b4:	2301      	movs	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	e010      	b.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b80      	cmp	r3, #128	; 0x80
 80068be:	d902      	bls.n	80068c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80068c0:	2303      	movs	r3, #3
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	e00a      	b.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b80      	cmp	r3, #128	; 0x80
 80068ca:	d102      	bne.n	80068d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068cc:	2302      	movs	r3, #2
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e004      	b.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b70      	cmp	r3, #112	; 0x70
 80068d6:	d101      	bne.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068d8:	2301      	movs	r3, #1
 80068da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f023 0207 	bic.w	r2, r3, #7
 80068e4:	4909      	ldr	r1, [pc, #36]	; (800690c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d001      	beq.n	80068fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	40022000 	.word	0x40022000

08006910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006918:	2300      	movs	r3, #0
 800691a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800691c:	2300      	movs	r3, #0
 800691e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006928:	2b00      	cmp	r3, #0
 800692a:	d031      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006934:	d01a      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006936:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800693a:	d814      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006940:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006944:	d10f      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006946:	4b5d      	ldr	r3, [pc, #372]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	4a5c      	ldr	r2, [pc, #368]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006952:	e00c      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f9de 	bl	8006d1c <RCCEx_PLLSAI1_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	74fb      	strb	r3, [r7, #19]
      break;
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800696c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800696e:	7cfb      	ldrb	r3, [r7, #19]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006974:	4b51      	ldr	r3, [pc, #324]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	494e      	ldr	r1, [pc, #312]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800698a:	e001      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	7cfb      	ldrb	r3, [r7, #19]
 800698e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 809e 	beq.w	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699e:	2300      	movs	r3, #0
 80069a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069a2:	4b46      	ldr	r3, [pc, #280]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00d      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b8:	4b40      	ldr	r3, [pc, #256]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	4a3f      	ldr	r2, [pc, #252]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c2:	6593      	str	r3, [r2, #88]	; 0x58
 80069c4:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d0:	2301      	movs	r3, #1
 80069d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d4:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a39      	ldr	r2, [pc, #228]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069e0:	f7fd fc40 	bl	8004264 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069e6:	e009      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e8:	f7fd fc3c 	bl	8004264 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d902      	bls.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	74fb      	strb	r3, [r7, #19]
        break;
 80069fa:	e005      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069fc:	4b30      	ldr	r3, [pc, #192]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006a08:	7cfb      	ldrb	r3, [r7, #19]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d15a      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a0e:	4b2b      	ldr	r3, [pc, #172]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d019      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a36:	4b21      	ldr	r3, [pc, #132]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a46:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a56:	4a19      	ldr	r2, [pc, #100]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fd fbfc 	bl	8004264 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6e:	e00b      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fd fbf8 	bl	8004264 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d902      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	74fb      	strb	r3, [r7, #19]
            break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0ec      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006a96:	7cfb      	ldrb	r3, [r7, #19]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	4904      	ldr	r1, [pc, #16]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ab2:	e009      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
 8006ab6:	74bb      	strb	r3, [r7, #18]
 8006ab8:	e006      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac8:	7c7b      	ldrb	r3, [r7, #17]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ace:	4b8a      	ldr	r3, [pc, #552]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	4a89      	ldr	r2, [pc, #548]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae6:	4b84      	ldr	r3, [pc, #528]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f023 0203 	bic.w	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4980      	ldr	r1, [pc, #512]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b08:	4b7b      	ldr	r3, [pc, #492]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f023 020c 	bic.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	4978      	ldr	r1, [pc, #480]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b2a:	4b73      	ldr	r3, [pc, #460]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	496f      	ldr	r1, [pc, #444]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b4c:	4b6a      	ldr	r3, [pc, #424]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	4967      	ldr	r1, [pc, #412]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b6e:	4b62      	ldr	r3, [pc, #392]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	495e      	ldr	r1, [pc, #376]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b90:	4b59      	ldr	r3, [pc, #356]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4956      	ldr	r1, [pc, #344]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bb2:	4b51      	ldr	r3, [pc, #324]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	494d      	ldr	r1, [pc, #308]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d028      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bd4:	4b48      	ldr	r3, [pc, #288]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	4945      	ldr	r1, [pc, #276]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bf4:	4b40      	ldr	r3, [pc, #256]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4a3f      	ldr	r2, [pc, #252]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bfe:	60d3      	str	r3, [r2, #12]
 8006c00:	e011      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c0a:	d10c      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f882 	bl	8006d1c <RCCEx_PLLSAI1_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006c22:	7cfb      	ldrb	r3, [r7, #19]
 8006c24:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d028      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c32:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	492d      	ldr	r1, [pc, #180]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c50:	d106      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5c:	60d3      	str	r3, [r2, #12]
 8006c5e:	e011      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c68:	d10c      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 f853 	bl	8006d1c <RCCEx_PLLSAI1_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c7a:	7cfb      	ldrb	r3, [r7, #19]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01c      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	4916      	ldr	r1, [pc, #88]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cae:	d10c      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f830 	bl	8006d1c <RCCEx_PLLSAI1_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc0:	7cfb      	ldrb	r3, [r7, #19]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cd6:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	4904      	ldr	r1, [pc, #16]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000

08006cfc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006d06:	f043 0304 	orr.w	r3, r3, #4
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000

08006d1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d2a:	4b74      	ldr	r3, [pc, #464]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d018      	beq.n	8006d68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d36:	4b71      	ldr	r3, [pc, #452]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0203 	and.w	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d10d      	bne.n	8006d62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
       ||
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d4e:	4b6b      	ldr	r3, [pc, #428]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	091b      	lsrs	r3, r3, #4
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d047      	beq.n	8006df2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e044      	b.n	8006df2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d018      	beq.n	8006da2 <RCCEx_PLLSAI1_Config+0x86>
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d825      	bhi.n	8006dc0 <RCCEx_PLLSAI1_Config+0xa4>
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d002      	beq.n	8006d7e <RCCEx_PLLSAI1_Config+0x62>
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d009      	beq.n	8006d90 <RCCEx_PLLSAI1_Config+0x74>
 8006d7c:	e020      	b.n	8006dc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d7e:	4b5f      	ldr	r3, [pc, #380]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11d      	bne.n	8006dc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d8e:	e01a      	b.n	8006dc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b5a      	ldr	r3, [pc, #360]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d116      	bne.n	8006dca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da0:	e013      	b.n	8006dca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006da2:	4b56      	ldr	r3, [pc, #344]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006dae:	4b53      	ldr	r3, [pc, #332]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dbe:	e006      	b.n	8006dce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc4:	e004      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dd6:	4b49      	ldr	r3, [pc, #292]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	430b      	orrs	r3, r1
 8006dec:	4943      	ldr	r1, [pc, #268]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d17c      	bne.n	8006ef2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006df8:	4b40      	ldr	r3, [pc, #256]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3f      	ldr	r2, [pc, #252]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e04:	f7fd fa2e 	bl	8004264 <HAL_GetTick>
 8006e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e0a:	e009      	b.n	8006e20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e0c:	f7fd fa2a 	bl	8004264 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d902      	bls.n	8006e20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e1e:	e005      	b.n	8006e2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1ef      	bne.n	8006e0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d15f      	bne.n	8006ef2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d110      	bne.n	8006e5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e38:	4b30      	ldr	r3, [pc, #192]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006e40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6892      	ldr	r2, [r2, #8]
 8006e48:	0211      	lsls	r1, r2, #8
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68d2      	ldr	r2, [r2, #12]
 8006e4e:	06d2      	lsls	r2, r2, #27
 8006e50:	430a      	orrs	r2, r1
 8006e52:	492a      	ldr	r1, [pc, #168]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	610b      	str	r3, [r1, #16]
 8006e58:	e027      	b.n	8006eaa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d112      	bne.n	8006e86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	0211      	lsls	r1, r2, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6912      	ldr	r2, [r2, #16]
 8006e76:	0852      	lsrs	r2, r2, #1
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0552      	lsls	r2, r2, #21
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	491f      	ldr	r1, [pc, #124]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	610b      	str	r3, [r1, #16]
 8006e84:	e011      	b.n	8006eaa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e86:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6892      	ldr	r2, [r2, #8]
 8006e96:	0211      	lsls	r1, r2, #8
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6952      	ldr	r2, [r2, #20]
 8006e9c:	0852      	lsrs	r2, r2, #1
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	0652      	lsls	r2, r2, #25
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	4915      	ldr	r1, [pc, #84]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a13      	ldr	r2, [pc, #76]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006eb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb6:	f7fd f9d5 	bl	8004264 <HAL_GetTick>
 8006eba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ebc:	e009      	b.n	8006ed2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ebe:	f7fd f9d1 	bl	8004264 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d902      	bls.n	8006ed2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
          break;
 8006ed0:	e005      	b.n	8006ede <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0ef      	beq.n	8006ebe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	4903      	ldr	r1, [pc, #12]	; (8006efc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000

08006f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e049      	b.n	8006fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fd f87a 	bl	8004020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f000 fbf4 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d001      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e03b      	b.n	8007040 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_TIM_Base_Start_IT+0x9c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIM_Base_Start_IT+0x4e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIM_Base_Start_IT+0x4e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d115      	bne.n	800702a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	4b13      	ldr	r3, [pc, #76]	; (8007054 <HAL_TIM_Base_Start_IT+0xa4>)
 8007006:	4013      	ands	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b06      	cmp	r3, #6
 800700e:	d015      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x8c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d011      	beq.n	800703c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007028:	e008      	b.n	800703c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e000      	b.n	800703e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40014000 	.word	0x40014000
 8007054:	00010007 	.word	0x00010007

08007058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e049      	b.n	80070fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f841 	bl	8007106 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f000 fb48 	bl	800772c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d020      	beq.n	800717e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01b      	beq.n	800717e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f06f 0202 	mvn.w	r2, #2
 800714e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fac2 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 800716a:	e005      	b.n	8007178 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fab4 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fac5 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d020      	beq.n	80071ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01b      	beq.n	80071ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0204 	mvn.w	r2, #4
 800719a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa9c 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 80071b6:	e005      	b.n	80071c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fa8e 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa9f 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f06f 0208 	mvn.w	r2, #8
 80071e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2204      	movs	r2, #4
 80071ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa76 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 8007202:	e005      	b.n	8007210 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fa68 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa79 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01b      	beq.n	8007262 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f06f 0210 	mvn.w	r2, #16
 8007232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2208      	movs	r2, #8
 8007238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa50 	bl	80076ee <HAL_TIM_IC_CaptureCallback>
 800724e:	e005      	b.n	800725c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa42 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa53 	bl	8007702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00c      	beq.n	8007286 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0201 	mvn.w	r2, #1
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fc fe35 	bl	8003ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00c      	beq.n	80072aa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe2d 	bl	8007f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00c      	beq.n	80072ce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fe25 	bl	8007f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa12 	bl	8007716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00c      	beq.n	8007316 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f06f 0220 	mvn.w	r2, #32
 800730e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fded 	bl	8007ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800733a:	2302      	movs	r3, #2
 800733c:	e0ff      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b14      	cmp	r3, #20
 800734a:	f200 80f0 	bhi.w	800752e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	080073a9 	.word	0x080073a9
 8007358:	0800752f 	.word	0x0800752f
 800735c:	0800752f 	.word	0x0800752f
 8007360:	0800752f 	.word	0x0800752f
 8007364:	080073e9 	.word	0x080073e9
 8007368:	0800752f 	.word	0x0800752f
 800736c:	0800752f 	.word	0x0800752f
 8007370:	0800752f 	.word	0x0800752f
 8007374:	0800742b 	.word	0x0800742b
 8007378:	0800752f 	.word	0x0800752f
 800737c:	0800752f 	.word	0x0800752f
 8007380:	0800752f 	.word	0x0800752f
 8007384:	0800746b 	.word	0x0800746b
 8007388:	0800752f 	.word	0x0800752f
 800738c:	0800752f 	.word	0x0800752f
 8007390:	0800752f 	.word	0x0800752f
 8007394:	080074ad 	.word	0x080074ad
 8007398:	0800752f 	.word	0x0800752f
 800739c:	0800752f 	.word	0x0800752f
 80073a0:	0800752f 	.word	0x0800752f
 80073a4:	080074ed 	.word	0x080074ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fa20 	bl	80077f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0208 	orr.w	r2, r2, #8
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0204 	bic.w	r2, r2, #4
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	619a      	str	r2, [r3, #24]
      break;
 80073e6:	e0a5      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fa7c 	bl	80078ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6999      	ldr	r1, [r3, #24]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	021a      	lsls	r2, r3, #8
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	619a      	str	r2, [r3, #24]
      break;
 8007428:	e084      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fad5 	bl	80079e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0208 	orr.w	r2, r2, #8
 8007444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0204 	bic.w	r2, r2, #4
 8007454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	61da      	str	r2, [r3, #28]
      break;
 8007468:	e064      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fb2d 	bl	8007ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69d9      	ldr	r1, [r3, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	021a      	lsls	r2, r3, #8
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	61da      	str	r2, [r3, #28]
      break;
 80074aa:	e043      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fb6a 	bl	8007b8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0204 	bic.w	r2, r2, #4
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074ea:	e023      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fba2 	bl	8007c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	021a      	lsls	r2, r3, #8
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800752c:	e002      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
      break;
 8007532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop

08007548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIM_ConfigClockSource+0x1c>
 8007560:	2302      	movs	r3, #2
 8007562:	e0b6      	b.n	80076d2 <HAL_TIM_ConfigClockSource+0x18a>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800758e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d03e      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0xd8>
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a6:	f200 8087 	bhi.w	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	f000 8086 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x176>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	d87f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d01a      	beq.n	80075f2 <HAL_TIM_ConfigClockSource+0xaa>
 80075bc:	2b70      	cmp	r3, #112	; 0x70
 80075be:	d87b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d050      	beq.n	8007666 <HAL_TIM_ConfigClockSource+0x11e>
 80075c4:	2b60      	cmp	r3, #96	; 0x60
 80075c6:	d877      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d03c      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0xfe>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d873      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d058      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x13e>
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d86f      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d064      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15e>
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d86b      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d060      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15e>
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d867      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d05c      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15e>
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d05a      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0x15e>
 80075f0:	e062      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007602:	f000 fbef 	bl	8007de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	609a      	str	r2, [r3, #8]
      break;
 800761e:	e04f      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007630:	f000 fbd8 	bl	8007de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007642:	609a      	str	r2, [r3, #8]
      break;
 8007644:	e03c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007652:	461a      	mov	r2, r3
 8007654:	f000 fb4c 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2150      	movs	r1, #80	; 0x50
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fba5 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007664:	e02c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007672:	461a      	mov	r2, r3
 8007674:	f000 fb6b 	bl	8007d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2160      	movs	r1, #96	; 0x60
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fb95 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007684:	e01c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007692:	461a      	mov	r2, r3
 8007694:	f000 fb2c 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fb85 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 80076a4:	e00c      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 fb7c 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 80076b6:	e003      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	e000      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x20>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d108      	bne.n	800775e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00b      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d007      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <TIM_Base_SetConfig+0xc0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d003      	beq.n	800777e <TIM_Base_SetConfig+0x52>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <TIM_Base_SetConfig+0xc4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d108      	bne.n	8007790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <TIM_Base_SetConfig+0xbc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_Base_SetConfig+0xa0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <TIM_Base_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_Base_SetConfig+0xa0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <TIM_Base_SetConfig+0xc4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d103      	bne.n	80077d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	691a      	ldr	r2, [r3, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	615a      	str	r2, [r3, #20]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400

080077f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f023 0201 	bic.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0302 	bic.w	r3, r3, #2
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <TIM_OC1_SetConfig+0xec>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d007      	beq.n	8007864 <TIM_OC1_SetConfig+0x70>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <TIM_OC1_SetConfig+0xf0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC1_SetConfig+0x70>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <TIM_OC1_SetConfig+0xf4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d10c      	bne.n	800787e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f023 0308 	bic.w	r3, r3, #8
 800786a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f023 0304 	bic.w	r3, r3, #4
 800787c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <TIM_OC1_SetConfig+0xec>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_OC1_SetConfig+0xa2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <TIM_OC1_SetConfig+0xf0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_OC1_SetConfig+0xa2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_OC1_SetConfig+0xf4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d111      	bne.n	80078ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	621a      	str	r2, [r3, #32]
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40014400 	.word	0x40014400

080078ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 0210 	bic.w	r2, r3, #16
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <TIM_OC2_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10d      	bne.n	800796c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <TIM_OC2_SetConfig+0xe8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d007      	beq.n	8007984 <TIM_OC2_SetConfig+0x98>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <TIM_OC2_SetConfig+0xec>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_OC2_SetConfig+0x98>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <TIM_OC2_SetConfig+0xf0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d113      	bne.n	80079ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40012c00 	.word	0x40012c00
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400

080079e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <TIM_OC3_SetConfig+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10d      	bne.n	8007a5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <TIM_OC3_SetConfig+0xe4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_OC3_SetConfig+0x96>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <TIM_OC3_SetConfig+0xe8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC3_SetConfig+0x96>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <TIM_OC3_SetConfig+0xec>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d113      	bne.n	8007a9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400

08007ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	031b      	lsls	r3, r3, #12
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <TIM_OC4_SetConfig+0xb0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d007      	beq.n	8007b44 <TIM_OC4_SetConfig+0x74>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <TIM_OC4_SetConfig+0xb4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_OC4_SetConfig+0x74>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	; (8007b88 <TIM_OC4_SetConfig+0xb8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d109      	bne.n	8007b58 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400

08007b8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <TIM_OC5_SetConfig+0xa4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d007      	beq.n	8007bf6 <TIM_OC5_SetConfig+0x6a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <TIM_OC5_SetConfig+0xa8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_OC5_SetConfig+0x6a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	; (8007c38 <TIM_OC5_SetConfig+0xac>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d109      	bne.n	8007c0a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40014400 	.word	0x40014400

08007c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a14      	ldr	r2, [pc, #80]	; (8007ce4 <TIM_OC6_SetConfig+0xa8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x6c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <TIM_OC6_SetConfig+0xac>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x6c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a12      	ldr	r2, [pc, #72]	; (8007cec <TIM_OC6_SetConfig+0xb0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400

08007cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 030a 	bic.w	r3, r3, #10
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f023 0210 	bic.w	r2, r3, #16
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f043 0307 	orr.w	r3, r3, #7
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	609a      	str	r2, [r3, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e04f      	b.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a21      	ldr	r2, [pc, #132]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d108      	bne.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a14      	ldr	r2, [pc, #80]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d009      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea4:	d004      	beq.n	8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a10      	ldr	r2, [pc, #64]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d10c      	bne.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40014000 	.word	0x40014000

08007ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <DWT_Delay_ms+0x44>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8007f3a:	f7fe fc7d 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <DWT_Delay_ms+0x48>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8007f54:	bf00      	nop
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <DWT_Delay_ms+0x44>)
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3f8      	bcc.n	8007f56 <DWT_Delay_ms+0x2a>
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	e0001000 	.word	0xe0001000
 8007f74:	10624dd3 	.word	0x10624dd3

08007f78 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	605a      	str	r2, [r3, #4]
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8007f9a:	f000 fcf9 	bl	8008990 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fa4:	e102      	b.n	80081ac <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fac:	e079      	b.n	80080a2 <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8007fae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fb2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007fb6:	4889      	ldr	r0, [pc, #548]	; (80081dc <STEPPERS_Init+0x264>)
 8007fb8:	4613      	mov	r3, r2
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007fc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fc8:	d10c      	bne.n	8007fe4 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fca:	4b85      	ldr	r3, [pc, #532]	; (80081e0 <STEPPERS_Init+0x268>)
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	4a84      	ldr	r2, [pc, #528]	; (80081e0 <STEPPERS_Init+0x268>)
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fd6:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <STEPPERS_Init+0x268>)
 8007fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	e034      	b.n	800804e <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8007fe4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fe8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007fec:	487b      	ldr	r0, [pc, #492]	; (80081dc <STEPPERS_Init+0x264>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ffa:	4a7a      	ldr	r2, [pc, #488]	; (80081e4 <STEPPERS_Init+0x26c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10c      	bne.n	800801a <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008000:	4b77      	ldr	r3, [pc, #476]	; (80081e0 <STEPPERS_Init+0x268>)
 8008002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008004:	4a76      	ldr	r2, [pc, #472]	; (80081e0 <STEPPERS_Init+0x268>)
 8008006:	f043 0302 	orr.w	r3, r3, #2
 800800a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800800c:	4b74      	ldr	r3, [pc, #464]	; (80081e0 <STEPPERS_Init+0x268>)
 800800e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	e019      	b.n	800804e <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 800801a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800801e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008022:	486e      	ldr	r0, [pc, #440]	; (80081dc <STEPPERS_Init+0x264>)
 8008024:	4613      	mov	r3, r2
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	440b      	add	r3, r1
 800802c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008030:	4a6d      	ldr	r2, [pc, #436]	; (80081e8 <STEPPERS_Init+0x270>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d10b      	bne.n	800804e <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008036:	4b6a      	ldr	r3, [pc, #424]	; (80081e0 <STEPPERS_Init+0x268>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	4a69      	ldr	r2, [pc, #420]	; (80081e0 <STEPPERS_Init+0x268>)
 800803c:	f043 0304 	orr.w	r3, r3, #4
 8008040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008042:	4b67      	ldr	r3, [pc, #412]	; (80081e0 <STEPPERS_Init+0x268>)
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 800804e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008052:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008056:	4861      	ldr	r0, [pc, #388]	; (80081dc <STEPPERS_Init+0x264>)
 8008058:	4613      	mov	r3, r2
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	440b      	add	r3, r1
 8008062:	3308      	adds	r3, #8
 8008064:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8008068:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800806a:	2301      	movs	r3, #1
 800806c:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806e:	2300      	movs	r3, #0
 8008070:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8008076:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800807a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800807e:	4857      	ldr	r0, [pc, #348]	; (80081dc <STEPPERS_Init+0x264>)
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	440b      	add	r3, r1
 8008088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800808c:	f107 0210 	add.w	r2, r7, #16
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd fc3a 	bl	800590c <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8008098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800809c:	3301      	adds	r3, #1
 800809e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80080a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d981      	bls.n	8007fae <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 80080aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080ae:	494f      	ldr	r1, [pc, #316]	; (80081ec <STEPPERS_Init+0x274>)
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	3311      	adds	r3, #17
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 80080c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080c4:	4949      	ldr	r1, [pc, #292]	; (80081ec <STEPPERS_Init+0x274>)
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	330f      	adds	r3, #15
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 80080d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080da:	4944      	ldr	r1, [pc, #272]	; (80081ec <STEPPERS_Init+0x274>)
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 80080ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080ee:	493f      	ldr	r1, [pc, #252]	; (80081ec <STEPPERS_Init+0x274>)
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	3304      	adds	r3, #4
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8008100:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008104:	4939      	ldr	r1, [pc, #228]	; (80081ec <STEPPERS_Init+0x274>)
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	3308      	adds	r3, #8
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8008116:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800811a:	4934      	ldr	r1, [pc, #208]	; (80081ec <STEPPERS_Init+0x274>)
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	330e      	adds	r3, #14
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800812c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008130:	492a      	ldr	r1, [pc, #168]	; (80081dc <STEPPERS_Init+0x264>)
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	331b      	adds	r3, #27
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d00b      	beq.n	800815c <STEPPERS_Init+0x1e4>
 8008144:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008148:	4924      	ldr	r1, [pc, #144]	; (80081dc <STEPPERS_Init+0x264>)
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	331b      	adds	r3, #27
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 800815c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008160:	4922      	ldr	r1, [pc, #136]	; (80081ec <STEPPERS_Init+0x274>)
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	3310      	adds	r3, #16
 800816e:	2204      	movs	r2, #4
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e016      	b.n	80081a2 <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8008174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008178:	4918      	ldr	r1, [pc, #96]	; (80081dc <STEPPERS_Init+0x264>)
 800817a:	4613      	mov	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	331b      	adds	r3, #27
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d10a      	bne.n	80081a2 <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 800818c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008190:	4916      	ldr	r1, [pc, #88]	; (80081ec <STEPPERS_Init+0x274>)
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3310      	adds	r3, #16
 800819e:	2208      	movs	r2, #8
 80081a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 80081a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a6:	3301      	adds	r3, #1
 80081a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f43f aef8 	beq.w	8007fa6 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081b6:	2301      	movs	r3, #1
 80081b8:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ba:	2301      	movs	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	4619      	mov	r1, r3
 80081cc:	4805      	ldr	r0, [pc, #20]	; (80081e4 <STEPPERS_Init+0x26c>)
 80081ce:	f7fd fb9d 	bl	800590c <HAL_GPIO_Init>
}
 80081d2:	bf00      	nop
 80081d4:	3728      	adds	r7, #40	; 0x28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	0801c09c 	.word	0x0801c09c
 80081e0:	40021000 	.word	0x40021000
 80081e4:	48000400 	.word	0x48000400
 80081e8:	48000800 	.word	0x48000800
 80081ec:	2000a464 	.word	0x2000a464

080081f0 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	605a      	str	r2, [r3, #4]
 8008202:	609a      	str	r2, [r3, #8]
 8008204:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8008216:	f7ff feaf 	bl	8007f78 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 800821a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a17      	ldr	r2, [pc, #92]	; (8008280 <STEPPERS_Init_TMR+0x90>)
 8008224:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2263      	movs	r2, #99	; 0x63
 800822a:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	1e5a      	subs	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fe fe5a 	bl	8006f00 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800824c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008250:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8008252:	f107 0314 	add.w	r3, r7, #20
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff f975 	bl	8007548 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800825e:	2300      	movs	r3, #0
 8008260:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff fdd9 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fe fe9c 	bl	8006fb0 <HAL_TIM_Base_Start_IT>
    }
}
 8008278:	bf00      	nop
 800827a:	3728      	adds	r7, #40	; 0x28
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40014000 	.word	0x40014000
 8008284:	00000000 	.word	0x00000000

08008288 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8008288:	b590      	push	{r4, r7, lr}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	460a      	mov	r2, r1
 8008292:	71fb      	strb	r3, [r7, #7]
 8008294:	4613      	mov	r3, r2
 8008296:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	4928      	ldr	r1, [pc, #160]	; (8008340 <STEPPER_SetSpeed+0xb8>)
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	330c      	adds	r3, #12
 80082ac:	88ba      	ldrh	r2, [r7, #4]
 80082ae:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80082b0:	79fa      	ldrb	r2, [r7, #7]
 80082b2:	4924      	ldr	r1, [pc, #144]	; (8008344 <STEPPER_SetSpeed+0xbc>)
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	331b      	adds	r3, #27
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d10b      	bne.n	80082de <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 80082c6:	79fa      	ldrb	r2, [r7, #7]
 80082c8:	491e      	ldr	r1, [pc, #120]	; (8008344 <STEPPER_SetSpeed+0xbc>)
 80082ca:	4613      	mov	r3, r2
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	3318      	adds	r3, #24
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e009      	b.n	80082f2 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 80082de:	79fa      	ldrb	r2, [r7, #7]
 80082e0:	4918      	ldr	r1, [pc, #96]	; (8008344 <STEPPER_SetSpeed+0xbc>)
 80082e2:	4613      	mov	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	3318      	adds	r3, #24
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 80082f2:	88bb      	ldrh	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7f8 f8aa 	bl	8000454 <__aeabi_ui2d>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	a10c      	add	r1, pc, #48	; (adr r1, 8008338 <STEPPER_SetSpeed+0xb0>)
 8008306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800830a:	f7f8 fa47 	bl	800079c <__aeabi_ddiv>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	79fc      	ldrb	r4, [r7, #7]
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f7f8 fbb0 	bl	8000a7c <__aeabi_d2uiz>
 800831c:	4602      	mov	r2, r0
 800831e:	4908      	ldr	r1, [pc, #32]	; (8008340 <STEPPER_SetSpeed+0xb8>)
 8008320:	4623      	mov	r3, r4
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4423      	add	r3, r4
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	3308      	adds	r3, #8
 800832c:	601a      	str	r2, [r3, #0]
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	bd90      	pop	{r4, r7, pc}
 8008336:	bf00      	nop
 8008338:	00000000 	.word	0x00000000
 800833c:	40ed4c00 	.word	0x40ed4c00
 8008340:	2000a464 	.word	0x2000a464
 8008344:	0801c09c 	.word	0x0801c09c

08008348 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8008352:	79fa      	ldrb	r2, [r7, #7]
 8008354:	4999      	ldr	r1, [pc, #612]	; (80085bc <STEPPER_One_Step+0x274>)
 8008356:	4613      	mov	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	331a      	adds	r3, #26
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 81c4 	bne.w	80086f2 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800836a:	79fa      	ldrb	r2, [r7, #7]
 800836c:	4993      	ldr	r1, [pc, #588]	; (80085bc <STEPPER_One_Step+0x274>)
 800836e:	4613      	mov	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	331b      	adds	r3, #27
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 8088 	bne.w	8008492 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8008382:	79fa      	ldrb	r2, [r7, #7]
 8008384:	498d      	ldr	r1, [pc, #564]	; (80085bc <STEPPER_One_Step+0x274>)
 8008386:	4613      	mov	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	79fa      	ldrb	r2, [r7, #7]
 8008394:	4989      	ldr	r1, [pc, #548]	; (80085bc <STEPPER_One_Step+0x274>)
 8008396:	4613      	mov	r3, r2
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	3310      	adds	r3, #16
 80083a2:	8819      	ldrh	r1, [r3, #0]
 80083a4:	79fa      	ldrb	r2, [r7, #7]
 80083a6:	4c86      	ldr	r4, [pc, #536]	; (80085c0 <STEPPER_One_Step+0x278>)
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4423      	add	r3, r4
 80083b2:	330f      	adds	r3, #15
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	4b82      	ldr	r3, [pc, #520]	; (80085c4 <STEPPER_One_Step+0x27c>)
 80083ba:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7fd fc0e 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80083c4:	79fa      	ldrb	r2, [r7, #7]
 80083c6:	497d      	ldr	r1, [pc, #500]	; (80085bc <STEPPER_One_Step+0x274>)
 80083c8:	4613      	mov	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	3304      	adds	r3, #4
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	79fa      	ldrb	r2, [r7, #7]
 80083d8:	4978      	ldr	r1, [pc, #480]	; (80085bc <STEPPER_One_Step+0x274>)
 80083da:	4613      	mov	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3312      	adds	r3, #18
 80083e6:	8819      	ldrh	r1, [r3, #0]
 80083e8:	79fa      	ldrb	r2, [r7, #7]
 80083ea:	4c75      	ldr	r4, [pc, #468]	; (80085c0 <STEPPER_One_Step+0x278>)
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4423      	add	r3, r4
 80083f6:	330f      	adds	r3, #15
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4a72      	ldr	r2, [pc, #456]	; (80085c4 <STEPPER_One_Step+0x27c>)
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	461a      	mov	r2, r3
 8008404:	f7fd fbec 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008408:	79fa      	ldrb	r2, [r7, #7]
 800840a:	496c      	ldr	r1, [pc, #432]	; (80085bc <STEPPER_One_Step+0x274>)
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3308      	adds	r3, #8
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	79fa      	ldrb	r2, [r7, #7]
 800841c:	4967      	ldr	r1, [pc, #412]	; (80085bc <STEPPER_One_Step+0x274>)
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3314      	adds	r3, #20
 800842a:	8819      	ldrh	r1, [r3, #0]
 800842c:	79fa      	ldrb	r2, [r7, #7]
 800842e:	4c64      	ldr	r4, [pc, #400]	; (80085c0 <STEPPER_One_Step+0x278>)
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4423      	add	r3, r4
 800843a:	330f      	adds	r3, #15
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	4a61      	ldr	r2, [pc, #388]	; (80085c4 <STEPPER_One_Step+0x27c>)
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	789b      	ldrb	r3, [r3, #2]
 8008446:	461a      	mov	r2, r3
 8008448:	f7fd fbca 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800844c:	79fa      	ldrb	r2, [r7, #7]
 800844e:	495b      	ldr	r1, [pc, #364]	; (80085bc <STEPPER_One_Step+0x274>)
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	330c      	adds	r3, #12
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	79fa      	ldrb	r2, [r7, #7]
 8008460:	4956      	ldr	r1, [pc, #344]	; (80085bc <STEPPER_One_Step+0x274>)
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	3316      	adds	r3, #22
 800846e:	8819      	ldrh	r1, [r3, #0]
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	4c53      	ldr	r4, [pc, #332]	; (80085c0 <STEPPER_One_Step+0x278>)
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4423      	add	r3, r4
 800847e:	330f      	adds	r3, #15
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4a50      	ldr	r2, [pc, #320]	; (80085c4 <STEPPER_One_Step+0x27c>)
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	78db      	ldrb	r3, [r3, #3]
 800848a:	461a      	mov	r2, r3
 800848c:	f7fd fba8 	bl	8005be0 <HAL_GPIO_WritePin>
 8008490:	e12f      	b.n	80086f2 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8008492:	79fa      	ldrb	r2, [r7, #7]
 8008494:	4949      	ldr	r1, [pc, #292]	; (80085bc <STEPPER_One_Step+0x274>)
 8008496:	4613      	mov	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	331b      	adds	r3, #27
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	f040 8091 	bne.w	80085cc <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80084aa:	79fa      	ldrb	r2, [r7, #7]
 80084ac:	4943      	ldr	r1, [pc, #268]	; (80085bc <STEPPER_One_Step+0x274>)
 80084ae:	4613      	mov	r3, r2
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	79fa      	ldrb	r2, [r7, #7]
 80084bc:	493f      	ldr	r1, [pc, #252]	; (80085bc <STEPPER_One_Step+0x274>)
 80084be:	4613      	mov	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3310      	adds	r3, #16
 80084ca:	8819      	ldrh	r1, [r3, #0]
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	4c3c      	ldr	r4, [pc, #240]	; (80085c0 <STEPPER_One_Step+0x278>)
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4423      	add	r3, r4
 80084da:	330f      	adds	r3, #15
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <STEPPER_One_Step+0x280>)
 80084e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f7fd fb7a 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	4933      	ldr	r1, [pc, #204]	; (80085bc <STEPPER_One_Step+0x274>)
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	3304      	adds	r3, #4
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	79fa      	ldrb	r2, [r7, #7]
 8008500:	492e      	ldr	r1, [pc, #184]	; (80085bc <STEPPER_One_Step+0x274>)
 8008502:	4613      	mov	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	3312      	adds	r3, #18
 800850e:	8819      	ldrh	r1, [r3, #0]
 8008510:	79fa      	ldrb	r2, [r7, #7]
 8008512:	4c2b      	ldr	r4, [pc, #172]	; (80085c0 <STEPPER_One_Step+0x278>)
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4423      	add	r3, r4
 800851e:	330f      	adds	r3, #15
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	4a29      	ldr	r2, [pc, #164]	; (80085c8 <STEPPER_One_Step+0x280>)
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	461a      	mov	r2, r3
 800852c:	f7fd fb58 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008530:	79fa      	ldrb	r2, [r7, #7]
 8008532:	4922      	ldr	r1, [pc, #136]	; (80085bc <STEPPER_One_Step+0x274>)
 8008534:	4613      	mov	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3308      	adds	r3, #8
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	79fa      	ldrb	r2, [r7, #7]
 8008544:	491d      	ldr	r1, [pc, #116]	; (80085bc <STEPPER_One_Step+0x274>)
 8008546:	4613      	mov	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	3314      	adds	r3, #20
 8008552:	8819      	ldrh	r1, [r3, #0]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	4c1a      	ldr	r4, [pc, #104]	; (80085c0 <STEPPER_One_Step+0x278>)
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4423      	add	r3, r4
 8008562:	330f      	adds	r3, #15
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <STEPPER_One_Step+0x280>)
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	789b      	ldrb	r3, [r3, #2]
 800856e:	461a      	mov	r2, r3
 8008570:	f7fd fb36 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8008574:	79fa      	ldrb	r2, [r7, #7]
 8008576:	4911      	ldr	r1, [pc, #68]	; (80085bc <STEPPER_One_Step+0x274>)
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	330c      	adds	r3, #12
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	79fa      	ldrb	r2, [r7, #7]
 8008588:	490c      	ldr	r1, [pc, #48]	; (80085bc <STEPPER_One_Step+0x274>)
 800858a:	4613      	mov	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3316      	adds	r3, #22
 8008596:	8819      	ldrh	r1, [r3, #0]
 8008598:	79fa      	ldrb	r2, [r7, #7]
 800859a:	4c09      	ldr	r4, [pc, #36]	; (80085c0 <STEPPER_One_Step+0x278>)
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4423      	add	r3, r4
 80085a6:	330f      	adds	r3, #15
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <STEPPER_One_Step+0x280>)
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	78db      	ldrb	r3, [r3, #3]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f7fd fb14 	bl	8005be0 <HAL_GPIO_WritePin>
 80085b8:	e09b      	b.n	80086f2 <STEPPER_One_Step+0x3aa>
 80085ba:	bf00      	nop
 80085bc:	0801c09c 	.word	0x0801c09c
 80085c0:	2000a464 	.word	0x2000a464
 80085c4:	2000000c 	.word	0x2000000c
 80085c8:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	4988      	ldr	r1, [pc, #544]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 80085d0:	4613      	mov	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	331b      	adds	r3, #27
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	f040 8087 	bne.w	80086f2 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80085e4:	79fa      	ldrb	r2, [r7, #7]
 80085e6:	4982      	ldr	r1, [pc, #520]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	79fa      	ldrb	r2, [r7, #7]
 80085f6:	497e      	ldr	r1, [pc, #504]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3310      	adds	r3, #16
 8008604:	8819      	ldrh	r1, [r3, #0]
 8008606:	79fa      	ldrb	r2, [r7, #7]
 8008608:	4c7a      	ldr	r4, [pc, #488]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4423      	add	r3, r4
 8008614:	330f      	adds	r3, #15
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	4b77      	ldr	r3, [pc, #476]	; (80087f8 <STEPPER_One_Step+0x4b0>)
 800861c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8008620:	461a      	mov	r2, r3
 8008622:	f7fd fadd 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8008626:	79fa      	ldrb	r2, [r7, #7]
 8008628:	4971      	ldr	r1, [pc, #452]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 800862a:	4613      	mov	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	3304      	adds	r3, #4
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	79fa      	ldrb	r2, [r7, #7]
 800863a:	496d      	ldr	r1, [pc, #436]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3312      	adds	r3, #18
 8008648:	8819      	ldrh	r1, [r3, #0]
 800864a:	79fa      	ldrb	r2, [r7, #7]
 800864c:	4c69      	ldr	r4, [pc, #420]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4423      	add	r3, r4
 8008658:	330f      	adds	r3, #15
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	4a66      	ldr	r2, [pc, #408]	; (80087f8 <STEPPER_One_Step+0x4b0>)
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	461a      	mov	r2, r3
 8008666:	f7fd fabb 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800866a:	79fa      	ldrb	r2, [r7, #7]
 800866c:	4960      	ldr	r1, [pc, #384]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	3308      	adds	r3, #8
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	79fa      	ldrb	r2, [r7, #7]
 800867e:	495c      	ldr	r1, [pc, #368]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 8008680:	4613      	mov	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	3314      	adds	r3, #20
 800868c:	8819      	ldrh	r1, [r3, #0]
 800868e:	79fa      	ldrb	r2, [r7, #7]
 8008690:	4c58      	ldr	r4, [pc, #352]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4423      	add	r3, r4
 800869c:	330f      	adds	r3, #15
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4a55      	ldr	r2, [pc, #340]	; (80087f8 <STEPPER_One_Step+0x4b0>)
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	789b      	ldrb	r3, [r3, #2]
 80086a8:	461a      	mov	r2, r3
 80086aa:	f7fd fa99 	bl	8005be0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80086ae:	79fa      	ldrb	r2, [r7, #7]
 80086b0:	494f      	ldr	r1, [pc, #316]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 80086b2:	4613      	mov	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	330c      	adds	r3, #12
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	494b      	ldr	r1, [pc, #300]	; (80087f0 <STEPPER_One_Step+0x4a8>)
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3316      	adds	r3, #22
 80086d0:	8819      	ldrh	r1, [r3, #0]
 80086d2:	79fa      	ldrb	r2, [r7, #7]
 80086d4:	4c47      	ldr	r4, [pc, #284]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4423      	add	r3, r4
 80086e0:	330f      	adds	r3, #15
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4a44      	ldr	r2, [pc, #272]	; (80087f8 <STEPPER_One_Step+0x4b0>)
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	461a      	mov	r2, r3
 80086ee:	f7fd fa77 	bl	8005be0 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80086f2:	79fa      	ldrb	r2, [r7, #7]
 80086f4:	493f      	ldr	r1, [pc, #252]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	3311      	adds	r3, #17
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d132      	bne.n	800876e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8008708:	79fa      	ldrb	r2, [r7, #7]
 800870a:	493a      	ldr	r1, [pc, #232]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	330f      	adds	r3, #15
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d112      	bne.n	8008744 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800871e:	79f9      	ldrb	r1, [r7, #7]
 8008720:	79fa      	ldrb	r2, [r7, #7]
 8008722:	4834      	ldr	r0, [pc, #208]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008724:	460b      	mov	r3, r1
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4403      	add	r3, r0
 800872e:	3310      	adds	r3, #16
 8008730:	7818      	ldrb	r0, [r3, #0]
 8008732:	4930      	ldr	r1, [pc, #192]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	330f      	adds	r3, #15
 8008740:	4602      	mov	r2, r0
 8008742:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8008744:	79fa      	ldrb	r2, [r7, #7]
 8008746:	492b      	ldr	r1, [pc, #172]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	330f      	adds	r3, #15
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	3b01      	subs	r3, #1
 8008758:	b2d8      	uxtb	r0, r3
 800875a:	4926      	ldr	r1, [pc, #152]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	330f      	adds	r3, #15
 8008768:	4602      	mov	r2, r0
 800876a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800876c:	e03c      	b.n	80087e8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800876e:	79fa      	ldrb	r2, [r7, #7]
 8008770:	4920      	ldr	r1, [pc, #128]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	3311      	adds	r3, #17
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d131      	bne.n	80087e8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8008784:	79fa      	ldrb	r2, [r7, #7]
 8008786:	491b      	ldr	r1, [pc, #108]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	330f      	adds	r3, #15
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	b2d8      	uxtb	r0, r3
 800879a:	4916      	ldr	r1, [pc, #88]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	330f      	adds	r3, #15
 80087a8:	4602      	mov	r2, r0
 80087aa:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80087ac:	79fa      	ldrb	r2, [r7, #7]
 80087ae:	4911      	ldr	r1, [pc, #68]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	330f      	adds	r3, #15
 80087bc:	7819      	ldrb	r1, [r3, #0]
 80087be:	79fa      	ldrb	r2, [r7, #7]
 80087c0:	480c      	ldr	r0, [pc, #48]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4403      	add	r3, r0
 80087cc:	3310      	adds	r3, #16
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	4299      	cmp	r1, r3
 80087d2:	d109      	bne.n	80087e8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80087d4:	79fa      	ldrb	r2, [r7, #7]
 80087d6:	4907      	ldr	r1, [pc, #28]	; (80087f4 <STEPPER_One_Step+0x4ac>)
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	330f      	adds	r3, #15
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}
 80087f0:	0801c09c 	.word	0x0801c09c
 80087f4:	2000a464 	.word	0x2000a464
 80087f8:	2000002c 	.word	0x2000002c

080087fc <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
 8008808:	4613      	mov	r3, r2
 800880a:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 8008814:	79fa      	ldrb	r2, [r7, #7]
 8008816:	4921      	ldr	r1, [pc, #132]	; (800889c <STEPPER_Step_Blocking+0xa0>)
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	330e      	adds	r3, #14
 8008824:	2201      	movs	r2, #1
 8008826:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 8008828:	79fa      	ldrb	r2, [r7, #7]
 800882a:	491c      	ldr	r1, [pc, #112]	; (800889c <STEPPER_Step_Blocking+0xa0>)
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	330c      	adds	r3, #12
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	79fa      	ldrb	r2, [r7, #7]
 800883e:	4918      	ldr	r1, [pc, #96]	; (80088a0 <STEPPER_Step_Blocking+0xa4>)
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	3318      	adds	r3, #24
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	fb00 f303 	mul.w	r3, r0, r3
 8008852:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008856:	fb92 f3f3 	sdiv	r3, r2, r3
 800885a:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e009      	b.n	8008876 <STEPPER_Step_Blocking+0x7a>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fd6f 	bl	8008348 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 800886a:	68b8      	ldr	r0, [r7, #8]
 800886c:	f7ff fb5e 	bl	8007f2c <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3f1      	bcc.n	8008862 <STEPPER_Step_Blocking+0x66>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 800887e:	79fa      	ldrb	r2, [r7, #7]
 8008880:	4906      	ldr	r1, [pc, #24]	; (800889c <STEPPER_Step_Blocking+0xa0>)
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	330e      	adds	r3, #14
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	2000a464 	.word	0x2000a464
 80088a0:	0801c09c 	.word	0x0801c09c

080088a4 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a34      	ldr	r2, [pc, #208]	; (8008988 <STEPPER_TMR_OVF_ISR+0xe4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d162      	bne.n	8008980 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
 80088be:	e05c      	b.n	800897a <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	4932      	ldr	r1, [pc, #200]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	3304      	adds	r3, #4
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	7bfa      	ldrb	r2, [r7, #15]
 80088d4:	482d      	ldr	r0, [pc, #180]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4403      	add	r3, r0
 80088e0:	3308      	adds	r3, #8
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d333      	bcc.n	8008950 <STEPPER_TMR_OVF_ISR+0xac>
 80088e8:	7bfa      	ldrb	r2, [r7, #15]
 80088ea:	4928      	ldr	r1, [pc, #160]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	330e      	adds	r3, #14
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d028      	beq.n	8008950 <STEPPER_TMR_OVF_ISR+0xac>
 80088fe:	7bfa      	ldrb	r2, [r7, #15]
 8008900:	4922      	ldr	r1, [pc, #136]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01e      	beq.n	8008950 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fd17 	bl	8008348 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 800891a:	7bfa      	ldrb	r2, [r7, #15]
 800891c:	491b      	ldr	r1, [pc, #108]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1e59      	subs	r1, r3, #1
 800892c:	4817      	ldr	r0, [pc, #92]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4403      	add	r3, r0
 8008938:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	4913      	ldr	r1, [pc, #76]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3304      	adds	r3, #4
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e011      	b.n	8008974 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	490e      	ldr	r1, [pc, #56]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	3304      	adds	r3, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	1c59      	adds	r1, r3, #1
 8008964:	4809      	ldr	r0, [pc, #36]	; (800898c <STEPPER_TMR_OVF_ISR+0xe8>)
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4403      	add	r3, r0
 8008970:	3304      	adds	r3, #4
 8008972:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	3301      	adds	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d09f      	beq.n	80088c0 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	40014000 	.word	0x40014000
 800898c:	2000a464 	.word	0x2000a464

08008990 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <DWT_Delay_Init+0x58>)
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <DWT_Delay_Init+0x58>)
 800899a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <DWT_Delay_Init+0x58>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a10      	ldr	r2, [pc, #64]	; (80089e8 <DWT_Delay_Init+0x58>)
 80089a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089aa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a0b      	ldr	r2, [pc, #44]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80089ca:	bf00      	nop
    __ASM volatile ("NOP");
 80089cc:	bf00      	nop
    __ASM volatile ("NOP");
 80089ce:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <DWT_Delay_Init+0x5c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80089d8:	2300      	movs	r3, #0
 80089da:	e000      	b.n	80089de <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80089dc:	2301      	movs	r3, #1
    }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	e000edf0 	.word	0xe000edf0
 80089ec:	e0001000 	.word	0xe0001000

080089f0 <_strtol_l.constprop.0>:
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f6:	d001      	beq.n	80089fc <_strtol_l.constprop.0+0xc>
 80089f8:	2b24      	cmp	r3, #36	; 0x24
 80089fa:	d906      	bls.n	8008a0a <_strtol_l.constprop.0+0x1a>
 80089fc:	f000 f88c 	bl	8008b18 <__errno>
 8008a00:	2316      	movs	r3, #22
 8008a02:	6003      	str	r3, [r0, #0]
 8008a04:	2000      	movs	r0, #0
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008af0 <_strtol_l.constprop.0+0x100>
 8008a0e:	460d      	mov	r5, r1
 8008a10:	462e      	mov	r6, r5
 8008a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a16:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008a1a:	f017 0708 	ands.w	r7, r7, #8
 8008a1e:	d1f7      	bne.n	8008a10 <_strtol_l.constprop.0+0x20>
 8008a20:	2c2d      	cmp	r4, #45	; 0x2d
 8008a22:	d132      	bne.n	8008a8a <_strtol_l.constprop.0+0x9a>
 8008a24:	782c      	ldrb	r4, [r5, #0]
 8008a26:	2701      	movs	r7, #1
 8008a28:	1cb5      	adds	r5, r6, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d05b      	beq.n	8008ae6 <_strtol_l.constprop.0+0xf6>
 8008a2e:	2b10      	cmp	r3, #16
 8008a30:	d109      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008a32:	2c30      	cmp	r4, #48	; 0x30
 8008a34:	d107      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008a36:	782c      	ldrb	r4, [r5, #0]
 8008a38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a3c:	2c58      	cmp	r4, #88	; 0x58
 8008a3e:	d14d      	bne.n	8008adc <_strtol_l.constprop.0+0xec>
 8008a40:	786c      	ldrb	r4, [r5, #1]
 8008a42:	2310      	movs	r3, #16
 8008a44:	3502      	adds	r5, #2
 8008a46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a4e:	f04f 0e00 	mov.w	lr, #0
 8008a52:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a56:	4676      	mov	r6, lr
 8008a58:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a60:	f1bc 0f09 	cmp.w	ip, #9
 8008a64:	d816      	bhi.n	8008a94 <_strtol_l.constprop.0+0xa4>
 8008a66:	4664      	mov	r4, ip
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	dd24      	ble.n	8008ab6 <_strtol_l.constprop.0+0xc6>
 8008a6c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a70:	d008      	beq.n	8008a84 <_strtol_l.constprop.0+0x94>
 8008a72:	45b1      	cmp	r9, r6
 8008a74:	d31c      	bcc.n	8008ab0 <_strtol_l.constprop.0+0xc0>
 8008a76:	d101      	bne.n	8008a7c <_strtol_l.constprop.0+0x8c>
 8008a78:	45a2      	cmp	sl, r4
 8008a7a:	db19      	blt.n	8008ab0 <_strtol_l.constprop.0+0xc0>
 8008a7c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a80:	f04f 0e01 	mov.w	lr, #1
 8008a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a88:	e7e8      	b.n	8008a5c <_strtol_l.constprop.0+0x6c>
 8008a8a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a8c:	bf04      	itt	eq
 8008a8e:	782c      	ldrbeq	r4, [r5, #0]
 8008a90:	1cb5      	addeq	r5, r6, #2
 8008a92:	e7ca      	b.n	8008a2a <_strtol_l.constprop.0+0x3a>
 8008a94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a98:	f1bc 0f19 	cmp.w	ip, #25
 8008a9c:	d801      	bhi.n	8008aa2 <_strtol_l.constprop.0+0xb2>
 8008a9e:	3c37      	subs	r4, #55	; 0x37
 8008aa0:	e7e2      	b.n	8008a68 <_strtol_l.constprop.0+0x78>
 8008aa2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008aa6:	f1bc 0f19 	cmp.w	ip, #25
 8008aaa:	d804      	bhi.n	8008ab6 <_strtol_l.constprop.0+0xc6>
 8008aac:	3c57      	subs	r4, #87	; 0x57
 8008aae:	e7db      	b.n	8008a68 <_strtol_l.constprop.0+0x78>
 8008ab0:	f04f 3eff 	mov.w	lr, #4294967295
 8008ab4:	e7e6      	b.n	8008a84 <_strtol_l.constprop.0+0x94>
 8008ab6:	f1be 3fff 	cmp.w	lr, #4294967295
 8008aba:	d105      	bne.n	8008ac8 <_strtol_l.constprop.0+0xd8>
 8008abc:	2322      	movs	r3, #34	; 0x22
 8008abe:	6003      	str	r3, [r0, #0]
 8008ac0:	4646      	mov	r6, r8
 8008ac2:	b942      	cbnz	r2, 8008ad6 <_strtol_l.constprop.0+0xe6>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	e79e      	b.n	8008a06 <_strtol_l.constprop.0+0x16>
 8008ac8:	b107      	cbz	r7, 8008acc <_strtol_l.constprop.0+0xdc>
 8008aca:	4276      	negs	r6, r6
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	d0f9      	beq.n	8008ac4 <_strtol_l.constprop.0+0xd4>
 8008ad0:	f1be 0f00 	cmp.w	lr, #0
 8008ad4:	d000      	beq.n	8008ad8 <_strtol_l.constprop.0+0xe8>
 8008ad6:	1e69      	subs	r1, r5, #1
 8008ad8:	6011      	str	r1, [r2, #0]
 8008ada:	e7f3      	b.n	8008ac4 <_strtol_l.constprop.0+0xd4>
 8008adc:	2430      	movs	r4, #48	; 0x30
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1b1      	bne.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	e7af      	b.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008ae6:	2c30      	cmp	r4, #48	; 0x30
 8008ae8:	d0a5      	beq.n	8008a36 <_strtol_l.constprop.0+0x46>
 8008aea:	230a      	movs	r3, #10
 8008aec:	e7ab      	b.n	8008a46 <_strtol_l.constprop.0+0x56>
 8008aee:	bf00      	nop
 8008af0:	0801c0b9 	.word	0x0801c0b9

08008af4 <strtol>:
 8008af4:	4613      	mov	r3, r2
 8008af6:	460a      	mov	r2, r1
 8008af8:	4601      	mov	r1, r0
 8008afa:	4802      	ldr	r0, [pc, #8]	; (8008b04 <strtol+0x10>)
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f7ff bf77 	b.w	80089f0 <_strtol_l.constprop.0>
 8008b02:	bf00      	nop
 8008b04:	20000098 	.word	0x20000098

08008b08 <memset>:
 8008b08:	4402      	add	r2, r0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d100      	bne.n	8008b12 <memset+0xa>
 8008b10:	4770      	bx	lr
 8008b12:	f803 1b01 	strb.w	r1, [r3], #1
 8008b16:	e7f9      	b.n	8008b0c <memset+0x4>

08008b18 <__errno>:
 8008b18:	4b01      	ldr	r3, [pc, #4]	; (8008b20 <__errno+0x8>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000098 	.word	0x20000098

08008b24 <__libc_init_array>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4d0d      	ldr	r5, [pc, #52]	; (8008b5c <__libc_init_array+0x38>)
 8008b28:	4c0d      	ldr	r4, [pc, #52]	; (8008b60 <__libc_init_array+0x3c>)
 8008b2a:	1b64      	subs	r4, r4, r5
 8008b2c:	10a4      	asrs	r4, r4, #2
 8008b2e:	2600      	movs	r6, #0
 8008b30:	42a6      	cmp	r6, r4
 8008b32:	d109      	bne.n	8008b48 <__libc_init_array+0x24>
 8008b34:	4d0b      	ldr	r5, [pc, #44]	; (8008b64 <__libc_init_array+0x40>)
 8008b36:	4c0c      	ldr	r4, [pc, #48]	; (8008b68 <__libc_init_array+0x44>)
 8008b38:	f000 f818 	bl	8008b6c <_init>
 8008b3c:	1b64      	subs	r4, r4, r5
 8008b3e:	10a4      	asrs	r4, r4, #2
 8008b40:	2600      	movs	r6, #0
 8008b42:	42a6      	cmp	r6, r4
 8008b44:	d105      	bne.n	8008b52 <__libc_init_array+0x2e>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4c:	4798      	blx	r3
 8008b4e:	3601      	adds	r6, #1
 8008b50:	e7ee      	b.n	8008b30 <__libc_init_array+0xc>
 8008b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b56:	4798      	blx	r3
 8008b58:	3601      	adds	r6, #1
 8008b5a:	e7f2      	b.n	8008b42 <__libc_init_array+0x1e>
 8008b5c:	0801c1bc 	.word	0x0801c1bc
 8008b60:	0801c1bc 	.word	0x0801c1bc
 8008b64:	0801c1bc 	.word	0x0801c1bc
 8008b68:	0801c1c0 	.word	0x0801c1c0

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
