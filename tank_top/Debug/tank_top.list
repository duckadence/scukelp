
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013674  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e1f8  0801e1f8  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e1f8  0801e1f8  0002e1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e200  0801e200  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e200  0801e200  0002e200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e204  0801e204  0002e204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801e208  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5b8  200000a8  0801e2b0  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a660  0801e2b0  0003a660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5b8  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037dc  00000000  00000000  0004a6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0004deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023780  00000000  00000000  0004f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcbe  00000000  00000000  00072c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0271  00000000  00000000  00090906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000010cd  00000000  00000000  00170b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006474  00000000  00000000  00171c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001780b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab6c 	.word	0x0800ab6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800ab6c 	.word	0x0800ab6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000e68:	e030      	b.n	8000ecc <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1d1a      	adds	r2, r3, #4
 8000e6e:	60fa      	str	r2, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	60fa      	str	r2, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e86:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	60ba      	str	r2, [r7, #8]
 8000e98:	edc7 7a06 	vstr	s15, [r7, #24]
 8000e9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000e9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	db07      	blt.n	8000ebc <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eb0:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000eba:	e004      	b.n	8000ec6 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000ec4:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1cb      	bne.n	8000e6a <arm_cmplx_mag_f32+0x12>
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	372c      	adds	r7, #44	; 0x2c
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e043      	b.n	8000f7c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	441a      	add	r2, r3
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	68f9      	ldr	r1, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	3301      	adds	r3, #1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	441a      	add	r2, r3
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

    i += 2;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3b7      	bcc.n	8000ef4 <arm_bitreversal_32+0x14>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b0a0      	sub	sp, #128	; 0x80
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd0:	4413      	add	r3, r2
 8000fd2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fda:	e1b6      	b.n	800134a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8000ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8000ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8001000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8001006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800100c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800101e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8001024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800102a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800103c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001040:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	1d1a      	adds	r2, r3, #4
 8001048:	603a      	str	r2, [r7, #0]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001052:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001056:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	1d1a      	adds	r2, r3, #4
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001068:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800106c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	1d1a      	adds	r2, r3, #4
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800107e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001082:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	1d1a      	adds	r2, r3, #4
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001094:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001098:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80010a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80010b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80010c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80010c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80010d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80010ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f4:	1d1a      	adds	r2, r3, #4
 80010f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001100:	ed97 7a08 	vldr	s14, [r7, #32]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110a:	1d1a      	adds	r2, r3, #4
 800110c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001116:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800111a:	edd7 7a05 	vldr	s15, [r7, #20]
 800111e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800112c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001130:	edd7 7a06 	vldr	s15, [r7, #24]
 8001134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001138:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800113c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001140:	edd7 7a07 	vldr	s15, [r7, #28]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800114c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001150:	edd7 7a08 	vldr	s15, [r7, #32]
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800115c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001160:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800116c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800116e:	1d1a      	adds	r2, r3, #4
 8001170:	673a      	str	r2, [r7, #112]	; 0x70
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001178:	1d1a      	adds	r2, r3, #4
 800117a:	673a      	str	r2, [r7, #112]	; 0x70
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001180:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001184:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8001190:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001194:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80011a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80011b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80011c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c2:	1d1a      	adds	r2, r3, #4
 80011c4:	677a      	str	r2, [r7, #116]	; 0x74
 80011c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80011ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80011d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d8:	1d1a      	adds	r2, r3, #4
 80011da:	677a      	str	r2, [r7, #116]	; 0x74
 80011dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80011ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80011fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001200:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800122c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800122e:	1d1a      	adds	r2, r3, #4
 8001230:	67ba      	str	r2, [r7, #120]	; 0x78
 8001232:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001236:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001244:	1d1a      	adds	r2, r3, #4
 8001246:	67ba      	str	r2, [r7, #120]	; 0x78
 8001248:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800124c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	673a      	str	r2, [r7, #112]	; 0x70
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	673a      	str	r2, [r7, #112]	; 0x70
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800126c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001270:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800127c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001280:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800128c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001290:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800129c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80012ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ae:	1d1a      	adds	r2, r3, #4
 80012b0:	677a      	str	r2, [r7, #116]	; 0x74
 80012b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80012b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80012c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	677a      	str	r2, [r7, #116]	; 0x74
 80012c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80012e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8001308:	edd7 7a04 	vldr	s15, [r7, #16]
 800130c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	67ba      	str	r2, [r7, #120]	; 0x78
 800131e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001322:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800132e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001330:	1d1a      	adds	r2, r3, #4
 8001332:	67ba      	str	r2, [r7, #120]	; 0x78
 8001334:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001338:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800133c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001340:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001346:	3b01      	subs	r3, #1
 8001348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800134a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800134c:	2b00      	cmp	r3, #0
 800134e:	f47f ae45 	bne.w	8000fdc <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001354:	b299      	uxth	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2302      	movs	r3, #2
 800135c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800135e:	f001 f80f 	bl	8002380 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001364:	b299      	uxth	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2302      	movs	r3, #2
 800136c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800136e:	f001 f807 	bl	8002380 <arm_radix8_butterfly_f32>
}
 8001372:	bf00      	nop
 8001374:	3780      	adds	r7, #128	; 0x80
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b0ac      	sub	sp, #176	; 0xb0
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800139e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013a8:	4413      	add	r3, r2
 80013aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80013c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013c6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80013c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013cc:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80013ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013d2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80013d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d8:	3b04      	subs	r3, #4
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80013de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013e2:	3b04      	subs	r3, #4
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80013e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ec:	3b04      	subs	r3, #4
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80013f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013fc:	4413      	add	r3, r2
 80013fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800140a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800140e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800141a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800142c:	2306      	movs	r3, #6
 800142e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3304      	adds	r3, #4
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001468:	3304      	adds	r3, #4
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001482:	3304      	adds	r3, #4
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001494:	3304      	adds	r3, #4
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014a6:	3304      	adds	r3, #4
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80014b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80014c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80014d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80014e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80014f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014f8:	3304      	adds	r3, #4
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800150a:	3304      	adds	r3, #4
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800151c:	3304      	adds	r3, #4
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800152e:	3304      	adds	r3, #4
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800153c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800155c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	603a      	str	r2, [r7, #0]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001586:	3304      	adds	r3, #4
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001598:	3304      	adds	r3, #4
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	1d1a      	adds	r2, r3, #4
 80015a2:	603a      	str	r2, [r7, #0]
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80015ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80015c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015cc:	1d1a      	adds	r2, r3, #4
 80015ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80015d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015da:	1d1a      	adds	r2, r3, #4
 80015dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015e0:	6a3a      	ldr	r2, [r7, #32]
 80015e2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80015e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80015f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015f6:	1d1a      	adds	r2, r3, #4
 80015f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001608:	4413      	add	r3, r2
 800160a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001616:	4413      	add	r3, r2
 8001618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800161c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800162a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800162e:	3b02      	subs	r3, #2
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001636:	e31c      	b.n	8001c72 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001670:	3304      	adds	r3, #4
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168a:	3304      	adds	r3, #4
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001694:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169c:	3304      	adds	r3, #4
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ae:	3304      	adds	r3, #4
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80016c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80016dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80016e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80016fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001700:	3304      	adds	r3, #4
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001712:	3304      	adds	r3, #4
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001724:	3304      	adds	r3, #4
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800172e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001736:	3304      	adds	r3, #4
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	1d1a      	adds	r2, r3, #4
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800178a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800178e:	3304      	adds	r3, #4
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a0:	3304      	adds	r3, #4
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	1d1a      	adds	r2, r3, #4
 80017aa:	603a      	str	r2, [r7, #0]
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80017b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b8:	3b04      	subs	r3, #4
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c2:	3b04      	subs	r3, #4
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80017d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d4:	3b04      	subs	r3, #4
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017de:	3b04      	subs	r3, #4
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80017ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001818:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800181c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001830:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800183c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001854:	3b04      	subs	r3, #4
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001862:	3b04      	subs	r3, #4
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001874:	3b04      	subs	r3, #4
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800187e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001886:	3b04      	subs	r3, #4
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001890:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80018b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80018d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018d8:	3b04      	subs	r3, #4
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e2:	3b04      	subs	r3, #4
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001914:	1f1a      	subs	r2, r3, #4
 8001916:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001926:	3b04      	subs	r3, #4
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001938:	3b04      	subs	r3, #4
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001942:	1f1a      	subs	r2, r3, #4
 8001944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001954:	1d1a      	adds	r2, r3, #4
 8001956:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800195e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800196c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001970:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001978:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800197c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001980:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800198c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001990:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800199c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80019ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b0:	1d1a      	adds	r2, r3, #4
 80019b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019b6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80019ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80019c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ca:	1d1a      	adds	r2, r3, #4
 80019cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80019d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80019e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80019f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8001a00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8001a10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8001a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a24:	1f1a      	subs	r2, r3, #4
 8001a26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3e:	1f1a      	subs	r2, r3, #4
 8001a40:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8001a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8001a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a6e:	4413      	add	r3, r2
 8001a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001a74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8001a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001a94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab8:	1d1a      	adds	r2, r3, #4
 8001aba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001abe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ac2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ad2:	1d1a      	adds	r2, r3, #4
 8001ad4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ad8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001adc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8001afc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b00:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001b1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b20:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001b2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b30:	1f1a      	subs	r2, r3, #4
 8001b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b36:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b4a:	1f1a      	subs	r2, r3, #4
 8001b4c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8001b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8001b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8001ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8001bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8001bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bc4:	1d1a      	adds	r2, r3, #4
 8001bc6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001be4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001be8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001bf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c38:	1f1a      	subs	r2, r3, #4
 8001c3a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c52:	1f1a      	subs	r2, r3, #4
 8001c54:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f acde 	bne.w	8001638 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	3304      	adds	r3, #4
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d44:	3304      	adds	r3, #4
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d56:	3304      	adds	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	3304      	adds	r3, #4
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d84:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	603a      	str	r2, [r7, #0]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de4:	3304      	adds	r3, #4
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	603a      	str	r2, [r7, #0]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e04:	3304      	adds	r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001e0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e0e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001e2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4e:	1d1a      	adds	r2, r3, #4
 8001e50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e54:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e68:	1d1a      	adds	r2, r3, #4
 8001e6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e6e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001e7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001e90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001ea0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001eb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001ec0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ede:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eee:	1d1a      	adds	r2, r3, #4
 8001ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f10:	3304      	adds	r3, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f2a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f5a:	1d1a      	adds	r2, r3, #4
 8001f5c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f86:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	2304      	movs	r3, #4
 8001f96:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001f98:	f000 f9f2 	bl	8002380 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001faa:	f000 f9e9 	bl	8002380 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	2304      	movs	r3, #4
 8001fba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fbc:	f000 f9e0 	bl	8002380 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	2304      	movs	r3, #4
 8001fcc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fce:	f000 f9d7 	bl	8002380 <arm_radix8_butterfly_f32>
}
 8001fd2:	bf00      	nop
 8001fd4:	37b0      	adds	r7, #176	; 0xb0
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	4613      	mov	r3, r2
 8001fee:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d117      	bne.n	800202c <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3304      	adds	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e00d      	b.n	8002024 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eef1 7a67 	vneg.f32	s15, s15
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3308      	adds	r3, #8
 800201c:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3ed      	bcc.n	8002008 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d040      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	d845      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002042:	d033      	beq.n	80020ac <arm_cfft_f32+0xd2>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800204a:	d83d      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d026      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d835      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d028      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d82d      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002072:	d01b      	beq.n	80020ac <arm_cfft_f32+0xd2>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207a:	d825      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d00f      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d81f      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d013      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d819      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d003      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b20      	cmp	r3, #32
 800209e:	d005      	beq.n	80020ac <arm_cfft_f32+0xd2>
 80020a0:	e012      	b.n	80020c8 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7fe ff74 	bl	8000f92 <arm_cfft_radix8by2_f32>
    break;
 80020aa:	e00d      	b.n	80020c8 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff f963 	bl	800137a <arm_cfft_radix8by4_f32>
    break;
 80020b4:	e008      	b.n	80020c8 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	2301      	movs	r3, #1
 80020c0:	68b8      	ldr	r0, [r7, #8]
 80020c2:	f000 f95d 	bl	8002380 <arm_radix8_butterfly_f32>
    break;
 80020c6:	bf00      	nop
  }

  if ( bitReverseFlag )
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8999      	ldrh	r1, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68b8      	ldr	r0, [r7, #8]
 80020da:	f7fe ff01 	bl	8000ee0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d130      	bne.n	8002146 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f6:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e01c      	b.n	800213e <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	61ba      	str	r2, [r7, #24]
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eeb1 7a67 	vneg.f32	s14, s15
 8002124:	edd7 7a04 	vldr	s15, [r7, #16]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3304      	adds	r3, #4
 8002136:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3de      	bcc.n	8002104 <arm_cfft_f32+0x12a>
    }
  }
}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 800216c:	899a      	ldrh	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	819a      	strh	r2, [r3, #12]
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0801e050 	.word	0x0801e050

08002198 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021b4:	899a      	ldrh	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	819a      	strh	r2, [r3, #12]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	0801e040 	.word	0x0801e040

080021e0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 80021fc:	899a      	ldrh	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	819a      	strh	r2, [r3, #12]
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0801e030 	.word	0x0801e030

08002228 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <arm_cfft_init_256_f32+0x44>)
 8002244:	899a      	ldrh	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	819a      	strh	r2, [r3, #12]
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <arm_cfft_init_256_f32+0x44>)
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <arm_cfft_init_256_f32+0x44>)
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	0801e020 	.word	0x0801e020

08002270 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 800228a:	899a      	ldrh	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	819a      	strh	r2, [r3, #12]
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	0801e010 	.word	0x0801e010

080022b4 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022ce:	899a      	ldrh	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	819a      	strh	r2, [r3, #12]
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	0801e000 	.word	0x0801e000

080022f8 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 8002312:	899a      	ldrh	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	819a      	strh	r2, [r3, #12]
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	0801dff0 	.word	0x0801dff0

0800233c <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2210      	movs	r2, #16
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <arm_cfft_init_16_f32+0x40>)
 8002356:	899a      	ldrh	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	819a      	strh	r2, [r3, #12]
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <arm_cfft_init_16_f32+0x40>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <arm_cfft_init_16_f32+0x40>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	0801dfe0 	.word	0x0801dfe0

08002380 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002380:	b480      	push	{r7}
 8002382:	b0bd      	sub	sp, #244	; 0xf4
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <arm_radix8_butterfly_f32+0x3c>)
 8002396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80023a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80023a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023b8:	e002      	b.n	80023c0 <arm_radix8_butterfly_f32+0x40>
 80023ba:	bf00      	nop
 80023bc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80023c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80023c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c8:	4413      	add	r3, r2
 80023ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80023ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d6:	4413      	add	r3, r2
 80023d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80023dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	4413      	add	r3, r2
 80023e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80023ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	4413      	add	r3, r2
 80023f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80023f8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002400:	4413      	add	r3, r2
 8002402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	4413      	add	r3, r2
 8002410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241c:	4413      	add	r3, r2
 800241e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002466:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800246a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800248e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	ed93 7a00 	vldr	s14, [r3]
 800249c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80024b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80024d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80024fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800251e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002542:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002546:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002552:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002556:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002562:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002566:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800256a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002572:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002576:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002590:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800259c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80025aa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80025b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	3304      	adds	r3, #4
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80025de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	3304      	adds	r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3304      	adds	r3, #4
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002602:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3304      	adds	r3, #4
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800262e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3304      	adds	r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002656:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3304      	adds	r3, #4
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	ed93 7a00 	vldr	s14, [r3]
 8002666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800267e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3304      	adds	r3, #4
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3304      	adds	r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80026a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3304      	adds	r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ca:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80026ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	3304      	adds	r3, #4
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3304      	adds	r3, #4
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80026f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80026fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002706:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800270a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002716:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800271a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002726:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800272a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3304      	adds	r3, #4
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002746:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3304      	adds	r3, #4
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002762:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800276e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800277c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002784:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002796:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80027a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3304      	adds	r3, #4
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80027be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3304      	adds	r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80027da:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80027de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80027f2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80027f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002806:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800280a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800280e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002822:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002826:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800283a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800283e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800284a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800284e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800285a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800285e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800286a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800286e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800287a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800287e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800288a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800288e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800289a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800289e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80028aa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028ae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80028ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028c8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028e2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80028fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002916:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	3304      	adds	r3, #4
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002932:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800293e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800294e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3304      	adds	r3, #4
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800296a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002986:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002992:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	4413      	add	r3, r2
 800299c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f4ff ad0a 	bcc.w	80023c0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	f240 84e3 	bls.w	800337c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80029c2:	893b      	ldrh	r3, [r7, #8]
 80029c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029c8:	4413      	add	r3, r2
 80029ca:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80029cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80029d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d8:	4413      	add	r3, r2
 80029da:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80029dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e0:	4413      	add	r3, r2
 80029e2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80029e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e8:	4413      	add	r3, r2
 80029ea:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80029ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	4413      	add	r3, r2
 80029f2:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80029f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	4413      	add	r3, r2
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80029fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a00:	4413      	add	r3, r2
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3304      	adds	r3, #4
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	3304      	adds	r3, #4
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	3304      	adds	r3, #4
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002ac6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	4413      	add	r3, r2
 8002ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002ad4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002adc:	4413      	add	r3, r2
 8002ade:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	4413      	add	r3, r2
 8002aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002af0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	4413      	add	r3, r2
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002afe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	4413      	add	r3, r2
 8002b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002b0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	4413      	add	r3, r2
 8002b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002b1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	4413      	add	r3, r2
 8002b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002b28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	ed93 7a00 	vldr	s14, [r3]
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002bb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	ed93 7a00 	vldr	s14, [r3]
 8002c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c44:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002c48:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c54:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002c58:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002c68:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002c78:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002ca2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ca6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002cb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3304      	adds	r3, #4
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3304      	adds	r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3304      	adds	r3, #4
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	ed93 7a00 	vldr	s14, [r3]
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3304      	adds	r3, #4
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3304      	adds	r3, #4
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	ed93 7a00 	vldr	s14, [r3]
 8002d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002d7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3304      	adds	r3, #4
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	ed93 7a00 	vldr	s14, [r3]
 8002d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3304      	adds	r3, #4
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	ed93 7a00 	vldr	s14, [r3]
 8002db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3304      	adds	r3, #4
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3304      	adds	r3, #4
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002df2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002df6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002e02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002e12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e16:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002e22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002e32:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002e42:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002e52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3304      	adds	r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002e6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002e7e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e82:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002e8e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002e9e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ea2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002eae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002eb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002ebe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ec2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002ece:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ed2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	3304      	adds	r3, #4
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f10:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002f14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f18:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002f24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002f34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002f44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3304      	adds	r3, #4
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002f8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002f9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002faa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002fba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fbe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	3304      	adds	r3, #4
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003000:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003004:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003018:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800301c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003024:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003030:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003034:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003044:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003048:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800304c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003060:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003064:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003070:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003074:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003080:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003084:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003090:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003094:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80030a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80030b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80030c0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030cc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80030d0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80030e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030e4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80030f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80030f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003100:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003104:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003110:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003114:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003120:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003124:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003130:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003134:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003140:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003144:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003150:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003154:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003160:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003164:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003170:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003180:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003184:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003190:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003194:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80031a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80031ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80031ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3304      	adds	r3, #4
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80031d6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031da:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80031e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80031ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80031f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003206:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800320a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	ed97 7a07 	vldr	s14, [r7, #28]
 8003224:	edd7 7a06 	vldr	s15, [r7, #24]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	3304      	adds	r3, #4
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003240:	edd7 7a04 	vldr	s15, [r7, #16]
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800324c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003250:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800325c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003260:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800326c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003270:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800327c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003280:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800328c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	ed97 7a07 	vldr	s14, [r7, #28]
 800329a:	edd7 7a06 	vldr	s15, [r7, #24]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80032a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3304      	adds	r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80032c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032c6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80032d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80032e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80032f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003310:	edd7 7a06 	vldr	s15, [r7, #24]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800331c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	3304      	adds	r3, #4
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	ed97 7a05 	vldr	s14, [r7, #20]
 800332c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003338:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800333c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003340:	4413      	add	r3, r2
 8003342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800334c:	429a      	cmp	r2, r3
 800334e:	f4ff abba 	bcc.w	8002ac6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003356:	3301      	adds	r3, #1
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800335c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003364:	429a      	cmp	r2, r3
 8003366:	f4ff ab2c 	bcc.w	80029c2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	2b07      	cmp	r3, #7
 8003376:	f63f a813 	bhi.w	80023a0 <arm_radix8_butterfly_f32+0x20>
}
 800337a:	e000      	b.n	800337e <arm_radix8_butterfly_f32+0xffe>
         break;
 800337c:	bf00      	nop
}
 800337e:	bf00      	nop
 8003380:	37f4      	adds	r7, #244	; 0xf4
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800338c:	b480      	push	{r7}
 800338e:	b095      	sub	sp, #84	; 0x54
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80033ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	1d1a      	adds	r2, r3, #4
 80033ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	1d1a      	adds	r2, r3, #4
 80033d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80033ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80033fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003414:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003418:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800341c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1d1a      	adds	r2, r3, #4
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	3308      	adds	r3, #8
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	64ba      	str	r2, [r7, #72]	; 0x48
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	64ba      	str	r2, [r7, #72]	; 0x48
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8003472:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003476:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8003482:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003486:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003492:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003496:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80034a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80034b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80034c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80034d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034de:	edd7 7a07 	vldr	s15, [r7, #28]
 80034e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fc:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003500:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003504:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800350c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003514:	edd7 7a05 	vldr	s15, [r7, #20]
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003530:	3308      	adds	r3, #8
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	3b08      	subs	r3, #8
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800353a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353c:	3b01      	subs	r3, #1
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8003540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003542:	2b00      	cmp	r3, #0
 8003544:	f73f af7f 	bgt.w	8003446 <stage_rfft_f32+0xba>
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3754      	adds	r7, #84	; 0x54
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8003556:	b480      	push	{r7}
 8003558:	b095      	sub	sp, #84	; 0x54
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	3308      	adds	r3, #8
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800358a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800358e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80035a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c2:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	3308      	adds	r3, #8
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80035d6:	e07c      	b.n	80036d2 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80035ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8003604:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003608:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800360c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8003614:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003618:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003624:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8003634:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003638:	edd7 7a08 	vldr	s15, [r7, #32]
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8003644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003648:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003650:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8003654:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003658:	edd7 7a08 	vldr	s15, [r7, #32]
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003664:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003668:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800366c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003670:	edd7 7a07 	vldr	s15, [r7, #28]
 8003674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003678:	edd7 7a06 	vldr	s15, [r7, #24]
 800367c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1d1a      	adds	r2, r3, #4
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800368a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368e:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003692:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003696:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800369a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800369e:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036bc:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	3308      	adds	r3, #8
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	3b08      	subs	r3, #8
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	3b01      	subs	r3, #1
 80036d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f73f af7f 	bgt.w	80035d8 <merge_rfft_f32+0x82>
   }

}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	3754      	adds	r7, #84	; 0x54
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ff26 	bl	8003556 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	2301      	movs	r3, #1
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f7fe fc62 	bl	8001fda <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003716:	e00a      	b.n	800372e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	2301      	movs	r3, #1
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7fe fc5b 	bl	8001fda <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fe2f 	bl	800338c <stage_rfft_f32>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <arm_rfft_fast_init_32_f32+0x14>
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e013      	b.n	8003774 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fdf4 	bl	800233c <arm_cfft_init_16_f32>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003764:	e006      	b.n	8003774 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a03      	ldr	r2, [pc, #12]	; (800377c <arm_rfft_fast_init_32_f32+0x44>)
 8003770:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08016060 	.word	0x08016060

08003780 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <arm_rfft_fast_init_64_f32+0x14>
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e013      	b.n	80037bc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fdae 	bl	80022f8 <arm_cfft_init_32_f32>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 80037a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ac:	e006      	b.n	80037bc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a03      	ldr	r2, [pc, #12]	; (80037c4 <arm_rfft_fast_init_64_f32+0x44>)
 80037b8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	080160e0 	.word	0x080160e0

080037c8 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <arm_rfft_fast_init_128_f32+0x14>
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e013      	b.n	8003804 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fd68 	bl	80022b4 <arm_cfft_init_64_f32>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f4:	e006      	b.n	8003804 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <arm_rfft_fast_init_128_f32+0x44>)
 8003800:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	080161e0 	.word	0x080161e0

08003810 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <arm_rfft_fast_init_256_f32+0x14>
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e014      	b.n	800384e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fd22 	bl	8002270 <arm_cfft_init_128_f32>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	e007      	b.n	800384e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003844:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a03      	ldr	r2, [pc, #12]	; (8003858 <arm_rfft_fast_init_256_f32+0x48>)
 800384a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	080163e0 	.word	0x080163e0

0800385c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <arm_rfft_fast_init_512_f32+0x14>
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e014      	b.n	800389a <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fcd8 	bl	8002228 <arm_cfft_init_256_f32>
 8003878:	4603      	mov	r3, r0
 800387a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800387c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003888:	e007      	b.n	800389a <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003890:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <arm_rfft_fast_init_512_f32+0x48>)
 8003896:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	080167e0 	.word	0x080167e0

080038a8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <arm_rfft_fast_init_1024_f32+0x14>
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e014      	b.n	80038e6 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc8e 	bl	80021e0 <arm_cfft_init_512_f32>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	e007      	b.n	80038e6 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038dc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <arm_rfft_fast_init_1024_f32+0x48>)
 80038e2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08016fe0 	.word	0x08016fe0

080038f4 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <arm_rfft_fast_init_2048_f32+0x14>
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	e014      	b.n	8003932 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fc44 	bl	8002198 <arm_cfft_init_1024_f32>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800391c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003920:	e007      	b.n	8003932 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003928:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a03      	ldr	r2, [pc, #12]	; (800393c <arm_rfft_fast_init_2048_f32+0x48>)
 800392e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	08017fe0 	.word	0x08017fe0

08003940 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <arm_rfft_fast_init_4096_f32+0x14>
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e014      	b.n	800397e <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fbfa 	bl	8002150 <arm_cfft_init_2048_f32>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396c:	e007      	b.n	800397e <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003974:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <arm_rfft_fast_init_4096_f32+0x48>)
 800397a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	08019fe0 	.word	0x08019fe0

0800398c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d023      	beq.n	80039e8 <arm_rfft_fast_init_f32+0x5c>
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	dc50      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039aa:	d023      	beq.n	80039f4 <arm_rfft_fast_init_f32+0x68>
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b0:	dc4a      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d023      	beq.n	8003a00 <arm_rfft_fast_init_f32+0x74>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	dc44      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d023      	beq.n	8003a0c <arm_rfft_fast_init_f32+0x80>
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c8:	dc3e      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d023      	beq.n	8003a18 <arm_rfft_fast_init_f32+0x8c>
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	dc38      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d024      	beq.n	8003a24 <arm_rfft_fast_init_f32+0x98>
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	dc34      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d02c      	beq.n	8003a3c <arm_rfft_fast_init_f32+0xb0>
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d024      	beq.n	8003a30 <arm_rfft_fast_init_f32+0xa4>
 80039e6:	e02f      	b.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffa9 	bl	8003940 <arm_rfft_fast_init_4096_f32>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
    break;
 80039f2:	e02c      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff7d 	bl	80038f4 <arm_rfft_fast_init_2048_f32>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
    break;
 80039fe:	e026      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff51 	bl	80038a8 <arm_rfft_fast_init_1024_f32>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
    break;
 8003a0a:	e020      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff25 	bl	800385c <arm_rfft_fast_init_512_f32>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]
    break;
 8003a16:	e01a      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fef9 	bl	8003810 <arm_rfft_fast_init_256_f32>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]
    break;
 8003a22:	e014      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fecf 	bl	80037c8 <arm_rfft_fast_init_128_f32>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a2e:	e00e      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fea5 	bl	8003780 <arm_rfft_fast_init_64_f32>
 8003a36:	4603      	mov	r3, r0
 8003a38:	73fb      	strb	r3, [r7, #15]
    break;
 8003a3a:	e008      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fe7b 	bl	8003738 <arm_rfft_fast_init_32_f32>
 8003a42:	4603      	mov	r3, r0
 8003a44:	73fb      	strb	r3, [r7, #15]
    break;
 8003a46:	e002      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e001      	b.n	8003a52 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a60:	f000 ff13 	bl	800488a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a64:	f000 f8e6 	bl	8003c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a68:	f000 faa0 	bl	8003fac <MX_GPIO_Init>
  MX_TIM2_Init();
 8003a6c:	f000 f9a8 	bl	8003dc0 <MX_TIM2_Init>
  MX_TIM15_Init();
 8003a70:	f000 fa1a 	bl	8003ea8 <MX_TIM15_Init>
  MX_ADC1_Init();
 8003a74:	f000 f940 	bl	8003cf8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003a78:	f000 fa68 	bl	8003f4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8003a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a80:	485e      	ldr	r0, [pc, #376]	; (8003bfc <main+0x1a0>)
 8003a82:	f7ff ff83 	bl	800398c <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a86:	217f      	movs	r1, #127	; 0x7f
 8003a88:	485d      	ldr	r0, [pc, #372]	; (8003c00 <main+0x1a4>)
 8003a8a:	f002 f8b9 	bl	8005c00 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 8003a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a92:	495c      	ldr	r1, [pc, #368]	; (8003c04 <main+0x1a8>)
 8003a94:	485a      	ldr	r0, [pc, #360]	; (8003c00 <main+0x1a4>)
 8003a96:	f001 fa9d 	bl	8004fd4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003a9a:	485b      	ldr	r0, [pc, #364]	; (8003c08 <main+0x1ac>)
 8003a9c:	f003 fe54 	bl	8007748 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init_TMR(&htim15);
 8003aa0:	485a      	ldr	r0, [pc, #360]	; (8003c0c <main+0x1b0>)
 8003aa2:	f005 fc8b 	bl	80093bc <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 10);
 8003aa6:	210a      	movs	r1, #10
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f005 fcd1 	bl	8009450 <STEPPER_SetSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (killFlag) {
 8003aae:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <main+0x1b4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d016      	beq.n	8003ae6 <main+0x8a>
			depth = 0;
 8003ab8:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <main+0x1b8>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
			STEPPER_Stop(STEPPER_MOTOR1);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f005 ffd4 	bl	8009a6c <STEPPER_Stop>
			Stepper1_Dir = DIR_CW;
 8003ac4:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <main+0x1bc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
			while (!limitFlag) {
 8003aca:	e007      	b.n	8003adc <main+0x80>
				STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003acc:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <main+0x1bc>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f005 ff74 	bl	80099c4 <STEPPER_Step_Blocking>
			while (!limitFlag) {
 8003adc:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <main+0x1c0>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f2      	beq.n	8003acc <main+0x70>
			}
		}
		if (limitFlag) {
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <main+0x1c0>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d011      	beq.n	8003b14 <main+0xb8>
			depth = 0;
 8003af0:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <main+0x1b8>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
			STEPPER_Stop(STEPPER_MOTOR1);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f005 ffb8 	bl	8009a6c <STEPPER_Stop>
			Stepper1_Dir = DIR_CCW;
 8003afc:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <main+0x1bc>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
			STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003b02:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <main+0x1bc>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f005 ff59 	bl	80099c4 <STEPPER_Step_Blocking>
 8003b12:	e057      	b.n	8003bc4 <main+0x168>
		} else {
			if (updatedFlag) {
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <main+0x1c4>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <main+0x168>
				curTime = HAL_GetTick();
 8003b1e:	f000 ff1d 	bl	800495c <HAL_GetTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <main+0x1c8>)
 8003b26:	6013      	str	r3, [r2, #0]

				if (temp < minTemp + 3) {
 8003b28:	2306      	movs	r3, #6
 8003b2a:	3303      	adds	r3, #3
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b34:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <main+0x1cc>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	dd17      	ble.n	8003b74 <main+0x118>
					depth -= 5;
 8003b44:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <main+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b05      	subs	r3, #5
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <main+0x1b8>)
 8003b4c:	6013      	str	r3, [r2, #0]
					Stepper1_Dir = DIR_CW;
 8003b4e:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <main+0x1bc>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
					STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <main+0x1bc>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f005 ff30 	bl	80099c4 <STEPPER_Step_Blocking>
					if (depth < 0)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <main+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da28      	bge.n	8003bbe <main+0x162>
						depth = 0;
 8003b6c:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <main+0x1b8>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e024      	b.n	8003bbe <main+0x162>
				} else if (temp > maxTemp - 3) {
 8003b74:	230e      	movs	r3, #14
 8003b76:	3b03      	subs	r3, #3
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b80:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <main+0x1cc>)
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	d516      	bpl.n	8003bbe <main+0x162>
					depth += 5;
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <main+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3305      	adds	r3, #5
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <main+0x1b8>)
 8003b98:	6013      	str	r3, [r2, #0]
					Stepper1_Dir = DIR_CCW;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <main+0x1bc>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	701a      	strb	r2, [r3, #0]
					STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <main+0x1bc>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003baa:	2000      	movs	r0, #0
 8003bac:	f005 ff0a 	bl	80099c4 <STEPPER_Step_Blocking>
					if (depth > 200)
 8003bb0:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <main+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2bc8      	cmp	r3, #200	; 0xc8
 8003bb6:	dd02      	ble.n	8003bbe <main+0x162>
						depth = 200;
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <main+0x1b8>)
 8003bba:	22c8      	movs	r2, #200	; 0xc8
 8003bbc:	601a      	str	r2, [r3, #0]
				}

				updatedFlag = 0;
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <main+0x1c4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
			}
		}

		if (halfFlag) {
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <main+0x1d0>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <main+0x180>
			process_data(0, BUFFER_SIZE / 2);
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f000 fb2d 	bl	8004230 <process_data>
			halfFlag = 0;
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <main+0x1d0>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
		}

		if (fullFlag) {
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <main+0x1d4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f43f af63 	beq.w	8003aae <main+0x52>
			process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 8003be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bec:	2080      	movs	r0, #128	; 0x80
 8003bee:	f000 fb1f 	bl	8004230 <process_data>
			fullFlag = 0;
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <main+0x1d4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
		if (killFlag) {
 8003bf8:	e759      	b.n	8003aae <main+0x52>
 8003bfa:	bf00      	nop
 8003bfc:	20000450 	.word	0x20000450
 8003c00:	200000c4 	.word	0x200000c4
 8003c04:	20000248 	.word	0x20000248
 8003c08:	20000128 	.word	0x20000128
 8003c0c:	20000174 	.word	0x20000174
 8003c10:	2000044c 	.word	0x2000044c
 8003c14:	2000a4ec 	.word	0x2000a4ec
 8003c18:	2000a4f4 	.word	0x2000a4f4
 8003c1c:	2000044b 	.word	0x2000044b
 8003c20:	2000044a 	.word	0x2000044a
 8003c24:	2000a4f0 	.word	0x2000a4f0
 8003c28:	2000a4e8 	.word	0x2000a4e8
 8003c2c:	20000448 	.word	0x20000448
 8003c30:	20000449 	.word	0x20000449

08003c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b096      	sub	sp, #88	; 0x58
 8003c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	2244      	movs	r2, #68	; 0x44
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f006 f971 	bl	8009f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c48:	463b      	mov	r3, r7
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c5a:	f002 fb97 	bl	800638c <HAL_PWREx_ControlVoltageScaling>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003c64:	f000 fbc7 	bl	80043f6 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c68:	f002 fb72 	bl	8006350 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <SystemClock_Config+0xc0>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <SystemClock_Config+0xc0>)
 8003c74:	f023 0318 	bic.w	r3, r3, #24
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003c7c:	2314      	movs	r3, #20
 8003c7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c80:	2301      	movs	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c84:	2301      	movs	r3, #1
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003c8c:	2360      	movs	r3, #96	; 0x60
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c90:	2302      	movs	r3, #2
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003c94:	2301      	movs	r3, #1
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003c9c:	2328      	movs	r3, #40	; 0x28
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 fbc1 	bl	8006438 <HAL_RCC_OscConfig>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003cbc:	f000 fb9b 	bl	80043f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 ffc1 	bl	8006c60 <HAL_RCC_ClockConfig>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003ce4:	f000 fb87 	bl	80043f6 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003ce8:	f003 fbd4 	bl	8007494 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003cec:	bf00      	nop
 8003cee:	3758      	adds	r7, #88	; 0x58
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cfe:	463b      	mov	r3, r7
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <MX_ADC1_Init+0xc0>)
 8003d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d26:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d2e:	2204      	movs	r2, #4
 8003d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d6e:	4811      	ldr	r0, [pc, #68]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d70:	f000 ffee 	bl	8004d50 <HAL_ADC_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003d7a:	f000 fb3c 	bl	80043f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_ADC1_Init+0xc4>)
 8003d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d82:	2306      	movs	r3, #6
 8003d84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d8a:	237f      	movs	r3, #127	; 0x7f
 8003d8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d96:	463b      	mov	r3, r7
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <MX_ADC1_Init+0xbc>)
 8003d9c:	f001 f9a8 	bl	80050f0 <HAL_ADC_ConfigChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003da6:	f000 fb26 	bl	80043f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200000c4 	.word	0x200000c4
 8003db8:	50040000 	.word	0x50040000
 8003dbc:	14f00020 	.word	0x14f00020

08003dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08e      	sub	sp, #56	; 0x38
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de0:	463b      	mov	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	615a      	str	r2, [r3, #20]
 8003df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e00:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e08:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0e:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e1a:	4822      	ldr	r0, [pc, #136]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e1c:	f003 fc3c 	bl	8007698 <HAL_TIM_Base_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003e26:	f000 fae6 	bl	80043f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e34:	4619      	mov	r1, r3
 8003e36:	481b      	ldr	r0, [pc, #108]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e38:	f003 ff52 	bl	8007ce0 <HAL_TIM_ConfigClockSource>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003e42:	f000 fad8 	bl	80043f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e46:	4817      	ldr	r0, [pc, #92]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e48:	f003 fcd2 	bl	80077f0 <HAL_TIM_PWM_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003e52:	f000 fad0 	bl	80043f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	4619      	mov	r1, r3
 8003e64:	480f      	ldr	r0, [pc, #60]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e66:	f004 fba9 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003e70:	f000 fac1 	bl	80043f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e74:	2360      	movs	r3, #96	; 0x60
 8003e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4806      	ldr	r0, [pc, #24]	; (8003ea4 <MX_TIM2_Init+0xe4>)
 8003e8c:	f003 fe14 	bl	8007ab8 <HAL_TIM_PWM_ConfigChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003e96:	f000 faae 	bl	80043f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e9a:	bf00      	nop
 8003e9c:	3738      	adds	r7, #56	; 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000128 	.word	0x20000128

08003ea8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eae:	f107 0310 	add.w	r3, r7, #16
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <MX_TIM15_Init+0xa0>)
 8003eca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ede:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003ef2:	4814      	ldr	r0, [pc, #80]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003ef4:	f003 fbd0 	bl	8007698 <HAL_TIM_Base_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003efe:	f000 fa7a 	bl	80043f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003f08:	f107 0310 	add.w	r3, r7, #16
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	480d      	ldr	r0, [pc, #52]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003f10:	f003 fee6 	bl	8007ce0 <HAL_TIM_ConfigClockSource>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003f1a:	f000 fa6c 	bl	80043f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <MX_TIM15_Init+0x9c>)
 8003f2c:	f004 fb46 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8003f36:	f000 fa5e 	bl	80043f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003f3a:	bf00      	nop
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000174 	.word	0x20000174
 8003f48:	40014000 	.word	0x40014000

08003f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <MX_USART1_UART_Init+0x5c>)
 8003f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f72:	220c      	movs	r2, #12
 8003f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_USART1_UART_Init+0x58>)
 8003f90:	f004 fb98 	bl	80086c4 <HAL_UART_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003f9a:	f000 fa2c 	bl	80043f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200001c0 	.word	0x200001c0
 8003fa8:	40013800 	.word	0x40013800

08003fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb2:	f107 030c 	add.w	r3, r7, #12
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	4a28      	ldr	r2, [pc, #160]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	4a22      	ldr	r2, [pc, #136]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <MX_GPIO_Init+0xbc>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <MX_GPIO_Init+0xbc>)
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800400a:	2200      	movs	r2, #0
 800400c:	211e      	movs	r1, #30
 800400e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004012:	f002 f961 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004016:	231e      	movs	r3, #30
 8004018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401a:	2301      	movs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	4619      	mov	r1, r3
 800402c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004030:	f001 ffe8 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004034:	2320      	movs	r3, #32
 8004036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004038:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800403c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800403e:	2302      	movs	r3, #2
 8004040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	4619      	mov	r1, r3
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <MX_GPIO_Init+0xc0>)
 800404a:	f001 ffdb 	bl	8006004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	2017      	movs	r0, #23
 8004054:	f001 ff0f 	bl	8005e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004058:	2017      	movs	r0, #23
 800405a:	f001 ff28 	bl	8005eae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800405e:	bf00      	nop
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	48000400 	.word	0x48000400

08004070 <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8089 	beq.w	8004194 <receive_bit+0x124>
		return;
	}
	for (int count = 0; count < floor(amount / 15); count++) {
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e00d      	b.n	80040a4 <receive_bit+0x34>
		received[receivedIndex] = bit;
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <receive_bit+0x12c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4944      	ldr	r1, [pc, #272]	; (80041a0 <receive_bit+0x130>)
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 8004094:	4b41      	ldr	r3, [pc, #260]	; (800419c <receive_bit+0x12c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a40      	ldr	r2, [pc, #256]	; (800419c <receive_bit+0x12c>)
 800409c:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < floor(amount / 15); count++) {
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3301      	adds	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	6978      	ldr	r0, [r7, #20]
 80040a6:	f7fc fa35 	bl	8000514 <__aeabi_i2d>
 80040aa:	4604      	mov	r4, r0
 80040ac:	460d      	mov	r5, r1
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <receive_bit+0x134>)
 80040b2:	fb82 1203 	smull	r1, r2, r2, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	10d2      	asrs	r2, r2, #3
 80040ba:	17db      	asrs	r3, r3, #31
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fa28 	bl	8000514 <__aeabi_i2d>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc fcfe 	bl	8000acc <__aeabi_dcmplt>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1d8      	bne.n	8004088 <receive_bit+0x18>
	}
	if (receivedIndex > 23) {
 80040d6:	4b31      	ldr	r3, [pc, #196]	; (800419c <receive_bit+0x12c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b17      	cmp	r3, #23
 80040dc:	dd5b      	ble.n	8004196 <receive_bit+0x126>
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 }
		 sprintf(msg, "\r\n");
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 */
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	2308      	movs	r3, #8
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	2310      	movs	r3, #16
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	e033      	b.n	8004154 <receive_bit+0xe4>
				count1++, count2++, count3++) {
			if (received[count1] + received[count2] + received[count3] >= 2) {
 80040ec:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <receive_bit+0x130>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f4:	492a      	ldr	r1, [pc, #168]	; (80041a0 <receive_bit+0x130>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040fc:	441a      	add	r2, r3
 80040fe:	4928      	ldr	r1, [pc, #160]	; (80041a0 <receive_bit+0x130>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004106:	4413      	add	r3, r2
 8004108:	2b01      	cmp	r3, #1
 800410a:	dd05      	ble.n	8004118 <receive_bit+0xa8>
				message[count1] = '1';
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <receive_bit+0x138>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	2231      	movs	r2, #49	; 0x31
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e014      	b.n	8004142 <receive_bit+0xd2>
			} else if (received[count1] + received[count2] + received[count3]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <receive_bit+0x130>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004120:	491f      	ldr	r1, [pc, #124]	; (80041a0 <receive_bit+0x130>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004128:	441a      	add	r2, r3
 800412a:	491d      	ldr	r1, [pc, #116]	; (80041a0 <receive_bit+0x130>)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004132:	4413      	add	r3, r2
 8004134:	2b01      	cmp	r3, #1
 8004136:	dc04      	bgt.n	8004142 <receive_bit+0xd2>
					<= 1) {
				message[count1] = '0';
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <receive_bit+0x138>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	2230      	movs	r2, #48	; 0x30
 8004140:	701a      	strb	r2, [r3, #0]
				count1++, count2++, count3++) {
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3301      	adds	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3301      	adds	r3, #1
 8004152:	60bb      	str	r3, [r7, #8]
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b07      	cmp	r3, #7
 8004158:	ddc8      	ble.n	80040ec <receive_bit+0x7c>
			}
		}

		temp = strtol(message, NULL, 2);
 800415a:	2202      	movs	r2, #2
 800415c:	2100      	movs	r1, #0
 800415e:	4812      	ldr	r0, [pc, #72]	; (80041a8 <receive_bit+0x138>)
 8004160:	f005 fdc2 	bl	8009ce8 <strtol>
 8004164:	ee07 0a90 	vmov	s15, r0
 8004168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <receive_bit+0x13c>)
 800416e:	edc3 7a00 	vstr	s15, [r3]
		temp /= 10;
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <receive_bit+0x13c>)
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800417c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <receive_bit+0x13c>)
 8004182:	edc3 7a00 	vstr	s15, [r3]

		updatedFlag = 1;
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <receive_bit+0x140>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
		receivedIndex = 0;
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <receive_bit+0x12c>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e000      	b.n	8004196 <receive_bit+0x126>
		return;
 8004194:	bf00      	nop

	}
}
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bdb0      	pop	{r4, r5, r7, pc}
 800419c:	2000a4dc 	.word	0x2000a4dc
 80041a0:	2000a47c 	.word	0x2000a47c
 80041a4:	88888889 	.word	0x88888889
 80041a8:	2000a474 	.word	0x2000a474
 80041ac:	2000a4e8 	.word	0x2000a4e8
 80041b0:	2000044a 	.word	0x2000044a

080041b4 <bit_detect>:

void bit_detect(int freq) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 100 && freq < ONE_FREQ + 100) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f240 726c 	movw	r2, #1900	; 0x76c
 80041c2:	4293      	cmp	r3, r2
 80041c4:	dd0a      	ble.n	80041dc <bit_detect+0x28>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f640 0233 	movw	r2, #2099	; 0x833
 80041cc:	4293      	cmp	r3, r2
 80041ce:	dc05      	bgt.n	80041dc <bit_detect+0x28>
		oneCount++;
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <bit_detect+0x74>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <bit_detect+0x74>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e008      	b.n	80041ee <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <bit_detect+0x74>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4619      	mov	r1, r3
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7ff ff44 	bl	8004070 <receive_bit>
		oneCount = 0;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <bit_detect+0x74>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 100 && freq < ZERO_FREQ + 100) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80041f4:	dd0a      	ble.n	800420c <bit_detect+0x58>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f240 424b 	movw	r2, #1099	; 0x44b
 80041fc:	4293      	cmp	r3, r2
 80041fe:	dc05      	bgt.n	800420c <bit_detect+0x58>
		zeroCount++;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <bit_detect+0x78>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <bit_detect+0x78>)
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e009      	b.n	8004220 <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <bit_detect+0x78>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4619      	mov	r1, r3
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff ff2c 	bl	8004070 <receive_bit>
		zeroCount = 0;
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <bit_detect+0x78>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
	}
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	2000a4e4 	.word	0x2000a4e4
 800422c:	2000a4e0 	.word	0x2000a4e0

08004230 <process_data>:

void process_data(int start, int end) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	 }
	 */
	float in;

	for (uint8_t count = start; count < end; count++) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	e07c      	b.n	800433a <process_data+0x10a>
		// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	4a43      	ldr	r2, [pc, #268]	; (8004350 <process_data+0x120>)
 8004244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004248:	b29b      	uxth	r3, r3
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004354 <process_data+0x124>
 8004256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800425a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 800425e:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <process_data+0x128>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b21b      	sxth	r3, r3
 8004264:	4a3d      	ldr	r2, [pc, #244]	; (800435c <process_data+0x12c>)
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	601a      	str	r2, [r3, #0]
		fftIndex++;
 800426e:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <process_data+0x128>)
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b21b      	sxth	r3, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	3301      	adds	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	b21a      	sxth	r2, r3
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <process_data+0x128>)
 800427e:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <process_data+0x128>)
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b21b      	sxth	r3, r3
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d153      	bne.n	8004334 <process_data+0x104>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 800428c:	2300      	movs	r3, #0
 800428e:	4a34      	ldr	r2, [pc, #208]	; (8004360 <process_data+0x130>)
 8004290:	4932      	ldr	r1, [pc, #200]	; (800435c <process_data+0x12c>)
 8004292:	4834      	ldr	r0, [pc, #208]	; (8004364 <process_data+0x134>)
 8004294:	f7ff fa28 	bl	80036e8 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 8004298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800429c:	4932      	ldr	r1, [pc, #200]	; (8004368 <process_data+0x138>)
 800429e:	4830      	ldr	r0, [pc, #192]	; (8004360 <process_data+0x130>)
 80042a0:	f7fc fdda 	bl	8000e58 <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <process_data+0x13c>)
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 80042ac:	4b30      	ldr	r3, [pc, #192]	; (8004370 <process_data+0x140>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 80042b2:	2301      	movs	r3, #1
 80042b4:	81bb      	strh	r3, [r7, #12]
 80042b6:	e02b      	b.n	8004310 <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 80042b8:	89bb      	ldrh	r3, [r7, #12]
 80042ba:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <process_data+0x138>)
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	4b29      	ldr	r3, [pc, #164]	; (800436c <process_data+0x13c>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	dd1a      	ble.n	800430a <process_data+0xda>
					peakVal = fftMagOut[index];
 80042d4:	89bb      	ldrh	r3, [r7, #12]
 80042d6:	4a24      	ldr	r2, [pc, #144]	; (8004368 <process_data+0x138>)
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a23      	ldr	r2, [pc, #140]	; (800436c <process_data+0x13c>)
 80042e0:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 80042e2:	89bb      	ldrh	r3, [r7, #12]
 80042e4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004374 <process_data+0x144>
 80042f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 80042fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004300:	ee17 3a90 	vmov	r3, s15
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <process_data+0x140>)
 8004308:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 800430a:	89bb      	ldrh	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	81bb      	strh	r3, [r7, #12]
 8004310:	89bb      	ldrh	r3, [r7, #12]
 8004312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004316:	d3cf      	bcc.n	80042b8 <process_data+0x88>
				}
			}
			printf("%d\n", (int)peakHz);
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <process_data+0x140>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	4816      	ldr	r0, [pc, #88]	; (8004378 <process_data+0x148>)
 8004320:	f005 fdae 	bl	8009e80 <iprintf>
			bit_detect(peakHz);
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <process_data+0x140>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff43 	bl	80041b4 <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <process_data+0x128>)
 8004330:	2200      	movs	r2, #0
 8004332:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	3301      	adds	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	f73f af7e 	bgt.w	8004240 <process_data+0x10>
		}
	}

}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000248 	.word	0x20000248
 8004354:	37fffffc 	.word	0x37fffffc
 8004358:	2000a468 	.word	0x2000a468
 800435c:	20000468 	.word	0x20000468
 8004360:	20004468 	.word	0x20004468
 8004364:	20000450 	.word	0x20000450
 8004368:	20008468 	.word	0x20008468
 800436c:	2000a46c 	.word	0x2000a46c
 8004370:	2000a470 	.word	0x2000a470
 8004374:	45800000 	.word	0x45800000
 8004378:	0800ab84 	.word	0x0800ab84

0800437c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8004384:	1d39      	adds	r1, r7, #4
 8004386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438a:	2201      	movs	r2, #1
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <__io_putchar+0x20>)
 800438e:	f004 f9e7 	bl	8008760 <HAL_UART_Transmit>

  return ch;
 8004392:	687b      	ldr	r3, [r7, #4]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200001c0 	.word	0x200001c0

080043a0 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000448 	.word	0x20000448

080043c0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000449 	.word	0x20000449

080043e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f005 fb55 	bl	8009a98 <STEPPER_TMR_OVF_ISR>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043fa:	b672      	cpsid	i
}
 80043fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80043fe:	e7fe      	b.n	80043fe <Error_Handler+0x8>

08004400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_MspInit+0x44>)
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	4a0e      	ldr	r2, [pc, #56]	; (8004444 <HAL_MspInit+0x44>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6613      	str	r3, [r2, #96]	; 0x60
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <HAL_MspInit+0x44>)
 8004414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_MspInit+0x44>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a08      	ldr	r2, [pc, #32]	; (8004444 <HAL_MspInit+0x44>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_MspInit+0x44>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000

08004448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b09e      	sub	sp, #120	; 0x78
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004460:	f107 0310 	add.w	r3, r7, #16
 8004464:	2254      	movs	r2, #84	; 0x54
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fd5e 	bl	8009f2a <memset>
  if(hadc->Instance==ADC1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a25      	ldr	r2, [pc, #148]	; (8004508 <HAL_ADC_MspInit+0xc0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d143      	bne.n	8004500 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800447c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800447e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004482:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004488:	2301      	movs	r3, #1
 800448a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800448c:	2310      	movs	r3, #16
 800448e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004490:	2307      	movs	r3, #7
 8004492:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004494:	2302      	movs	r3, #2
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004498:	2302      	movs	r3, #2
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800449c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044a2:	f107 0310 	add.w	r3, r7, #16
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 fdfe 	bl	80070a8 <HAL_RCCEx_PeriphCLKConfig>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80044b2:	f7ff ffa0 	bl	80043f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c2:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <HAL_ADC_MspInit+0xc4>)
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044e6:	2301      	movs	r3, #1
 80044e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80044ea:	230b      	movs	r3, #11
 80044ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80044f6:	4619      	mov	r1, r3
 80044f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044fc:	f001 fd82 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004500:	bf00      	nop
 8004502:	3778      	adds	r7, #120	; 0x78
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	50040000 	.word	0x50040000
 800450c:	40021000 	.word	0x40021000

08004510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d114      	bne.n	800454c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	201c      	movs	r0, #28
 8004540:	f001 fc99 	bl	8005e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004544:	201c      	movs	r0, #28
 8004546:	f001 fcb2 	bl	8005eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800454a:	e018      	b.n	800457e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0e      	ldr	r2, [pc, #56]	; (800458c <HAL_TIM_Base_MspInit+0x7c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d113      	bne.n	800457e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6613      	str	r3, [r2, #96]	; 0x60
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_TIM_Base_MspInit+0x78>)
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800456e:	2200      	movs	r2, #0
 8004570:	2100      	movs	r1, #0
 8004572:	2018      	movs	r0, #24
 8004574:	f001 fc7f 	bl	8005e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004578:	2018      	movs	r0, #24
 800457a:	f001 fc98 	bl	8005eae <HAL_NVIC_EnableIRQ>
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	40014000 	.word	0x40014000

08004590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b09e      	sub	sp, #120	; 0x78
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004598:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	2254      	movs	r2, #84	; 0x54
 80045ae:	2100      	movs	r1, #0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f005 fcba 	bl	8009f2a <memset>
  if(huart->Instance==USART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_UART_MspInit+0xa8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d137      	bne.n	8004630 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80045c4:	2300      	movs	r3, #0
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 fd6b 	bl	80070a8 <HAL_RCCEx_PeriphCLKConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80045d8:	f7ff ff0d 	bl	80043f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <HAL_UART_MspInit+0xac>)
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_UART_MspInit+0xac>)
 80045e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e6:	6613      	str	r3, [r2, #96]	; 0x60
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <HAL_UART_MspInit+0xac>)
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_UART_MspInit+0xac>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	4a10      	ldr	r2, [pc, #64]	; (800463c <HAL_UART_MspInit+0xac>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <HAL_UART_MspInit+0xac>)
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800460c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004610:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800461e:	2307      	movs	r3, #7
 8004620:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004622:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800462c:	f001 fcea 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004630:	bf00      	nop
 8004632:	3778      	adds	r7, #120	; 0x78
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000

08004640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004644:	e7fe      	b.n	8004644 <NMI_Handler+0x4>

08004646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800464a:	e7fe      	b.n	800464a <HardFault_Handler+0x4>

0800464c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <MemManage_Handler+0x4>

08004652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <BusFault_Handler+0x4>

08004658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <UsageFault_Handler+0x4>

0800465e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800468c:	f000 f952 	bl	8004934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004698:	2020      	movs	r0, #32
 800469a:	f001 fe35 	bl	8006308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80046aa:	f003 f902 	bl	80078b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000174 	.word	0x20000174

080046b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <TIM2_IRQHandler+0x10>)
 80046be:	f003 f8f8 	bl	80078b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000128 	.word	0x20000128

080046cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e00a      	b.n	80046f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046de:	f3af 8000 	nop.w
 80046e2:	4601      	mov	r1, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	60ba      	str	r2, [r7, #8]
 80046ea:	b2ca      	uxtb	r2, r1
 80046ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3301      	adds	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	dbf0      	blt.n	80046de <_read+0x12>
  }

  return len;
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b086      	sub	sp, #24
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e009      	b.n	800472c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	60ba      	str	r2, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fe2b 	bl	800437c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	dbf1      	blt.n	8004718 <_write+0x12>
  }
  return len;
 8004734:	687b      	ldr	r3, [r7, #4]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_close>:

int _close(int file)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004766:	605a      	str	r2, [r3, #4]
  return 0;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <_isatty>:

int _isatty(int file)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <_sbrk+0x5c>)
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <_sbrk+0x60>)
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <_sbrk+0x64>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <_sbrk+0x64>)
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <_sbrk+0x68>)
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <_sbrk+0x64>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d207      	bcs.n	80047e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047d8:	f005 fbf6 	bl	8009fc8 <__errno>
 80047dc:	4603      	mov	r3, r0
 80047de:	220c      	movs	r2, #12
 80047e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e009      	b.n	80047fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <_sbrk+0x64>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <_sbrk+0x64>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a05      	ldr	r2, [pc, #20]	; (800480c <_sbrk+0x64>)
 80047f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20010000 	.word	0x20010000
 8004808:	00000400 	.word	0x00000400
 800480c:	2000a4f8 	.word	0x2000a4f8
 8004810:	2000a660 	.word	0x2000a660

08004814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <SystemInit+0x20>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	4a05      	ldr	r2, [pc, #20]	; (8004834 <SystemInit+0x20>)
 8004820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004870 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800483c:	f7ff ffea 	bl	8004814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004840:	480c      	ldr	r0, [pc, #48]	; (8004874 <LoopForever+0x6>)
  ldr r1, =_edata
 8004842:	490d      	ldr	r1, [pc, #52]	; (8004878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004844:	4a0d      	ldr	r2, [pc, #52]	; (800487c <LoopForever+0xe>)
  movs r3, #0
 8004846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004848:	e002      	b.n	8004850 <LoopCopyDataInit>

0800484a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800484a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800484c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800484e:	3304      	adds	r3, #4

08004850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004854:	d3f9      	bcc.n	800484a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004858:	4c0a      	ldr	r4, [pc, #40]	; (8004884 <LoopForever+0x16>)
  movs r3, #0
 800485a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800485c:	e001      	b.n	8004862 <LoopFillZerobss>

0800485e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800485e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004860:	3204      	adds	r2, #4

08004862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004864:	d3fb      	bcc.n	800485e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004866:	f005 fbb5 	bl	8009fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800486a:	f7ff f8f7 	bl	8003a5c <main>

0800486e <LoopForever>:

LoopForever:
    b LoopForever
 800486e:	e7fe      	b.n	800486e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004878:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800487c:	0801e208 	.word	0x0801e208
  ldr r2, =_sbss
 8004880:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004884:	2000a660 	.word	0x2000a660

08004888 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004888:	e7fe      	b.n	8004888 <ADC1_IRQHandler>

0800488a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004894:	2003      	movs	r0, #3
 8004896:	f001 fae3 	bl	8005e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800489a:	2000      	movs	r0, #0
 800489c:	f000 f80e 	bl	80048bc <HAL_InitTick>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	71fb      	strb	r3, [r7, #7]
 80048aa:	e001      	b.n	80048b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048ac:	f7ff fda8 	bl	8004400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048b0:	79fb      	ldrb	r3, [r7, #7]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <HAL_InitTick+0x6c>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d023      	beq.n	8004918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <HAL_InitTick+0x70>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <HAL_InitTick+0x6c>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048de:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 faef 	bl	8005eca <HAL_SYSTICK_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b0f      	cmp	r3, #15
 80048f6:	d809      	bhi.n	800490c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048f8:	2200      	movs	r2, #0
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	f001 fab9 	bl	8005e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_InitTick+0x74>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e007      	b.n	800491c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	e004      	b.n	800491c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	e001      	b.n	800491c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000008 	.word	0x20000008
 800492c:	20000000 	.word	0x20000000
 8004930:	20000004 	.word	0x20000004

08004934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_IncTick+0x20>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_IncTick+0x24>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4413      	add	r3, r2
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_IncTick+0x24>)
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000008 	.word	0x20000008
 8004958:	2000a4fc 	.word	0x2000a4fc

0800495c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return uwTick;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_GetTick+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000a4fc 	.word	0x2000a4fc

08004974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3360      	adds	r3, #96	; 0x60
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <LL_ADC_SetOffset+0x44>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	03fff000 	.word	0x03fff000

08004a24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3360      	adds	r3, #96	; 0x60
 8004a32:	461a      	mov	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	461a      	mov	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3330      	adds	r3, #48	; 0x30
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	4413      	add	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	211f      	movs	r1, #31
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0e9b      	lsrs	r3, r3, #26
 8004ae4:	f003 011f 	and.w	r1, r3, #31
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	431a      	orrs	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3314      	adds	r3, #20
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	4413      	add	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2107      	movs	r1, #7
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	401a      	ands	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0d1b      	lsrs	r3, r3, #20
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	43db      	mvns	r3, r3
 8004b76:	401a      	ands	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0318 	and.w	r3, r3, #24
 8004b7e:	4908      	ldr	r1, [pc, #32]	; (8004ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b80:	40d9      	lsrs	r1, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	400b      	ands	r3, r1
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	0007ffff 	.word	0x0007ffff

08004ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6093      	str	r3, [r2, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bdc:	d101      	bne.n	8004be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2c:	d101      	bne.n	8004c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c7c:	f043 0202 	orr.w	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <LL_ADC_IsEnabled+0x18>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <LL_ADC_IsEnabled+0x1a>
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d101      	bne.n	8004cce <LL_ADC_IsDisableOngoing+0x18>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_ADC_IsDisableOngoing+0x1a>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d101      	bne.n	8004d1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d101      	bne.n	8004d42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e126      	b.n	8004fb8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fb65 	bl	8004448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff19 	bl	8004bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff feff 	bl	8004ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff34 	bl	8004c18 <LL_ADC_IsInternalRegulatorEnabled>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d115      	bne.n	8004de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff ff18 	bl	8004bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dc0:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_ADC_Init+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	4a7f      	ldr	r2, [pc, #508]	; (8004fc4 <HAL_ADC_Init+0x274>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004dd4:	e002      	b.n	8004ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f9      	bne.n	8004dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff ff16 	bl	8004c18 <LL_ADC_IsInternalRegulatorEnabled>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	f043 0210 	orr.w	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	f043 0201 	orr.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff ff76 	bl	8004d04 <LL_ADC_REG_IsConversionOngoing>
 8004e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 80bf 	bne.w	8004fa6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 80bb 	bne.w	8004fa6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e38:	f043 0202 	orr.w	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff23 	bl	8004c90 <LL_ADC_IsEnabled>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e50:	485d      	ldr	r0, [pc, #372]	; (8004fc8 <HAL_ADC_Init+0x278>)
 8004e52:	f7ff ff1d 	bl	8004c90 <LL_ADC_IsEnabled>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	485a      	ldr	r0, [pc, #360]	; (8004fcc <HAL_ADC_Init+0x27c>)
 8004e64:	f7ff fd86 	bl	8004974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7e5b      	ldrb	r3, [r3, #25]
 8004e6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	045b      	lsls	r3, r3, #17
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <HAL_ADC_Init+0x280>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff26 	bl	8004d2a <LL_ADC_INJ_IsConversionOngoing>
 8004ede:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d13d      	bne.n	8004f62 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d13a      	bne.n	8004f62 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ef0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ef8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	430b      	orrs	r3, r1
 8004f14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d118      	bne.n	8004f52 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f2a:	f023 0304 	bic.w	r3, r3, #4
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f36:	4311      	orrs	r1, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f42:	430a      	orrs	r2, r1
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	611a      	str	r2, [r3, #16]
 8004f50:	e007      	b.n	8004f62 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10c      	bne.n	8004f84 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	f023 010f 	bic.w	r1, r3, #15
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	1e5a      	subs	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
 8004f82:	e007      	b.n	8004f94 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 020f 	bic.w	r2, r2, #15
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f023 0303 	bic.w	r3, r3, #3
 8004f9c:	f043 0201 	orr.w	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
 8004fa4:	e007      	b.n	8004fb6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f043 0210 	orr.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	053e2d63 	.word	0x053e2d63
 8004fc8:	50040000 	.word	0x50040000
 8004fcc:	50040300 	.word	0x50040300
 8004fd0:	fff0c007 	.word	0xfff0c007

08004fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fe8d 	bl	8004d04 <LL_ADC_REG_IsConversionOngoing>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d167      	bne.n	80050c0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADC_Start_DMA+0x2a>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e063      	b.n	80050c6 <HAL_ADC_Start_DMA+0xf2>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fc54 	bl	80058b4 <ADC_Enable>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d14f      	bne.n	80050b6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	f023 0206 	bic.w	r2, r3, #6
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	659a      	str	r2, [r3, #88]	; 0x58
 8005042:	e002      	b.n	800504a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <HAL_ADC_Start_DMA+0xfc>)
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_ADC_Start_DMA+0x100>)
 8005058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_ADC_Start_DMA+0x104>)
 8005060:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	221c      	movs	r2, #28
 8005068:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0210 	orr.w	r2, r2, #16
 8005080:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3340      	adds	r3, #64	; 0x40
 800509c:	4619      	mov	r1, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f000 ff1e 	bl	8005ee2 <HAL_DMA_Start_IT>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fe14 	bl	8004cdc <LL_ADC_REG_StartConversion>
 80050b4:	e006      	b.n	80050c4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80050be:	e001      	b.n	80050c4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
 80050c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	08005a7f 	.word	0x08005a7f
 80050d4:	08005b57 	.word	0x08005b57
 80050d8:	08005b73 	.word	0x08005b73

080050dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b0b6      	sub	sp, #216	; 0xd8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x22>
 800510e:	2302      	movs	r3, #2
 8005110:	e3bb      	b.n	800588a <HAL_ADC_ConfigChannel+0x79a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fdf0 	bl	8004d04 <LL_ADC_REG_IsConversionOngoing>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 83a0 	bne.w	800586c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b05      	cmp	r3, #5
 800513a:	d824      	bhi.n	8005186 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	3b02      	subs	r3, #2
 8005142:	2b03      	cmp	r3, #3
 8005144:	d81b      	bhi.n	800517e <HAL_ADC_ConfigChannel+0x8e>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_ADC_ConfigChannel+0x5c>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	0800515d 	.word	0x0800515d
 8005150:	08005165 	.word	0x08005165
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005175 	.word	0x08005175
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800515c:	230c      	movs	r3, #12
 800515e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005162:	e010      	b.n	8005186 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005164:	2312      	movs	r3, #18
 8005166:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800516a:	e00c      	b.n	8005186 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800516c:	2318      	movs	r3, #24
 800516e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005172:	e008      	b.n	8005186 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800517c:	e003      	b.n	8005186 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800517e:	2306      	movs	r3, #6
 8005180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005184:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005194:	f7ff fc8a 	bl	8004aac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fdb1 	bl	8004d04 <LL_ADC_REG_IsConversionOngoing>
 80051a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fdbd 	bl	8004d2a <LL_ADC_INJ_IsConversionOngoing>
 80051b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f040 81a4 	bne.w	8005506 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 819f 	bne.w	8005506 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f7ff fc95 	bl	8004b04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d00a      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6919      	ldr	r1, [r3, #16]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800520c:	f7ff fbe6 	bl	80049dc <LL_ADC_SetOffset>
 8005210:	e179      	b.n	8005506 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fc03 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 800521e:	4603      	mov	r3, r0
 8005220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_ADC_ConfigChannel+0x14e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fbf8 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 8005234:	4603      	mov	r3, r0
 8005236:	0e9b      	lsrs	r3, r3, #26
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	e01e      	b.n	800527c <HAL_ADC_ConfigChannel+0x18c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fbed 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 800524a:	4603      	mov	r3, r0
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800525c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800526c:	2320      	movs	r3, #32
 800526e:	e004      	b.n	800527a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005274:	fab3 f383 	clz	r3, r3
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1a4>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	0e9b      	lsrs	r3, r3, #26
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	e018      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x1d6>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80052a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80052b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80052b8:	2320      	movs	r3, #32
 80052ba:	e004      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80052bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d106      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fbbc 	bl	8004a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fba0 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x214>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2101      	movs	r1, #1
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fb95 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	0e9b      	lsrs	r3, r3, #26
 80052fe:	f003 021f 	and.w	r2, r3, #31
 8005302:	e01e      	b.n	8005342 <HAL_ADC_ConfigChannel+0x252>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fb8a 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 8005310:	4603      	mov	r3, r0
 8005312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800532a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005332:	2320      	movs	r3, #32
 8005334:	e004      	b.n	8005340 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_ADC_ConfigChannel+0x26a>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	e018      	b.n	800538c <HAL_ADC_ConfigChannel+0x29c>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800536e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800537e:	2320      	movs	r3, #32
 8005380:	e004      	b.n	800538c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800538c:	429a      	cmp	r2, r3
 800538e:	d106      	bne.n	800539e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2200      	movs	r2, #0
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fb59 	bl	8004a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fb3d 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <HAL_ADC_ConfigChannel+0x2da>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2102      	movs	r1, #2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fb32 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 80053c0:	4603      	mov	r3, r0
 80053c2:	0e9b      	lsrs	r3, r3, #26
 80053c4:	f003 021f 	and.w	r2, r3, #31
 80053c8:	e01e      	b.n	8005408 <HAL_ADC_ConfigChannel+0x318>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2102      	movs	r1, #2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fb27 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80053f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80053f8:	2320      	movs	r3, #32
 80053fa:	e004      	b.n	8005406 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80053fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005400:	fab3 f383 	clz	r3, r3
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x330>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	0e9b      	lsrs	r3, r3, #26
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	e014      	b.n	800544a <HAL_ADC_ConfigChannel+0x35a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800542e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800543c:	2320      	movs	r3, #32
 800543e:	e004      	b.n	800544a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005444:	fab3 f383 	clz	r3, r3
 8005448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800544a:	429a      	cmp	r2, r3
 800544c:	d106      	bne.n	800545c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	2102      	movs	r1, #2
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fafa 	bl	8004a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2103      	movs	r1, #3
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fade 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x398>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2103      	movs	r1, #3
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fad3 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 800547e:	4603      	mov	r3, r0
 8005480:	0e9b      	lsrs	r3, r3, #26
 8005482:	f003 021f 	and.w	r2, r3, #31
 8005486:	e017      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x3c8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2103      	movs	r1, #3
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fac8 	bl	8004a24 <LL_ADC_GetOffsetChannel>
 8005494:	4603      	mov	r3, r0
 8005496:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80054a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80054aa:	2320      	movs	r3, #32
 80054ac:	e003      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80054ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x3e0>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0e9b      	lsrs	r3, r3, #26
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	e011      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x404>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80054e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80054e8:	2320      	movs	r3, #32
 80054ea:	e003      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80054ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d106      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2103      	movs	r1, #3
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff faa5 	bl	8004a50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fbc0 	bl	8004c90 <LL_ADC_IsEnabled>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 8140 	bne.w	8005798 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	461a      	mov	r2, r3
 8005526:	f7ff fb19 	bl	8004b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4a8f      	ldr	r2, [pc, #572]	; (800576c <HAL_ADC_ConfigChannel+0x67c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	f040 8131 	bne.w	8005798 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_ADC_ConfigChannel+0x46e>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	0e9b      	lsrs	r3, r3, #26
 800554c:	3301      	adds	r3, #1
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2b09      	cmp	r3, #9
 8005554:	bf94      	ite	ls
 8005556:	2301      	movls	r3, #1
 8005558:	2300      	movhi	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e019      	b.n	8005592 <HAL_ADC_ConfigChannel+0x4a2>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005576:	2320      	movs	r3, #32
 8005578:	e003      	b.n	8005582 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800557a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2b09      	cmp	r3, #9
 800558a:	bf94      	ite	ls
 800558c:	2301      	movls	r3, #1
 800558e:	2300      	movhi	r3, #0
 8005590:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005592:	2b00      	cmp	r3, #0
 8005594:	d079      	beq.n	800568a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x4c2>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	0e9b      	lsrs	r3, r3, #26
 80055a8:	3301      	adds	r3, #1
 80055aa:	069b      	lsls	r3, r3, #26
 80055ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b0:	e015      	b.n	80055de <HAL_ADC_ConfigChannel+0x4ee>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80055c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80055c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80055ca:	2320      	movs	r3, #32
 80055cc:	e003      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	3301      	adds	r3, #1
 80055d8:	069b      	lsls	r3, r3, #26
 80055da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x50e>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	0e9b      	lsrs	r3, r3, #26
 80055f0:	3301      	adds	r3, #1
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	e017      	b.n	800562e <HAL_ADC_ConfigChannel+0x53e>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005606:	fa93 f3a3 	rbit	r3, r3
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005616:	2320      	movs	r3, #32
 8005618:	e003      	b.n	8005622 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	b2db      	uxtb	r3, r3
 8005622:	3301      	adds	r3, #1
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	ea42 0103 	orr.w	r1, r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x564>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	0e9b      	lsrs	r3, r3, #26
 8005644:	3301      	adds	r3, #1
 8005646:	f003 021f 	and.w	r2, r3, #31
 800564a:	4613      	mov	r3, r2
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	4413      	add	r3, r2
 8005650:	051b      	lsls	r3, r3, #20
 8005652:	e018      	b.n	8005686 <HAL_ADC_ConfigChannel+0x596>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800566c:	2320      	movs	r3, #32
 800566e:	e003      	b.n	8005678 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	fab3 f383 	clz	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	3301      	adds	r3, #1
 800567a:	f003 021f 	and.w	r2, r3, #31
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005686:	430b      	orrs	r3, r1
 8005688:	e081      	b.n	800578e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x5b6>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	0e9b      	lsrs	r3, r3, #26
 800569c:	3301      	adds	r3, #1
 800569e:	069b      	lsls	r3, r3, #26
 80056a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056a4:	e015      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x5e2>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e003      	b.n	80056ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	069b      	lsls	r3, r3, #26
 80056ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x602>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	0e9b      	lsrs	r3, r3, #26
 80056e4:	3301      	adds	r3, #1
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	e017      	b.n	8005722 <HAL_ADC_ConfigChannel+0x632>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	61bb      	str	r3, [r7, #24]
  return result;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800570a:	2320      	movs	r3, #32
 800570c:	e003      	b.n	8005716 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	ea42 0103 	orr.w	r1, r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <HAL_ADC_ConfigChannel+0x65e>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 021f 	and.w	r2, r3, #31
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	3b1e      	subs	r3, #30
 8005746:	051b      	lsls	r3, r3, #20
 8005748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800574c:	e01e      	b.n	800578c <HAL_ADC_ConfigChannel+0x69c>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	60fb      	str	r3, [r7, #12]
  return result;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005766:	2320      	movs	r3, #32
 8005768:	e006      	b.n	8005778 <HAL_ADC_ConfigChannel+0x688>
 800576a:	bf00      	nop
 800576c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	f003 021f 	and.w	r2, r3, #31
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	3b1e      	subs	r3, #30
 8005786:	051b      	lsls	r3, r3, #20
 8005788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800578c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005792:	4619      	mov	r1, r3
 8005794:	f7ff f9b6 	bl	8004b04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b3d      	ldr	r3, [pc, #244]	; (8005894 <HAL_ADC_ConfigChannel+0x7a4>)
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d06c      	beq.n	800587e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057a4:	483c      	ldr	r0, [pc, #240]	; (8005898 <HAL_ADC_ConfigChannel+0x7a8>)
 80057a6:	f7ff f90b 	bl	80049c0 <LL_ADC_GetCommonPathInternalCh>
 80057aa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3a      	ldr	r2, [pc, #232]	; (800589c <HAL_ADC_ConfigChannel+0x7ac>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d127      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d121      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a35      	ldr	r2, [pc, #212]	; (80058a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d157      	bne.n	800587e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057d6:	4619      	mov	r1, r3
 80057d8:	482f      	ldr	r0, [pc, #188]	; (8005898 <HAL_ADC_ConfigChannel+0x7a8>)
 80057da:	f7ff f8de 	bl	800499a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <HAL_ADC_ConfigChannel+0x7b8>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	099b      	lsrs	r3, r3, #6
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80057f8:	e002      	b.n	8005800 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f9      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005806:	e03a      	b.n	800587e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <HAL_ADC_ConfigChannel+0x7bc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d113      	bne.n	800583a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d12a      	bne.n	800587e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800582c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005830:	4619      	mov	r1, r3
 8005832:	4819      	ldr	r0, [pc, #100]	; (8005898 <HAL_ADC_ConfigChannel+0x7a8>)
 8005834:	f7ff f8b1 	bl	800499a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005838:	e021      	b.n	800587e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d11c      	bne.n	800587e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d111      	bne.n	800587e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800585a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800585e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005862:	4619      	mov	r1, r3
 8005864:	480c      	ldr	r0, [pc, #48]	; (8005898 <HAL_ADC_ConfigChannel+0x7a8>)
 8005866:	f7ff f898 	bl	800499a <LL_ADC_SetCommonPathInternalCh>
 800586a:	e008      	b.n	800587e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005886:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800588a:	4618      	mov	r0, r3
 800588c:	37d8      	adds	r7, #216	; 0xd8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	80080000 	.word	0x80080000
 8005898:	50040300 	.word	0x50040300
 800589c:	c7520000 	.word	0xc7520000
 80058a0:	50040000 	.word	0x50040000
 80058a4:	20000000 	.word	0x20000000
 80058a8:	053e2d63 	.word	0x053e2d63
 80058ac:	cb840000 	.word	0xcb840000
 80058b0:	80000001 	.word	0x80000001

080058b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80058bc:	2300      	movs	r3, #0
 80058be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f9e3 	bl	8004c90 <LL_ADC_IsEnabled>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d169      	bne.n	80059a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <ADC_Enable+0xfc>)
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e055      	b.n	80059a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff f99e 	bl	8004c40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005904:	482b      	ldr	r0, [pc, #172]	; (80059b4 <ADC_Enable+0x100>)
 8005906:	f7ff f85b 	bl	80049c0 <LL_ADC_GetCommonPathInternalCh>
 800590a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800590c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <ADC_Enable+0x104>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	099b      	lsrs	r3, r3, #6
 800591a:	4a28      	ldr	r2, [pc, #160]	; (80059bc <ADC_Enable+0x108>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	099b      	lsrs	r3, r3, #6
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800592e:	e002      	b.n	8005936 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	3b01      	subs	r3, #1
 8005934:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f9      	bne.n	8005930 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800593c:	f7ff f80e 	bl	800495c <HAL_GetTick>
 8005940:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005942:	e028      	b.n	8005996 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff f9a1 	bl	8004c90 <LL_ADC_IsEnabled>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff f971 	bl	8004c40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800595e:	f7fe fffd 	bl	800495c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d914      	bls.n	8005996 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d00d      	beq.n	8005996 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f043 0210 	orr.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e007      	b.n	80059a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d1cf      	bne.n	8005944 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	8000003f 	.word	0x8000003f
 80059b4:	50040300 	.word	0x50040300
 80059b8:	20000000 	.word	0x20000000
 80059bc:	053e2d63 	.word	0x053e2d63

080059c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff f972 	bl	8004cb6 <LL_ADC_IsDisableOngoing>
 80059d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff f959 	bl	8004c90 <LL_ADC_IsEnabled>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d047      	beq.n	8005a74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d144      	bne.n	8005a74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 030d 	and.w	r3, r3, #13
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d10c      	bne.n	8005a12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff f933 	bl	8004c68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2203      	movs	r2, #3
 8005a08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a0a:	f7fe ffa7 	bl	800495c <HAL_GetTick>
 8005a0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a10:	e029      	b.n	8005a66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f043 0210 	orr.w	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f043 0201 	orr.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e023      	b.n	8005a76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a2e:	f7fe ff95 	bl	800495c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d914      	bls.n	8005a66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	f043 0210 	orr.w	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	f043 0201 	orr.w	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e007      	b.n	8005a76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1dc      	bne.n	8005a2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d14b      	bne.n	8005b30 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d021      	beq.n	8005af6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe ffe5 	bl	8004a86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d032      	beq.n	8005b28 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d12b      	bne.n	8005b28 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11f      	bne.n	8005b28 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
 8005af4:	e018      	b.n	8005b28 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d111      	bne.n	8005b28 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f043 0201 	orr.w	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7fe fc49 	bl	80043c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b2e:	e00e      	b.n	8005b4e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff facd 	bl	80050dc <HAL_ADC_ErrorCallback>
}
 8005b42:	e004      	b.n	8005b4e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7fe fc1b 	bl	80043a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	f043 0204 	orr.w	r2, r3, #4
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff fa9f 	bl	80050dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <LL_ADC_StartCalibration>:
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <LL_ADC_IsCalibrationOnGoing>:
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d101      	bne.n	8005bf2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_ADCEx_Calibration_Start+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e04d      	b.n	8005cb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fecb 	bl	80059c0 <ADC_Disable>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d136      	bne.n	8005ca2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005c3c:	f023 0302 	bic.w	r3, r3, #2
 8005c40:	f043 0202 	orr.w	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ffa9 	bl	8005ba6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c54:	e014      	b.n	8005c80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005c62:	d30d      	bcc.n	8005c80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	f023 0312 	bic.w	r3, r3, #18
 8005c6c:	f043 0210 	orr.w	r2, r3, #16
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e01b      	b.n	8005cb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff ffa7 	bl	8005bd8 <LL_ADC_IsCalibrationOnGoing>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e2      	bne.n	8005c56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	f023 0303 	bic.w	r3, r3, #3
 8005c98:	f043 0201 	orr.w	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8005ca0:	e005      	b.n	8005cae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	f043 0210 	orr.w	r2, r3, #16
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <__NVIC_SetPriorityGrouping+0x44>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	60d3      	str	r3, [r2, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <__NVIC_GetPriorityGrouping+0x18>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f003 0307 	and.w	r3, r3, #7
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	e000ed00 	.word	0xe000ed00

08005d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	db0b      	blt.n	8005d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	f003 021f 	and.w	r2, r3, #31
 8005d3c:	4907      	ldr	r1, [pc, #28]	; (8005d5c <__NVIC_EnableIRQ+0x38>)
 8005d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	2001      	movs	r0, #1
 8005d46:	fa00 f202 	lsl.w	r2, r0, r2
 8005d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	e000e100 	.word	0xe000e100

08005d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db0a      	blt.n	8005d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	490c      	ldr	r1, [pc, #48]	; (8005dac <__NVIC_SetPriority+0x4c>)
 8005d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7e:	0112      	lsls	r2, r2, #4
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	440b      	add	r3, r1
 8005d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d88:	e00a      	b.n	8005da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4908      	ldr	r1, [pc, #32]	; (8005db0 <__NVIC_SetPriority+0x50>)
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	3b04      	subs	r3, #4
 8005d98:	0112      	lsls	r2, r2, #4
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	761a      	strb	r2, [r3, #24]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	e000e100 	.word	0xe000e100
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	; 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f1c3 0307 	rsb	r3, r3, #7
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	bf28      	it	cs
 8005dd2:	2304      	movcs	r3, #4
 8005dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d902      	bls.n	8005de4 <NVIC_EncodePriority+0x30>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3b03      	subs	r3, #3
 8005de2:	e000      	b.n	8005de6 <NVIC_EncodePriority+0x32>
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43da      	mvns	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	401a      	ands	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	43d9      	mvns	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e0c:	4313      	orrs	r3, r2
         );
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	; 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e2c:	d301      	bcc.n	8005e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e00f      	b.n	8005e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e32:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <SysTick_Config+0x40>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3a:	210f      	movs	r1, #15
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	f7ff ff8e 	bl	8005d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <SysTick_Config+0x40>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <SysTick_Config+0x40>)
 8005e4c:	2207      	movs	r2, #7
 8005e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	e000e010 	.word	0xe000e010

08005e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff29 	bl	8005cc0 <__NVIC_SetPriorityGrouping>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e88:	f7ff ff3e 	bl	8005d08 <__NVIC_GetPriorityGrouping>
 8005e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	6978      	ldr	r0, [r7, #20]
 8005e94:	f7ff ff8e 	bl	8005db4 <NVIC_EncodePriority>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff5d 	bl	8005d60 <__NVIC_SetPriority>
}
 8005ea6:	bf00      	nop
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff ff31 	bl	8005d24 <__NVIC_EnableIRQ>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ffa2 	bl	8005e1c <SysTick_Config>
 8005ed8:	4603      	mov	r3, r0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_DMA_Start_IT+0x20>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e04b      	b.n	8005f9a <HAL_DMA_Start_IT+0xb8>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d13a      	bne.n	8005f8c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f831 	bl	8005fa2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 020e 	orr.w	r2, r2, #14
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e00f      	b.n	8005f7a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0204 	bic.w	r2, r2, #4
 8005f68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 020a 	orr.w	r2, r2, #10
 8005f78:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e005      	b.n	8005f98 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f003 021c 	and.w	r2, r3, #28
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d108      	bne.n	8005fe6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fe4:	e007      	b.n	8005ff6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006012:	e148      	b.n	80062a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	2101      	movs	r1, #1
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fa01 f303 	lsl.w	r3, r1, r3
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 813a 	beq.w	80062a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d005      	beq.n	8006044 <HAL_GPIO_Init+0x40>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d130      	bne.n	80060a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2203      	movs	r2, #3
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4013      	ands	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800607a:	2201      	movs	r2, #1
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f003 0201 	and.w	r2, r3, #1
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d017      	beq.n	80060e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	2203      	movs	r2, #3
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4013      	ands	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d123      	bne.n	8006136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	08da      	lsrs	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3208      	adds	r2, #8
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	220f      	movs	r2, #15
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	08da      	lsrs	r2, r3, #3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3208      	adds	r2, #8
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4013      	ands	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0203 	and.w	r2, r3, #3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8094 	beq.w	80062a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006178:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <HAL_GPIO_Init+0x2c0>)
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	4a51      	ldr	r2, [pc, #324]	; (80062c4 <HAL_GPIO_Init+0x2c0>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6613      	str	r3, [r2, #96]	; 0x60
 8006184:	4b4f      	ldr	r3, [pc, #316]	; (80062c4 <HAL_GPIO_Init+0x2c0>)
 8006186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006190:	4a4d      	ldr	r2, [pc, #308]	; (80062c8 <HAL_GPIO_Init+0x2c4>)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	3302      	adds	r3, #2
 8006198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	220f      	movs	r2, #15
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061ba:	d00d      	beq.n	80061d8 <HAL_GPIO_Init+0x1d4>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a43      	ldr	r2, [pc, #268]	; (80062cc <HAL_GPIO_Init+0x2c8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <HAL_GPIO_Init+0x1d0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a42      	ldr	r2, [pc, #264]	; (80062d0 <HAL_GPIO_Init+0x2cc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_GPIO_Init+0x1cc>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e004      	b.n	80061da <HAL_GPIO_Init+0x1d6>
 80061d0:	2307      	movs	r3, #7
 80061d2:	e002      	b.n	80061da <HAL_GPIO_Init+0x1d6>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <HAL_GPIO_Init+0x1d6>
 80061d8:	2300      	movs	r3, #0
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	f002 0203 	and.w	r2, r2, #3
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	4093      	lsls	r3, r2
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80061ea:	4937      	ldr	r1, [pc, #220]	; (80062c8 <HAL_GPIO_Init+0x2c4>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	3302      	adds	r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	43db      	mvns	r3, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800621c:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006222:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	43db      	mvns	r3, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4013      	ands	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800624c:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43db      	mvns	r3, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4013      	ands	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006270:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	43db      	mvns	r3, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4013      	ands	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <HAL_GPIO_Init+0x2d0>)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3301      	adds	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f aeaf 	bne.w	8006014 <HAL_GPIO_Init+0x10>
  }
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	40021000 	.word	0x40021000
 80062c8:	40010000 	.word	0x40010000
 80062cc:	48000400 	.word	0x48000400
 80062d0:	48000800 	.word	0x48000800
 80062d4:	40010400 	.word	0x40010400

080062d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]
 80062e4:	4613      	mov	r3, r2
 80062e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062e8:	787b      	ldrb	r3, [r7, #1]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062ee:	887a      	ldrh	r2, [r7, #2]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062f4:	e002      	b.n	80062fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006312:	4b08      	ldr	r3, [pc, #32]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800631e:	4a05      	ldr	r2, [pc, #20]	; (8006334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 f806 	bl	8006338 <HAL_GPIO_EXTI_Callback>
  }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40010400 	.word	0x40010400

08006338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800635a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635e:	6013      	str	r3, [r2, #0]
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40007000 	.word	0x40007000

08006370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <HAL_PWREx_GetVoltageRange+0x18>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800637c:	4618      	mov	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40007000 	.word	0x40007000

0800638c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639a:	d130      	bne.n	80063fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800639c:	4b23      	ldr	r3, [pc, #140]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a8:	d038      	beq.n	800641c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063aa:	4b20      	ldr	r3, [pc, #128]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ba:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2232      	movs	r2, #50	; 0x32
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	0c9b      	lsrs	r3, r3, #18
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063d0:	e002      	b.n	80063d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063d8:	4b14      	ldr	r3, [pc, #80]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e4:	d102      	bne.n	80063ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f2      	bne.n	80063d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d110      	bne.n	800641c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00f      	b.n	800641e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d007      	beq.n	800641c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006414:	4a05      	ldr	r2, [pc, #20]	; (800642c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800641a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40007000 	.word	0x40007000
 8006430:	20000000 	.word	0x20000000
 8006434:	431bde83 	.word	0x431bde83

08006438 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f000 bc02 	b.w	8006c50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644c:	4b96      	ldr	r3, [pc, #600]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006456:	4b94      	ldr	r3, [pc, #592]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80e4 	beq.w	8006636 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_RCC_OscConfig+0x4c>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b0c      	cmp	r3, #12
 8006478:	f040 808b 	bne.w	8006592 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b01      	cmp	r3, #1
 8006480:	f040 8087 	bne.w	8006592 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006484:	4b88      	ldr	r3, [pc, #544]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCC_OscConfig+0x64>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e3d9      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	4b81      	ldr	r3, [pc, #516]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_RCC_OscConfig+0x7e>
 80064ac:	4b7e      	ldr	r3, [pc, #504]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b4:	e005      	b.n	80064c2 <HAL_RCC_OscConfig+0x8a>
 80064b6:	4b7c      	ldr	r3, [pc, #496]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d223      	bcs.n	800650e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd8c 	bl	8006fe8 <RCC_SetFlashLatencyFromMSIRange>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e3ba      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064da:	4b73      	ldr	r3, [pc, #460]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a72      	ldr	r2, [pc, #456]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064e0:	f043 0308 	orr.w	r3, r3, #8
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b70      	ldr	r3, [pc, #448]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	496d      	ldr	r1, [pc, #436]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064f8:	4b6b      	ldr	r3, [pc, #428]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	4968      	ldr	r1, [pc, #416]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]
 800650c:	e025      	b.n	800655a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800650e:	4b66      	ldr	r3, [pc, #408]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a65      	ldr	r2, [pc, #404]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006514:	f043 0308 	orr.w	r3, r3, #8
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	4b63      	ldr	r3, [pc, #396]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	4960      	ldr	r1, [pc, #384]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800652c:	4b5e      	ldr	r3, [pc, #376]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	495b      	ldr	r1, [pc, #364]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fd4c 	bl	8006fe8 <RCC_SetFlashLatencyFromMSIRange>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e37a      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800655a:	f000 fc81 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 800655e:	4602      	mov	r2, r0
 8006560:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	4950      	ldr	r1, [pc, #320]	; (80066ac <HAL_RCC_OscConfig+0x274>)
 800656c:	5ccb      	ldrb	r3, [r1, r3]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	fa22 f303 	lsr.w	r3, r2, r3
 8006576:	4a4e      	ldr	r2, [pc, #312]	; (80066b0 <HAL_RCC_OscConfig+0x278>)
 8006578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <HAL_RCC_OscConfig+0x27c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe f99c 	bl	80048bc <HAL_InitTick>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d052      	beq.n	8006634 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	e35e      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d032      	beq.n	8006600 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800659a:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a42      	ldr	r2, [pc, #264]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065a6:	f7fe f9d9 	bl	800495c <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ae:	f7fe f9d5 	bl	800495c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e347      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065c0:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a35      	ldr	r2, [pc, #212]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065d2:	f043 0308 	orr.w	r3, r3, #8
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	4b33      	ldr	r3, [pc, #204]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	4930      	ldr	r1, [pc, #192]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065ea:	4b2f      	ldr	r3, [pc, #188]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	492b      	ldr	r1, [pc, #172]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	604b      	str	r3, [r1, #4]
 80065fe:	e01a      	b.n	8006636 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006600:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800660c:	f7fe f9a6 	bl	800495c <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006614:	f7fe f9a2 	bl	800495c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e314      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x1dc>
 8006632:	e000      	b.n	8006636 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006634:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d073      	beq.n	800672a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d005      	beq.n	8006654 <HAL_RCC_OscConfig+0x21c>
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d10e      	bne.n	800666c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d10b      	bne.n	800666c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d063      	beq.n	8006728 <HAL_RCC_OscConfig+0x2f0>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d15f      	bne.n	8006728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e2f1      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d106      	bne.n	8006684 <HAL_RCC_OscConfig+0x24c>
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e025      	b.n	80066d0 <HAL_RCC_OscConfig+0x298>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800668c:	d114      	bne.n	80066b8 <HAL_RCC_OscConfig+0x280>
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a02      	ldr	r2, [pc, #8]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e013      	b.n	80066d0 <HAL_RCC_OscConfig+0x298>
 80066a8:	40021000 	.word	0x40021000
 80066ac:	0801e060 	.word	0x0801e060
 80066b0:	20000000 	.word	0x20000000
 80066b4:	20000004 	.word	0x20000004
 80066b8:	4ba0      	ldr	r3, [pc, #640]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a9f      	ldr	r2, [pc, #636]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80066be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	4b9d      	ldr	r3, [pc, #628]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a9c      	ldr	r2, [pc, #624]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80066ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d013      	beq.n	8006700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fe f940 	bl	800495c <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e0:	f7fe f93c 	bl	800495c <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b64      	cmp	r3, #100	; 0x64
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e2ae      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f2:	4b92      	ldr	r3, [pc, #584]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x2a8>
 80066fe:	e014      	b.n	800672a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe f92c 	bl	800495c <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006708:	f7fe f928 	bl	800495c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b64      	cmp	r3, #100	; 0x64
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e29a      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800671a:	4b88      	ldr	r3, [pc, #544]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x2d0>
 8006726:	e000      	b.n	800672a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d060      	beq.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d005      	beq.n	8006748 <HAL_RCC_OscConfig+0x310>
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b0c      	cmp	r3, #12
 8006740:	d119      	bne.n	8006776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d116      	bne.n	8006776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006748:	4b7c      	ldr	r3, [pc, #496]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCC_OscConfig+0x328>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e277      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006760:	4b76      	ldr	r3, [pc, #472]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	4973      	ldr	r1, [pc, #460]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006770:	4313      	orrs	r3, r2
 8006772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006774:	e040      	b.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d023      	beq.n	80067c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800677e:	4b6f      	ldr	r3, [pc, #444]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a6e      	ldr	r2, [pc, #440]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fe f8e7 	bl	800495c <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006792:	f7fe f8e3 	bl	800495c <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e255      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a4:	4b65      	ldr	r3, [pc, #404]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b0:	4b62      	ldr	r3, [pc, #392]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	061b      	lsls	r3, r3, #24
 80067be:	495f      	ldr	r1, [pc, #380]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
 80067c4:	e018      	b.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c6:	4b5d      	ldr	r3, [pc, #372]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a5c      	ldr	r2, [pc, #368]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7fe f8c3 	bl	800495c <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067da:	f7fe f8bf 	bl	800495c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e231      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ec:	4b53      	ldr	r3, [pc, #332]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d03c      	beq.n	800687e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01c      	beq.n	8006846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800680c:	4b4b      	ldr	r3, [pc, #300]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800680e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006812:	4a4a      	ldr	r2, [pc, #296]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fe f89e 	bl	800495c <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006824:	f7fe f89a 	bl	800495c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e20c      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006836:	4b41      	ldr	r3, [pc, #260]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ef      	beq.n	8006824 <HAL_RCC_OscConfig+0x3ec>
 8006844:	e01b      	b.n	800687e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006846:	4b3d      	ldr	r3, [pc, #244]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800684c:	4a3b      	ldr	r2, [pc, #236]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006856:	f7fe f881 	bl	800495c <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800685e:	f7fe f87d 	bl	800495c <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e1ef      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006870:	4b32      	ldr	r3, [pc, #200]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1ef      	bne.n	800685e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80a6 	beq.w	80069d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800688c:	2300      	movs	r3, #0
 800688e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10d      	bne.n	80068b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800689c:	4b27      	ldr	r3, [pc, #156]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	4a26      	ldr	r2, [pc, #152]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80068a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a6:	6593      	str	r3, [r2, #88]	; 0x58
 80068a8:	4b24      	ldr	r3, [pc, #144]	; (800693c <HAL_RCC_OscConfig+0x504>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b4:	2301      	movs	r3, #1
 80068b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068b8:	4b21      	ldr	r3, [pc, #132]	; (8006940 <HAL_RCC_OscConfig+0x508>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d118      	bne.n	80068f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <HAL_RCC_OscConfig+0x508>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_RCC_OscConfig+0x508>)
 80068ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068d0:	f7fe f844 	bl	800495c <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d8:	f7fe f840 	bl	800495c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e1b2      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ea:	4b15      	ldr	r3, [pc, #84]	; (8006940 <HAL_RCC_OscConfig+0x508>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d108      	bne.n	8006910 <HAL_RCC_OscConfig+0x4d8>
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	4a0d      	ldr	r2, [pc, #52]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800690e:	e029      	b.n	8006964 <HAL_RCC_OscConfig+0x52c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b05      	cmp	r3, #5
 8006916:	d115      	bne.n	8006944 <HAL_RCC_OscConfig+0x50c>
 8006918:	4b08      	ldr	r3, [pc, #32]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006920:	f043 0304 	orr.w	r3, r3, #4
 8006924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <HAL_RCC_OscConfig+0x504>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	4a03      	ldr	r2, [pc, #12]	; (800693c <HAL_RCC_OscConfig+0x504>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006938:	e014      	b.n	8006964 <HAL_RCC_OscConfig+0x52c>
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	40007000 	.word	0x40007000
 8006944:	4b9a      	ldr	r3, [pc, #616]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	4a99      	ldr	r2, [pc, #612]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006954:	4b96      	ldr	r3, [pc, #600]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	4a95      	ldr	r2, [pc, #596]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d016      	beq.n	800699a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fd fff6 	bl	800495c <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fd fff2 	bl	800495c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e162      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698a:	4b89      	ldr	r3, [pc, #548]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ed      	beq.n	8006974 <HAL_RCC_OscConfig+0x53c>
 8006998:	e015      	b.n	80069c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699a:	f7fd ffdf 	bl	800495c <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069a0:	e00a      	b.n	80069b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fd ffdb 	bl	800495c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e14b      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b8:	4b7d      	ldr	r3, [pc, #500]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ed      	bne.n	80069a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069cc:	4b78      	ldr	r3, [pc, #480]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 80069ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d0:	4a77      	ldr	r2, [pc, #476]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 80069d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01c      	beq.n	8006a26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069ec:	4b70      	ldr	r3, [pc, #448]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 80069ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069f2:	4a6f      	ldr	r2, [pc, #444]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fc:	f7fd ffae 	bl	800495c <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a04:	f7fd ffaa 	bl	800495c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e11c      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a16:	4b66      	ldr	r3, [pc, #408]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0ef      	beq.n	8006a04 <HAL_RCC_OscConfig+0x5cc>
 8006a24:	e01b      	b.n	8006a5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a26:	4b62      	ldr	r3, [pc, #392]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a2c:	4a60      	ldr	r2, [pc, #384]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a36:	f7fd ff91 	bl	800495c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a3e:	f7fd ff8d 	bl	800495c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e0ff      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a50:	4b57      	ldr	r3, [pc, #348]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ef      	bne.n	8006a3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80f3 	beq.w	8006c4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f040 80c9 	bne.w	8006c04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a72:	4b4f      	ldr	r3, [pc, #316]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f003 0203 	and.w	r2, r3, #3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d12c      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	3b01      	subs	r3, #1
 8006a92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d123      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d113      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d109      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d06b      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d062      	beq.n	8006bac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ae6:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0ac      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2d      	ldr	r2, [pc, #180]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b02:	f7fd ff2b 	bl	800495c <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b08:	e008      	b.n	8006b1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0a:	f7fd ff27 	bl	800495c <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e099      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <HAL_RCC_OscConfig+0x77c>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	0112      	lsls	r2, r2, #4
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b42:	0212      	lsls	r2, r2, #8
 8006b44:	4311      	orrs	r1, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b4a:	0852      	lsrs	r2, r2, #1
 8006b4c:	3a01      	subs	r2, #1
 8006b4e:	0552      	lsls	r2, r2, #21
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b56:	0852      	lsrs	r2, r2, #1
 8006b58:	3a01      	subs	r2, #1
 8006b5a:	0652      	lsls	r2, r2, #25
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b62:	06d2      	lsls	r2, r2, #27
 8006b64:	430a      	orrs	r2, r1
 8006b66:	4912      	ldr	r1, [pc, #72]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b84:	f7fd feea 	bl	800495c <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8c:	f7fd fee6 	bl	800495c <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e058      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <HAL_RCC_OscConfig+0x778>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006baa:	e050      	b.n	8006c4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e04f      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d144      	bne.n	8006c4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bc4:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a23      	ldr	r2, [pc, #140]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4a20      	ldr	r2, [pc, #128]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bdc:	f7fd febe 	bl	800495c <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fd feba 	bl	800495c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e02c      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf6:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCC_OscConfig+0x7ac>
 8006c02:	e024      	b.n	8006c4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	d01f      	beq.n	8006c4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a12      	ldr	r2, [pc, #72]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fd fea1 	bl	800495c <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1e:	f7fd fe9d 	bl	800495c <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e00f      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f0      	bne.n	8006c1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	4905      	ldr	r1, [pc, #20]	; (8006c58 <HAL_RCC_OscConfig+0x820>)
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <HAL_RCC_OscConfig+0x824>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	60cb      	str	r3, [r1, #12]
 8006c48:	e001      	b.n	8006c4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	feeefffc 	.word	0xfeeefffc

08006c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0e7      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c74:	4b75      	ldr	r3, [pc, #468]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d910      	bls.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c82:	4b72      	ldr	r3, [pc, #456]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 0207 	bic.w	r2, r3, #7
 8006c8a:	4970      	ldr	r1, [pc, #448]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b6e      	ldr	r3, [pc, #440]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0cf      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d010      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	4b66      	ldr	r3, [pc, #408]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d908      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc0:	4b63      	ldr	r3, [pc, #396]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4960      	ldr	r1, [pc, #384]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d04c      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ce6:	4b5a      	ldr	r3, [pc, #360]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d121      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e0a6      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d115      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e09a      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d16:	4b4e      	ldr	r3, [pc, #312]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e08e      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d26:	4b4a      	ldr	r3, [pc, #296]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e086      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 0203 	bic.w	r2, r3, #3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4943      	ldr	r1, [pc, #268]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d48:	f7fd fe08 	bl	800495c <HAL_GetTick>
 8006d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d50:	f7fd fe04 	bl	800495c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e06e      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	4b3a      	ldr	r3, [pc, #232]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 020c 	and.w	r2, r3, #12
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d1eb      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d208      	bcs.n	8006da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d94:	4b2e      	ldr	r3, [pc, #184]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	492b      	ldr	r1, [pc, #172]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006da6:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d210      	bcs.n	8006dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f023 0207 	bic.w	r2, r3, #7
 8006dbc:	4923      	ldr	r1, [pc, #140]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc4:	4b21      	ldr	r3, [pc, #132]	; (8006e4c <HAL_RCC_ClockConfig+0x1ec>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d001      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e036      	b.n	8006e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	4918      	ldr	r1, [pc, #96]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e00:	4b13      	ldr	r3, [pc, #76]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4910      	ldr	r1, [pc, #64]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e14:	f000 f824 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <HAL_RCC_ClockConfig+0x1f0>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	091b      	lsrs	r3, r3, #4
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	490b      	ldr	r1, [pc, #44]	; (8006e54 <HAL_RCC_ClockConfig+0x1f4>)
 8006e26:	5ccb      	ldrb	r3, [r1, r3]
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <HAL_RCC_ClockConfig+0x1f8>)
 8006e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <HAL_RCC_ClockConfig+0x1fc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd fd3f 	bl	80048bc <HAL_InitTick>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e42:	7afb      	ldrb	r3, [r7, #11]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40022000 	.word	0x40022000
 8006e50:	40021000 	.word	0x40021000
 8006e54:	0801e060 	.word	0x0801e060
 8006e58:	20000000 	.word	0x20000000
 8006e5c:	20000004 	.word	0x20000004

08006e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b089      	sub	sp, #36	; 0x24
 8006e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e6e:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e78:	4b3b      	ldr	r3, [pc, #236]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0x34>
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b0c      	cmp	r3, #12
 8006e8c:	d121      	bne.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d11e      	bne.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e94:	4b34      	ldr	r3, [pc, #208]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ea0:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	e005      	b.n	8006ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006eb0:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ebc:	4a2b      	ldr	r2, [pc, #172]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d102      	bne.n	8006ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	e004      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d101      	bne.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ee4:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d134      	bne.n	8006f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006eee:	4b1e      	ldr	r3, [pc, #120]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d003      	beq.n	8006f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d003      	beq.n	8006f0c <HAL_RCC_GetSysClockFreq+0xac>
 8006f04:	e005      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f06:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f08:	617b      	str	r3, [r7, #20]
      break;
 8006f0a:	e005      	b.n	8006f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f0c:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f0e:	617b      	str	r3, [r7, #20]
      break;
 8006f10:	e002      	b.n	8006f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	617b      	str	r3, [r7, #20]
      break;
 8006f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	3301      	adds	r3, #1
 8006f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f26:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	fb03 f202 	mul.w	r2, r3, r2
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	0e5b      	lsrs	r3, r3, #25
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	3301      	adds	r3, #1
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f58:	69bb      	ldr	r3, [r7, #24]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3724      	adds	r7, #36	; 0x24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	0801e078 	.word	0x0801e078
 8006f70:	00f42400 	.word	0x00f42400
 8006f74:	007a1200 	.word	0x007a1200

08006f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f7c:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20000000 	.word	0x20000000

08006f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f94:	f7ff fff0 	bl	8006f78 <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4904      	ldr	r1, [pc, #16]	; (8006fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	0801e070 	.word	0x0801e070

08006fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fc0:	f7ff ffda 	bl	8006f78 <HAL_RCC_GetHCLKFreq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	0adb      	lsrs	r3, r3, #11
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fd2:	5ccb      	ldrb	r3, [r1, r3]
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	0801e070 	.word	0x0801e070

08006fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ff4:	4b2a      	ldr	r3, [pc, #168]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007000:	f7ff f9b6 	bl	8006370 <HAL_PWREx_GetVoltageRange>
 8007004:	6178      	str	r0, [r7, #20]
 8007006:	e014      	b.n	8007032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007008:	4b25      	ldr	r3, [pc, #148]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800700e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007012:	6593      	str	r3, [r2, #88]	; 0x58
 8007014:	4b22      	ldr	r3, [pc, #136]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007020:	f7ff f9a6 	bl	8006370 <HAL_PWREx_GetVoltageRange>
 8007024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007026:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800702c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007030:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d10b      	bne.n	8007052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d919      	bls.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2ba0      	cmp	r3, #160	; 0xa0
 8007044:	d902      	bls.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007046:	2302      	movs	r3, #2
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	e013      	b.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800704c:	2301      	movs	r3, #1
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e010      	b.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b80      	cmp	r3, #128	; 0x80
 8007056:	d902      	bls.n	800705e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007058:	2303      	movs	r3, #3
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	e00a      	b.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b80      	cmp	r3, #128	; 0x80
 8007062:	d102      	bne.n	800706a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007064:	2302      	movs	r3, #2
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	e004      	b.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b70      	cmp	r3, #112	; 0x70
 800706e:	d101      	bne.n	8007074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007070:	2301      	movs	r3, #1
 8007072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f023 0207 	bic.w	r2, r3, #7
 800707c:	4909      	ldr	r1, [pc, #36]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007084:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d001      	beq.n	8007096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40022000 	.word	0x40022000

080070a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b0:	2300      	movs	r3, #0
 80070b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070b4:	2300      	movs	r3, #0
 80070b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d031      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070cc:	d01a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80070ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070d2:	d814      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070dc:	d10f      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	4a5c      	ldr	r2, [pc, #368]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ea:	e00c      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f9de 	bl	80074b4 <RCCEx_PLLSAI1_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070fc:	e003      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	74fb      	strb	r3, [r7, #19]
      break;
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007106:	7cfb      	ldrb	r3, [r7, #19]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10b      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800710c:	4b51      	ldr	r3, [pc, #324]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	494e      	ldr	r1, [pc, #312]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007122:	e001      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	7cfb      	ldrb	r3, [r7, #19]
 8007126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 809e 	beq.w	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007136:	2300      	movs	r3, #0
 8007138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800713a:	4b46      	ldr	r3, [pc, #280]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00d      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007150:	4b40      	ldr	r3, [pc, #256]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715a:	6593      	str	r3, [r2, #88]	; 0x58
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007168:	2301      	movs	r3, #1
 800716a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800716c:	4b3a      	ldr	r3, [pc, #232]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a39      	ldr	r2, [pc, #228]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007178:	f7fd fbf0 	bl	800495c <HAL_GetTick>
 800717c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800717e:	e009      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007180:	f7fd fbec 	bl	800495c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d902      	bls.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	74fb      	strb	r3, [r7, #19]
        break;
 8007192:	e005      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007194:	4b30      	ldr	r3, [pc, #192]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ef      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80071a0:	7cfb      	ldrb	r3, [r7, #19]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d15a      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071a6:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01e      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d019      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071ce:	4b21      	ldr	r3, [pc, #132]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e4:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071ee:	4a19      	ldr	r2, [pc, #100]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d016      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fd fbac 	bl	800495c <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007206:	e00b      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007208:	f7fd fba8 	bl	800495c <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f241 3288 	movw	r2, #5000	; 0x1388
 8007216:	4293      	cmp	r3, r2
 8007218:	d902      	bls.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	74fb      	strb	r3, [r7, #19]
            break;
 800721e:	e006      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ec      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800722e:	7cfb      	ldrb	r3, [r7, #19]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007242:	4904      	ldr	r1, [pc, #16]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800724a:	e009      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	74bb      	strb	r3, [r7, #18]
 8007250:	e006      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000
 8007258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	7cfb      	ldrb	r3, [r7, #19]
 800725e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007260:	7c7b      	ldrb	r3, [r7, #17]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d105      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007266:	4b8a      	ldr	r3, [pc, #552]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	4a89      	ldr	r2, [pc, #548]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800726c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800727e:	4b84      	ldr	r3, [pc, #528]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f023 0203 	bic.w	r2, r3, #3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	4980      	ldr	r1, [pc, #512]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072a0:	4b7b      	ldr	r3, [pc, #492]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	f023 020c 	bic.w	r2, r3, #12
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	4978      	ldr	r1, [pc, #480]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072c2:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	496f      	ldr	r1, [pc, #444]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072e4:	4b6a      	ldr	r3, [pc, #424]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	4967      	ldr	r1, [pc, #412]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007306:	4b62      	ldr	r3, [pc, #392]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	495e      	ldr	r1, [pc, #376]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007328:	4b59      	ldr	r3, [pc, #356]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4956      	ldr	r1, [pc, #344]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800734a:	4b51      	ldr	r3, [pc, #324]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	494d      	ldr	r1, [pc, #308]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d028      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800736c:	4b48      	ldr	r3, [pc, #288]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	4945      	ldr	r1, [pc, #276]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738a:	d106      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a3f      	ldr	r2, [pc, #252]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007396:	60d3      	str	r3, [r2, #12]
 8007398:	e011      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073a2:	d10c      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	2101      	movs	r1, #1
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f882 	bl	80074b4 <RCCEx_PLLSAI1_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073b4:	7cfb      	ldrb	r3, [r7, #19]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80073ba:	7cfb      	ldrb	r3, [r7, #19]
 80073bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d028      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073ca:	4b31      	ldr	r3, [pc, #196]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d8:	492d      	ldr	r1, [pc, #180]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e8:	d106      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ea:	4b29      	ldr	r3, [pc, #164]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	4a28      	ldr	r2, [pc, #160]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f4:	60d3      	str	r3, [r2, #12]
 80073f6:	e011      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007400:	d10c      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f853 	bl	80074b4 <RCCEx_PLLSAI1_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007412:	7cfb      	ldrb	r3, [r7, #19]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007418:	7cfb      	ldrb	r3, [r7, #19]
 800741a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01c      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007428:	4b19      	ldr	r3, [pc, #100]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007436:	4916      	ldr	r1, [pc, #88]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007446:	d10c      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	2102      	movs	r1, #2
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f830 	bl	80074b4 <RCCEx_PLLSAI1_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007474:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747c:	4904      	ldr	r1, [pc, #16]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007484:	7cbb      	ldrb	r3, [r7, #18]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40021000 	.word	0x40021000

08007494 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800749e:	f043 0304 	orr.w	r3, r3, #4
 80074a2:	6013      	str	r3, [r2, #0]
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40021000 	.word	0x40021000

080074b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074c2:	4b74      	ldr	r3, [pc, #464]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074ce:	4b71      	ldr	r3, [pc, #452]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0203 	and.w	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d10d      	bne.n	80074fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
       ||
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074e6:	4b6b      	ldr	r3, [pc, #428]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	091b      	lsrs	r3, r3, #4
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
       ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d047      	beq.n	800758a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e044      	b.n	800758a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b03      	cmp	r3, #3
 8007506:	d018      	beq.n	800753a <RCCEx_PLLSAI1_Config+0x86>
 8007508:	2b03      	cmp	r3, #3
 800750a:	d825      	bhi.n	8007558 <RCCEx_PLLSAI1_Config+0xa4>
 800750c:	2b01      	cmp	r3, #1
 800750e:	d002      	beq.n	8007516 <RCCEx_PLLSAI1_Config+0x62>
 8007510:	2b02      	cmp	r3, #2
 8007512:	d009      	beq.n	8007528 <RCCEx_PLLSAI1_Config+0x74>
 8007514:	e020      	b.n	8007558 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007516:	4b5f      	ldr	r3, [pc, #380]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d11d      	bne.n	800755e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007526:	e01a      	b.n	800755e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007528:	4b5a      	ldr	r3, [pc, #360]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007530:	2b00      	cmp	r3, #0
 8007532:	d116      	bne.n	8007562 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007538:	e013      	b.n	8007562 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800753a:	4b56      	ldr	r3, [pc, #344]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007546:	4b53      	ldr	r3, [pc, #332]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007556:	e006      	b.n	8007566 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
      break;
 800755c:	e004      	b.n	8007568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007566:	bf00      	nop
    }

    if(status == HAL_OK)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10d      	bne.n	800758a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800756e:	4b49      	ldr	r3, [pc, #292]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6819      	ldr	r1, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	3b01      	subs	r3, #1
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	430b      	orrs	r3, r1
 8007584:	4943      	ldr	r1, [pc, #268]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007586:	4313      	orrs	r3, r2
 8007588:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d17c      	bne.n	800768a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007590:	4b40      	ldr	r3, [pc, #256]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3f      	ldr	r2, [pc, #252]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800759a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759c:	f7fd f9de 	bl	800495c <HAL_GetTick>
 80075a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075a2:	e009      	b.n	80075b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a4:	f7fd f9da 	bl	800495c <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d902      	bls.n	80075b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
        break;
 80075b6:	e005      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075b8:	4b36      	ldr	r3, [pc, #216]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1ef      	bne.n	80075a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d15f      	bne.n	800768a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d110      	bne.n	80075f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075d0:	4b30      	ldr	r3, [pc, #192]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80075d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6892      	ldr	r2, [r2, #8]
 80075e0:	0211      	lsls	r1, r2, #8
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	68d2      	ldr	r2, [r2, #12]
 80075e6:	06d2      	lsls	r2, r2, #27
 80075e8:	430a      	orrs	r2, r1
 80075ea:	492a      	ldr	r1, [pc, #168]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	610b      	str	r3, [r1, #16]
 80075f0:	e027      	b.n	8007642 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d112      	bne.n	800761e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075f8:	4b26      	ldr	r3, [pc, #152]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6892      	ldr	r2, [r2, #8]
 8007608:	0211      	lsls	r1, r2, #8
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6912      	ldr	r2, [r2, #16]
 800760e:	0852      	lsrs	r2, r2, #1
 8007610:	3a01      	subs	r2, #1
 8007612:	0552      	lsls	r2, r2, #21
 8007614:	430a      	orrs	r2, r1
 8007616:	491f      	ldr	r1, [pc, #124]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	610b      	str	r3, [r1, #16]
 800761c:	e011      	b.n	8007642 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800761e:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007626:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6892      	ldr	r2, [r2, #8]
 800762e:	0211      	lsls	r1, r2, #8
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6952      	ldr	r2, [r2, #20]
 8007634:	0852      	lsrs	r2, r2, #1
 8007636:	3a01      	subs	r2, #1
 8007638:	0652      	lsls	r2, r2, #25
 800763a:	430a      	orrs	r2, r1
 800763c:	4915      	ldr	r1, [pc, #84]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800763e:	4313      	orrs	r3, r2
 8007640:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a13      	ldr	r2, [pc, #76]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800764c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764e:	f7fd f985 	bl	800495c <HAL_GetTick>
 8007652:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007654:	e009      	b.n	800766a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007656:	f7fd f981 	bl	800495c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d902      	bls.n	800766a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
          break;
 8007668:	e005      	b.n	8007676 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800766a:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0ef      	beq.n	8007656 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	4903      	ldr	r1, [pc, #12]	; (8007694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007686:	4313      	orrs	r3, r2
 8007688:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40021000 	.word	0x40021000

08007698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e049      	b.n	800773e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fc ff26 	bl	8004510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f000 fbf4 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e03b      	b.n	80077d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_TIM_Base_Start_IT+0x4e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778a:	d004      	beq.n	8007796 <HAL_TIM_Base_Start_IT+0x4e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d115      	bne.n	80077c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <HAL_TIM_Base_Start_IT+0xa4>)
 800779e:	4013      	ands	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b06      	cmp	r3, #6
 80077a6:	d015      	beq.n	80077d4 <HAL_TIM_Base_Start_IT+0x8c>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ae:	d011      	beq.n	80077d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c0:	e008      	b.n	80077d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e000      	b.n	80077d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40014000 	.word	0x40014000
 80077ec:	00010007 	.word	0x00010007

080077f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e049      	b.n	8007896 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f841 	bl	800789e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f000 fb48 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01b      	beq.n	8007916 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0202 	mvn.w	r2, #2
 80078e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fac2 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007902:	e005      	b.n	8007910 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fab4 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fac5 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d020      	beq.n	8007962 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01b      	beq.n	8007962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f06f 0204 	mvn.w	r2, #4
 8007932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fa9c 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 800794e:	e005      	b.n	800795c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa8e 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa9f 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d020      	beq.n	80079ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01b      	beq.n	80079ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f06f 0208 	mvn.w	r2, #8
 800797e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2204      	movs	r2, #4
 8007984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa76 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 800799a:	e005      	b.n	80079a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa68 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa79 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f003 0310 	and.w	r3, r3, #16
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f003 0310 	and.w	r3, r3, #16
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01b      	beq.n	80079fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f06f 0210 	mvn.w	r2, #16
 80079ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2208      	movs	r2, #8
 80079d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa50 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 80079e6:	e005      	b.n	80079f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa42 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa53 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f06f 0201 	mvn.w	r2, #1
 8007a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fc fce1 	bl	80043e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fe2d 	bl	800869c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fe25 	bl	80086b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa12 	bl	8007eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f06f 0220 	mvn.w	r2, #32
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fded 	bl	8008688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e0ff      	b.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b14      	cmp	r3, #20
 8007ae2:	f200 80f0 	bhi.w	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007cc7 	.word	0x08007cc7
 8007af4:	08007cc7 	.word	0x08007cc7
 8007af8:	08007cc7 	.word	0x08007cc7
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007cc7 	.word	0x08007cc7
 8007b04:	08007cc7 	.word	0x08007cc7
 8007b08:	08007cc7 	.word	0x08007cc7
 8007b0c:	08007bc3 	.word	0x08007bc3
 8007b10:	08007cc7 	.word	0x08007cc7
 8007b14:	08007cc7 	.word	0x08007cc7
 8007b18:	08007cc7 	.word	0x08007cc7
 8007b1c:	08007c03 	.word	0x08007c03
 8007b20:	08007cc7 	.word	0x08007cc7
 8007b24:	08007cc7 	.word	0x08007cc7
 8007b28:	08007cc7 	.word	0x08007cc7
 8007b2c:	08007c45 	.word	0x08007c45
 8007b30:	08007cc7 	.word	0x08007cc7
 8007b34:	08007cc7 	.word	0x08007cc7
 8007b38:	08007cc7 	.word	0x08007cc7
 8007b3c:	08007c85 	.word	0x08007c85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fa20 	bl	8007f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0208 	orr.w	r2, r2, #8
 8007b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0204 	bic.w	r2, r2, #4
 8007b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6999      	ldr	r1, [r3, #24]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	619a      	str	r2, [r3, #24]
      break;
 8007b7e:	e0a5      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fa7c 	bl	8008084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	699a      	ldr	r2, [r3, #24]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6999      	ldr	r1, [r3, #24]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	021a      	lsls	r2, r3, #8
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	619a      	str	r2, [r3, #24]
      break;
 8007bc0:	e084      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fad5 	bl	8008178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0208 	orr.w	r2, r2, #8
 8007bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69da      	ldr	r2, [r3, #28]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0204 	bic.w	r2, r2, #4
 8007bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69d9      	ldr	r1, [r3, #28]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	61da      	str	r2, [r3, #28]
      break;
 8007c00:	e064      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fb2d 	bl	8008268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69da      	ldr	r2, [r3, #28]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69d9      	ldr	r1, [r3, #28]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	021a      	lsls	r2, r3, #8
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	61da      	str	r2, [r3, #28]
      break;
 8007c42:	e043      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fb6a 	bl	8008324 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0208 	orr.w	r2, r2, #8
 8007c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0204 	bic.w	r2, r2, #4
 8007c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c82:	e023      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fba2 	bl	80083d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cc4:	e002      	b.n	8007ccc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop

08007ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_TIM_ConfigClockSource+0x1c>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e0b6      	b.n	8007e6a <HAL_TIM_ConfigClockSource+0x18a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d38:	d03e      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0xd8>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	f200 8087 	bhi.w	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d46:	f000 8086 	beq.w	8007e56 <HAL_TIM_ConfigClockSource+0x176>
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	d87f      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d50:	2b70      	cmp	r3, #112	; 0x70
 8007d52:	d01a      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0xaa>
 8007d54:	2b70      	cmp	r3, #112	; 0x70
 8007d56:	d87b      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d58:	2b60      	cmp	r3, #96	; 0x60
 8007d5a:	d050      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0x11e>
 8007d5c:	2b60      	cmp	r3, #96	; 0x60
 8007d5e:	d877      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d60:	2b50      	cmp	r3, #80	; 0x50
 8007d62:	d03c      	beq.n	8007dde <HAL_TIM_ConfigClockSource+0xfe>
 8007d64:	2b50      	cmp	r3, #80	; 0x50
 8007d66:	d873      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d058      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0x13e>
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d86f      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	d064      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15e>
 8007d74:	2b30      	cmp	r3, #48	; 0x30
 8007d76:	d86b      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d060      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15e>
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d867      	bhi.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d05c      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15e>
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d05a      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x15e>
 8007d88:	e062      	b.n	8007e50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d9a:	f000 fbef 	bl	800857c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	609a      	str	r2, [r3, #8]
      break;
 8007db6:	e04f      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dc8:	f000 fbd8 	bl	800857c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dda:	609a      	str	r2, [r3, #8]
      break;
 8007ddc:	e03c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dea:	461a      	mov	r2, r3
 8007dec:	f000 fb4c 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2150      	movs	r1, #80	; 0x50
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fba5 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007dfc:	e02c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f000 fb6b 	bl	80084e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2160      	movs	r1, #96	; 0x60
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fb95 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007e1c:	e01c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 fb2c 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2140      	movs	r1, #64	; 0x40
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fb85 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e00c      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f000 fb7c 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8007e4e:	e003      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e000      	b.n	8007e58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	; (8007f80 <TIM_Base_SetConfig+0xbc>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_Base_SetConfig+0x20>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d108      	bne.n	8007ef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <TIM_Base_SetConfig+0xbc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_Base_SetConfig+0x52>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f04:	d007      	beq.n	8007f16 <TIM_Base_SetConfig+0x52>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1e      	ldr	r2, [pc, #120]	; (8007f84 <TIM_Base_SetConfig+0xc0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_Base_SetConfig+0x52>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1d      	ldr	r2, [pc, #116]	; (8007f88 <TIM_Base_SetConfig+0xc4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d108      	bne.n	8007f28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a0c      	ldr	r2, [pc, #48]	; (8007f80 <TIM_Base_SetConfig+0xbc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d007      	beq.n	8007f64 <TIM_Base_SetConfig+0xa0>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a0b      	ldr	r2, [pc, #44]	; (8007f84 <TIM_Base_SetConfig+0xc0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d003      	beq.n	8007f64 <TIM_Base_SetConfig+0xa0>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <TIM_Base_SetConfig+0xc4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d103      	bne.n	8007f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	615a      	str	r2, [r3, #20]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400

08007f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	f023 0201 	bic.w	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0303 	bic.w	r3, r3, #3
 8007fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 0302 	bic.w	r3, r3, #2
 8007fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	; (8008078 <TIM_OC1_SetConfig+0xec>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d007      	beq.n	8007ffc <TIM_OC1_SetConfig+0x70>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a23      	ldr	r2, [pc, #140]	; (800807c <TIM_OC1_SetConfig+0xf0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d003      	beq.n	8007ffc <TIM_OC1_SetConfig+0x70>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a22      	ldr	r2, [pc, #136]	; (8008080 <TIM_OC1_SetConfig+0xf4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d10c      	bne.n	8008016 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0308 	bic.w	r3, r3, #8
 8008002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 0304 	bic.w	r3, r3, #4
 8008014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a17      	ldr	r2, [pc, #92]	; (8008078 <TIM_OC1_SetConfig+0xec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC1_SetConfig+0xa2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a16      	ldr	r2, [pc, #88]	; (800807c <TIM_OC1_SetConfig+0xf0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC1_SetConfig+0xa2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <TIM_OC1_SetConfig+0xf4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d111      	bne.n	8008052 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	621a      	str	r2, [r3, #32]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400

08008084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	f023 0210 	bic.w	r2, r3, #16
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0320 	bic.w	r3, r3, #32
 80080d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a22      	ldr	r2, [pc, #136]	; (800816c <TIM_OC2_SetConfig+0xe8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d10d      	bne.n	8008104 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a19      	ldr	r2, [pc, #100]	; (800816c <TIM_OC2_SetConfig+0xe8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <TIM_OC2_SetConfig+0x98>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a18      	ldr	r2, [pc, #96]	; (8008170 <TIM_OC2_SetConfig+0xec>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d003      	beq.n	800811c <TIM_OC2_SetConfig+0x98>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a17      	ldr	r2, [pc, #92]	; (8008174 <TIM_OC2_SetConfig+0xf0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d113      	bne.n	8008144 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40014000 	.word	0x40014000
 8008174:	40014400 	.word	0x40014400

08008178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a21      	ldr	r2, [pc, #132]	; (800825c <TIM_OC3_SetConfig+0xe4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d10d      	bne.n	80081f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a18      	ldr	r2, [pc, #96]	; (800825c <TIM_OC3_SetConfig+0xe4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_OC3_SetConfig+0x96>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a17      	ldr	r2, [pc, #92]	; (8008260 <TIM_OC3_SetConfig+0xe8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_OC3_SetConfig+0x96>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a16      	ldr	r2, [pc, #88]	; (8008264 <TIM_OC3_SetConfig+0xec>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d113      	bne.n	8008236 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800821c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40014000 	.word	0x40014000
 8008264:	40014400 	.word	0x40014400

08008268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	031b      	lsls	r3, r3, #12
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a14      	ldr	r2, [pc, #80]	; (8008318 <TIM_OC4_SetConfig+0xb0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d007      	beq.n	80082dc <TIM_OC4_SetConfig+0x74>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a13      	ldr	r2, [pc, #76]	; (800831c <TIM_OC4_SetConfig+0xb4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d003      	beq.n	80082dc <TIM_OC4_SetConfig+0x74>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a12      	ldr	r2, [pc, #72]	; (8008320 <TIM_OC4_SetConfig+0xb8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d109      	bne.n	80082f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	019b      	lsls	r3, r3, #6
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	621a      	str	r2, [r3, #32]
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40012c00 	.word	0x40012c00
 800831c:	40014000 	.word	0x40014000
 8008320:	40014400 	.word	0x40014400

08008324 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <TIM_OC5_SetConfig+0xa4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d007      	beq.n	800838e <TIM_OC5_SetConfig+0x6a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a12      	ldr	r2, [pc, #72]	; (80083cc <TIM_OC5_SetConfig+0xa8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d003      	beq.n	800838e <TIM_OC5_SetConfig+0x6a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <TIM_OC5_SetConfig+0xac>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d109      	bne.n	80083a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	40012c00 	.word	0x40012c00
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40014400 	.word	0x40014400

080083d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800841a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	051b      	lsls	r3, r3, #20
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a14      	ldr	r2, [pc, #80]	; (800847c <TIM_OC6_SetConfig+0xa8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_OC6_SetConfig+0x6c>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <TIM_OC6_SetConfig+0xac>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_OC6_SetConfig+0x6c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a12      	ldr	r2, [pc, #72]	; (8008484 <TIM_OC6_SetConfig+0xb0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d109      	bne.n	8008454 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	029b      	lsls	r3, r3, #10
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	621a      	str	r2, [r3, #32]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400

08008488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 030a 	bic.w	r3, r3, #10
 80084c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f023 0210 	bic.w	r2, r3, #16
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008522:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	f043 0307 	orr.w	r3, r3, #7
 8008568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	431a      	orrs	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e04f      	b.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a21      	ldr	r2, [pc, #132]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d108      	bne.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008604:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a14      	ldr	r2, [pc, #80]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d009      	beq.n	8008648 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d004      	beq.n	8008648 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a10      	ldr	r2, [pc, #64]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d10c      	bne.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	4313      	orrs	r3, r2
 8008658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	40012c00 	.word	0x40012c00
 8008684:	40014000 	.word	0x40014000

08008688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e040      	b.n	8008758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d106      	bne.n	80086ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fb ff52 	bl	8004590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2224      	movs	r2, #36	; 0x24
 80086f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0201 	bic.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fade 	bl	8008ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f8af 	bl	8008874 <UART_SetConfig>
 8008716:	4603      	mov	r3, r0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e01b      	b.n	8008758 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800872e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800873e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fb5d 	bl	8008e10 <UART_CheckIdleState>
 8008756:	4603      	mov	r3, r0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	; 0x28
 8008764:	af02      	add	r7, sp, #8
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	4613      	mov	r3, r2
 800876e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008774:	2b20      	cmp	r3, #32
 8008776:	d178      	bne.n	800886a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <HAL_UART_Transmit+0x24>
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e071      	b.n	800886c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2221      	movs	r2, #33	; 0x21
 8008794:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008796:	f7fc f8e1 	bl	800495c <HAL_GetTick>
 800879a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	88fa      	ldrh	r2, [r7, #6]
 80087a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b4:	d108      	bne.n	80087c8 <HAL_UART_Transmit+0x68>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e003      	b.n	80087d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087d0:	e030      	b.n	8008834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2200      	movs	r2, #0
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fbbf 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e03c      	b.n	800886c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10b      	bne.n	8008810 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008804:	b292      	uxth	r2, r2
 8008806:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	3302      	adds	r3, #2
 800880c:	61bb      	str	r3, [r7, #24]
 800880e:	e008      	b.n	8008822 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	b292      	uxth	r2, r2
 800881a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3301      	adds	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1c8      	bne.n	80087d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2200      	movs	r2, #0
 8008848:	2140      	movs	r1, #64	; 0x40
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 fb88 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e005      	b.n	800886c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	e000      	b.n	800886c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800886a:	2302      	movs	r3, #2
  }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008878:	b08a      	sub	sp, #40	; 0x28
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	431a      	orrs	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	431a      	orrs	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	4313      	orrs	r3, r2
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	4bb4      	ldr	r3, [pc, #720]	; (8008b74 <UART_SetConfig+0x300>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4aa9      	ldr	r2, [pc, #676]	; (8008b78 <UART_SetConfig+0x304>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088dc:	4313      	orrs	r3, r2
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4aa0      	ldr	r2, [pc, #640]	; (8008b7c <UART_SetConfig+0x308>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d126      	bne.n	800894c <UART_SetConfig+0xd8>
 80088fe:	4ba0      	ldr	r3, [pc, #640]	; (8008b80 <UART_SetConfig+0x30c>)
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	2b03      	cmp	r3, #3
 800890a:	d81b      	bhi.n	8008944 <UART_SetConfig+0xd0>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <UART_SetConfig+0xa0>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008925 	.word	0x08008925
 8008918:	08008935 	.word	0x08008935
 800891c:	0800892d 	.word	0x0800892d
 8008920:	0800893d 	.word	0x0800893d
 8008924:	2301      	movs	r3, #1
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e080      	b.n	8008a2e <UART_SetConfig+0x1ba>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e07c      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893a:	e078      	b.n	8008a2e <UART_SetConfig+0x1ba>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008942:	e074      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894a:	e070      	b.n	8008a2e <UART_SetConfig+0x1ba>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a8c      	ldr	r2, [pc, #560]	; (8008b84 <UART_SetConfig+0x310>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d138      	bne.n	80089c8 <UART_SetConfig+0x154>
 8008956:	4b8a      	ldr	r3, [pc, #552]	; (8008b80 <UART_SetConfig+0x30c>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895c:	f003 030c 	and.w	r3, r3, #12
 8008960:	2b0c      	cmp	r3, #12
 8008962:	d82d      	bhi.n	80089c0 <UART_SetConfig+0x14c>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <UART_SetConfig+0xf8>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	080089a1 	.word	0x080089a1
 8008970:	080089c1 	.word	0x080089c1
 8008974:	080089c1 	.word	0x080089c1
 8008978:	080089c1 	.word	0x080089c1
 800897c:	080089b1 	.word	0x080089b1
 8008980:	080089c1 	.word	0x080089c1
 8008984:	080089c1 	.word	0x080089c1
 8008988:	080089c1 	.word	0x080089c1
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089c1 	.word	0x080089c1
 8008994:	080089c1 	.word	0x080089c1
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e042      	b.n	8008a2e <UART_SetConfig+0x1ba>
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e03e      	b.n	8008a2e <UART_SetConfig+0x1ba>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e03a      	b.n	8008a2e <UART_SetConfig+0x1ba>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e036      	b.n	8008a2e <UART_SetConfig+0x1ba>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c6:	e032      	b.n	8008a2e <UART_SetConfig+0x1ba>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a6a      	ldr	r2, [pc, #424]	; (8008b78 <UART_SetConfig+0x304>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d12a      	bne.n	8008a28 <UART_SetConfig+0x1b4>
 80089d2:	4b6b      	ldr	r3, [pc, #428]	; (8008b80 <UART_SetConfig+0x30c>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e0:	d01a      	beq.n	8008a18 <UART_SetConfig+0x1a4>
 80089e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e6:	d81b      	bhi.n	8008a20 <UART_SetConfig+0x1ac>
 80089e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ec:	d00c      	beq.n	8008a08 <UART_SetConfig+0x194>
 80089ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f2:	d815      	bhi.n	8008a20 <UART_SetConfig+0x1ac>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <UART_SetConfig+0x18c>
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089fc:	d008      	beq.n	8008a10 <UART_SetConfig+0x19c>
 80089fe:	e00f      	b.n	8008a20 <UART_SetConfig+0x1ac>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a06:	e012      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0e:	e00e      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008a10:	2304      	movs	r3, #4
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a16:	e00a      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a1e:	e006      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a26:	e002      	b.n	8008a2e <UART_SetConfig+0x1ba>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a51      	ldr	r2, [pc, #324]	; (8008b78 <UART_SetConfig+0x304>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d17a      	bne.n	8008b2e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d824      	bhi.n	8008a8a <UART_SetConfig+0x216>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x1d4>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a8b 	.word	0x08008a8b
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a8b 	.word	0x08008a8b
 8008a58:	08008a7b 	.word	0x08008a7b
 8008a5c:	08008a8b 	.word	0x08008a8b
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a8b 	.word	0x08008a8b
 8008a68:	08008a83 	.word	0x08008a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fe fa90 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61f8      	str	r0, [r7, #28]
        break;
 8008a72:	e010      	b.n	8008a96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a74:	4b44      	ldr	r3, [pc, #272]	; (8008b88 <UART_SetConfig+0x314>)
 8008a76:	61fb      	str	r3, [r7, #28]
        break;
 8008a78:	e00d      	b.n	8008a96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a7a:	f7fe f9f1 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8008a7e:	61f8      	str	r0, [r7, #28]
        break;
 8008a80:	e009      	b.n	8008a96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a86:	61fb      	str	r3, [r7, #28]
        break;
 8008a88:	e005      	b.n	8008a96 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8107 	beq.w	8008cac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	4413      	add	r3, r2
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d305      	bcc.n	8008aba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d903      	bls.n	8008ac2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ac0:	e0f4      	b.n	8008cac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	4615      	mov	r5, r2
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	022b      	lsls	r3, r5, #8
 8008ad4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ad8:	0222      	lsls	r2, r4, #8
 8008ada:	68f9      	ldr	r1, [r7, #12]
 8008adc:	6849      	ldr	r1, [r1, #4]
 8008ade:	0849      	lsrs	r1, r1, #1
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4688      	mov	r8, r1
 8008ae4:	4681      	mov	r9, r0
 8008ae6:	eb12 0a08 	adds.w	sl, r2, r8
 8008aea:	eb43 0b09 	adc.w	fp, r3, r9
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f8 f82c 	bl	8000b5c <__aeabi_uldivmod>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4613      	mov	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b12:	d308      	bcc.n	8008b26 <UART_SetConfig+0x2b2>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1a:	d204      	bcs.n	8008b26 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	e0c2      	b.n	8008cac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b2c:	e0be      	b.n	8008cac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b36:	d16a      	bne.n	8008c0e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d834      	bhi.n	8008baa <UART_SetConfig+0x336>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <UART_SetConfig+0x2d4>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b8d 	.word	0x08008b8d
 8008b50:	08008b95 	.word	0x08008b95
 8008b54:	08008bab 	.word	0x08008bab
 8008b58:	08008b9b 	.word	0x08008b9b
 8008b5c:	08008bab 	.word	0x08008bab
 8008b60:	08008bab 	.word	0x08008bab
 8008b64:	08008bab 	.word	0x08008bab
 8008b68:	08008ba3 	.word	0x08008ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b6c:	f7fe fa10 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 8008b70:	61f8      	str	r0, [r7, #28]
        break;
 8008b72:	e020      	b.n	8008bb6 <UART_SetConfig+0x342>
 8008b74:	efff69f3 	.word	0xefff69f3
 8008b78:	40008000 	.word	0x40008000
 8008b7c:	40013800 	.word	0x40013800
 8008b80:	40021000 	.word	0x40021000
 8008b84:	40004400 	.word	0x40004400
 8008b88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b8c:	f7fe fa16 	bl	8006fbc <HAL_RCC_GetPCLK2Freq>
 8008b90:	61f8      	str	r0, [r7, #28]
        break;
 8008b92:	e010      	b.n	8008bb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b94:	4b4c      	ldr	r3, [pc, #304]	; (8008cc8 <UART_SetConfig+0x454>)
 8008b96:	61fb      	str	r3, [r7, #28]
        break;
 8008b98:	e00d      	b.n	8008bb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b9a:	f7fe f961 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8008b9e:	61f8      	str	r0, [r7, #28]
        break;
 8008ba0:	e009      	b.n	8008bb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	61fb      	str	r3, [r7, #28]
        break;
 8008ba8:	e005      	b.n	8008bb6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d077      	beq.n	8008cac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	005a      	lsls	r2, r3, #1
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	085b      	lsrs	r3, r3, #1
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2b0f      	cmp	r3, #15
 8008bd6:	d916      	bls.n	8008c06 <UART_SetConfig+0x392>
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bde:	d212      	bcs.n	8008c06 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	f023 030f 	bic.w	r3, r3, #15
 8008be8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	8afb      	ldrh	r3, [r7, #22]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	8afa      	ldrh	r2, [r7, #22]
 8008c02:	60da      	str	r2, [r3, #12]
 8008c04:	e052      	b.n	8008cac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c0c:	e04e      	b.n	8008cac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	d827      	bhi.n	8008c66 <UART_SetConfig+0x3f2>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0x3a8>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	08008c67 	.word	0x08008c67
 8008c2c:	08008c57 	.word	0x08008c57
 8008c30:	08008c67 	.word	0x08008c67
 8008c34:	08008c67 	.word	0x08008c67
 8008c38:	08008c67 	.word	0x08008c67
 8008c3c:	08008c5f 	.word	0x08008c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c40:	f7fe f9a6 	bl	8006f90 <HAL_RCC_GetPCLK1Freq>
 8008c44:	61f8      	str	r0, [r7, #28]
        break;
 8008c46:	e014      	b.n	8008c72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c48:	f7fe f9b8 	bl	8006fbc <HAL_RCC_GetPCLK2Freq>
 8008c4c:	61f8      	str	r0, [r7, #28]
        break;
 8008c4e:	e010      	b.n	8008c72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <UART_SetConfig+0x454>)
 8008c52:	61fb      	str	r3, [r7, #28]
        break;
 8008c54:	e00d      	b.n	8008c72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c56:	f7fe f903 	bl	8006e60 <HAL_RCC_GetSysClockFreq>
 8008c5a:	61f8      	str	r0, [r7, #28]
        break;
 8008c5c:	e009      	b.n	8008c72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c62:	61fb      	str	r3, [r7, #28]
        break;
 8008c64:	e005      	b.n	8008c72 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c70:	bf00      	nop
    }

    if (pclk != 0U)
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d019      	beq.n	8008cac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	085a      	lsrs	r2, r3, #1
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	441a      	add	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d909      	bls.n	8008ca6 <UART_SetConfig+0x432>
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c98:	d205      	bcs.n	8008ca6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60da      	str	r2, [r3, #12]
 8008ca4:	e002      	b.n	8008cac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008cb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3728      	adds	r7, #40	; 0x28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cc6:	bf00      	nop
 8008cc8:	00f42400 	.word	0x00f42400

08008ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01a      	beq.n	8008de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dca:	d10a      	bne.n	8008de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]
  }
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b098      	sub	sp, #96	; 0x60
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e20:	f7fb fd9c 	bl	800495c <HAL_GetTick>
 8008e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d12e      	bne.n	8008e92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f88c 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d021      	beq.n	8008e92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e6      	bne.n	8008e4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e062      	b.n	8008f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d149      	bne.n	8008f34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f856 	bl	8008f60 <UART_WaitOnFlagUntilTimeout>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d03c      	beq.n	8008f34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e6      	bne.n	8008eba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f0c:	61fa      	str	r2, [r7, #28]
 8008f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	69b9      	ldr	r1, [r7, #24]
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e5      	bne.n	8008eec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e011      	b.n	8008f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3758      	adds	r7, #88	; 0x58
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f70:	e049      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d045      	beq.n	8009006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7a:	f7fb fcef 	bl	800495c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e048      	b.n	8009026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d031      	beq.n	8009006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d110      	bne.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f838 	bl	800902e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e029      	b.n	8009026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fe0:	d111      	bne.n	8009006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f81e 	bl	800902e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e00f      	b.n	8009026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4013      	ands	r3, r2
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	429a      	cmp	r2, r3
 8009014:	bf0c      	ite	eq
 8009016:	2301      	moveq	r3, #1
 8009018:	2300      	movne	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	461a      	mov	r2, r3
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	429a      	cmp	r2, r3
 8009022:	d0a6      	beq.n	8008f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800902e:	b480      	push	{r7}
 8009030:	b095      	sub	sp, #84	; 0x54
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800904a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009054:	643b      	str	r3, [r7, #64]	; 0x40
 8009056:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800905a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	61fb      	str	r3, [r7, #28]
   return(result);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800908e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d118      	bne.n	80090d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f023 0310 	bic.w	r3, r3, #16
 80090b8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e6      	bne.n	80090a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090ea:	bf00      	nop
 80090ec:	3754      	adds	r7, #84	; 0x54
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <DWT_Delay_ms+0x44>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8009106:	f7fd ff37 	bl	8006f78 <HAL_RCC_GetHCLKFreq>
 800910a:	4603      	mov	r3, r0
 800910c:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <DWT_Delay_ms+0x48>)
 800910e:	fba2 2303 	umull	r2, r3, r2, r3
 8009112:	099b      	lsrs	r3, r3, #6
 8009114:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8009120:	bf00      	nop
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <DWT_Delay_ms+0x44>)
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	1ad2      	subs	r2, r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	429a      	cmp	r2, r3
 800912e:	d3f8      	bcc.n	8009122 <DWT_Delay_ms+0x2a>
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	e0001000 	.word	0xe0001000
 8009140:	10624dd3 	.word	0x10624dd3

08009144 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800914a:	f107 0310 	add.w	r3, r7, #16
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	605a      	str	r2, [r3, #4]
 8009154:	609a      	str	r2, [r3, #8]
 8009156:	60da      	str	r2, [r3, #12]
 8009158:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8009166:	f000 fd0d 	bl	8009b84 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 800916a:	2300      	movs	r3, #0
 800916c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009170:	e102      	b.n	8009378 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8009172:	2300      	movs	r3, #0
 8009174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009178:	e079      	b.n	800926e <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 800917a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800917e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009182:	4889      	ldr	r0, [pc, #548]	; (80093a8 <STEPPERS_Init+0x264>)
 8009184:	4613      	mov	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	440b      	add	r3, r1
 800918c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009190:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009194:	d10c      	bne.n	80091b0 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009196:	4b85      	ldr	r3, [pc, #532]	; (80093ac <STEPPERS_Init+0x268>)
 8009198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919a:	4a84      	ldr	r2, [pc, #528]	; (80093ac <STEPPERS_Init+0x268>)
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091a2:	4b82      	ldr	r3, [pc, #520]	; (80093ac <STEPPERS_Init+0x268>)
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	e034      	b.n	800921a <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80091b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091b4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80091b8:	487b      	ldr	r0, [pc, #492]	; (80093a8 <STEPPERS_Init+0x264>)
 80091ba:	4613      	mov	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	440b      	add	r3, r1
 80091c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80091c6:	4a7a      	ldr	r2, [pc, #488]	; (80093b0 <STEPPERS_Init+0x26c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d10c      	bne.n	80091e6 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091cc:	4b77      	ldr	r3, [pc, #476]	; (80093ac <STEPPERS_Init+0x268>)
 80091ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d0:	4a76      	ldr	r2, [pc, #472]	; (80093ac <STEPPERS_Init+0x268>)
 80091d2:	f043 0302 	orr.w	r3, r3, #2
 80091d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091d8:	4b74      	ldr	r3, [pc, #464]	; (80093ac <STEPPERS_Init+0x268>)
 80091da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	60bb      	str	r3, [r7, #8]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	e019      	b.n	800921a <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 80091e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091ea:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80091ee:	486e      	ldr	r0, [pc, #440]	; (80093a8 <STEPPERS_Init+0x264>)
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	440b      	add	r3, r1
 80091f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80091fc:	4a6d      	ldr	r2, [pc, #436]	; (80093b4 <STEPPERS_Init+0x270>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d10b      	bne.n	800921a <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009202:	4b6a      	ldr	r3, [pc, #424]	; (80093ac <STEPPERS_Init+0x268>)
 8009204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009206:	4a69      	ldr	r2, [pc, #420]	; (80093ac <STEPPERS_Init+0x268>)
 8009208:	f043 0304 	orr.w	r3, r3, #4
 800920c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800920e:	4b67      	ldr	r3, [pc, #412]	; (80093ac <STEPPERS_Init+0x268>)
 8009210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009212:	f003 0304 	and.w	r3, r3, #4
 8009216:	607b      	str	r3, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 800921a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800921e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009222:	4861      	ldr	r0, [pc, #388]	; (80093a8 <STEPPERS_Init+0x264>)
 8009224:	4613      	mov	r3, r2
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	440b      	add	r3, r1
 800922e:	3308      	adds	r3, #8
 8009230:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8009234:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009236:	2301      	movs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800923a:	2300      	movs	r3, #0
 800923c:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8009242:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009246:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800924a:	4857      	ldr	r0, [pc, #348]	; (80093a8 <STEPPERS_Init+0x264>)
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	440b      	add	r3, r1
 8009254:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009258:	f107 0210 	add.w	r2, r7, #16
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7fc fed0 	bl	8006004 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8009264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009268:	3301      	adds	r3, #1
 800926a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800926e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009272:	2b03      	cmp	r3, #3
 8009274:	d981      	bls.n	800917a <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8009276:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800927a:	494f      	ldr	r1, [pc, #316]	; (80093b8 <STEPPERS_Init+0x274>)
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	3311      	adds	r3, #17
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800928c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009290:	4949      	ldr	r1, [pc, #292]	; (80093b8 <STEPPERS_Init+0x274>)
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	330f      	adds	r3, #15
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 80092a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092a6:	4944      	ldr	r1, [pc, #272]	; (80093b8 <STEPPERS_Init+0x274>)
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	440b      	add	r3, r1
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 80092b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092ba:	493f      	ldr	r1, [pc, #252]	; (80093b8 <STEPPERS_Init+0x274>)
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	3304      	adds	r3, #4
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 80092cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092d0:	4939      	ldr	r1, [pc, #228]	; (80093b8 <STEPPERS_Init+0x274>)
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	3308      	adds	r3, #8
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 80092e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092e6:	4934      	ldr	r1, [pc, #208]	; (80093b8 <STEPPERS_Init+0x274>)
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	330e      	adds	r3, #14
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80092f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092fc:	492a      	ldr	r1, [pc, #168]	; (80093a8 <STEPPERS_Init+0x264>)
 80092fe:	4613      	mov	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	331b      	adds	r3, #27
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d00b      	beq.n	8009328 <STEPPERS_Init+0x1e4>
 8009310:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009314:	4924      	ldr	r1, [pc, #144]	; (80093a8 <STEPPERS_Init+0x264>)
 8009316:	4613      	mov	r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	331b      	adds	r3, #27
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10b      	bne.n	8009340 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8009328:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800932c:	4922      	ldr	r1, [pc, #136]	; (80093b8 <STEPPERS_Init+0x274>)
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	3310      	adds	r3, #16
 800933a:	2204      	movs	r2, #4
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	e016      	b.n	800936e <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8009340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009344:	4918      	ldr	r1, [pc, #96]	; (80093a8 <STEPPERS_Init+0x264>)
 8009346:	4613      	mov	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	331b      	adds	r3, #27
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d10a      	bne.n	800936e <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8009358:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800935c:	4916      	ldr	r1, [pc, #88]	; (80093b8 <STEPPERS_Init+0x274>)
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	440b      	add	r3, r1
 8009368:	3310      	adds	r3, #16
 800936a:	2208      	movs	r2, #8
 800936c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 800936e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009372:	3301      	adds	r3, #1
 8009374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800937c:	2b00      	cmp	r3, #0
 800937e:	f43f aef8 	beq.w	8009172 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009382:	2301      	movs	r3, #1
 8009384:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800938a:	2300      	movs	r3, #0
 800938c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	4619      	mov	r1, r3
 8009398:	4805      	ldr	r0, [pc, #20]	; (80093b0 <STEPPERS_Init+0x26c>)
 800939a:	f7fc fe33 	bl	8006004 <HAL_GPIO_Init>
}
 800939e:	bf00      	nop
 80093a0:	3728      	adds	r7, #40	; 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	0801e0a8 	.word	0x0801e0a8
 80093ac:	40021000 	.word	0x40021000
 80093b0:	48000400 	.word	0x48000400
 80093b4:	48000800 	.word	0x48000800
 80093b8:	2000a500 	.word	0x2000a500

080093bc <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	; 0x28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093c4:	f107 0314 	add.w	r3, r7, #20
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	605a      	str	r2, [r3, #4]
 80093dc:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 80093e2:	f7ff feaf 	bl	8009144 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 80093e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a17      	ldr	r2, [pc, #92]	; (800944c <STEPPERS_Init_TMR+0x90>)
 80093f0:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2263      	movs	r2, #99	; 0x63
 80093f6:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	1e5a      	subs	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2280      	movs	r2, #128	; 0x80
 8009410:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fe f940 	bl	8007698 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800941c:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800941e:	f107 0314 	add.w	r3, r7, #20
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fe fc5b 	bl	8007ce0 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800942a:	2300      	movs	r3, #0
 800942c:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8009432:	f107 0308 	add.w	r3, r7, #8
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff f8bf 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7fe f982 	bl	8007748 <HAL_TIM_Base_Start_IT>
    }
}
 8009444:	bf00      	nop
 8009446:	3728      	adds	r7, #40	; 0x28
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40014000 	.word	0x40014000

08009450 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	460a      	mov	r2, r1
 800945a:	71fb      	strb	r3, [r7, #7]
 800945c:	4613      	mov	r3, r2
 800945e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8009464:	79fa      	ldrb	r2, [r7, #7]
 8009466:	4928      	ldr	r1, [pc, #160]	; (8009508 <STEPPER_SetSpeed+0xb8>)
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	330c      	adds	r3, #12
 8009474:	88ba      	ldrh	r2, [r7, #4]
 8009476:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8009478:	79fa      	ldrb	r2, [r7, #7]
 800947a:	4924      	ldr	r1, [pc, #144]	; (800950c <STEPPER_SetSpeed+0xbc>)
 800947c:	4613      	mov	r3, r2
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	331b      	adds	r3, #27
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d10b      	bne.n	80094a6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 800948e:	79fa      	ldrb	r2, [r7, #7]
 8009490:	491e      	ldr	r1, [pc, #120]	; (800950c <STEPPER_SetSpeed+0xbc>)
 8009492:	4613      	mov	r3, r2
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	3318      	adds	r3, #24
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e009      	b.n	80094ba <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 80094a6:	79fa      	ldrb	r2, [r7, #7]
 80094a8:	4918      	ldr	r1, [pc, #96]	; (800950c <STEPPER_SetSpeed+0xbc>)
 80094aa:	4613      	mov	r3, r2
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3318      	adds	r3, #24
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 80094ba:	88bb      	ldrh	r3, [r7, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	fb02 f303 	mul.w	r3, r2, r3
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f7 f816 	bl	80004f4 <__aeabi_ui2d>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	a10c      	add	r1, pc, #48	; (adr r1, 8009500 <STEPPER_SetSpeed+0xb0>)
 80094ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d2:	f7f7 f9b3 	bl	800083c <__aeabi_ddiv>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	79fc      	ldrb	r4, [r7, #7]
 80094dc:	4610      	mov	r0, r2
 80094de:	4619      	mov	r1, r3
 80094e0:	f7f7 fb1c 	bl	8000b1c <__aeabi_d2uiz>
 80094e4:	4602      	mov	r2, r0
 80094e6:	4908      	ldr	r1, [pc, #32]	; (8009508 <STEPPER_SetSpeed+0xb8>)
 80094e8:	4623      	mov	r3, r4
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4423      	add	r3, r4
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	3308      	adds	r3, #8
 80094f4:	601a      	str	r2, [r3, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}
 80094fe:	bf00      	nop
 8009500:	00000000 	.word	0x00000000
 8009504:	40ed4c00 	.word	0x40ed4c00
 8009508:	2000a500 	.word	0x2000a500
 800950c:	0801e0a8 	.word	0x0801e0a8

08009510 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 800951a:	79fa      	ldrb	r2, [r7, #7]
 800951c:	4999      	ldr	r1, [pc, #612]	; (8009784 <STEPPER_One_Step+0x274>)
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	331a      	adds	r3, #26
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f040 81c4 	bne.w	80098ba <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8009532:	79fa      	ldrb	r2, [r7, #7]
 8009534:	4993      	ldr	r1, [pc, #588]	; (8009784 <STEPPER_One_Step+0x274>)
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	331b      	adds	r3, #27
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f040 8088 	bne.w	800965a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800954a:	79fa      	ldrb	r2, [r7, #7]
 800954c:	498d      	ldr	r1, [pc, #564]	; (8009784 <STEPPER_One_Step+0x274>)
 800954e:	4613      	mov	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	79fa      	ldrb	r2, [r7, #7]
 800955c:	4989      	ldr	r1, [pc, #548]	; (8009784 <STEPPER_One_Step+0x274>)
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3310      	adds	r3, #16
 800956a:	8819      	ldrh	r1, [r3, #0]
 800956c:	79fa      	ldrb	r2, [r7, #7]
 800956e:	4c86      	ldr	r4, [pc, #536]	; (8009788 <STEPPER_One_Step+0x278>)
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4423      	add	r3, r4
 800957a:	330f      	adds	r3, #15
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	4b82      	ldr	r3, [pc, #520]	; (800978c <STEPPER_One_Step+0x27c>)
 8009582:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8009586:	461a      	mov	r2, r3
 8009588:	f7fc fea6 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800958c:	79fa      	ldrb	r2, [r7, #7]
 800958e:	497d      	ldr	r1, [pc, #500]	; (8009784 <STEPPER_One_Step+0x274>)
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	3304      	adds	r3, #4
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	79fa      	ldrb	r2, [r7, #7]
 80095a0:	4978      	ldr	r1, [pc, #480]	; (8009784 <STEPPER_One_Step+0x274>)
 80095a2:	4613      	mov	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	3312      	adds	r3, #18
 80095ae:	8819      	ldrh	r1, [r3, #0]
 80095b0:	79fa      	ldrb	r2, [r7, #7]
 80095b2:	4c75      	ldr	r4, [pc, #468]	; (8009788 <STEPPER_One_Step+0x278>)
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4423      	add	r3, r4
 80095be:	330f      	adds	r3, #15
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	4a72      	ldr	r2, [pc, #456]	; (800978c <STEPPER_One_Step+0x27c>)
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	461a      	mov	r2, r3
 80095cc:	f7fc fe84 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80095d0:	79fa      	ldrb	r2, [r7, #7]
 80095d2:	496c      	ldr	r1, [pc, #432]	; (8009784 <STEPPER_One_Step+0x274>)
 80095d4:	4613      	mov	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3308      	adds	r3, #8
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	79fa      	ldrb	r2, [r7, #7]
 80095e4:	4967      	ldr	r1, [pc, #412]	; (8009784 <STEPPER_One_Step+0x274>)
 80095e6:	4613      	mov	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3314      	adds	r3, #20
 80095f2:	8819      	ldrh	r1, [r3, #0]
 80095f4:	79fa      	ldrb	r2, [r7, #7]
 80095f6:	4c64      	ldr	r4, [pc, #400]	; (8009788 <STEPPER_One_Step+0x278>)
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4423      	add	r3, r4
 8009602:	330f      	adds	r3, #15
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4a61      	ldr	r2, [pc, #388]	; (800978c <STEPPER_One_Step+0x27c>)
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	789b      	ldrb	r3, [r3, #2]
 800960e:	461a      	mov	r2, r3
 8009610:	f7fc fe62 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009614:	79fa      	ldrb	r2, [r7, #7]
 8009616:	495b      	ldr	r1, [pc, #364]	; (8009784 <STEPPER_One_Step+0x274>)
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	330c      	adds	r3, #12
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	79fa      	ldrb	r2, [r7, #7]
 8009628:	4956      	ldr	r1, [pc, #344]	; (8009784 <STEPPER_One_Step+0x274>)
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	3316      	adds	r3, #22
 8009636:	8819      	ldrh	r1, [r3, #0]
 8009638:	79fa      	ldrb	r2, [r7, #7]
 800963a:	4c53      	ldr	r4, [pc, #332]	; (8009788 <STEPPER_One_Step+0x278>)
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4423      	add	r3, r4
 8009646:	330f      	adds	r3, #15
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	4a50      	ldr	r2, [pc, #320]	; (800978c <STEPPER_One_Step+0x27c>)
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	78db      	ldrb	r3, [r3, #3]
 8009652:	461a      	mov	r2, r3
 8009654:	f7fc fe40 	bl	80062d8 <HAL_GPIO_WritePin>
 8009658:	e12f      	b.n	80098ba <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800965a:	79fa      	ldrb	r2, [r7, #7]
 800965c:	4949      	ldr	r1, [pc, #292]	; (8009784 <STEPPER_One_Step+0x274>)
 800965e:	4613      	mov	r3, r2
 8009660:	00db      	lsls	r3, r3, #3
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	331b      	adds	r3, #27
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	f040 8091 	bne.w	8009794 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	4943      	ldr	r1, [pc, #268]	; (8009784 <STEPPER_One_Step+0x274>)
 8009676:	4613      	mov	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	440b      	add	r3, r1
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	79fa      	ldrb	r2, [r7, #7]
 8009684:	493f      	ldr	r1, [pc, #252]	; (8009784 <STEPPER_One_Step+0x274>)
 8009686:	4613      	mov	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	1a9b      	subs	r3, r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	3310      	adds	r3, #16
 8009692:	8819      	ldrh	r1, [r3, #0]
 8009694:	79fa      	ldrb	r2, [r7, #7]
 8009696:	4c3c      	ldr	r4, [pc, #240]	; (8009788 <STEPPER_One_Step+0x278>)
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4423      	add	r3, r4
 80096a2:	330f      	adds	r3, #15
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	4b39      	ldr	r3, [pc, #228]	; (8009790 <STEPPER_One_Step+0x280>)
 80096aa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f7fc fe12 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80096b4:	79fa      	ldrb	r2, [r7, #7]
 80096b6:	4933      	ldr	r1, [pc, #204]	; (8009784 <STEPPER_One_Step+0x274>)
 80096b8:	4613      	mov	r3, r2
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	1a9b      	subs	r3, r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	3304      	adds	r3, #4
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	79fa      	ldrb	r2, [r7, #7]
 80096c8:	492e      	ldr	r1, [pc, #184]	; (8009784 <STEPPER_One_Step+0x274>)
 80096ca:	4613      	mov	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	3312      	adds	r3, #18
 80096d6:	8819      	ldrh	r1, [r3, #0]
 80096d8:	79fa      	ldrb	r2, [r7, #7]
 80096da:	4c2b      	ldr	r4, [pc, #172]	; (8009788 <STEPPER_One_Step+0x278>)
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4423      	add	r3, r4
 80096e6:	330f      	adds	r3, #15
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	4a29      	ldr	r2, [pc, #164]	; (8009790 <STEPPER_One_Step+0x280>)
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7fc fdf0 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80096f8:	79fa      	ldrb	r2, [r7, #7]
 80096fa:	4922      	ldr	r1, [pc, #136]	; (8009784 <STEPPER_One_Step+0x274>)
 80096fc:	4613      	mov	r3, r2
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	3308      	adds	r3, #8
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	79fa      	ldrb	r2, [r7, #7]
 800970c:	491d      	ldr	r1, [pc, #116]	; (8009784 <STEPPER_One_Step+0x274>)
 800970e:	4613      	mov	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	440b      	add	r3, r1
 8009718:	3314      	adds	r3, #20
 800971a:	8819      	ldrh	r1, [r3, #0]
 800971c:	79fa      	ldrb	r2, [r7, #7]
 800971e:	4c1a      	ldr	r4, [pc, #104]	; (8009788 <STEPPER_One_Step+0x278>)
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4423      	add	r3, r4
 800972a:	330f      	adds	r3, #15
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4a18      	ldr	r2, [pc, #96]	; (8009790 <STEPPER_One_Step+0x280>)
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	789b      	ldrb	r3, [r3, #2]
 8009736:	461a      	mov	r2, r3
 8009738:	f7fc fdce 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800973c:	79fa      	ldrb	r2, [r7, #7]
 800973e:	4911      	ldr	r1, [pc, #68]	; (8009784 <STEPPER_One_Step+0x274>)
 8009740:	4613      	mov	r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	330c      	adds	r3, #12
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	79fa      	ldrb	r2, [r7, #7]
 8009750:	490c      	ldr	r1, [pc, #48]	; (8009784 <STEPPER_One_Step+0x274>)
 8009752:	4613      	mov	r3, r2
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	440b      	add	r3, r1
 800975c:	3316      	adds	r3, #22
 800975e:	8819      	ldrh	r1, [r3, #0]
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	4c09      	ldr	r4, [pc, #36]	; (8009788 <STEPPER_One_Step+0x278>)
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4423      	add	r3, r4
 800976e:	330f      	adds	r3, #15
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4a07      	ldr	r2, [pc, #28]	; (8009790 <STEPPER_One_Step+0x280>)
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	78db      	ldrb	r3, [r3, #3]
 800977a:	461a      	mov	r2, r3
 800977c:	f7fc fdac 	bl	80062d8 <HAL_GPIO_WritePin>
 8009780:	e09b      	b.n	80098ba <STEPPER_One_Step+0x3aa>
 8009782:	bf00      	nop
 8009784:	0801e0a8 	.word	0x0801e0a8
 8009788:	2000a500 	.word	0x2000a500
 800978c:	2000000c 	.word	0x2000000c
 8009790:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8009794:	79fa      	ldrb	r2, [r7, #7]
 8009796:	4988      	ldr	r1, [pc, #544]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 8009798:	4613      	mov	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	331b      	adds	r3, #27
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	f040 8087 	bne.w	80098ba <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80097ac:	79fa      	ldrb	r2, [r7, #7]
 80097ae:	4982      	ldr	r1, [pc, #520]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	79fa      	ldrb	r2, [r7, #7]
 80097be:	497e      	ldr	r1, [pc, #504]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	1a9b      	subs	r3, r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	3310      	adds	r3, #16
 80097cc:	8819      	ldrh	r1, [r3, #0]
 80097ce:	79fa      	ldrb	r2, [r7, #7]
 80097d0:	4c7a      	ldr	r4, [pc, #488]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4423      	add	r3, r4
 80097dc:	330f      	adds	r3, #15
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b77      	ldr	r3, [pc, #476]	; (80099c0 <STEPPER_One_Step+0x4b0>)
 80097e4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80097e8:	461a      	mov	r2, r3
 80097ea:	f7fc fd75 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80097ee:	79fa      	ldrb	r2, [r7, #7]
 80097f0:	4971      	ldr	r1, [pc, #452]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 80097f2:	4613      	mov	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	3304      	adds	r3, #4
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	79fa      	ldrb	r2, [r7, #7]
 8009802:	496d      	ldr	r1, [pc, #436]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 8009804:	4613      	mov	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	1a9b      	subs	r3, r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	3312      	adds	r3, #18
 8009810:	8819      	ldrh	r1, [r3, #0]
 8009812:	79fa      	ldrb	r2, [r7, #7]
 8009814:	4c69      	ldr	r4, [pc, #420]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4423      	add	r3, r4
 8009820:	330f      	adds	r3, #15
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	4a66      	ldr	r2, [pc, #408]	; (80099c0 <STEPPER_One_Step+0x4b0>)
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	461a      	mov	r2, r3
 800982e:	f7fc fd53 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009832:	79fa      	ldrb	r2, [r7, #7]
 8009834:	4960      	ldr	r1, [pc, #384]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 8009836:	4613      	mov	r3, r2
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3308      	adds	r3, #8
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	79fa      	ldrb	r2, [r7, #7]
 8009846:	495c      	ldr	r1, [pc, #368]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 8009848:	4613      	mov	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	1a9b      	subs	r3, r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	3314      	adds	r3, #20
 8009854:	8819      	ldrh	r1, [r3, #0]
 8009856:	79fa      	ldrb	r2, [r7, #7]
 8009858:	4c58      	ldr	r4, [pc, #352]	; (80099bc <STEPPER_One_Step+0x4ac>)
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4423      	add	r3, r4
 8009864:	330f      	adds	r3, #15
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	4a55      	ldr	r2, [pc, #340]	; (80099c0 <STEPPER_One_Step+0x4b0>)
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	789b      	ldrb	r3, [r3, #2]
 8009870:	461a      	mov	r2, r3
 8009872:	f7fc fd31 	bl	80062d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009876:	79fa      	ldrb	r2, [r7, #7]
 8009878:	494f      	ldr	r1, [pc, #316]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 800987a:	4613      	mov	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	330c      	adds	r3, #12
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	79fa      	ldrb	r2, [r7, #7]
 800988a:	494b      	ldr	r1, [pc, #300]	; (80099b8 <STEPPER_One_Step+0x4a8>)
 800988c:	4613      	mov	r3, r2
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	1a9b      	subs	r3, r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	3316      	adds	r3, #22
 8009898:	8819      	ldrh	r1, [r3, #0]
 800989a:	79fa      	ldrb	r2, [r7, #7]
 800989c:	4c47      	ldr	r4, [pc, #284]	; (80099bc <STEPPER_One_Step+0x4ac>)
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4423      	add	r3, r4
 80098a8:	330f      	adds	r3, #15
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	4a44      	ldr	r2, [pc, #272]	; (80099c0 <STEPPER_One_Step+0x4b0>)
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	78db      	ldrb	r3, [r3, #3]
 80098b4:	461a      	mov	r2, r3
 80098b6:	f7fc fd0f 	bl	80062d8 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80098ba:	79fa      	ldrb	r2, [r7, #7]
 80098bc:	493f      	ldr	r1, [pc, #252]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	3311      	adds	r3, #17
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d132      	bne.n	8009936 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 80098d0:	79fa      	ldrb	r2, [r7, #7]
 80098d2:	493a      	ldr	r1, [pc, #232]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	330f      	adds	r3, #15
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d112      	bne.n	800990c <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 80098e6:	79f9      	ldrb	r1, [r7, #7]
 80098e8:	79fa      	ldrb	r2, [r7, #7]
 80098ea:	4834      	ldr	r0, [pc, #208]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80098ec:	460b      	mov	r3, r1
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4403      	add	r3, r0
 80098f6:	3310      	adds	r3, #16
 80098f8:	7818      	ldrb	r0, [r3, #0]
 80098fa:	4930      	ldr	r1, [pc, #192]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	330f      	adds	r3, #15
 8009908:	4602      	mov	r2, r0
 800990a:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 800990c:	79fa      	ldrb	r2, [r7, #7]
 800990e:	492b      	ldr	r1, [pc, #172]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	330f      	adds	r3, #15
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	b2d8      	uxtb	r0, r3
 8009922:	4926      	ldr	r1, [pc, #152]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	330f      	adds	r3, #15
 8009930:	4602      	mov	r2, r0
 8009932:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8009934:	e03c      	b.n	80099b0 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8009936:	79fa      	ldrb	r2, [r7, #7]
 8009938:	4920      	ldr	r1, [pc, #128]	; (80099bc <STEPPER_One_Step+0x4ac>)
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	3311      	adds	r3, #17
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d131      	bne.n	80099b0 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 800994c:	79fa      	ldrb	r2, [r7, #7]
 800994e:	491b      	ldr	r1, [pc, #108]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	330f      	adds	r3, #15
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	b2d8      	uxtb	r0, r3
 8009962:	4916      	ldr	r1, [pc, #88]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	440b      	add	r3, r1
 800996e:	330f      	adds	r3, #15
 8009970:	4602      	mov	r2, r0
 8009972:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8009974:	79fa      	ldrb	r2, [r7, #7]
 8009976:	4911      	ldr	r1, [pc, #68]	; (80099bc <STEPPER_One_Step+0x4ac>)
 8009978:	4613      	mov	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	330f      	adds	r3, #15
 8009984:	7819      	ldrb	r1, [r3, #0]
 8009986:	79fa      	ldrb	r2, [r7, #7]
 8009988:	480c      	ldr	r0, [pc, #48]	; (80099bc <STEPPER_One_Step+0x4ac>)
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4403      	add	r3, r0
 8009994:	3310      	adds	r3, #16
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4299      	cmp	r1, r3
 800999a:	d109      	bne.n	80099b0 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 800999c:	79fa      	ldrb	r2, [r7, #7]
 800999e:	4907      	ldr	r1, [pc, #28]	; (80099bc <STEPPER_One_Step+0x4ac>)
 80099a0:	4613      	mov	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	440b      	add	r3, r1
 80099aa:	330f      	adds	r3, #15
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	0801e0a8 	.word	0x0801e0a8
 80099bc:	2000a500 	.word	0x2000a500
 80099c0:	2000002c 	.word	0x2000002c

080099c4 <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
 80099d0:	4613      	mov	r3, r2
 80099d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 80099dc:	79fa      	ldrb	r2, [r7, #7]
 80099de:	4921      	ldr	r1, [pc, #132]	; (8009a64 <STEPPER_Step_Blocking+0xa0>)
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	440b      	add	r3, r1
 80099ea:	330e      	adds	r3, #14
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 80099f0:	79fa      	ldrb	r2, [r7, #7]
 80099f2:	491c      	ldr	r1, [pc, #112]	; (8009a64 <STEPPER_Step_Blocking+0xa0>)
 80099f4:	4613      	mov	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	330c      	adds	r3, #12
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	79fa      	ldrb	r2, [r7, #7]
 8009a06:	4918      	ldr	r1, [pc, #96]	; (8009a68 <STEPPER_Step_Blocking+0xa4>)
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	3318      	adds	r3, #24
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	fb00 f303 	mul.w	r3, r0, r3
 8009a1a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009a1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a22:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	e009      	b.n	8009a3e <STEPPER_Step_Blocking+0x7a>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fd6f 	bl	8009510 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 8009a32:	68b8      	ldr	r0, [r7, #8]
 8009a34:	f7ff fb60 	bl	80090f8 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d3f1      	bcc.n	8009a2a <STEPPER_Step_Blocking+0x66>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 8009a46:	79fa      	ldrb	r2, [r7, #7]
 8009a48:	4906      	ldr	r1, [pc, #24]	; (8009a64 <STEPPER_Step_Blocking+0xa0>)
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	330e      	adds	r3, #14
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	2000a500 	.word	0x2000a500
 8009a68:	0801e0a8 	.word	0x0801e0a8

08009a6c <STEPPER_Stop>:
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
}

void STEPPER_Stop(uint8_t au8_STEPPER_Instance)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	71fb      	strb	r3, [r7, #7]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps = 0;
 8009a76:	79fa      	ldrb	r2, [r7, #7]
 8009a78:	4906      	ldr	r1, [pc, #24]	; (8009a94 <STEPPER_Stop+0x28>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	2000a500 	.word	0x2000a500

08009a98 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a34      	ldr	r2, [pc, #208]	; (8009b7c <STEPPER_TMR_OVF_ISR+0xe4>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d162      	bne.n	8009b74 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
 8009ab2:	e05c      	b.n	8009b6e <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8009ab4:	7bfa      	ldrb	r2, [r7, #15]
 8009ab6:	4932      	ldr	r1, [pc, #200]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	6819      	ldr	r1, [r3, #0]
 8009ac6:	7bfa      	ldrb	r2, [r7, #15]
 8009ac8:	482d      	ldr	r0, [pc, #180]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4403      	add	r3, r0
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d333      	bcc.n	8009b44 <STEPPER_TMR_OVF_ISR+0xac>
 8009adc:	7bfa      	ldrb	r2, [r7, #15]
 8009ade:	4928      	ldr	r1, [pc, #160]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	330e      	adds	r3, #14
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d028      	beq.n	8009b44 <STEPPER_TMR_OVF_ISR+0xac>
 8009af2:	7bfa      	ldrb	r2, [r7, #15]
 8009af4:	4922      	ldr	r1, [pc, #136]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01e      	beq.n	8009b44 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fd01 	bl	8009510 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8009b0e:	7bfa      	ldrb	r2, [r7, #15]
 8009b10:	491b      	ldr	r1, [pc, #108]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	440b      	add	r3, r1
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	1e59      	subs	r1, r3, #1
 8009b20:	4817      	ldr	r0, [pc, #92]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4403      	add	r3, r0
 8009b2c:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8009b2e:	7bfa      	ldrb	r2, [r7, #15]
 8009b30:	4913      	ldr	r1, [pc, #76]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009b32:	4613      	mov	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e011      	b.n	8009b68 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8009b44:	7bfa      	ldrb	r2, [r7, #15]
 8009b46:	490e      	ldr	r1, [pc, #56]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	3304      	adds	r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	1c59      	adds	r1, r3, #1
 8009b58:	4809      	ldr	r0, [pc, #36]	; (8009b80 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4403      	add	r3, r0
 8009b64:	3304      	adds	r3, #4
 8009b66:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	73fb      	strb	r3, [r7, #15]
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d09f      	beq.n	8009ab4 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	2000a500 	.word	0x2000a500

08009b84 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009b88:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <DWT_Delay_Init+0x58>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	4a13      	ldr	r2, [pc, #76]	; (8009bdc <DWT_Delay_Init+0x58>)
 8009b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b92:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009b94:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <DWT_Delay_Init+0x58>)
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4a10      	ldr	r2, [pc, #64]	; (8009bdc <DWT_Delay_Init+0x58>)
 8009b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b9e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0e      	ldr	r2, [pc, #56]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009ba6:	f023 0301 	bic.w	r3, r3, #1
 8009baa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009bac:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8009bb8:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8009bbe:	bf00      	nop
    __ASM volatile ("NOP");
 8009bc0:	bf00      	nop
    __ASM volatile ("NOP");
 8009bc2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <DWT_Delay_Init+0x5c>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e000      	b.n	8009bd2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8009bd0:	2301      	movs	r3, #1
    }
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	e000edf0 	.word	0xe000edf0
 8009be0:	e0001000 	.word	0xe0001000

08009be4 <_strtol_l.constprop.0>:
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bea:	d001      	beq.n	8009bf0 <_strtol_l.constprop.0+0xc>
 8009bec:	2b24      	cmp	r3, #36	; 0x24
 8009bee:	d906      	bls.n	8009bfe <_strtol_l.constprop.0+0x1a>
 8009bf0:	f000 f9ea 	bl	8009fc8 <__errno>
 8009bf4:	2316      	movs	r3, #22
 8009bf6:	6003      	str	r3, [r0, #0]
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ce4 <_strtol_l.constprop.0+0x100>
 8009c02:	460d      	mov	r5, r1
 8009c04:	462e      	mov	r6, r5
 8009c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009c0e:	f017 0708 	ands.w	r7, r7, #8
 8009c12:	d1f7      	bne.n	8009c04 <_strtol_l.constprop.0+0x20>
 8009c14:	2c2d      	cmp	r4, #45	; 0x2d
 8009c16:	d132      	bne.n	8009c7e <_strtol_l.constprop.0+0x9a>
 8009c18:	782c      	ldrb	r4, [r5, #0]
 8009c1a:	2701      	movs	r7, #1
 8009c1c:	1cb5      	adds	r5, r6, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d05b      	beq.n	8009cda <_strtol_l.constprop.0+0xf6>
 8009c22:	2b10      	cmp	r3, #16
 8009c24:	d109      	bne.n	8009c3a <_strtol_l.constprop.0+0x56>
 8009c26:	2c30      	cmp	r4, #48	; 0x30
 8009c28:	d107      	bne.n	8009c3a <_strtol_l.constprop.0+0x56>
 8009c2a:	782c      	ldrb	r4, [r5, #0]
 8009c2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c30:	2c58      	cmp	r4, #88	; 0x58
 8009c32:	d14d      	bne.n	8009cd0 <_strtol_l.constprop.0+0xec>
 8009c34:	786c      	ldrb	r4, [r5, #1]
 8009c36:	2310      	movs	r3, #16
 8009c38:	3502      	adds	r5, #2
 8009c3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c42:	f04f 0e00 	mov.w	lr, #0
 8009c46:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c4a:	4676      	mov	r6, lr
 8009c4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c54:	f1bc 0f09 	cmp.w	ip, #9
 8009c58:	d816      	bhi.n	8009c88 <_strtol_l.constprop.0+0xa4>
 8009c5a:	4664      	mov	r4, ip
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	dd24      	ble.n	8009caa <_strtol_l.constprop.0+0xc6>
 8009c60:	f1be 3fff 	cmp.w	lr, #4294967295
 8009c64:	d008      	beq.n	8009c78 <_strtol_l.constprop.0+0x94>
 8009c66:	45b1      	cmp	r9, r6
 8009c68:	d31c      	bcc.n	8009ca4 <_strtol_l.constprop.0+0xc0>
 8009c6a:	d101      	bne.n	8009c70 <_strtol_l.constprop.0+0x8c>
 8009c6c:	45a2      	cmp	sl, r4
 8009c6e:	db19      	blt.n	8009ca4 <_strtol_l.constprop.0+0xc0>
 8009c70:	fb06 4603 	mla	r6, r6, r3, r4
 8009c74:	f04f 0e01 	mov.w	lr, #1
 8009c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c7c:	e7e8      	b.n	8009c50 <_strtol_l.constprop.0+0x6c>
 8009c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c80:	bf04      	itt	eq
 8009c82:	782c      	ldrbeq	r4, [r5, #0]
 8009c84:	1cb5      	addeq	r5, r6, #2
 8009c86:	e7ca      	b.n	8009c1e <_strtol_l.constprop.0+0x3a>
 8009c88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c8c:	f1bc 0f19 	cmp.w	ip, #25
 8009c90:	d801      	bhi.n	8009c96 <_strtol_l.constprop.0+0xb2>
 8009c92:	3c37      	subs	r4, #55	; 0x37
 8009c94:	e7e2      	b.n	8009c5c <_strtol_l.constprop.0+0x78>
 8009c96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c9a:	f1bc 0f19 	cmp.w	ip, #25
 8009c9e:	d804      	bhi.n	8009caa <_strtol_l.constprop.0+0xc6>
 8009ca0:	3c57      	subs	r4, #87	; 0x57
 8009ca2:	e7db      	b.n	8009c5c <_strtol_l.constprop.0+0x78>
 8009ca4:	f04f 3eff 	mov.w	lr, #4294967295
 8009ca8:	e7e6      	b.n	8009c78 <_strtol_l.constprop.0+0x94>
 8009caa:	f1be 3fff 	cmp.w	lr, #4294967295
 8009cae:	d105      	bne.n	8009cbc <_strtol_l.constprop.0+0xd8>
 8009cb0:	2322      	movs	r3, #34	; 0x22
 8009cb2:	6003      	str	r3, [r0, #0]
 8009cb4:	4646      	mov	r6, r8
 8009cb6:	b942      	cbnz	r2, 8009cca <_strtol_l.constprop.0+0xe6>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	e79e      	b.n	8009bfa <_strtol_l.constprop.0+0x16>
 8009cbc:	b107      	cbz	r7, 8009cc0 <_strtol_l.constprop.0+0xdc>
 8009cbe:	4276      	negs	r6, r6
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d0f9      	beq.n	8009cb8 <_strtol_l.constprop.0+0xd4>
 8009cc4:	f1be 0f00 	cmp.w	lr, #0
 8009cc8:	d000      	beq.n	8009ccc <_strtol_l.constprop.0+0xe8>
 8009cca:	1e69      	subs	r1, r5, #1
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	e7f3      	b.n	8009cb8 <_strtol_l.constprop.0+0xd4>
 8009cd0:	2430      	movs	r4, #48	; 0x30
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1b1      	bne.n	8009c3a <_strtol_l.constprop.0+0x56>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	e7af      	b.n	8009c3a <_strtol_l.constprop.0+0x56>
 8009cda:	2c30      	cmp	r4, #48	; 0x30
 8009cdc:	d0a5      	beq.n	8009c2a <_strtol_l.constprop.0+0x46>
 8009cde:	230a      	movs	r3, #10
 8009ce0:	e7ab      	b.n	8009c3a <_strtol_l.constprop.0+0x56>
 8009ce2:	bf00      	nop
 8009ce4:	0801e0c5 	.word	0x0801e0c5

08009ce8 <strtol>:
 8009ce8:	4613      	mov	r3, r2
 8009cea:	460a      	mov	r2, r1
 8009cec:	4601      	mov	r1, r0
 8009cee:	4802      	ldr	r0, [pc, #8]	; (8009cf8 <strtol+0x10>)
 8009cf0:	6800      	ldr	r0, [r0, #0]
 8009cf2:	f7ff bf77 	b.w	8009be4 <_strtol_l.constprop.0>
 8009cf6:	bf00      	nop
 8009cf8:	200000a4 	.word	0x200000a4

08009cfc <std>:
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	e9c0 3300 	strd	r3, r3, [r0]
 8009d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d0a:	6083      	str	r3, [r0, #8]
 8009d0c:	8181      	strh	r1, [r0, #12]
 8009d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d10:	81c2      	strh	r2, [r0, #14]
 8009d12:	6183      	str	r3, [r0, #24]
 8009d14:	4619      	mov	r1, r3
 8009d16:	2208      	movs	r2, #8
 8009d18:	305c      	adds	r0, #92	; 0x5c
 8009d1a:	f000 f906 	bl	8009f2a <memset>
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <std+0x58>)
 8009d20:	6263      	str	r3, [r4, #36]	; 0x24
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <std+0x5c>)
 8009d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <std+0x60>)
 8009d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <std+0x64>)
 8009d2c:	6323      	str	r3, [r4, #48]	; 0x30
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <std+0x68>)
 8009d30:	6224      	str	r4, [r4, #32]
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d006      	beq.n	8009d44 <std+0x48>
 8009d36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d3a:	4294      	cmp	r4, r2
 8009d3c:	d002      	beq.n	8009d44 <std+0x48>
 8009d3e:	33d0      	adds	r3, #208	; 0xd0
 8009d40:	429c      	cmp	r4, r3
 8009d42:	d105      	bne.n	8009d50 <std+0x54>
 8009d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d4c:	f000 b966 	b.w	800a01c <__retarget_lock_init_recursive>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	bf00      	nop
 8009d54:	08009ea5 	.word	0x08009ea5
 8009d58:	08009ec7 	.word	0x08009ec7
 8009d5c:	08009eff 	.word	0x08009eff
 8009d60:	08009f23 	.word	0x08009f23
 8009d64:	2000a514 	.word	0x2000a514

08009d68 <stdio_exit_handler>:
 8009d68:	4a02      	ldr	r2, [pc, #8]	; (8009d74 <stdio_exit_handler+0xc>)
 8009d6a:	4903      	ldr	r1, [pc, #12]	; (8009d78 <stdio_exit_handler+0x10>)
 8009d6c:	4803      	ldr	r0, [pc, #12]	; (8009d7c <stdio_exit_handler+0x14>)
 8009d6e:	f000 b869 	b.w	8009e44 <_fwalk_sglue>
 8009d72:	bf00      	nop
 8009d74:	2000004c 	.word	0x2000004c
 8009d78:	0800a8c9 	.word	0x0800a8c9
 8009d7c:	20000058 	.word	0x20000058

08009d80 <cleanup_stdio>:
 8009d80:	6841      	ldr	r1, [r0, #4]
 8009d82:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <cleanup_stdio+0x34>)
 8009d84:	4299      	cmp	r1, r3
 8009d86:	b510      	push	{r4, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	d001      	beq.n	8009d90 <cleanup_stdio+0x10>
 8009d8c:	f000 fd9c 	bl	800a8c8 <_fflush_r>
 8009d90:	68a1      	ldr	r1, [r4, #8]
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <cleanup_stdio+0x38>)
 8009d94:	4299      	cmp	r1, r3
 8009d96:	d002      	beq.n	8009d9e <cleanup_stdio+0x1e>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fd95 	bl	800a8c8 <_fflush_r>
 8009d9e:	68e1      	ldr	r1, [r4, #12]
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <cleanup_stdio+0x3c>)
 8009da2:	4299      	cmp	r1, r3
 8009da4:	d004      	beq.n	8009db0 <cleanup_stdio+0x30>
 8009da6:	4620      	mov	r0, r4
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f000 bd8c 	b.w	800a8c8 <_fflush_r>
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	2000a514 	.word	0x2000a514
 8009db8:	2000a57c 	.word	0x2000a57c
 8009dbc:	2000a5e4 	.word	0x2000a5e4

08009dc0 <global_stdio_init.part.0>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <global_stdio_init.part.0+0x30>)
 8009dc4:	4c0b      	ldr	r4, [pc, #44]	; (8009df4 <global_stdio_init.part.0+0x34>)
 8009dc6:	4a0c      	ldr	r2, [pc, #48]	; (8009df8 <global_stdio_init.part.0+0x38>)
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	4620      	mov	r0, r4
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2104      	movs	r1, #4
 8009dd0:	f7ff ff94 	bl	8009cfc <std>
 8009dd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2109      	movs	r1, #9
 8009ddc:	f7ff ff8e 	bl	8009cfc <std>
 8009de0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009de4:	2202      	movs	r2, #2
 8009de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dea:	2112      	movs	r1, #18
 8009dec:	f7ff bf86 	b.w	8009cfc <std>
 8009df0:	2000a64c 	.word	0x2000a64c
 8009df4:	2000a514 	.word	0x2000a514
 8009df8:	08009d69 	.word	0x08009d69

08009dfc <__sfp_lock_acquire>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__sfp_lock_acquire+0x8>)
 8009dfe:	f000 b90e 	b.w	800a01e <__retarget_lock_acquire_recursive>
 8009e02:	bf00      	nop
 8009e04:	2000a655 	.word	0x2000a655

08009e08 <__sfp_lock_release>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__sfp_lock_release+0x8>)
 8009e0a:	f000 b909 	b.w	800a020 <__retarget_lock_release_recursive>
 8009e0e:	bf00      	nop
 8009e10:	2000a655 	.word	0x2000a655

08009e14 <__sinit>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4604      	mov	r4, r0
 8009e18:	f7ff fff0 	bl	8009dfc <__sfp_lock_acquire>
 8009e1c:	6a23      	ldr	r3, [r4, #32]
 8009e1e:	b11b      	cbz	r3, 8009e28 <__sinit+0x14>
 8009e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e24:	f7ff bff0 	b.w	8009e08 <__sfp_lock_release>
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <__sinit+0x28>)
 8009e2a:	6223      	str	r3, [r4, #32]
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <__sinit+0x2c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1f5      	bne.n	8009e20 <__sinit+0xc>
 8009e34:	f7ff ffc4 	bl	8009dc0 <global_stdio_init.part.0>
 8009e38:	e7f2      	b.n	8009e20 <__sinit+0xc>
 8009e3a:	bf00      	nop
 8009e3c:	08009d81 	.word	0x08009d81
 8009e40:	2000a64c 	.word	0x2000a64c

08009e44 <_fwalk_sglue>:
 8009e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e48:	4607      	mov	r7, r0
 8009e4a:	4688      	mov	r8, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	2600      	movs	r6, #0
 8009e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e54:	f1b9 0901 	subs.w	r9, r9, #1
 8009e58:	d505      	bpl.n	8009e66 <_fwalk_sglue+0x22>
 8009e5a:	6824      	ldr	r4, [r4, #0]
 8009e5c:	2c00      	cmp	r4, #0
 8009e5e:	d1f7      	bne.n	8009e50 <_fwalk_sglue+0xc>
 8009e60:	4630      	mov	r0, r6
 8009e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d907      	bls.n	8009e7c <_fwalk_sglue+0x38>
 8009e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e70:	3301      	adds	r3, #1
 8009e72:	d003      	beq.n	8009e7c <_fwalk_sglue+0x38>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4638      	mov	r0, r7
 8009e78:	47c0      	blx	r8
 8009e7a:	4306      	orrs	r6, r0
 8009e7c:	3568      	adds	r5, #104	; 0x68
 8009e7e:	e7e9      	b.n	8009e54 <_fwalk_sglue+0x10>

08009e80 <iprintf>:
 8009e80:	b40f      	push	{r0, r1, r2, r3}
 8009e82:	b507      	push	{r0, r1, r2, lr}
 8009e84:	4906      	ldr	r1, [pc, #24]	; (8009ea0 <iprintf+0x20>)
 8009e86:	ab04      	add	r3, sp, #16
 8009e88:	6808      	ldr	r0, [r1, #0]
 8009e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8e:	6881      	ldr	r1, [r0, #8]
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	f000 f9e9 	bl	800a268 <_vfiprintf_r>
 8009e96:	b003      	add	sp, #12
 8009e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e9c:	b004      	add	sp, #16
 8009e9e:	4770      	bx	lr
 8009ea0:	200000a4 	.word	0x200000a4

08009ea4 <__sread>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eac:	f000 f868 	bl	8009f80 <_read_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	bfab      	itete	ge
 8009eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8009eb8:	181b      	addge	r3, r3, r0
 8009eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ebe:	bfac      	ite	ge
 8009ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ec2:	81a3      	strhlt	r3, [r4, #12]
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <__swrite>:
 8009ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	461f      	mov	r7, r3
 8009ecc:	898b      	ldrh	r3, [r1, #12]
 8009ece:	05db      	lsls	r3, r3, #23
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	d505      	bpl.n	8009ee4 <__swrite+0x1e>
 8009ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009edc:	2302      	movs	r3, #2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f000 f83c 	bl	8009f5c <_lseek_r>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009efa:	f000 b853 	b.w	8009fa4 <_write_r>

08009efe <__sseek>:
 8009efe:	b510      	push	{r4, lr}
 8009f00:	460c      	mov	r4, r1
 8009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f06:	f000 f829 	bl	8009f5c <_lseek_r>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	bf15      	itete	ne
 8009f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f1a:	81a3      	strheq	r3, [r4, #12]
 8009f1c:	bf18      	it	ne
 8009f1e:	81a3      	strhne	r3, [r4, #12]
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <__sclose>:
 8009f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f26:	f000 b809 	b.w	8009f3c <_close_r>

08009f2a <memset>:
 8009f2a:	4402      	add	r2, r0
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d100      	bne.n	8009f34 <memset+0xa>
 8009f32:	4770      	bx	lr
 8009f34:	f803 1b01 	strb.w	r1, [r3], #1
 8009f38:	e7f9      	b.n	8009f2e <memset+0x4>
	...

08009f3c <_close_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	; (8009f58 <_close_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7fa fbf9 	bl	800473e <_close>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_close_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_close_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	2000a650 	.word	0x2000a650

08009f5c <_lseek_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	; (8009f7c <_lseek_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7fa fc0e 	bl	800478c <_lseek>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_lseek_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_lseek_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	2000a650 	.word	0x2000a650

08009f80 <_read_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d07      	ldr	r5, [pc, #28]	; (8009fa0 <_read_r+0x20>)
 8009f84:	4604      	mov	r4, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7fa fb9c 	bl	80046cc <_read>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_read_r+0x1e>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_read_r+0x1e>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	2000a650 	.word	0x2000a650

08009fa4 <_write_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_write_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7fa fba7 	bl	8004706 <_write>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_write_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_write_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	2000a650 	.word	0x2000a650

08009fc8 <__errno>:
 8009fc8:	4b01      	ldr	r3, [pc, #4]	; (8009fd0 <__errno+0x8>)
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	200000a4 	.word	0x200000a4

08009fd4 <__libc_init_array>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	4d0d      	ldr	r5, [pc, #52]	; (800a00c <__libc_init_array+0x38>)
 8009fd8:	4c0d      	ldr	r4, [pc, #52]	; (800a010 <__libc_init_array+0x3c>)
 8009fda:	1b64      	subs	r4, r4, r5
 8009fdc:	10a4      	asrs	r4, r4, #2
 8009fde:	2600      	movs	r6, #0
 8009fe0:	42a6      	cmp	r6, r4
 8009fe2:	d109      	bne.n	8009ff8 <__libc_init_array+0x24>
 8009fe4:	4d0b      	ldr	r5, [pc, #44]	; (800a014 <__libc_init_array+0x40>)
 8009fe6:	4c0c      	ldr	r4, [pc, #48]	; (800a018 <__libc_init_array+0x44>)
 8009fe8:	f000 fdc0 	bl	800ab6c <_init>
 8009fec:	1b64      	subs	r4, r4, r5
 8009fee:	10a4      	asrs	r4, r4, #2
 8009ff0:	2600      	movs	r6, #0
 8009ff2:	42a6      	cmp	r6, r4
 8009ff4:	d105      	bne.n	800a002 <__libc_init_array+0x2e>
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}
 8009ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ffc:	4798      	blx	r3
 8009ffe:	3601      	adds	r6, #1
 800a000:	e7ee      	b.n	8009fe0 <__libc_init_array+0xc>
 800a002:	f855 3b04 	ldr.w	r3, [r5], #4
 800a006:	4798      	blx	r3
 800a008:	3601      	adds	r6, #1
 800a00a:	e7f2      	b.n	8009ff2 <__libc_init_array+0x1e>
 800a00c:	0801e200 	.word	0x0801e200
 800a010:	0801e200 	.word	0x0801e200
 800a014:	0801e200 	.word	0x0801e200
 800a018:	0801e204 	.word	0x0801e204

0800a01c <__retarget_lock_init_recursive>:
 800a01c:	4770      	bx	lr

0800a01e <__retarget_lock_acquire_recursive>:
 800a01e:	4770      	bx	lr

0800a020 <__retarget_lock_release_recursive>:
 800a020:	4770      	bx	lr
	...

0800a024 <_free_r>:
 800a024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a026:	2900      	cmp	r1, #0
 800a028:	d044      	beq.n	800a0b4 <_free_r+0x90>
 800a02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02e:	9001      	str	r0, [sp, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	f1a1 0404 	sub.w	r4, r1, #4
 800a036:	bfb8      	it	lt
 800a038:	18e4      	addlt	r4, r4, r3
 800a03a:	f000 f8df 	bl	800a1fc <__malloc_lock>
 800a03e:	4a1e      	ldr	r2, [pc, #120]	; (800a0b8 <_free_r+0x94>)
 800a040:	9801      	ldr	r0, [sp, #4]
 800a042:	6813      	ldr	r3, [r2, #0]
 800a044:	b933      	cbnz	r3, 800a054 <_free_r+0x30>
 800a046:	6063      	str	r3, [r4, #4]
 800a048:	6014      	str	r4, [r2, #0]
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a050:	f000 b8da 	b.w	800a208 <__malloc_unlock>
 800a054:	42a3      	cmp	r3, r4
 800a056:	d908      	bls.n	800a06a <_free_r+0x46>
 800a058:	6825      	ldr	r5, [r4, #0]
 800a05a:	1961      	adds	r1, r4, r5
 800a05c:	428b      	cmp	r3, r1
 800a05e:	bf01      	itttt	eq
 800a060:	6819      	ldreq	r1, [r3, #0]
 800a062:	685b      	ldreq	r3, [r3, #4]
 800a064:	1949      	addeq	r1, r1, r5
 800a066:	6021      	streq	r1, [r4, #0]
 800a068:	e7ed      	b.n	800a046 <_free_r+0x22>
 800a06a:	461a      	mov	r2, r3
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b10b      	cbz	r3, 800a074 <_free_r+0x50>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d9fa      	bls.n	800a06a <_free_r+0x46>
 800a074:	6811      	ldr	r1, [r2, #0]
 800a076:	1855      	adds	r5, r2, r1
 800a078:	42a5      	cmp	r5, r4
 800a07a:	d10b      	bne.n	800a094 <_free_r+0x70>
 800a07c:	6824      	ldr	r4, [r4, #0]
 800a07e:	4421      	add	r1, r4
 800a080:	1854      	adds	r4, r2, r1
 800a082:	42a3      	cmp	r3, r4
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	d1e0      	bne.n	800a04a <_free_r+0x26>
 800a088:	681c      	ldr	r4, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	6053      	str	r3, [r2, #4]
 800a08e:	440c      	add	r4, r1
 800a090:	6014      	str	r4, [r2, #0]
 800a092:	e7da      	b.n	800a04a <_free_r+0x26>
 800a094:	d902      	bls.n	800a09c <_free_r+0x78>
 800a096:	230c      	movs	r3, #12
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	e7d6      	b.n	800a04a <_free_r+0x26>
 800a09c:	6825      	ldr	r5, [r4, #0]
 800a09e:	1961      	adds	r1, r4, r5
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	bf04      	itt	eq
 800a0a4:	6819      	ldreq	r1, [r3, #0]
 800a0a6:	685b      	ldreq	r3, [r3, #4]
 800a0a8:	6063      	str	r3, [r4, #4]
 800a0aa:	bf04      	itt	eq
 800a0ac:	1949      	addeq	r1, r1, r5
 800a0ae:	6021      	streq	r1, [r4, #0]
 800a0b0:	6054      	str	r4, [r2, #4]
 800a0b2:	e7ca      	b.n	800a04a <_free_r+0x26>
 800a0b4:	b003      	add	sp, #12
 800a0b6:	bd30      	pop	{r4, r5, pc}
 800a0b8:	2000a658 	.word	0x2000a658

0800a0bc <sbrk_aligned>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4e0e      	ldr	r6, [pc, #56]	; (800a0f8 <sbrk_aligned+0x3c>)
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	6831      	ldr	r1, [r6, #0]
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	b911      	cbnz	r1, 800a0ce <sbrk_aligned+0x12>
 800a0c8:	f000 fcbc 	bl	800aa44 <_sbrk_r>
 800a0cc:	6030      	str	r0, [r6, #0]
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 fcb7 	bl	800aa44 <_sbrk_r>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	d00a      	beq.n	800a0f0 <sbrk_aligned+0x34>
 800a0da:	1cc4      	adds	r4, r0, #3
 800a0dc:	f024 0403 	bic.w	r4, r4, #3
 800a0e0:	42a0      	cmp	r0, r4
 800a0e2:	d007      	beq.n	800a0f4 <sbrk_aligned+0x38>
 800a0e4:	1a21      	subs	r1, r4, r0
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 fcac 	bl	800aa44 <_sbrk_r>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d101      	bne.n	800a0f4 <sbrk_aligned+0x38>
 800a0f0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	2000a65c 	.word	0x2000a65c

0800a0fc <_malloc_r>:
 800a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a100:	1ccd      	adds	r5, r1, #3
 800a102:	f025 0503 	bic.w	r5, r5, #3
 800a106:	3508      	adds	r5, #8
 800a108:	2d0c      	cmp	r5, #12
 800a10a:	bf38      	it	cc
 800a10c:	250c      	movcc	r5, #12
 800a10e:	2d00      	cmp	r5, #0
 800a110:	4607      	mov	r7, r0
 800a112:	db01      	blt.n	800a118 <_malloc_r+0x1c>
 800a114:	42a9      	cmp	r1, r5
 800a116:	d905      	bls.n	800a124 <_malloc_r+0x28>
 800a118:	230c      	movs	r3, #12
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	2600      	movs	r6, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1f8 <_malloc_r+0xfc>
 800a128:	f000 f868 	bl	800a1fc <__malloc_lock>
 800a12c:	f8d8 3000 	ldr.w	r3, [r8]
 800a130:	461c      	mov	r4, r3
 800a132:	bb5c      	cbnz	r4, 800a18c <_malloc_r+0x90>
 800a134:	4629      	mov	r1, r5
 800a136:	4638      	mov	r0, r7
 800a138:	f7ff ffc0 	bl	800a0bc <sbrk_aligned>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	4604      	mov	r4, r0
 800a140:	d155      	bne.n	800a1ee <_malloc_r+0xf2>
 800a142:	f8d8 4000 	ldr.w	r4, [r8]
 800a146:	4626      	mov	r6, r4
 800a148:	2e00      	cmp	r6, #0
 800a14a:	d145      	bne.n	800a1d8 <_malloc_r+0xdc>
 800a14c:	2c00      	cmp	r4, #0
 800a14e:	d048      	beq.n	800a1e2 <_malloc_r+0xe6>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	4631      	mov	r1, r6
 800a154:	4638      	mov	r0, r7
 800a156:	eb04 0903 	add.w	r9, r4, r3
 800a15a:	f000 fc73 	bl	800aa44 <_sbrk_r>
 800a15e:	4581      	cmp	r9, r0
 800a160:	d13f      	bne.n	800a1e2 <_malloc_r+0xe6>
 800a162:	6821      	ldr	r1, [r4, #0]
 800a164:	1a6d      	subs	r5, r5, r1
 800a166:	4629      	mov	r1, r5
 800a168:	4638      	mov	r0, r7
 800a16a:	f7ff ffa7 	bl	800a0bc <sbrk_aligned>
 800a16e:	3001      	adds	r0, #1
 800a170:	d037      	beq.n	800a1e2 <_malloc_r+0xe6>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	442b      	add	r3, r5
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	f8d8 3000 	ldr.w	r3, [r8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d038      	beq.n	800a1f2 <_malloc_r+0xf6>
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	42a2      	cmp	r2, r4
 800a184:	d12b      	bne.n	800a1de <_malloc_r+0xe2>
 800a186:	2200      	movs	r2, #0
 800a188:	605a      	str	r2, [r3, #4]
 800a18a:	e00f      	b.n	800a1ac <_malloc_r+0xb0>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	1b52      	subs	r2, r2, r5
 800a190:	d41f      	bmi.n	800a1d2 <_malloc_r+0xd6>
 800a192:	2a0b      	cmp	r2, #11
 800a194:	d917      	bls.n	800a1c6 <_malloc_r+0xca>
 800a196:	1961      	adds	r1, r4, r5
 800a198:	42a3      	cmp	r3, r4
 800a19a:	6025      	str	r5, [r4, #0]
 800a19c:	bf18      	it	ne
 800a19e:	6059      	strne	r1, [r3, #4]
 800a1a0:	6863      	ldr	r3, [r4, #4]
 800a1a2:	bf08      	it	eq
 800a1a4:	f8c8 1000 	streq.w	r1, [r8]
 800a1a8:	5162      	str	r2, [r4, r5]
 800a1aa:	604b      	str	r3, [r1, #4]
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f104 060b 	add.w	r6, r4, #11
 800a1b2:	f000 f829 	bl	800a208 <__malloc_unlock>
 800a1b6:	f026 0607 	bic.w	r6, r6, #7
 800a1ba:	1d23      	adds	r3, r4, #4
 800a1bc:	1af2      	subs	r2, r6, r3
 800a1be:	d0ae      	beq.n	800a11e <_malloc_r+0x22>
 800a1c0:	1b9b      	subs	r3, r3, r6
 800a1c2:	50a3      	str	r3, [r4, r2]
 800a1c4:	e7ab      	b.n	800a11e <_malloc_r+0x22>
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	6862      	ldr	r2, [r4, #4]
 800a1ca:	d1dd      	bne.n	800a188 <_malloc_r+0x8c>
 800a1cc:	f8c8 2000 	str.w	r2, [r8]
 800a1d0:	e7ec      	b.n	800a1ac <_malloc_r+0xb0>
 800a1d2:	4623      	mov	r3, r4
 800a1d4:	6864      	ldr	r4, [r4, #4]
 800a1d6:	e7ac      	b.n	800a132 <_malloc_r+0x36>
 800a1d8:	4634      	mov	r4, r6
 800a1da:	6876      	ldr	r6, [r6, #4]
 800a1dc:	e7b4      	b.n	800a148 <_malloc_r+0x4c>
 800a1de:	4613      	mov	r3, r2
 800a1e0:	e7cc      	b.n	800a17c <_malloc_r+0x80>
 800a1e2:	230c      	movs	r3, #12
 800a1e4:	603b      	str	r3, [r7, #0]
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f000 f80e 	bl	800a208 <__malloc_unlock>
 800a1ec:	e797      	b.n	800a11e <_malloc_r+0x22>
 800a1ee:	6025      	str	r5, [r4, #0]
 800a1f0:	e7dc      	b.n	800a1ac <_malloc_r+0xb0>
 800a1f2:	605b      	str	r3, [r3, #4]
 800a1f4:	deff      	udf	#255	; 0xff
 800a1f6:	bf00      	nop
 800a1f8:	2000a658 	.word	0x2000a658

0800a1fc <__malloc_lock>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	; (800a204 <__malloc_lock+0x8>)
 800a1fe:	f7ff bf0e 	b.w	800a01e <__retarget_lock_acquire_recursive>
 800a202:	bf00      	nop
 800a204:	2000a654 	.word	0x2000a654

0800a208 <__malloc_unlock>:
 800a208:	4801      	ldr	r0, [pc, #4]	; (800a210 <__malloc_unlock+0x8>)
 800a20a:	f7ff bf09 	b.w	800a020 <__retarget_lock_release_recursive>
 800a20e:	bf00      	nop
 800a210:	2000a654 	.word	0x2000a654

0800a214 <__sfputc_r>:
 800a214:	6893      	ldr	r3, [r2, #8]
 800a216:	3b01      	subs	r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	b410      	push	{r4}
 800a21c:	6093      	str	r3, [r2, #8]
 800a21e:	da08      	bge.n	800a232 <__sfputc_r+0x1e>
 800a220:	6994      	ldr	r4, [r2, #24]
 800a222:	42a3      	cmp	r3, r4
 800a224:	db01      	blt.n	800a22a <__sfputc_r+0x16>
 800a226:	290a      	cmp	r1, #10
 800a228:	d103      	bne.n	800a232 <__sfputc_r+0x1e>
 800a22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a22e:	f000 bb73 	b.w	800a918 <__swbuf_r>
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	1c58      	adds	r0, r3, #1
 800a236:	6010      	str	r0, [r2, #0]
 800a238:	7019      	strb	r1, [r3, #0]
 800a23a:	4608      	mov	r0, r1
 800a23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <__sfputs_r>:
 800a242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	18d5      	adds	r5, r2, r3
 800a24c:	42ac      	cmp	r4, r5
 800a24e:	d101      	bne.n	800a254 <__sfputs_r+0x12>
 800a250:	2000      	movs	r0, #0
 800a252:	e007      	b.n	800a264 <__sfputs_r+0x22>
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	463a      	mov	r2, r7
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ffda 	bl	800a214 <__sfputc_r>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d1f3      	bne.n	800a24c <__sfputs_r+0xa>
 800a264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a268 <_vfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	460d      	mov	r5, r1
 800a26e:	b09d      	sub	sp, #116	; 0x74
 800a270:	4614      	mov	r4, r2
 800a272:	4698      	mov	r8, r3
 800a274:	4606      	mov	r6, r0
 800a276:	b118      	cbz	r0, 800a280 <_vfiprintf_r+0x18>
 800a278:	6a03      	ldr	r3, [r0, #32]
 800a27a:	b90b      	cbnz	r3, 800a280 <_vfiprintf_r+0x18>
 800a27c:	f7ff fdca 	bl	8009e14 <__sinit>
 800a280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x2a>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x2a>
 800a28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a28e:	f7ff fec6 	bl	800a01e <__retarget_lock_acquire_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	071b      	lsls	r3, r3, #28
 800a296:	d501      	bpl.n	800a29c <_vfiprintf_r+0x34>
 800a298:	692b      	ldr	r3, [r5, #16]
 800a29a:	b99b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x5c>
 800a29c:	4629      	mov	r1, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f000 fb78 	bl	800a994 <__swsetup_r>
 800a2a4:	b170      	cbz	r0, 800a2c4 <_vfiprintf_r+0x5c>
 800a2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a8:	07dc      	lsls	r4, r3, #31
 800a2aa:	d504      	bpl.n	800a2b6 <_vfiprintf_r+0x4e>
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	b01d      	add	sp, #116	; 0x74
 800a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	0598      	lsls	r0, r3, #22
 800a2ba:	d4f7      	bmi.n	800a2ac <_vfiprintf_r+0x44>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f7ff feaf 	bl	800a020 <__retarget_lock_release_recursive>
 800a2c2:	e7f3      	b.n	800a2ac <_vfiprintf_r+0x44>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d2:	2330      	movs	r3, #48	; 0x30
 800a2d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a488 <_vfiprintf_r+0x220>
 800a2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2dc:	f04f 0901 	mov.w	r9, #1
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	469a      	mov	sl, r3
 800a2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_vfiprintf_r+0x86>
 800a2ea:	2a25      	cmp	r2, #37	; 0x25
 800a2ec:	d1f9      	bne.n	800a2e2 <_vfiprintf_r+0x7a>
 800a2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f2:	d00b      	beq.n	800a30c <_vfiprintf_r+0xa4>
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ffa1 	bl	800a242 <__sfputs_r>
 800a300:	3001      	adds	r0, #1
 800a302:	f000 80a9 	beq.w	800a458 <_vfiprintf_r+0x1f0>
 800a306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a308:	445a      	add	r2, fp
 800a30a:	9209      	str	r2, [sp, #36]	; 0x24
 800a30c:	f89a 3000 	ldrb.w	r3, [sl]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 80a1 	beq.w	800a458 <_vfiprintf_r+0x1f0>
 800a316:	2300      	movs	r3, #0
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32c:	931a      	str	r3, [sp, #104]	; 0x68
 800a32e:	4654      	mov	r4, sl
 800a330:	2205      	movs	r2, #5
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	4854      	ldr	r0, [pc, #336]	; (800a488 <_vfiprintf_r+0x220>)
 800a338:	f7f5 ff4a 	bl	80001d0 <memchr>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	b9d8      	cbnz	r0, 800a378 <_vfiprintf_r+0x110>
 800a340:	06d1      	lsls	r1, r2, #27
 800a342:	bf44      	itt	mi
 800a344:	2320      	movmi	r3, #32
 800a346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34a:	0713      	lsls	r3, r2, #28
 800a34c:	bf44      	itt	mi
 800a34e:	232b      	movmi	r3, #43	; 0x2b
 800a350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a354:	f89a 3000 	ldrb.w	r3, [sl]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d015      	beq.n	800a388 <_vfiprintf_r+0x120>
 800a35c:	9a07      	ldr	r2, [sp, #28]
 800a35e:	4654      	mov	r4, sl
 800a360:	2000      	movs	r0, #0
 800a362:	f04f 0c0a 	mov.w	ip, #10
 800a366:	4621      	mov	r1, r4
 800a368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36c:	3b30      	subs	r3, #48	; 0x30
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d94d      	bls.n	800a40e <_vfiprintf_r+0x1a6>
 800a372:	b1b0      	cbz	r0, 800a3a2 <_vfiprintf_r+0x13a>
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	e014      	b.n	800a3a2 <_vfiprintf_r+0x13a>
 800a378:	eba0 0308 	sub.w	r3, r0, r8
 800a37c:	fa09 f303 	lsl.w	r3, r9, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	46a2      	mov	sl, r4
 800a386:	e7d2      	b.n	800a32e <_vfiprintf_r+0xc6>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d19      	adds	r1, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9103      	str	r1, [sp, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbb      	ittet	lt
 800a394:	425b      	neglt	r3, r3
 800a396:	f042 0202 	orrlt.w	r2, r2, #2
 800a39a:	9307      	strge	r3, [sp, #28]
 800a39c:	9307      	strlt	r3, [sp, #28]
 800a39e:	bfb8      	it	lt
 800a3a0:	9204      	strlt	r2, [sp, #16]
 800a3a2:	7823      	ldrb	r3, [r4, #0]
 800a3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a6:	d10c      	bne.n	800a3c2 <_vfiprintf_r+0x15a>
 800a3a8:	7863      	ldrb	r3, [r4, #1]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d134      	bne.n	800a418 <_vfiprintf_r+0x1b0>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	9203      	str	r2, [sp, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfb8      	it	lt
 800a3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3be:	3402      	adds	r4, #2
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a498 <_vfiprintf_r+0x230>
 800a3c6:	7821      	ldrb	r1, [r4, #0]
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f7f5 ff00 	bl	80001d0 <memchr>
 800a3d0:	b138      	cbz	r0, 800a3e2 <_vfiprintf_r+0x17a>
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	eba0 000a 	sub.w	r0, r0, sl
 800a3d8:	2240      	movs	r2, #64	; 0x40
 800a3da:	4082      	lsls	r2, r0
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	4829      	ldr	r0, [pc, #164]	; (800a48c <_vfiprintf_r+0x224>)
 800a3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	f7f5 feef 	bl	80001d0 <memchr>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d03f      	beq.n	800a476 <_vfiprintf_r+0x20e>
 800a3f6:	4b26      	ldr	r3, [pc, #152]	; (800a490 <_vfiprintf_r+0x228>)
 800a3f8:	bb1b      	cbnz	r3, 800a442 <_vfiprintf_r+0x1da>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	3308      	adds	r3, #8
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	443b      	add	r3, r7
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	e768      	b.n	800a2e0 <_vfiprintf_r+0x78>
 800a40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a412:	460c      	mov	r4, r1
 800a414:	2001      	movs	r0, #1
 800a416:	e7a6      	b.n	800a366 <_vfiprintf_r+0xfe>
 800a418:	2300      	movs	r3, #0
 800a41a:	3401      	adds	r4, #1
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	4619      	mov	r1, r3
 800a420:	f04f 0c0a 	mov.w	ip, #10
 800a424:	4620      	mov	r0, r4
 800a426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42a:	3a30      	subs	r2, #48	; 0x30
 800a42c:	2a09      	cmp	r2, #9
 800a42e:	d903      	bls.n	800a438 <_vfiprintf_r+0x1d0>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0c6      	beq.n	800a3c2 <_vfiprintf_r+0x15a>
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	e7c4      	b.n	800a3c2 <_vfiprintf_r+0x15a>
 800a438:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43c:	4604      	mov	r4, r0
 800a43e:	2301      	movs	r3, #1
 800a440:	e7f0      	b.n	800a424 <_vfiprintf_r+0x1bc>
 800a442:	ab03      	add	r3, sp, #12
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	462a      	mov	r2, r5
 800a448:	4b12      	ldr	r3, [pc, #72]	; (800a494 <_vfiprintf_r+0x22c>)
 800a44a:	a904      	add	r1, sp, #16
 800a44c:	4630      	mov	r0, r6
 800a44e:	f3af 8000 	nop.w
 800a452:	4607      	mov	r7, r0
 800a454:	1c78      	adds	r0, r7, #1
 800a456:	d1d6      	bne.n	800a406 <_vfiprintf_r+0x19e>
 800a458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	d405      	bmi.n	800a46a <_vfiprintf_r+0x202>
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	059a      	lsls	r2, r3, #22
 800a462:	d402      	bmi.n	800a46a <_vfiprintf_r+0x202>
 800a464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a466:	f7ff fddb 	bl	800a020 <__retarget_lock_release_recursive>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	065b      	lsls	r3, r3, #25
 800a46e:	f53f af1d 	bmi.w	800a2ac <_vfiprintf_r+0x44>
 800a472:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a474:	e71c      	b.n	800a2b0 <_vfiprintf_r+0x48>
 800a476:	ab03      	add	r3, sp, #12
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	462a      	mov	r2, r5
 800a47c:	4b05      	ldr	r3, [pc, #20]	; (800a494 <_vfiprintf_r+0x22c>)
 800a47e:	a904      	add	r1, sp, #16
 800a480:	4630      	mov	r0, r6
 800a482:	f000 f879 	bl	800a578 <_printf_i>
 800a486:	e7e4      	b.n	800a452 <_vfiprintf_r+0x1ea>
 800a488:	0801e1c5 	.word	0x0801e1c5
 800a48c:	0801e1cf 	.word	0x0801e1cf
 800a490:	00000000 	.word	0x00000000
 800a494:	0800a243 	.word	0x0800a243
 800a498:	0801e1cb 	.word	0x0801e1cb

0800a49c <_printf_common>:
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	4699      	mov	r9, r3
 800a4a4:	688a      	ldr	r2, [r1, #8]
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	bfb8      	it	lt
 800a4b0:	4613      	movlt	r3, r2
 800a4b2:	6033      	str	r3, [r6, #0]
 800a4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b10a      	cbz	r2, 800a4c2 <_printf_common+0x26>
 800a4be:	3301      	adds	r3, #1
 800a4c0:	6033      	str	r3, [r6, #0]
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	0699      	lsls	r1, r3, #26
 800a4c6:	bf42      	ittt	mi
 800a4c8:	6833      	ldrmi	r3, [r6, #0]
 800a4ca:	3302      	addmi	r3, #2
 800a4cc:	6033      	strmi	r3, [r6, #0]
 800a4ce:	6825      	ldr	r5, [r4, #0]
 800a4d0:	f015 0506 	ands.w	r5, r5, #6
 800a4d4:	d106      	bne.n	800a4e4 <_printf_common+0x48>
 800a4d6:	f104 0a19 	add.w	sl, r4, #25
 800a4da:	68e3      	ldr	r3, [r4, #12]
 800a4dc:	6832      	ldr	r2, [r6, #0]
 800a4de:	1a9b      	subs	r3, r3, r2
 800a4e0:	42ab      	cmp	r3, r5
 800a4e2:	dc26      	bgt.n	800a532 <_printf_common+0x96>
 800a4e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4e8:	1e13      	subs	r3, r2, #0
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	bf18      	it	ne
 800a4ee:	2301      	movne	r3, #1
 800a4f0:	0692      	lsls	r2, r2, #26
 800a4f2:	d42b      	bmi.n	800a54c <_printf_common+0xb0>
 800a4f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	47c0      	blx	r8
 800a4fe:	3001      	adds	r0, #1
 800a500:	d01e      	beq.n	800a540 <_printf_common+0xa4>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	6922      	ldr	r2, [r4, #16]
 800a506:	f003 0306 	and.w	r3, r3, #6
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	bf02      	ittt	eq
 800a50e:	68e5      	ldreq	r5, [r4, #12]
 800a510:	6833      	ldreq	r3, [r6, #0]
 800a512:	1aed      	subeq	r5, r5, r3
 800a514:	68a3      	ldr	r3, [r4, #8]
 800a516:	bf0c      	ite	eq
 800a518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a51c:	2500      	movne	r5, #0
 800a51e:	4293      	cmp	r3, r2
 800a520:	bfc4      	itt	gt
 800a522:	1a9b      	subgt	r3, r3, r2
 800a524:	18ed      	addgt	r5, r5, r3
 800a526:	2600      	movs	r6, #0
 800a528:	341a      	adds	r4, #26
 800a52a:	42b5      	cmp	r5, r6
 800a52c:	d11a      	bne.n	800a564 <_printf_common+0xc8>
 800a52e:	2000      	movs	r0, #0
 800a530:	e008      	b.n	800a544 <_printf_common+0xa8>
 800a532:	2301      	movs	r3, #1
 800a534:	4652      	mov	r2, sl
 800a536:	4649      	mov	r1, r9
 800a538:	4638      	mov	r0, r7
 800a53a:	47c0      	blx	r8
 800a53c:	3001      	adds	r0, #1
 800a53e:	d103      	bne.n	800a548 <_printf_common+0xac>
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a548:	3501      	adds	r5, #1
 800a54a:	e7c6      	b.n	800a4da <_printf_common+0x3e>
 800a54c:	18e1      	adds	r1, r4, r3
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	2030      	movs	r0, #48	; 0x30
 800a552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a556:	4422      	add	r2, r4
 800a558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a55c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a560:	3302      	adds	r3, #2
 800a562:	e7c7      	b.n	800a4f4 <_printf_common+0x58>
 800a564:	2301      	movs	r3, #1
 800a566:	4622      	mov	r2, r4
 800a568:	4649      	mov	r1, r9
 800a56a:	4638      	mov	r0, r7
 800a56c:	47c0      	blx	r8
 800a56e:	3001      	adds	r0, #1
 800a570:	d0e6      	beq.n	800a540 <_printf_common+0xa4>
 800a572:	3601      	adds	r6, #1
 800a574:	e7d9      	b.n	800a52a <_printf_common+0x8e>
	...

0800a578 <_printf_i>:
 800a578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	7e0f      	ldrb	r7, [r1, #24]
 800a57e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a580:	2f78      	cmp	r7, #120	; 0x78
 800a582:	4691      	mov	r9, r2
 800a584:	4680      	mov	r8, r0
 800a586:	460c      	mov	r4, r1
 800a588:	469a      	mov	sl, r3
 800a58a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a58e:	d807      	bhi.n	800a5a0 <_printf_i+0x28>
 800a590:	2f62      	cmp	r7, #98	; 0x62
 800a592:	d80a      	bhi.n	800a5aa <_printf_i+0x32>
 800a594:	2f00      	cmp	r7, #0
 800a596:	f000 80d4 	beq.w	800a742 <_printf_i+0x1ca>
 800a59a:	2f58      	cmp	r7, #88	; 0x58
 800a59c:	f000 80c0 	beq.w	800a720 <_printf_i+0x1a8>
 800a5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5a8:	e03a      	b.n	800a620 <_printf_i+0xa8>
 800a5aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5ae:	2b15      	cmp	r3, #21
 800a5b0:	d8f6      	bhi.n	800a5a0 <_printf_i+0x28>
 800a5b2:	a101      	add	r1, pc, #4	; (adr r1, 800a5b8 <_printf_i+0x40>)
 800a5b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5b8:	0800a611 	.word	0x0800a611
 800a5bc:	0800a625 	.word	0x0800a625
 800a5c0:	0800a5a1 	.word	0x0800a5a1
 800a5c4:	0800a5a1 	.word	0x0800a5a1
 800a5c8:	0800a5a1 	.word	0x0800a5a1
 800a5cc:	0800a5a1 	.word	0x0800a5a1
 800a5d0:	0800a625 	.word	0x0800a625
 800a5d4:	0800a5a1 	.word	0x0800a5a1
 800a5d8:	0800a5a1 	.word	0x0800a5a1
 800a5dc:	0800a5a1 	.word	0x0800a5a1
 800a5e0:	0800a5a1 	.word	0x0800a5a1
 800a5e4:	0800a729 	.word	0x0800a729
 800a5e8:	0800a651 	.word	0x0800a651
 800a5ec:	0800a6e3 	.word	0x0800a6e3
 800a5f0:	0800a5a1 	.word	0x0800a5a1
 800a5f4:	0800a5a1 	.word	0x0800a5a1
 800a5f8:	0800a74b 	.word	0x0800a74b
 800a5fc:	0800a5a1 	.word	0x0800a5a1
 800a600:	0800a651 	.word	0x0800a651
 800a604:	0800a5a1 	.word	0x0800a5a1
 800a608:	0800a5a1 	.word	0x0800a5a1
 800a60c:	0800a6eb 	.word	0x0800a6eb
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	1d1a      	adds	r2, r3, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	602a      	str	r2, [r5, #0]
 800a618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a61c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a620:	2301      	movs	r3, #1
 800a622:	e09f      	b.n	800a764 <_printf_i+0x1ec>
 800a624:	6820      	ldr	r0, [r4, #0]
 800a626:	682b      	ldr	r3, [r5, #0]
 800a628:	0607      	lsls	r7, r0, #24
 800a62a:	f103 0104 	add.w	r1, r3, #4
 800a62e:	6029      	str	r1, [r5, #0]
 800a630:	d501      	bpl.n	800a636 <_printf_i+0xbe>
 800a632:	681e      	ldr	r6, [r3, #0]
 800a634:	e003      	b.n	800a63e <_printf_i+0xc6>
 800a636:	0646      	lsls	r6, r0, #25
 800a638:	d5fb      	bpl.n	800a632 <_printf_i+0xba>
 800a63a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a63e:	2e00      	cmp	r6, #0
 800a640:	da03      	bge.n	800a64a <_printf_i+0xd2>
 800a642:	232d      	movs	r3, #45	; 0x2d
 800a644:	4276      	negs	r6, r6
 800a646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a64a:	485a      	ldr	r0, [pc, #360]	; (800a7b4 <_printf_i+0x23c>)
 800a64c:	230a      	movs	r3, #10
 800a64e:	e012      	b.n	800a676 <_printf_i+0xfe>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	1d19      	adds	r1, r3, #4
 800a656:	6029      	str	r1, [r5, #0]
 800a658:	0605      	lsls	r5, r0, #24
 800a65a:	d501      	bpl.n	800a660 <_printf_i+0xe8>
 800a65c:	681e      	ldr	r6, [r3, #0]
 800a65e:	e002      	b.n	800a666 <_printf_i+0xee>
 800a660:	0641      	lsls	r1, r0, #25
 800a662:	d5fb      	bpl.n	800a65c <_printf_i+0xe4>
 800a664:	881e      	ldrh	r6, [r3, #0]
 800a666:	4853      	ldr	r0, [pc, #332]	; (800a7b4 <_printf_i+0x23c>)
 800a668:	2f6f      	cmp	r7, #111	; 0x6f
 800a66a:	bf0c      	ite	eq
 800a66c:	2308      	moveq	r3, #8
 800a66e:	230a      	movne	r3, #10
 800a670:	2100      	movs	r1, #0
 800a672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a676:	6865      	ldr	r5, [r4, #4]
 800a678:	60a5      	str	r5, [r4, #8]
 800a67a:	2d00      	cmp	r5, #0
 800a67c:	bfa2      	ittt	ge
 800a67e:	6821      	ldrge	r1, [r4, #0]
 800a680:	f021 0104 	bicge.w	r1, r1, #4
 800a684:	6021      	strge	r1, [r4, #0]
 800a686:	b90e      	cbnz	r6, 800a68c <_printf_i+0x114>
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d04b      	beq.n	800a724 <_printf_i+0x1ac>
 800a68c:	4615      	mov	r5, r2
 800a68e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a692:	fb03 6711 	mls	r7, r3, r1, r6
 800a696:	5dc7      	ldrb	r7, [r0, r7]
 800a698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a69c:	4637      	mov	r7, r6
 800a69e:	42bb      	cmp	r3, r7
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	d9f4      	bls.n	800a68e <_printf_i+0x116>
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d10b      	bne.n	800a6c0 <_printf_i+0x148>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	07de      	lsls	r6, r3, #31
 800a6ac:	d508      	bpl.n	800a6c0 <_printf_i+0x148>
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	bfde      	ittt	le
 800a6b6:	2330      	movle	r3, #48	; 0x30
 800a6b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6c0:	1b52      	subs	r2, r2, r5
 800a6c2:	6122      	str	r2, [r4, #16]
 800a6c4:	f8cd a000 	str.w	sl, [sp]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	aa03      	add	r2, sp, #12
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fee4 	bl	800a49c <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d14a      	bne.n	800a76e <_printf_i+0x1f6>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b004      	add	sp, #16
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	f043 0320 	orr.w	r3, r3, #32
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	4833      	ldr	r0, [pc, #204]	; (800a7b8 <_printf_i+0x240>)
 800a6ec:	2778      	movs	r7, #120	; 0x78
 800a6ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	6829      	ldr	r1, [r5, #0]
 800a6f6:	061f      	lsls	r7, r3, #24
 800a6f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6fc:	d402      	bmi.n	800a704 <_printf_i+0x18c>
 800a6fe:	065f      	lsls	r7, r3, #25
 800a700:	bf48      	it	mi
 800a702:	b2b6      	uxthmi	r6, r6
 800a704:	07df      	lsls	r7, r3, #31
 800a706:	bf48      	it	mi
 800a708:	f043 0320 	orrmi.w	r3, r3, #32
 800a70c:	6029      	str	r1, [r5, #0]
 800a70e:	bf48      	it	mi
 800a710:	6023      	strmi	r3, [r4, #0]
 800a712:	b91e      	cbnz	r6, 800a71c <_printf_i+0x1a4>
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	f023 0320 	bic.w	r3, r3, #32
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	2310      	movs	r3, #16
 800a71e:	e7a7      	b.n	800a670 <_printf_i+0xf8>
 800a720:	4824      	ldr	r0, [pc, #144]	; (800a7b4 <_printf_i+0x23c>)
 800a722:	e7e4      	b.n	800a6ee <_printf_i+0x176>
 800a724:	4615      	mov	r5, r2
 800a726:	e7bd      	b.n	800a6a4 <_printf_i+0x12c>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	6826      	ldr	r6, [r4, #0]
 800a72c:	6961      	ldr	r1, [r4, #20]
 800a72e:	1d18      	adds	r0, r3, #4
 800a730:	6028      	str	r0, [r5, #0]
 800a732:	0635      	lsls	r5, r6, #24
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	d501      	bpl.n	800a73c <_printf_i+0x1c4>
 800a738:	6019      	str	r1, [r3, #0]
 800a73a:	e002      	b.n	800a742 <_printf_i+0x1ca>
 800a73c:	0670      	lsls	r0, r6, #25
 800a73e:	d5fb      	bpl.n	800a738 <_printf_i+0x1c0>
 800a740:	8019      	strh	r1, [r3, #0]
 800a742:	2300      	movs	r3, #0
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	4615      	mov	r5, r2
 800a748:	e7bc      	b.n	800a6c4 <_printf_i+0x14c>
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	602a      	str	r2, [r5, #0]
 800a750:	681d      	ldr	r5, [r3, #0]
 800a752:	6862      	ldr	r2, [r4, #4]
 800a754:	2100      	movs	r1, #0
 800a756:	4628      	mov	r0, r5
 800a758:	f7f5 fd3a 	bl	80001d0 <memchr>
 800a75c:	b108      	cbz	r0, 800a762 <_printf_i+0x1ea>
 800a75e:	1b40      	subs	r0, r0, r5
 800a760:	6060      	str	r0, [r4, #4]
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	6123      	str	r3, [r4, #16]
 800a766:	2300      	movs	r3, #0
 800a768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a76c:	e7aa      	b.n	800a6c4 <_printf_i+0x14c>
 800a76e:	6923      	ldr	r3, [r4, #16]
 800a770:	462a      	mov	r2, r5
 800a772:	4649      	mov	r1, r9
 800a774:	4640      	mov	r0, r8
 800a776:	47d0      	blx	sl
 800a778:	3001      	adds	r0, #1
 800a77a:	d0ad      	beq.n	800a6d8 <_printf_i+0x160>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	079b      	lsls	r3, r3, #30
 800a780:	d413      	bmi.n	800a7aa <_printf_i+0x232>
 800a782:	68e0      	ldr	r0, [r4, #12]
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	4298      	cmp	r0, r3
 800a788:	bfb8      	it	lt
 800a78a:	4618      	movlt	r0, r3
 800a78c:	e7a6      	b.n	800a6dc <_printf_i+0x164>
 800a78e:	2301      	movs	r3, #1
 800a790:	4632      	mov	r2, r6
 800a792:	4649      	mov	r1, r9
 800a794:	4640      	mov	r0, r8
 800a796:	47d0      	blx	sl
 800a798:	3001      	adds	r0, #1
 800a79a:	d09d      	beq.n	800a6d8 <_printf_i+0x160>
 800a79c:	3501      	adds	r5, #1
 800a79e:	68e3      	ldr	r3, [r4, #12]
 800a7a0:	9903      	ldr	r1, [sp, #12]
 800a7a2:	1a5b      	subs	r3, r3, r1
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	dcf2      	bgt.n	800a78e <_printf_i+0x216>
 800a7a8:	e7eb      	b.n	800a782 <_printf_i+0x20a>
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	f104 0619 	add.w	r6, r4, #25
 800a7b0:	e7f5      	b.n	800a79e <_printf_i+0x226>
 800a7b2:	bf00      	nop
 800a7b4:	0801e1d6 	.word	0x0801e1d6
 800a7b8:	0801e1e7 	.word	0x0801e1e7

0800a7bc <__sflush_r>:
 800a7bc:	898a      	ldrh	r2, [r1, #12]
 800a7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	0710      	lsls	r0, r2, #28
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	d458      	bmi.n	800a87c <__sflush_r+0xc0>
 800a7ca:	684b      	ldr	r3, [r1, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc05      	bgt.n	800a7dc <__sflush_r+0x20>
 800a7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dc02      	bgt.n	800a7dc <__sflush_r+0x20>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7de:	2e00      	cmp	r6, #0
 800a7e0:	d0f9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7e8:	682f      	ldr	r7, [r5, #0]
 800a7ea:	6a21      	ldr	r1, [r4, #32]
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	d032      	beq.n	800a856 <__sflush_r+0x9a>
 800a7f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	075a      	lsls	r2, r3, #29
 800a7f6:	d505      	bpl.n	800a804 <__sflush_r+0x48>
 800a7f8:	6863      	ldr	r3, [r4, #4]
 800a7fa:	1ac0      	subs	r0, r0, r3
 800a7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7fe:	b10b      	cbz	r3, 800a804 <__sflush_r+0x48>
 800a800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a802:	1ac0      	subs	r0, r0, r3
 800a804:	2300      	movs	r3, #0
 800a806:	4602      	mov	r2, r0
 800a808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a80a:	6a21      	ldr	r1, [r4, #32]
 800a80c:	4628      	mov	r0, r5
 800a80e:	47b0      	blx	r6
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	d106      	bne.n	800a824 <__sflush_r+0x68>
 800a816:	6829      	ldr	r1, [r5, #0]
 800a818:	291d      	cmp	r1, #29
 800a81a:	d82b      	bhi.n	800a874 <__sflush_r+0xb8>
 800a81c:	4a29      	ldr	r2, [pc, #164]	; (800a8c4 <__sflush_r+0x108>)
 800a81e:	410a      	asrs	r2, r1
 800a820:	07d6      	lsls	r6, r2, #31
 800a822:	d427      	bmi.n	800a874 <__sflush_r+0xb8>
 800a824:	2200      	movs	r2, #0
 800a826:	6062      	str	r2, [r4, #4]
 800a828:	04d9      	lsls	r1, r3, #19
 800a82a:	6922      	ldr	r2, [r4, #16]
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	d504      	bpl.n	800a83a <__sflush_r+0x7e>
 800a830:	1c42      	adds	r2, r0, #1
 800a832:	d101      	bne.n	800a838 <__sflush_r+0x7c>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b903      	cbnz	r3, 800a83a <__sflush_r+0x7e>
 800a838:	6560      	str	r0, [r4, #84]	; 0x54
 800a83a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a83c:	602f      	str	r7, [r5, #0]
 800a83e:	2900      	cmp	r1, #0
 800a840:	d0c9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a846:	4299      	cmp	r1, r3
 800a848:	d002      	beq.n	800a850 <__sflush_r+0x94>
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7ff fbea 	bl	800a024 <_free_r>
 800a850:	2000      	movs	r0, #0
 800a852:	6360      	str	r0, [r4, #52]	; 0x34
 800a854:	e7c0      	b.n	800a7d8 <__sflush_r+0x1c>
 800a856:	2301      	movs	r3, #1
 800a858:	4628      	mov	r0, r5
 800a85a:	47b0      	blx	r6
 800a85c:	1c41      	adds	r1, r0, #1
 800a85e:	d1c8      	bne.n	800a7f2 <__sflush_r+0x36>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0c5      	beq.n	800a7f2 <__sflush_r+0x36>
 800a866:	2b1d      	cmp	r3, #29
 800a868:	d001      	beq.n	800a86e <__sflush_r+0xb2>
 800a86a:	2b16      	cmp	r3, #22
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0xb6>
 800a86e:	602f      	str	r7, [r5, #0]
 800a870:	e7b1      	b.n	800a7d6 <__sflush_r+0x1a>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	e7ad      	b.n	800a7d8 <__sflush_r+0x1c>
 800a87c:	690f      	ldr	r7, [r1, #16]
 800a87e:	2f00      	cmp	r7, #0
 800a880:	d0a9      	beq.n	800a7d6 <__sflush_r+0x1a>
 800a882:	0793      	lsls	r3, r2, #30
 800a884:	680e      	ldr	r6, [r1, #0]
 800a886:	bf08      	it	eq
 800a888:	694b      	ldreq	r3, [r1, #20]
 800a88a:	600f      	str	r7, [r1, #0]
 800a88c:	bf18      	it	ne
 800a88e:	2300      	movne	r3, #0
 800a890:	eba6 0807 	sub.w	r8, r6, r7
 800a894:	608b      	str	r3, [r1, #8]
 800a896:	f1b8 0f00 	cmp.w	r8, #0
 800a89a:	dd9c      	ble.n	800a7d6 <__sflush_r+0x1a>
 800a89c:	6a21      	ldr	r1, [r4, #32]
 800a89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8a0:	4643      	mov	r3, r8
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b0      	blx	r6
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	dc06      	bgt.n	800a8ba <__sflush_r+0xfe>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b2:	81a3      	strh	r3, [r4, #12]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	e78e      	b.n	800a7d8 <__sflush_r+0x1c>
 800a8ba:	4407      	add	r7, r0
 800a8bc:	eba8 0800 	sub.w	r8, r8, r0
 800a8c0:	e7e9      	b.n	800a896 <__sflush_r+0xda>
 800a8c2:	bf00      	nop
 800a8c4:	dfbffffe 	.word	0xdfbffffe

0800a8c8 <_fflush_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	690b      	ldr	r3, [r1, #16]
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	b913      	cbnz	r3, 800a8d8 <_fflush_r+0x10>
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	b118      	cbz	r0, 800a8e2 <_fflush_r+0x1a>
 800a8da:	6a03      	ldr	r3, [r0, #32]
 800a8dc:	b90b      	cbnz	r3, 800a8e2 <_fflush_r+0x1a>
 800a8de:	f7ff fa99 	bl	8009e14 <__sinit>
 800a8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0f3      	beq.n	800a8d2 <_fflush_r+0xa>
 800a8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ec:	07d0      	lsls	r0, r2, #31
 800a8ee:	d404      	bmi.n	800a8fa <_fflush_r+0x32>
 800a8f0:	0599      	lsls	r1, r3, #22
 800a8f2:	d402      	bmi.n	800a8fa <_fflush_r+0x32>
 800a8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f6:	f7ff fb92 	bl	800a01e <__retarget_lock_acquire_recursive>
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7ff ff5d 	bl	800a7bc <__sflush_r>
 800a902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a904:	07da      	lsls	r2, r3, #31
 800a906:	4605      	mov	r5, r0
 800a908:	d4e4      	bmi.n	800a8d4 <_fflush_r+0xc>
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	059b      	lsls	r3, r3, #22
 800a90e:	d4e1      	bmi.n	800a8d4 <_fflush_r+0xc>
 800a910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a912:	f7ff fb85 	bl	800a020 <__retarget_lock_release_recursive>
 800a916:	e7dd      	b.n	800a8d4 <_fflush_r+0xc>

0800a918 <__swbuf_r>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	460e      	mov	r6, r1
 800a91c:	4614      	mov	r4, r2
 800a91e:	4605      	mov	r5, r0
 800a920:	b118      	cbz	r0, 800a92a <__swbuf_r+0x12>
 800a922:	6a03      	ldr	r3, [r0, #32]
 800a924:	b90b      	cbnz	r3, 800a92a <__swbuf_r+0x12>
 800a926:	f7ff fa75 	bl	8009e14 <__sinit>
 800a92a:	69a3      	ldr	r3, [r4, #24]
 800a92c:	60a3      	str	r3, [r4, #8]
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	071a      	lsls	r2, r3, #28
 800a932:	d525      	bpl.n	800a980 <__swbuf_r+0x68>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	b31b      	cbz	r3, 800a980 <__swbuf_r+0x68>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	1a98      	subs	r0, r3, r2
 800a93e:	6963      	ldr	r3, [r4, #20]
 800a940:	b2f6      	uxtb	r6, r6
 800a942:	4283      	cmp	r3, r0
 800a944:	4637      	mov	r7, r6
 800a946:	dc04      	bgt.n	800a952 <__swbuf_r+0x3a>
 800a948:	4621      	mov	r1, r4
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7ff ffbc 	bl	800a8c8 <_fflush_r>
 800a950:	b9e0      	cbnz	r0, 800a98c <__swbuf_r+0x74>
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	3b01      	subs	r3, #1
 800a956:	60a3      	str	r3, [r4, #8]
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	6022      	str	r2, [r4, #0]
 800a95e:	701e      	strb	r6, [r3, #0]
 800a960:	6962      	ldr	r2, [r4, #20]
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	429a      	cmp	r2, r3
 800a966:	d004      	beq.n	800a972 <__swbuf_r+0x5a>
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	07db      	lsls	r3, r3, #31
 800a96c:	d506      	bpl.n	800a97c <__swbuf_r+0x64>
 800a96e:	2e0a      	cmp	r6, #10
 800a970:	d104      	bne.n	800a97c <__swbuf_r+0x64>
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f7ff ffa7 	bl	800a8c8 <_fflush_r>
 800a97a:	b938      	cbnz	r0, 800a98c <__swbuf_r+0x74>
 800a97c:	4638      	mov	r0, r7
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	4621      	mov	r1, r4
 800a982:	4628      	mov	r0, r5
 800a984:	f000 f806 	bl	800a994 <__swsetup_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0d5      	beq.n	800a938 <__swbuf_r+0x20>
 800a98c:	f04f 37ff 	mov.w	r7, #4294967295
 800a990:	e7f4      	b.n	800a97c <__swbuf_r+0x64>
	...

0800a994 <__swsetup_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <__swsetup_r+0xac>)
 800a998:	4605      	mov	r5, r0
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	460c      	mov	r4, r1
 800a99e:	b118      	cbz	r0, 800a9a8 <__swsetup_r+0x14>
 800a9a0:	6a03      	ldr	r3, [r0, #32]
 800a9a2:	b90b      	cbnz	r3, 800a9a8 <__swsetup_r+0x14>
 800a9a4:	f7ff fa36 	bl	8009e14 <__sinit>
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9ae:	0718      	lsls	r0, r3, #28
 800a9b0:	d422      	bmi.n	800a9f8 <__swsetup_r+0x64>
 800a9b2:	06d9      	lsls	r1, r3, #27
 800a9b4:	d407      	bmi.n	800a9c6 <__swsetup_r+0x32>
 800a9b6:	2309      	movs	r3, #9
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e034      	b.n	800aa30 <__swsetup_r+0x9c>
 800a9c6:	0758      	lsls	r0, r3, #29
 800a9c8:	d512      	bpl.n	800a9f0 <__swsetup_r+0x5c>
 800a9ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9cc:	b141      	cbz	r1, 800a9e0 <__swsetup_r+0x4c>
 800a9ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	d002      	beq.n	800a9dc <__swsetup_r+0x48>
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f7ff fb24 	bl	800a024 <_free_r>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6363      	str	r3, [r4, #52]	; 0x34
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f043 0308 	orr.w	r3, r3, #8
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b94b      	cbnz	r3, 800aa10 <__swsetup_r+0x7c>
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa06:	d003      	beq.n	800aa10 <__swsetup_r+0x7c>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 f850 	bl	800aab0 <__smakebuf_r>
 800aa10:	89a0      	ldrh	r0, [r4, #12]
 800aa12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa16:	f010 0301 	ands.w	r3, r0, #1
 800aa1a:	d00a      	beq.n	800aa32 <__swsetup_r+0x9e>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60a3      	str	r3, [r4, #8]
 800aa20:	6963      	ldr	r3, [r4, #20]
 800aa22:	425b      	negs	r3, r3
 800aa24:	61a3      	str	r3, [r4, #24]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	b943      	cbnz	r3, 800aa3c <__swsetup_r+0xa8>
 800aa2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa2e:	d1c4      	bne.n	800a9ba <__swsetup_r+0x26>
 800aa30:	bd38      	pop	{r3, r4, r5, pc}
 800aa32:	0781      	lsls	r1, r0, #30
 800aa34:	bf58      	it	pl
 800aa36:	6963      	ldrpl	r3, [r4, #20]
 800aa38:	60a3      	str	r3, [r4, #8]
 800aa3a:	e7f4      	b.n	800aa26 <__swsetup_r+0x92>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	e7f7      	b.n	800aa30 <__swsetup_r+0x9c>
 800aa40:	200000a4 	.word	0x200000a4

0800aa44 <_sbrk_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_sbrk_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f9 feaa 	bl	80047a8 <_sbrk>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_sbrk_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_sbrk_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	2000a650 	.word	0x2000a650

0800aa64 <__swhatbuf_r>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	460c      	mov	r4, r1
 800aa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	b096      	sub	sp, #88	; 0x58
 800aa70:	4615      	mov	r5, r2
 800aa72:	461e      	mov	r6, r3
 800aa74:	da0d      	bge.n	800aa92 <__swhatbuf_r+0x2e>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa7c:	f04f 0100 	mov.w	r1, #0
 800aa80:	bf0c      	ite	eq
 800aa82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa86:	2340      	movne	r3, #64	; 0x40
 800aa88:	2000      	movs	r0, #0
 800aa8a:	6031      	str	r1, [r6, #0]
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	b016      	add	sp, #88	; 0x58
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	466a      	mov	r2, sp
 800aa94:	f000 f848 	bl	800ab28 <_fstat_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	dbec      	blt.n	800aa76 <__swhatbuf_r+0x12>
 800aa9c:	9901      	ldr	r1, [sp, #4]
 800aa9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aaa2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aaa6:	4259      	negs	r1, r3
 800aaa8:	4159      	adcs	r1, r3
 800aaaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaae:	e7eb      	b.n	800aa88 <__swhatbuf_r+0x24>

0800aab0 <__smakebuf_r>:
 800aab0:	898b      	ldrh	r3, [r1, #12]
 800aab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aab4:	079d      	lsls	r5, r3, #30
 800aab6:	4606      	mov	r6, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	d507      	bpl.n	800aacc <__smakebuf_r+0x1c>
 800aabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	2301      	movs	r3, #1
 800aac6:	6163      	str	r3, [r4, #20]
 800aac8:	b002      	add	sp, #8
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	ab01      	add	r3, sp, #4
 800aace:	466a      	mov	r2, sp
 800aad0:	f7ff ffc8 	bl	800aa64 <__swhatbuf_r>
 800aad4:	9900      	ldr	r1, [sp, #0]
 800aad6:	4605      	mov	r5, r0
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff fb0f 	bl	800a0fc <_malloc_r>
 800aade:	b948      	cbnz	r0, 800aaf4 <__smakebuf_r+0x44>
 800aae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d4ef      	bmi.n	800aac8 <__smakebuf_r+0x18>
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	e7e3      	b.n	800aabc <__smakebuf_r+0xc>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	6020      	str	r0, [r4, #0]
 800aaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	9b00      	ldr	r3, [sp, #0]
 800ab00:	6163      	str	r3, [r4, #20]
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	6120      	str	r0, [r4, #16]
 800ab06:	b15b      	cbz	r3, 800ab20 <__smakebuf_r+0x70>
 800ab08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 f81d 	bl	800ab4c <_isatty_r>
 800ab12:	b128      	cbz	r0, 800ab20 <__smakebuf_r+0x70>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	f023 0303 	bic.w	r3, r3, #3
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	431d      	orrs	r5, r3
 800ab24:	81a5      	strh	r5, [r4, #12]
 800ab26:	e7cf      	b.n	800aac8 <__smakebuf_r+0x18>

0800ab28 <_fstat_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_fstat_r+0x20>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f7f9 fe0e 	bl	8004756 <_fstat>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d102      	bne.n	800ab44 <_fstat_r+0x1c>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b103      	cbz	r3, 800ab44 <_fstat_r+0x1c>
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	2000a650 	.word	0x2000a650

0800ab4c <_isatty_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d06      	ldr	r5, [pc, #24]	; (800ab68 <_isatty_r+0x1c>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	f7f9 fe0d 	bl	8004776 <_isatty>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d102      	bne.n	800ab66 <_isatty_r+0x1a>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	b103      	cbz	r3, 800ab66 <_isatty_r+0x1a>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	2000a650 	.word	0x2000a650

0800ab6c <_init>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr

0800ab78 <_fini>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr
