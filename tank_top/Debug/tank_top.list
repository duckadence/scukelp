
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013580  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba04  0801ba04  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba04  0801ba04  0002ba04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba0c  0801ba0c  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba0c  0801ba0c  0002ba0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba10  0801ba10  0002ba10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801ba14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200000a8  0801babc  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0801babc  00030584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198bb  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003415  00000000  00000000  000499d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0004cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d58  00000000  00000000  0004e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fca  00000000  00000000  00071068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e003f  00000000  00000000  0008b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001023  00000000  00000000  0016b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060d4  00000000  00000000  0016c094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00172168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800846c 	.word	0x0800846c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800846c 	.word	0x0800846c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d64:	899a      	ldrh	r2, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	819a      	strh	r2, [r3, #12]
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0801b95c 	.word	0x0801b95c

08000d90 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dac:	899a      	ldrh	r2, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	819a      	strh	r2, [r3, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	0801b94c 	.word	0x0801b94c

08000dd8 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000df4:	899a      	ldrh	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	819a      	strh	r2, [r3, #12]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0801b93c 	.word	0x0801b93c

08000e20 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e3c:	899a      	ldrh	r2, [r3, #12]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	819a      	strh	r2, [r3, #12]
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0801b92c 	.word	0x0801b92c

08000e68 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e82:	899a      	ldrh	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	819a      	strh	r2, [r3, #12]
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	0801b91c 	.word	0x0801b91c

08000eac <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ec6:	899a      	ldrh	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	819a      	strh	r2, [r3, #12]
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	0801b90c 	.word	0x0801b90c

08000ef0 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f0a:	899a      	ldrh	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	819a      	strh	r2, [r3, #12]
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	0801b8fc 	.word	0x0801b8fc

08000f34 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2210      	movs	r2, #16
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f4e:	899a      	ldrh	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	819a      	strh	r2, [r3, #12]
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	0801b8ec 	.word	0x0801b8ec

08000f78 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <arm_rfft_fast_init_32_f32+0x14>
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e013      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffd0 	bl	8000f34 <arm_cfft_init_16_f32>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	e006      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <arm_rfft_fast_init_32_f32+0x44>)
 8000fb0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0801396c 	.word	0x0801396c

08000fc0 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <arm_rfft_fast_init_64_f32+0x14>
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e013      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff8a 	bl	8000ef0 <arm_cfft_init_32_f32>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	e006      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <arm_rfft_fast_init_64_f32+0x44>)
 8000ff8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	080139ec 	.word	0x080139ec

08001008 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <arm_rfft_fast_init_128_f32+0x14>
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e013      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff44 	bl	8000eac <arm_cfft_init_64_f32>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	e006      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <arm_rfft_fast_init_128_f32+0x44>)
 8001040:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08013aec 	.word	0x08013aec

08001050 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <arm_rfft_fast_init_256_f32+0x14>
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e014      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fefe 	bl	8000e68 <arm_cfft_init_128_f32>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	e007      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <arm_rfft_fast_init_256_f32+0x48>)
 800108a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08013cec 	.word	0x08013cec

0800109c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <arm_rfft_fast_init_512_f32+0x14>
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e014      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb4 	bl	8000e20 <arm_cfft_init_256_f32>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	e007      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <arm_rfft_fast_init_512_f32+0x48>)
 80010d6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	080140ec 	.word	0x080140ec

080010e8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <arm_rfft_fast_init_1024_f32+0x14>
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e014      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe6a 	bl	8000dd8 <arm_cfft_init_512_f32>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	e007      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <arm_rfft_fast_init_1024_f32+0x48>)
 8001122:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	080148ec 	.word	0x080148ec

08001134 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <arm_rfft_fast_init_2048_f32+0x14>
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e014      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe20 	bl	8000d90 <arm_cfft_init_1024_f32>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	e007      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001168:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <arm_rfft_fast_init_2048_f32+0x48>)
 800116e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	080158ec 	.word	0x080158ec

08001180 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <arm_rfft_fast_init_4096_f32+0x14>
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e014      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd6 	bl	8000d48 <arm_cfft_init_2048_f32>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	e007      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <arm_rfft_fast_init_4096_f32+0x48>)
 80011ba:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	080178ec 	.word	0x080178ec

080011cc <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011de:	d023      	beq.n	8001228 <arm_rfft_fast_init_f32+0x5c>
 80011e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e4:	dc50      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ea:	d023      	beq.n	8001234 <arm_rfft_fast_init_f32+0x68>
 80011ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f0:	dc4a      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d023      	beq.n	8001240 <arm_rfft_fast_init_f32+0x74>
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fc:	dc44      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001202:	d023      	beq.n	800124c <arm_rfft_fast_init_f32+0x80>
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	dc3e      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800120a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800120e:	d023      	beq.n	8001258 <arm_rfft_fast_init_f32+0x8c>
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	dc38      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 8001216:	2b80      	cmp	r3, #128	; 0x80
 8001218:	d024      	beq.n	8001264 <arm_rfft_fast_init_f32+0x98>
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	dc34      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800121e:	2b20      	cmp	r3, #32
 8001220:	d02c      	beq.n	800127c <arm_rfft_fast_init_f32+0xb0>
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d024      	beq.n	8001270 <arm_rfft_fast_init_f32+0xa4>
 8001226:	e02f      	b.n	8001288 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffa9 	bl	8001180 <arm_rfft_fast_init_4096_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
    break;
 8001232:	e02c      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff7d 	bl	8001134 <arm_rfft_fast_init_2048_f32>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
    break;
 800123e:	e026      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff51 	bl	80010e8 <arm_rfft_fast_init_1024_f32>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
    break;
 800124a:	e020      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff25 	bl	800109c <arm_rfft_fast_init_512_f32>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    break;
 8001256:	e01a      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fef9 	bl	8001050 <arm_rfft_fast_init_256_f32>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
    break;
 8001262:	e014      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fecf 	bl	8001008 <arm_rfft_fast_init_128_f32>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
    break;
 800126e:	e00e      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fea5 	bl	8000fc0 <arm_rfft_fast_init_64_f32>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
    break;
 800127a:	e008      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe7b 	bl	8000f78 <arm_rfft_fast_init_32_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
    break;
 8001286:	e002      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e001      	b.n	8001292 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fc8b 	bl	8001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f858 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f000 f9b2 	bl	8001610 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012ac:	f000 f90a 	bl	80014c4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012b0:	f000 f8a4 	bl	80013fc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 f97a 	bl	80015ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	4820      	ldr	r0, [pc, #128]	; (8001340 <main+0xa4>)
 80012be:	f7ff ff85 	bl	80011cc <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012c2:	217f      	movs	r1, #127	; 0x7f
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <main+0xa8>)
 80012c6:	f001 fe57 	bl	8002f78 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <main+0xac>)
 80012d0:	481c      	ldr	r0, [pc, #112]	; (8001344 <main+0xa8>)
 80012d2:	f001 f83b 	bl	800234c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <main+0xb0>)
 80012d8:	f003 fc2c 	bl	8004b34 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init();
 80012dc:	f005 fc94 	bl	8006c08 <STEPPERS_Init>
	//STEPPERS_Init_TMR(&htim15);
	STEPPER_SetSpeed(STEPPER_MOTOR1, 14);
 80012e0:	210e      	movs	r1, #14
 80012e2:	2000      	movs	r0, #0
 80012e4:	f005 fdcc 	bl	8006e80 <STEPPER_SetSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Stepper1_Dir = DIR_CW;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <main+0xb4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
		STEPPER_Step_Blocking(STEPPER_MOTOR1, 1000, Stepper1_Dir);
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <main+0xb4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f8:	2000      	movs	r0, #0
 80012fa:	f006 f87b 	bl	80073f4 <STEPPER_Step_Blocking>
		printf("Direction: %d\r\n", Stepper1_Dir);
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <main+0xb4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <main+0xb8>)
 8001306:	f006 fa3b 	bl	8007780 <iprintf>

		HAL_Delay(1000);
 800130a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130e:	f000 fcc9 	bl	8001ca4 <HAL_Delay>

		Stepper1_Dir = DIR_CCW;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <main+0xb4>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
		STEPPER_Step_Blocking(STEPPER_MOTOR1, 1000, Stepper1_Dir);
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <main+0xb4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001322:	2000      	movs	r0, #0
 8001324:	f006 f866 	bl	80073f4 <STEPPER_Step_Blocking>
		printf("Direction: %d\r\n", Stepper1_Dir);
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <main+0xb4>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <main+0xb8>)
 8001330:	f006 fa26 	bl	8007780 <iprintf>

		HAL_Delay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001338:	f000 fcb4 	bl	8001ca4 <HAL_Delay>
		Stepper1_Dir = DIR_CW;
 800133c:	e7d4      	b.n	80012e8 <main+0x4c>
 800133e:	bf00      	nop
 8001340:	20000400 	.word	0x20000400
 8001344:	200000c4 	.word	0x200000c4
 8001348:	200001fc 	.word	0x200001fc
 800134c:	20000128 	.word	0x20000128
 8001350:	20000418 	.word	0x20000418
 8001354:	08008484 	.word	0x08008484

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	; 0x58
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2244      	movs	r2, #68	; 0x44
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fa5f 	bl	800782a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800137a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800137e:	f002 fa0b 	bl	8003798 <HAL_PWREx_ControlVoltageScaling>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001388:	f000 f9d6 	bl	8001738 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800138c:	2310      	movs	r3, #16
 800138e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013a8:	2328      	movs	r3, #40	; 0x28
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fa41 	bl	8003844 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013c8:	f000 f9b6 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2303      	movs	r3, #3
 80013d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2104      	movs	r1, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fe41 	bl	800406c <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013f0:	f000 f9a2 	bl	8001738 <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3758      	adds	r7, #88	; 0x58
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <MX_ADC1_Init+0xc0>)
 8001416:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001432:	2204      	movs	r2, #4
 8001434:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800143e:	2200      	movs	r2, #0
 8001440:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001444:	2201      	movs	r2, #1
 8001446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001452:	2200      	movs	r2, #0
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001458:	2200      	movs	r2, #0
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_ADC1_Init+0xbc>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_ADC1_Init+0xbc>)
 8001474:	f000 fe28 	bl	80020c8 <HAL_ADC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800147e:	f000 f95b 	bl	8001738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_ADC1_Init+0xc4>)
 8001484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	2306      	movs	r3, #6
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800148e:	237f      	movs	r3, #127	; 0x7f
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001492:	2304      	movs	r3, #4
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_ADC1_Init+0xbc>)
 80014a0:	f000 ffe2 	bl	8002468 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014aa:	f000 f945 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000c4 	.word	0x200000c4
 80014bc:	50040000 	.word	0x50040000
 80014c0:	2e300800 	.word	0x2e300800

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM2_Init+0xe4>)
 80014f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM2_Init+0xe4>)
 8001500:	2203      	movs	r2, #3
 8001502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM2_Init+0xe4>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_TIM2_Init+0xe4>)
 800150c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_TIM2_Init+0xe4>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <MX_TIM2_Init+0xe4>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <MX_TIM2_Init+0xe4>)
 8001520:	f003 fab0 	bl	8004a84 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800152a:	f000 f905 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_TIM2_Init+0xe4>)
 800153c:	f003 fdc6 	bl	80050cc <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001546:	f000 f8f7 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800154a:	4817      	ldr	r0, [pc, #92]	; (80015a8 <MX_TIM2_Init+0xe4>)
 800154c:	f003 fb46 	bl	8004bdc <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001556:	f000 f8ef 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_TIM2_Init+0xe4>)
 800156a:	f004 fa1d 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001574:	f000 f8e0 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_TIM2_Init+0xe4>)
 8001590:	f003 fc88 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800159a:	f000 f8cd 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	; 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000128 	.word	0x20000128

080015ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <MX_USART2_UART_Init+0x60>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80015ee:	2300      	movs	r3, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015f6:	f005 fa70 	bl	8006ada <HAL_RS485Ex_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f000 f89a 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000174 	.word	0x20000174
 800160c:	40004400 	.word	0x40004400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_GPIO_Init+0xa4>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <MX_GPIO_Init+0xa4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <MX_GPIO_Init+0xa4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_GPIO_Init+0xa4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <MX_GPIO_Init+0xa4>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_GPIO_Init+0xa4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, motorcontrol1_Pin|motorcontrol2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f002 f874 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorcontrol4_Pin|motorcontrol3_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2130      	movs	r1, #48	; 0x30
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <MX_GPIO_Init+0xa8>)
 800166a:	f002 f86f 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motorcontrol1_Pin motorcontrol2_Pin */
  GPIO_InitStruct.Pin = motorcontrol1_Pin|motorcontrol2_Pin;
 800166e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f001 fef5 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : motorcontrol4_Pin motorcontrol3_Pin */
  GPIO_InitStruct.Pin = motorcontrol4_Pin|motorcontrol3_Pin;
 800168e:	2330      	movs	r3, #48	; 0x30
 8001690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4619      	mov	r1, r3
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_GPIO_Init+0xa8>)
 80016a6:	f001 fee7 	bl	8003478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	48000400 	.word	0x48000400

080016bc <HAL_ADC_ConvHalfCpltCallback>:
	}

}

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200003fc 	.word	0x200003fc

080016dc <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200003fd 	.word	0x200003fd

080016fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 fed3 	bl	80074b0 <STEPPER_TMR_OVF_ISR>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800171c:	1d39      	adds	r1, r7, #4
 800171e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001722:	2201      	movs	r2, #1
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <__io_putchar+0x20>)
 8001726:	f004 f9c3 	bl	8005ab0 <HAL_UART_Transmit>

	return ch;
 800172a:	687b      	ldr	r3, [r7, #4]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000174 	.word	0x20000174

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6613      	str	r3, [r2, #96]	; 0x60
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x44>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09e      	sub	sp, #120	; 0x78
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2254      	movs	r2, #84	; 0x54
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 f83c 	bl	800782a <memset>
  if(hadc->Instance==ADC1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_ADC_MspInit+0xc0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d143      	bne.n	8001844 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017c6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80017d0:	2310      	movs	r3, #16
 80017d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017d4:	2307      	movs	r3, #7
 80017d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017dc:	2302      	movs	r3, #2
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fe62 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80017f6:	f7ff ff9f 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 8001800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_ADC_MspInit+0xc4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182a:	2340      	movs	r3, #64	; 0x40
 800182c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800182e:	230b      	movs	r3, #11
 8001830:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f001 fe1a 	bl	8003478 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	3778      	adds	r7, #120	; 0x78
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	50040000 	.word	0x50040000
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d113      	bne.n	800188e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_Base_MspInit+0x44>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_TIM_Base_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x44>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201c      	movs	r0, #28
 8001884:	f001 fcb3 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001888:	201c      	movs	r0, #28
 800188a:	f001 fccc 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09e      	sub	sp, #120	; 0x78
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2254      	movs	r2, #84	; 0x54
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 ffb4 	bl	800782a <memset>
  if(huart->Instance==USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <HAL_UART_MspInit+0xdc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d150      	bne.n	800196e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fdeb 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e4:	f7ff ff28 	bl	8001738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	4a23      	ldr	r2, [pc, #140]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_UART_MspInit+0xe0>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_UART_MspInit+0xe0>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_UART_MspInit+0xe0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0xe0>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001918:	2306      	movs	r3, #6
 800191a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001928:	2307      	movs	r3, #7
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f001 fd9f 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800193a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800194c:	2303      	movs	r3, #3
 800194e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f001 fd8d 	bl	8003478 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2026      	movs	r0, #38	; 0x26
 8001964:	f001 fc43 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001968:	2026      	movs	r0, #38	; 0x26
 800196a:	f001 fc5c 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3778      	adds	r7, #120	; 0x78
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f94a 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM2_IRQHandler+0x10>)
 80019da:	f003 f960 	bl	8004c9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000128 	.word	0x20000128

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART2_IRQHandler+0x10>)
 80019ee:	f004 f8e9 	bl	8005bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000174 	.word	0x20000174

080019fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e00a      	b.n	8001a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0e:	f3af 8000 	nop.w
 8001a12:	4601      	mov	r1, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf0      	blt.n	8001a0e <_read+0x12>
  }

  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e009      	b.n	8001a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe5f 	bl	8001714 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf1      	blt.n	8001a48 <_write+0x12>
  }
  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f005 fede 	bl	80078c8 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20010000 	.word	0x20010000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	2000041c 	.word	0x2000041c
 8001b40:	20000588 	.word	0x20000588

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	; (8001bb4 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f005 fe9d 	bl	80078d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7ff fb7f 	bl	800129c <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001bac:	0801ba14 	.word	0x0801ba14
  ldr r2, =_sbss
 8001bb0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001bb4:	20000584 	.word	0x20000584

08001bb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_IRQHandler>

08001bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f001 fb07 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f80e 	bl	8001bec <HAL_InitTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e001      	b.n	8001be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bdc:	f7ff fdb2 	bl	8001744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_InitTick+0x70>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 fb13 	bl	8003242 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d809      	bhi.n	8001c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f001 fadd 	bl	80031ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_InitTick+0x74>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e004      	b.n	8001c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e001      	b.n	8001c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000420 	.word	0x20000420

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000420 	.word	0x20000420

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008

08001cec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <LL_ADC_SetOffset+0x44>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	03fff000 	.word	0x03fff000

08001d9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3360      	adds	r3, #96	; 0x60
 8001daa:	461a      	mov	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3360      	adds	r3, #96	; 0x60
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3330      	adds	r3, #48	; 0x30
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	4413      	add	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	211f      	movs	r1, #31
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0e9b      	lsrs	r3, r3, #26
 8001e5c:	f003 011f 	and.w	r1, r3, #31
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	0e5b      	lsrs	r3, r3, #25
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0d1b      	lsrs	r3, r3, #20
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0d1b      	lsrs	r3, r3, #20
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0318 	and.w	r3, r3, #24
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ef8:	40d9      	lsrs	r1, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	400b      	ands	r3, r1
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	431a      	orrs	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	0007ffff 	.word	0x0007ffff

08001f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff4:	f043 0202 	orr.w	r2, r3, #2
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <LL_ADC_IsEnabled+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_IsEnabled+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d101      	bne.n	8002046 <LL_ADC_IsDisableOngoing+0x18>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <LL_ADC_IsDisableOngoing+0x1a>
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002068:	f043 0204 	orr.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b04      	cmp	r3, #4
 800208e:	d101      	bne.n	8002094 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d101      	bne.n	80020ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e126      	b.n	8002330 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d109      	bne.n	8002104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fb4b 	bl	800178c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff19 	bl	8001f40 <LL_ADC_IsDeepPowerDownEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff feff 	bl	8001f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff34 	bl	8001f90 <LL_ADC_IsInternalRegulatorEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff18 	bl	8001f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002138:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_ADC_Init+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	4a7f      	ldr	r2, [pc, #508]	; (800233c <HAL_ADC_Init+0x274>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	3301      	adds	r3, #1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800214c:	e002      	b.n	8002154 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b01      	subs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff16 	bl	8001f90 <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff76 	bl	800207c <LL_ADC_REG_IsConversionOngoing>
 8002190:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80bf 	bne.w	800231e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80bb 	bne.w	800231e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff23 	bl	8002008 <LL_ADC_IsEnabled>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c8:	485d      	ldr	r0, [pc, #372]	; (8002340 <HAL_ADC_Init+0x278>)
 80021ca:	f7ff ff1d 	bl	8002008 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4619      	mov	r1, r3
 80021da:	485a      	ldr	r0, [pc, #360]	; (8002344 <HAL_ADC_Init+0x27c>)
 80021dc:	f7ff fd86 	bl	8001cec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7e5b      	ldrb	r3, [r3, #25]
 80021e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d106      	bne.n	800221c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	3b01      	subs	r3, #1
 8002214:	045b      	lsls	r3, r3, #17
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_ADC_Init+0x280>)
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	430b      	orrs	r3, r1
 800224a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff26 	bl	80020a2 <LL_ADC_INJ_IsConversionOngoing>
 8002256:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d13d      	bne.n	80022da <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d13a      	bne.n	80022da <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002268:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002270:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002280:	f023 0302 	bic.w	r3, r3, #2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	430b      	orrs	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002294:	2b01      	cmp	r3, #1
 8002296:	d118      	bne.n	80022ca <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022ba:	430a      	orrs	r2, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	e007      	b.n	80022da <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10c      	bne.n	80022fc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f023 010f 	bic.w	r1, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
 80022fa:	e007      	b.n	800230c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020f 	bic.w	r2, r2, #15
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f023 0303 	bic.w	r3, r3, #3
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
 800231c:	e007      	b.n	800232e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800232e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000000 	.word	0x20000000
 800233c:	053e2d63 	.word	0x053e2d63
 8002340:	50040000 	.word	0x50040000
 8002344:	50040300 	.word	0x50040300
 8002348:	fff0c007 	.word	0xfff0c007

0800234c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe8d 	bl	800207c <LL_ADC_REG_IsConversionOngoing>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d167      	bne.n	8002438 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Start_DMA+0x2a>
 8002372:	2302      	movs	r3, #2
 8002374:	e063      	b.n	800243e <HAL_ADC_Start_DMA+0xf2>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fc54 	bl	8002c2c <ADC_Enable>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14f      	bne.n	800242e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f023 0206 	bic.w	r2, r3, #6
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_ADC_Start_DMA+0xfc>)
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_ADC_Start_DMA+0x100>)
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_ADC_Start_DMA+0x104>)
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	221c      	movs	r2, #28
 80023e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0210 	orr.w	r2, r2, #16
 80023f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3340      	adds	r3, #64	; 0x40
 8002414:	4619      	mov	r1, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f000 ff1e 	bl	800325a <HAL_DMA_Start_IT>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fe14 	bl	8002054 <LL_ADC_REG_StartConversion>
 800242c:	e006      	b.n	800243c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002436:	e001      	b.n	800243c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	08002df7 	.word	0x08002df7
 800244c:	08002ecf 	.word	0x08002ecf
 8002450:	08002eeb 	.word	0x08002eeb

08002454 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0b6      	sub	sp, #216	; 0xd8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x22>
 8002486:	2302      	movs	r3, #2
 8002488:	e3bb      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x79a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fdf0 	bl	800207c <LL_ADC_REG_IsConversionOngoing>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 83a0 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d824      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	3b02      	subs	r3, #2
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d81b      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x8e>
 80024be:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <HAL_ADC_ConfigChannel+0x5c>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024ed 	.word	0x080024ed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024d4:	230c      	movs	r3, #12
 80024d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024da:	e010      	b.n	80024fe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80024dc:	2312      	movs	r3, #18
 80024de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024e2:	e00c      	b.n	80024fe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80024e4:	2318      	movs	r3, #24
 80024e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024ea:	e008      	b.n	80024fe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024f4:	e003      	b.n	80024fe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024f6:	2306      	movs	r3, #6
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024fc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800250c:	f7ff fc8a 	bl	8001e24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fdb1 	bl	800207c <LL_ADC_REG_IsConversionOngoing>
 800251a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fdbd 	bl	80020a2 <LL_ADC_INJ_IsConversionOngoing>
 8002528:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 81a4 	bne.w	800287e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 819f 	bne.w	800287e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	461a      	mov	r2, r3
 800254e:	f7ff fc95 	bl	8001e7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d00a      	beq.n	800258a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002584:	f7ff fbe6 	bl	8001d54 <LL_ADC_SetOffset>
 8002588:	e179      	b.n	800287e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fc03 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x14e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fbf8 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x18c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fbed 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e004      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80025e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1a4>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	e018      	b.n	800263e <HAL_ADC_ConfigChannel+0x1d6>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e004      	b.n	800263e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fbbc 	bl	8001dc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fba0 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_ADC_ConfigChannel+0x214>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fb95 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	e01e      	b.n	80026ba <HAL_ADC_ConfigChannel+0x252>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fb8a 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800269a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800269e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e004      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x26a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	e018      	b.n	8002704 <HAL_ADC_ConfigChannel+0x29c>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80026e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80026ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e004      	b.n	8002704 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80026fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002704:	429a      	cmp	r2, r3
 8002706:	d106      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fb59 	bl	8001dc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fb3d 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x2da>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2102      	movs	r1, #2
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fb32 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	e01e      	b.n	8002780 <HAL_ADC_ConfigChannel+0x318>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fb27 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e004      	b.n	800277e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x330>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	e014      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x35a>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80027ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e004      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d106      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fafa 	bl	8001dc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fade 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x398>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fad3 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	f003 021f 	and.w	r2, r3, #31
 80027fe:	e017      	b.n	8002830 <HAL_ADC_ConfigChannel+0x3c8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2103      	movs	r1, #3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fac8 	bl	8001d9c <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800281c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e003      	b.n	800282e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x3e0>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	e011      	b.n	800286c <HAL_ADC_ConfigChannel+0x404>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800285a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e003      	b.n	800286c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2103      	movs	r1, #3
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff faa5 	bl	8001dc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fbc0 	bl	8002008 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 8140 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	461a      	mov	r2, r3
 800289e:	f7ff fb19 	bl	8001ed4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a8f      	ldr	r2, [pc, #572]	; (8002ae4 <HAL_ADC_ConfigChannel+0x67c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	f040 8131 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x46e>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	bf94      	ite	ls
 80028ce:	2301      	movls	r3, #1
 80028d0:	2300      	movhi	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e019      	b.n	800290a <HAL_ADC_ConfigChannel+0x4a2>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80028e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b09      	cmp	r3, #9
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290a:	2b00      	cmp	r3, #0
 800290c:	d079      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_ADC_ConfigChannel+0x4c2>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	3301      	adds	r3, #1
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002928:	e015      	b.n	8002956 <HAL_ADC_ConfigChannel+0x4ee>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x50e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	e017      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x53e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	ea42 0103 	orr.w	r1, r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x564>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	051b      	lsls	r3, r3, #20
 80029ca:	e018      	b.n	80029fe <HAL_ADC_ConfigChannel+0x596>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fe:	430b      	orrs	r3, r1
 8002a00:	e081      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x5b6>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	3301      	adds	r3, #1
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1c:	e015      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x5e2>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x602>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2101      	movs	r1, #1
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	e017      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x632>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	61bb      	str	r3, [r7, #24]
  return result;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e003      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	ea42 0103 	orr.w	r1, r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x65e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	051b      	lsls	r3, r3, #20
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	e01e      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x69c>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
  return result;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e006      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x688>
 8002ae2:	bf00      	nop
 8002ae4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7ff f9b6 	bl	8001e7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d06c      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1c:	483c      	ldr	r0, [pc, #240]	; (8002c10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b1e:	f7ff f90b 	bl	8001d38 <LL_ADC_GetCommonPathInternalCh>
 8002b22:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d127      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d121      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a35      	ldr	r2, [pc, #212]	; (8002c18 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d157      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b4e:	4619      	mov	r1, r3
 8002b50:	482f      	ldr	r0, [pc, #188]	; (8002c10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b52:	f7ff f8de 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_ADC_ConfigChannel+0x7b4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b7e:	e03a      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10d      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d12a      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4819      	ldr	r0, [pc, #100]	; (8002c10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bac:	f7ff f8b1 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb0:	e021      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d11c      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <HAL_ADC_ConfigChannel+0x7b0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d111      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bde:	f7ff f898 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
 8002be2:	e008      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	37d8      	adds	r7, #216	; 0xd8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	80080000 	.word	0x80080000
 8002c10:	50040300 	.word	0x50040300
 8002c14:	c7520000 	.word	0xc7520000
 8002c18:	50040000 	.word	0x50040000
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	053e2d63 	.word	0x053e2d63
 8002c24:	cb840000 	.word	0xcb840000
 8002c28:	80000001 	.word	0x80000001

08002c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f9e3 	bl	8002008 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d169      	bne.n	8002d1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <ADC_Enable+0xfc>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e055      	b.n	8002d1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f99e 	bl	8001fb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c7c:	482b      	ldr	r0, [pc, #172]	; (8002d2c <ADC_Enable+0x100>)
 8002c7e:	f7ff f85b 	bl	8001d38 <LL_ADC_GetCommonPathInternalCh>
 8002c82:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <ADC_Enable+0x104>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <ADC_Enable+0x108>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ca6:	e002      	b.n	8002cae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f9      	bne.n	8002ca8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe ffea 	bl	8001c8c <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cba:	e028      	b.n	8002d0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f9a1 	bl	8002008 <LL_ADC_IsEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f971 	bl	8001fb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd6:	f7fe ffd9 	bl	8001c8c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d914      	bls.n	8002d0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d00d      	beq.n	8002d0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d1cf      	bne.n	8002cbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	8000003f 	.word	0x8000003f
 8002d2c:	50040300 	.word	0x50040300
 8002d30:	20000000 	.word	0x20000000
 8002d34:	053e2d63 	.word	0x053e2d63

08002d38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f972 	bl	800202e <LL_ADC_IsDisableOngoing>
 8002d4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff f959 	bl	8002008 <LL_ADC_IsEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d047      	beq.n	8002dec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d144      	bne.n	8002dec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030d 	and.w	r3, r3, #13
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10c      	bne.n	8002d8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f933 	bl	8001fe0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d82:	f7fe ff83 	bl	8001c8c <HAL_GetTick>
 8002d86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d88:	e029      	b.n	8002dde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f043 0210 	orr.w	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e023      	b.n	8002dee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da6:	f7fe ff71 	bl	8001c8c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d914      	bls.n	8002dde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1dc      	bne.n	8002da6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d14b      	bne.n	8002ea8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d021      	beq.n	8002e6e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe ffe5 	bl	8001dfe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d032      	beq.n	8002ea0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d12b      	bne.n	8002ea0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11f      	bne.n	8002ea0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002e6c:	e018      	b.n	8002ea0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7fe fc1b 	bl	80016dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ea6:	e00e      	b.n	8002ec6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff facd 	bl	8002454 <HAL_ADC_ErrorCallback>
}
 8002eba:	e004      	b.n	8002ec6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7fe fbed 	bl	80016bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fa9f 	bl	8002454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <LL_ADC_StartCalibration>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e04d      	b.n	8003030 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fecb 	bl	8002d38 <ADC_Disable>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d136      	bne.n	800301a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fb4:	f023 0302 	bic.w	r3, r3, #2
 8002fb8:	f043 0202 	orr.w	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffa9 	bl	8002f1e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fcc:	e014      	b.n	8002ff8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002fda:	d30d      	bcc.n	8002ff8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f023 0312 	bic.w	r3, r3, #18
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e01b      	b.n	8003030 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ffa7 	bl	8002f50 <LL_ADC_IsCalibrationOnGoing>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e2      	bne.n	8002fce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	f023 0303 	bic.w	r3, r3, #3
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
 8003018:	e005      	b.n	8003026 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff3e 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff8e 	bl	800312c <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5d 	bl	80030d8 <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff31 	bl	800309c <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa2 	bl	8003194 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_DMA_Start_IT+0x20>
 8003276:	2302      	movs	r3, #2
 8003278:	e04b      	b.n	8003312 <HAL_DMA_Start_IT+0xb8>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d13a      	bne.n	8003304 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f8b0 	bl	8003418 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 020e 	orr.w	r2, r2, #14
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 020a 	orr.w	r2, r2, #10
 80032f0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e005      	b.n	8003310 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d008      	beq.n	8003344 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e022      	b.n	800338a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020e 	bic.w	r2, r2, #14
 8003352:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f003 021c 	and.w	r2, r3, #28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d005      	beq.n	80033ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e029      	b.n	800340e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 020e 	bic.w	r2, r2, #14
 80033c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f003 021c 	and.w	r2, r3, #28
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
    }
  }
  return status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f003 021c 	and.w	r2, r3, #28
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d108      	bne.n	800345c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800345a:	e007      	b.n	800346c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003486:	e148      	b.n	800371a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 813a 	beq.w	8003714 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d005      	beq.n	80034b8 <HAL_GPIO_Init+0x40>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d130      	bne.n	800351a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ee:	2201      	movs	r2, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0201 	and.w	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d017      	beq.n	8003556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d123      	bne.n	80035aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	6939      	ldr	r1, [r7, #16]
 80035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8094 	beq.w	8003714 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ec:	4b52      	ldr	r3, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	4a51      	ldr	r2, [pc, #324]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6613      	str	r3, [r2, #96]	; 0x60
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x2c4>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800362e:	d00d      	beq.n	800364c <HAL_GPIO_Init+0x1d4>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a43      	ldr	r2, [pc, #268]	; (8003740 <HAL_GPIO_Init+0x2c8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <HAL_GPIO_Init+0x1d0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_GPIO_Init+0x2cc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_GPIO_Init+0x1cc>
 8003640:	2302      	movs	r3, #2
 8003642:	e004      	b.n	800364e <HAL_GPIO_Init+0x1d6>
 8003644:	2307      	movs	r3, #7
 8003646:	e002      	b.n	800364e <HAL_GPIO_Init+0x1d6>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_GPIO_Init+0x1d6>
 800364c:	2300      	movs	r3, #0
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	f002 0203 	and.w	r2, r2, #3
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	4093      	lsls	r3, r2
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800365e:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_GPIO_Init+0x2c4>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003690:	4a2d      	ldr	r2, [pc, #180]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f aeaf 	bne.w	8003488 <HAL_GPIO_Init+0x10>
  }
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	40010000 	.word	0x40010000
 8003740:	48000400 	.word	0x48000400
 8003744:	48000800 	.word	0x48000800
 8003748:	40010400 	.word	0x40010400

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003768:	e002      	b.n	8003770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <HAL_PWREx_GetVoltageRange+0x18>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40007000 	.word	0x40007000

08003798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a6:	d130      	bne.n	800380a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b4:	d038      	beq.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037be:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2232      	movs	r2, #50	; 0x32
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037dc:	e002      	b.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d102      	bne.n	80037f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f2      	bne.n	80037de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003804:	d110      	bne.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e00f      	b.n	800382a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d007      	beq.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003826:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40007000 	.word	0x40007000
 800383c:	20000000 	.word	0x20000000
 8003840:	431bde83 	.word	0x431bde83

08003844 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f000 bc02 	b.w	800405c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003858:	4b96      	ldr	r3, [pc, #600]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003862:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80e4 	beq.w	8003a42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_RCC_OscConfig+0x4c>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	f040 808b 	bne.w	800399e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 8087 	bne.w	800399e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003890:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x64>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e3d9      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_RCC_OscConfig+0x7e>
 80038b8:	4b7e      	ldr	r3, [pc, #504]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c0:	e005      	b.n	80038ce <HAL_RCC_OscConfig+0x8a>
 80038c2:	4b7c      	ldr	r3, [pc, #496]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d223      	bcs.n	800391a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fd8c 	bl	80043f4 <RCC_SetFlashLatencyFromMSIRange>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e3ba      	b.n	800405c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038ec:	f043 0308 	orr.w	r3, r3, #8
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	496d      	ldr	r1, [pc, #436]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003904:	4b6b      	ldr	r3, [pc, #428]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	4968      	ldr	r1, [pc, #416]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
 8003918:	e025      	b.n	8003966 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391a:	4b66      	ldr	r3, [pc, #408]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003920:	f043 0308 	orr.w	r3, r3, #8
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b63      	ldr	r3, [pc, #396]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4960      	ldr	r1, [pc, #384]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003938:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	495b      	ldr	r1, [pc, #364]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fd4c 	bl	80043f4 <RCC_SetFlashLatencyFromMSIRange>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e37a      	b.n	800405c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003966:	f000 fc81 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800396a:	4602      	mov	r2, r0
 800396c:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4950      	ldr	r1, [pc, #320]	; (8003ab8 <HAL_RCC_OscConfig+0x274>)
 8003978:	5ccb      	ldrb	r3, [r1, r3]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <HAL_RCC_OscConfig+0x278>)
 8003984:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003986:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <HAL_RCC_OscConfig+0x27c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f92e 	bl	8001bec <HAL_InitTick>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d052      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	e35e      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d032      	beq.n	8003a0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a42      	ldr	r2, [pc, #264]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b2:	f7fe f96b 	bl	8001c8c <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ba:	f7fe f967 	bl	8001c8c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e347      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039cc:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039de:	f043 0308 	orr.w	r3, r3, #8
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4930      	ldr	r1, [pc, #192]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	492b      	ldr	r1, [pc, #172]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
 8003a0a:	e01a      	b.n	8003a42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a0c:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a18:	f7fe f938 	bl	8001c8c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a20:	f7fe f934 	bl	8001c8c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e314      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1dc>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d073      	beq.n	8003b36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x21c>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d10e      	bne.n	8003a78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d063      	beq.n	8003b34 <HAL_RCC_OscConfig+0x2f0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d15f      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e2f1      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x24c>
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e025      	b.n	8003adc <HAL_RCC_OscConfig+0x298>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d114      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x280>
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <HAL_RCC_OscConfig+0x270>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e013      	b.n	8003adc <HAL_RCC_OscConfig+0x298>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	0801b96c 	.word	0x0801b96c
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000004 	.word	0x20000004
 8003ac4:	4ba0      	ldr	r3, [pc, #640]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a9f      	ldr	r2, [pc, #636]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b9d      	ldr	r3, [pc, #628]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a9c      	ldr	r2, [pc, #624]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f8d2 	bl	8001c8c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f8ce 	bl	8001c8c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e2ae      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afe:	4b92      	ldr	r3, [pc, #584]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x2a8>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f8be 	bl	8001c8c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe f8ba 	bl	8001c8c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e29a      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b26:	4b88      	ldr	r3, [pc, #544]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2d0>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d060      	beq.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_OscConfig+0x310>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d119      	bne.n	8003b82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d116      	bne.n	8003b82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	4b7c      	ldr	r3, [pc, #496]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x328>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e277      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	4b76      	ldr	r3, [pc, #472]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	4973      	ldr	r1, [pc, #460]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	e040      	b.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d023      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8a:	4b6f      	ldr	r3, [pc, #444]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6e      	ldr	r2, [pc, #440]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fe f879 	bl	8001c8c <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fe f875 	bl	8001c8c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e255      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb0:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b62      	ldr	r3, [pc, #392]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	495f      	ldr	r1, [pc, #380]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
 8003bd0:	e018      	b.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5c      	ldr	r2, [pc, #368]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe f855 	bl	8001c8c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe f851 	bl	8001c8c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e231      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d03c      	beq.n	8003c8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	4a4a      	ldr	r2, [pc, #296]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fe f830 	bl	8001c8c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c30:	f7fe f82c 	bl	8001c8c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e20c      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ef      	beq.n	8003c30 <HAL_RCC_OscConfig+0x3ec>
 8003c50:	e01b      	b.n	8003c8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c58:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe f813 	bl	8001c8c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fe f80f 	bl	8001c8c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e1ef      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c7c:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ef      	bne.n	8003c6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a6 	beq.w	8003de4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_OscConfig+0x508>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d118      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x508>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_RCC_OscConfig+0x508>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cdc:	f7fd ffd6 	bl	8001c8c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fd ffd2 	bl	8001c8c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1b2      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_RCC_OscConfig+0x508>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d108      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4d8>
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1a:	e029      	b.n	8003d70 <HAL_RCC_OscConfig+0x52c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d115      	bne.n	8003d50 <HAL_RCC_OscConfig+0x50c>
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a03      	ldr	r2, [pc, #12]	; (8003d48 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_OscConfig+0x52c>
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	4b9a      	ldr	r3, [pc, #616]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	4a99      	ldr	r2, [pc, #612]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d60:	4b96      	ldr	r3, [pc, #600]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4a95      	ldr	r2, [pc, #596]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fd ff88 	bl	8001c8c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd ff84 	bl	8001c8c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e162      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ed      	beq.n	8003d80 <HAL_RCC_OscConfig+0x53c>
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd ff71 	bl	8001c8c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd ff6d 	bl	8001c8c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e14b      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc4:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ed      	bne.n	8003dae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b78      	ldr	r3, [pc, #480]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	4a77      	ldr	r2, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d03c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003df8:	4b70      	ldr	r3, [pc, #448]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfe:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd ff40 	bl	8001c8c <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e10:	f7fd ff3c 	bl	8001c8c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e11c      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e22:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCC_OscConfig+0x5cc>
 8003e30:	e01b      	b.n	8003e6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e32:	4b62      	ldr	r3, [pc, #392]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e38:	4a60      	ldr	r2, [pc, #384]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd ff23 	bl	8001c8c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e4a:	f7fd ff1f 	bl	8001c8c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0ff      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e5c:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80f3 	beq.w	800405a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f040 80c9 	bne.w	8004010 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d12c      	bne.n	8003eec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d123      	bne.n	8003eec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d11b      	bne.n	8003eec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d113      	bne.n	8003eec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d109      	bne.n	8003eec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d06b      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d062      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ef2:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0ac      	b.n	800405c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f02:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f0e:	f7fd febd 	bl	8001c8c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd feb9 	bl	8001c8c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e099      	b.n	800405c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCC_OscConfig+0x77c>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f4e:	0212      	lsls	r2, r2, #8
 8003f50:	4311      	orrs	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f56:	0852      	lsrs	r2, r2, #1
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	0552      	lsls	r2, r2, #21
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f62:	0852      	lsrs	r2, r2, #1
 8003f64:	3a01      	subs	r2, #1
 8003f66:	0652      	lsls	r2, r2, #25
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f6e:	06d2      	lsls	r2, r2, #27
 8003f70:	430a      	orrs	r2, r1
 8003f72:	4912      	ldr	r1, [pc, #72]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f90:	f7fd fe7c 	bl	8001c8c <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd fe78 	bl	8001c8c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e058      	b.n	800405c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_OscConfig+0x778>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb6:	e050      	b.n	800405a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04f      	b.n	800405c <HAL_RCC_OscConfig+0x818>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d144      	bne.n	800405a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe8:	f7fd fe50 	bl	8001c8c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd fe4c 	bl	8001c8c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e02c      	b.n	800405c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b18      	ldr	r3, [pc, #96]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x7ac>
 800400e:	e024      	b.n	800405a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d01f      	beq.n	8004056 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a12      	ldr	r2, [pc, #72]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 800401c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd fe33 	bl	8001c8c <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd fe2f 	bl	8001c8c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e00f      	b.n	800405c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4905      	ldr	r1, [pc, #20]	; (8004064 <HAL_RCC_OscConfig+0x820>)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x824>)
 8004050:	4013      	ands	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
 8004054:	e001      	b.n	800405a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	feeefffc 	.word	0xfeeefffc

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0e7      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d910      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b72      	ldr	r3, [pc, #456]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	4970      	ldr	r1, [pc, #448]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b6e      	ldr	r3, [pc, #440]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0cf      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d908      	bls.n	80040de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4960      	ldr	r1, [pc, #384]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d04c      	beq.n	8004184 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0a6      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	4b54      	ldr	r3, [pc, #336]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e09a      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004122:	4b4e      	ldr	r3, [pc, #312]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e08e      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e086      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b46      	ldr	r3, [pc, #280]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4943      	ldr	r1, [pc, #268]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fd9a 	bl	8001c8c <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fd96 	bl	8001c8c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e06e      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419c:	429a      	cmp	r2, r3
 800419e:	d208      	bcs.n	80041b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	492b      	ldr	r1, [pc, #172]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d210      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 0207 	bic.w	r2, r3, #7
 80041c8:	4923      	ldr	r1, [pc, #140]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d0:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_RCC_ClockConfig+0x1ec>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e036      	b.n	8004250 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4918      	ldr	r1, [pc, #96]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4910      	ldr	r1, [pc, #64]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004220:	f000 f824 	bl	800426c <HAL_RCC_GetSysClockFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	490b      	ldr	r1, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x1f4>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1f8>)
 800423e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1fc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fcd1 	bl	8001bec <HAL_InitTick>
 800424a:	4603      	mov	r3, r0
 800424c:	72fb      	strb	r3, [r7, #11]

  return status;
 800424e:	7afb      	ldrb	r3, [r7, #11]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	0801b96c 	.word	0x0801b96c
 8004264:	20000000 	.word	0x20000000
 8004268:	20000004 	.word	0x20000004

0800426c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004284:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d121      	bne.n	80042de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d11e      	bne.n	80042de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042a0:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	e005      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042bc:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042c8:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_GetSysClockFreq+0x110>)
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e004      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_RCC_GetSysClockFreq+0x114>)
 80042f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d134      	bne.n	8004364 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d003      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0xa6>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d003      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0xac>
 8004310:	e005      	b.n	800431e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004312:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCC_GetSysClockFreq+0x110>)
 8004314:	617b      	str	r3, [r7, #20]
      break;
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_GetSysClockFreq+0x114>)
 800431a:	617b      	str	r3, [r7, #20]
      break;
 800431c:	e002      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	617b      	str	r3, [r7, #20]
      break;
 8004322:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	3301      	adds	r3, #1
 8004330:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	fb03 f202 	mul.w	r2, r3, r2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_RCC_GetSysClockFreq+0x108>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	0e5b      	lsrs	r3, r3, #25
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	3301      	adds	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004364:	69bb      	ldr	r3, [r7, #24]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	0801b984 	.word	0x0801b984
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	0801b97c 	.word	0x0801b97c

080043c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043cc:	f7ff ffda 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0adb      	lsrs	r3, r3, #11
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4904      	ldr	r1, [pc, #16]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0801b97c 	.word	0x0801b97c

080043f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800440c:	f7ff f9b6 	bl	800377c <HAL_PWREx_GetVoltageRange>
 8004410:	6178      	str	r0, [r7, #20]
 8004412:	e014      	b.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6593      	str	r3, [r2, #88]	; 0x58
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800442c:	f7ff f9a6 	bl	800377c <HAL_PWREx_GetVoltageRange>
 8004430:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d10b      	bne.n	800445e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d919      	bls.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2ba0      	cmp	r3, #160	; 0xa0
 8004450:	d902      	bls.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004452:	2302      	movs	r3, #2
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	e013      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004458:	2301      	movs	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	e010      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	d902      	bls.n	800446a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004464:	2303      	movs	r3, #3
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e00a      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d102      	bne.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004470:	2302      	movs	r3, #2
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e004      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d101      	bne.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 0207 	bic.w	r2, r3, #7
 8004488:	4909      	ldr	r1, [pc, #36]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40022000 	.word	0x40022000

080044b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044bc:	2300      	movs	r3, #0
 80044be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044c0:	2300      	movs	r3, #0
 80044c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d031      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044d8:	d01a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044de:	d814      	bhi.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044e8:	d10f      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4a5c      	ldr	r2, [pc, #368]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f6:	e00c      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f9ce 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004508:	e003      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	74fb      	strb	r3, [r7, #19]
      break;
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004518:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	494e      	ldr	r1, [pc, #312]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800452e:	e001      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 809e 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004546:	4b46      	ldr	r3, [pc, #280]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6593      	str	r3, [r2, #88]	; 0x58
 8004568:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004574:	2301      	movs	r3, #1
 8004576:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a39      	ldr	r2, [pc, #228]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004584:	f7fd fb82 	bl	8001c8c <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800458a:	e009      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458c:	f7fd fb7e 	bl	8001c8c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d902      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	74fb      	strb	r3, [r7, #19]
        break;
 800459e:	e005      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045a0:	4b30      	ldr	r3, [pc, #192]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ef      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d15a      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045b2:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01e      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d019      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d016      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fb3e 	bl	8001c8c <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004612:	e00b      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fd fb3a 	bl	8001c8c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d902      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	74fb      	strb	r3, [r7, #19]
            break;
 800462a:	e006      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ec      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	4904      	ldr	r1, [pc, #16]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004656:	e009      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
 800465c:	e006      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466c:	7c7b      	ldrb	r3, [r7, #17]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b8a      	ldr	r3, [pc, #552]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	4a89      	ldr	r2, [pc, #548]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468a:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f023 0203 	bic.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4980      	ldr	r1, [pc, #512]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ac:	4b7b      	ldr	r3, [pc, #492]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 020c 	bic.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	4978      	ldr	r1, [pc, #480]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ce:	4b73      	ldr	r3, [pc, #460]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	496f      	ldr	r1, [pc, #444]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4967      	ldr	r1, [pc, #412]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004712:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	495e      	ldr	r1, [pc, #376]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	4956      	ldr	r1, [pc, #344]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	494d      	ldr	r1, [pc, #308]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d028      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004778:	4b48      	ldr	r3, [pc, #288]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	4945      	ldr	r1, [pc, #276]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004796:	d106      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004798:	4b40      	ldr	r3, [pc, #256]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a3f      	ldr	r2, [pc, #252]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800479e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a2:	60d3      	str	r3, [r2, #12]
 80047a4:	e011      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ae:	d10c      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f872 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d6:	4b31      	ldr	r3, [pc, #196]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	492d      	ldr	r1, [pc, #180]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f4:	d106      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f6:	4b29      	ldr	r3, [pc, #164]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a28      	ldr	r2, [pc, #160]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004800:	60d3      	str	r3, [r2, #12]
 8004802:	e011      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f843 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	4916      	ldr	r1, [pc, #88]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004852:	d10c      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f820 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004890:	7cbb      	ldrb	r3, [r7, #18]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000

080048a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ba:	4b71      	ldr	r3, [pc, #452]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
       ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048d2:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
       ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d047      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e044      	b.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d018      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x86>
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d825      	bhi.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x62>
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d009      	beq.n	8004914 <RCCEx_PLLSAI1_Config+0x74>
 8004900:	e020      	b.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004902:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004912:	e01a      	b.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004914:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e013      	b.n	800494e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004926:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004932:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004942:	e006      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e004      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004952:	bf00      	nop
    }

    if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800495a:	4b49      	ldr	r3, [pc, #292]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	430b      	orrs	r3, r1
 8004970:	4943      	ldr	r1, [pc, #268]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d17c      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fd f980 	bl	8001c8c <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800498e:	e009      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004990:	f7fd f97c 	bl	8001c8c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	73fb      	strb	r3, [r7, #15]
        break;
 80049a2:	e005      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a4:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ef      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15f      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d110      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049bc:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	06d2      	lsls	r2, r2, #27
 80049d4:	430a      	orrs	r2, r1
 80049d6:	492a      	ldr	r1, [pc, #168]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
 80049dc:	e027      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d112      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e4:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6892      	ldr	r2, [r2, #8]
 80049f4:	0211      	lsls	r1, r2, #8
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6912      	ldr	r2, [r2, #16]
 80049fa:	0852      	lsrs	r2, r2, #1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0552      	lsls	r2, r2, #21
 8004a00:	430a      	orrs	r2, r1
 8004a02:	491f      	ldr	r1, [pc, #124]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
 8004a08:	e011      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	0211      	lsls	r1, r2, #8
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6952      	ldr	r2, [r2, #20]
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0652      	lsls	r2, r2, #25
 8004a26:	430a      	orrs	r2, r1
 8004a28:	4915      	ldr	r1, [pc, #84]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fd f927 	bl	8001c8c <HAL_GetTick>
 8004a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a40:	e009      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a42:	f7fd f923 	bl	8001c8c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d902      	bls.n	8004a56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	73fb      	strb	r3, [r7, #15]
          break;
 8004a54:	e005      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e049      	b.n	8004b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fed2 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fbf4 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e03b      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIM_Base_Start_IT+0x4e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d004      	beq.n	8004b82 <HAL_TIM_Base_Start_IT+0x4e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d115      	bne.n	8004bae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d015      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x8c>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d011      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bac:	e008      	b.n	8004bc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	00010007 	.word	0x00010007

08004bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e049      	b.n	8004c82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f841 	bl	8004c8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fb48 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01b      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0202 	mvn.w	r2, #2
 8004cd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fac2 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004cee:	e005      	b.n	8004cfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fab4 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fac5 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0204 	mvn.w	r2, #4
 8004d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fa9c 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004d3a:	e005      	b.n	8004d48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa8e 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa9f 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01b      	beq.n	8004d9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0208 	mvn.w	r2, #8
 8004d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa76 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004d86:	e005      	b.n	8004d94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa68 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa79 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0210 	mvn.w	r2, #16
 8004db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fa50 	bl	8005272 <HAL_TIM_IC_CaptureCallback>
 8004dd2:	e005      	b.n	8004de0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa42 	bl	800525e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa53 	bl	8005286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0201 	mvn.w	r2, #1
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc fc79 	bl	80016fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fe2d 	bl	8005a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00c      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fe25 	bl	8005a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00c      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa12 	bl	800529a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f06f 0220 	mvn.w	r2, #32
 8004e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fded 	bl	8005a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0ff      	b.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b14      	cmp	r3, #20
 8004ece:	f200 80f0 	bhi.w	80050b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	080050b3 	.word	0x080050b3
 8004ee0:	080050b3 	.word	0x080050b3
 8004ee4:	080050b3 	.word	0x080050b3
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	080050b3 	.word	0x080050b3
 8004ef0:	080050b3 	.word	0x080050b3
 8004ef4:	080050b3 	.word	0x080050b3
 8004ef8:	08004faf 	.word	0x08004faf
 8004efc:	080050b3 	.word	0x080050b3
 8004f00:	080050b3 	.word	0x080050b3
 8004f04:	080050b3 	.word	0x080050b3
 8004f08:	08004fef 	.word	0x08004fef
 8004f0c:	080050b3 	.word	0x080050b3
 8004f10:	080050b3 	.word	0x080050b3
 8004f14:	080050b3 	.word	0x080050b3
 8004f18:	08005031 	.word	0x08005031
 8004f1c:	080050b3 	.word	0x080050b3
 8004f20:	080050b3 	.word	0x080050b3
 8004f24:	080050b3 	.word	0x080050b3
 8004f28:	08005071 	.word	0x08005071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fa20 	bl	8005378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	619a      	str	r2, [r3, #24]
      break;
 8004f6a:	e0a5      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fa7c 	bl	8005470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	619a      	str	r2, [r3, #24]
      break;
 8004fac:	e084      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fad5 	bl	8005564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0208 	orr.w	r2, r2, #8
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0204 	bic.w	r2, r2, #4
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	61da      	str	r2, [r3, #28]
      break;
 8004fec:	e064      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fb2d 	bl	8005654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	61da      	str	r2, [r3, #28]
      break;
 800502e:	e043      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb6a 	bl	8005710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0204 	bic.w	r2, r2, #4
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800506e:	e023      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fba2 	bl	80057c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050b0:	e002      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
      break;
 80050b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop

080050cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_ConfigClockSource+0x1c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e0b6      	b.n	8005256 <HAL_TIM_ConfigClockSource+0x18a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800510a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d03e      	beq.n	80051a4 <HAL_TIM_ConfigClockSource+0xd8>
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	f200 8087 	bhi.w	800523c <HAL_TIM_ConfigClockSource+0x170>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	f000 8086 	beq.w	8005242 <HAL_TIM_ConfigClockSource+0x176>
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d87f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 800513c:	2b70      	cmp	r3, #112	; 0x70
 800513e:	d01a      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0xaa>
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d87b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 8005144:	2b60      	cmp	r3, #96	; 0x60
 8005146:	d050      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x11e>
 8005148:	2b60      	cmp	r3, #96	; 0x60
 800514a:	d877      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 800514c:	2b50      	cmp	r3, #80	; 0x50
 800514e:	d03c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0xfe>
 8005150:	2b50      	cmp	r3, #80	; 0x50
 8005152:	d873      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d058      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x13e>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d86f      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 800515c:	2b30      	cmp	r3, #48	; 0x30
 800515e:	d064      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15e>
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d86b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d060      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15e>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d867      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x170>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05c      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15e>
 8005170:	2b10      	cmp	r3, #16
 8005172:	d05a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x15e>
 8005174:	e062      	b.n	800523c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005186:	f000 fbef 	bl	8005968 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	609a      	str	r2, [r3, #8]
      break;
 80051a2:	e04f      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	f000 fbd8 	bl	8005968 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c6:	609a      	str	r2, [r3, #8]
      break;
 80051c8:	e03c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fb4c 	bl	8005874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2150      	movs	r1, #80	; 0x50
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fba5 	bl	8005932 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e02c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fb6b 	bl	80058d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2160      	movs	r1, #96	; 0x60
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb95 	bl	8005932 <TIM_ITRx_SetConfig>
      break;
 8005208:	e01c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005216:	461a      	mov	r2, r3
 8005218:	f000 fb2c 	bl	8005874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb85 	bl	8005932 <TIM_ITRx_SetConfig>
      break;
 8005228:	e00c      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 fb7c 	bl	8005932 <TIM_ITRx_SetConfig>
      break;
 800523a:	e003      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e000      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a2a      	ldr	r2, [pc, #168]	; (800536c <TIM_Base_SetConfig+0xbc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0x20>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d108      	bne.n	80052e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	; (800536c <TIM_Base_SetConfig+0xbc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0x52>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0x52>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <TIM_Base_SetConfig+0xc0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0x52>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <TIM_Base_SetConfig+0xc4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0xbc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_Base_SetConfig+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <TIM_Base_SetConfig+0xc0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0xa0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <TIM_Base_SetConfig+0xc4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d103      	bne.n	8005358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	615a      	str	r2, [r3, #20]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400

08005378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f023 0201 	bic.w	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 0302 	bic.w	r3, r3, #2
 80053c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a24      	ldr	r2, [pc, #144]	; (8005464 <TIM_OC1_SetConfig+0xec>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <TIM_OC1_SetConfig+0x70>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a23      	ldr	r2, [pc, #140]	; (8005468 <TIM_OC1_SetConfig+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC1_SetConfig+0x70>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a22      	ldr	r2, [pc, #136]	; (800546c <TIM_OC1_SetConfig+0xf4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10c      	bne.n	8005402 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0308 	bic.w	r3, r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a17      	ldr	r2, [pc, #92]	; (8005464 <TIM_OC1_SetConfig+0xec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC1_SetConfig+0xa2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a16      	ldr	r2, [pc, #88]	; (8005468 <TIM_OC1_SetConfig+0xf0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC1_SetConfig+0xa2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <TIM_OC1_SetConfig+0xf4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400

08005470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0210 	bic.w	r2, r3, #16
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0320 	bic.w	r3, r3, #32
 80054be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a22      	ldr	r2, [pc, #136]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10d      	bne.n	80054f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a19      	ldr	r2, [pc, #100]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_OC2_SetConfig+0x98>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a18      	ldr	r2, [pc, #96]	; (800555c <TIM_OC2_SetConfig+0xec>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC2_SetConfig+0x98>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <TIM_OC2_SetConfig+0xf0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d113      	bne.n	8005530 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400

08005564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_OC3_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d10d      	bne.n	80055e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC3_SetConfig+0xe4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_OC3_SetConfig+0x96>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_OC3_SetConfig+0xe8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC3_SetConfig+0x96>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a16      	ldr	r2, [pc, #88]	; (8005650 <TIM_OC3_SetConfig+0xec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400

08005654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	031b      	lsls	r3, r3, #12
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a14      	ldr	r2, [pc, #80]	; (8005704 <TIM_OC4_SetConfig+0xb0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_OC4_SetConfig+0x74>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <TIM_OC4_SetConfig+0xb4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC4_SetConfig+0x74>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	; (800570c <TIM_OC4_SetConfig+0xb8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400

08005710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <TIM_OC5_SetConfig+0xa4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_OC5_SetConfig+0x6a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <TIM_OC5_SetConfig+0xa8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC5_SetConfig+0x6a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a11      	ldr	r2, [pc, #68]	; (80057bc <TIM_OC5_SetConfig+0xac>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d109      	bne.n	800578e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400

080057c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a14      	ldr	r2, [pc, #80]	; (8005868 <TIM_OC6_SetConfig+0xa8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_OC6_SetConfig+0x6c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a13      	ldr	r2, [pc, #76]	; (800586c <TIM_OC6_SetConfig+0xac>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC6_SetConfig+0x6c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <TIM_OC6_SetConfig+0xb0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d109      	bne.n	8005840 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400

08005874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 030a 	bic.w	r3, r3, #10
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b087      	sub	sp, #28
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f023 0210 	bic.w	r2, r3, #16
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800590e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	f043 0307 	orr.w	r3, r3, #7
 8005954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	609a      	str	r2, [r3, #8]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	431a      	orrs	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e04f      	b.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d004      	beq.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10c      	bne.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40014000 	.word	0x40014000

08005a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d178      	bne.n	8005bba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_UART_Transmit+0x24>
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e071      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	; 0x21
 8005ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae6:	f7fc f8d1 	bl	8001c8c <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d108      	bne.n	8005b18 <HAL_UART_Transmit+0x68>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e003      	b.n	8005b20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b20:	e030      	b.n	8005b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fec9 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e03c      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	881a      	ldrh	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b54:	b292      	uxth	r2, r2
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e008      	b.n	8005b72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1c8      	bne.n	8005b22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fe92 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e005      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e000      	b.n	8005bbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005bba:	2302      	movs	r3, #2
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b0ba      	sub	sp, #232	; 0xe8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d115      	bne.n	8005c2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 82ae 	beq.w	800617e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
      }
      return;
 8005c2a:	e2a8      	b.n	800617e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8117 	beq.w	8005e64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_UART_IRQHandler+0x298>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 810a 	beq.w	8005e64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d011      	beq.n	8005c80 <HAL_UART_IRQHandler+0xbc>
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xec>
 8005c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x11c>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	f043 0202 	orr.w	r2, r3, #2
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d017      	beq.n	8005d1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2208      	movs	r2, #8
 8005d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	f043 0208 	orr.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <HAL_UART_IRQHandler+0x18a>
 8005d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00c      	beq.n	8005d4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8214 	beq.w	8006182 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d005      	beq.n	8005da6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04f      	beq.n	8005e46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fdf3 	bl	8006992 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	d141      	bne.n	8005e3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005de6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1d9      	bne.n	8005dba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d013      	beq.n	8005e36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e12:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <HAL_UART_IRQHandler+0x29c>)
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fd fabb 	bl	8003396 <HAL_DMA_Abort_IT>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d017      	beq.n	8005e56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e00f      	b.n	8005e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9b8 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	e00b      	b.n	8005e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9b4 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	e007      	b.n	8005e56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9b0 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005e54:	e195      	b.n	8006182 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e56:	bf00      	nop
    return;
 8005e58:	e193      	b.n	8006182 <HAL_UART_IRQHandler+0x5be>
 8005e5a:	bf00      	nop
 8005e5c:	04000120 	.word	0x04000120
 8005e60:	08006a5b 	.word	0x08006a5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	f040 814e 	bne.w	800610a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8147 	beq.w	800610a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8140 	beq.w	800610a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2210      	movs	r2, #16
 8005e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	f040 80b8 	bne.w	8006012 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005eae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8167 	beq.w	8006186 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	f080 815f 	bcs.w	8006186 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 8086 	bne.w	8005ff0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1da      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e1      	bne.n	8005f2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e3      	bne.n	8005f6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	f023 0310 	bic.w	r3, r3, #16
 8005fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e4      	bne.n	8005fb0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd f995 	bl	800331a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006002:	b29b      	uxth	r3, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8d8 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006010:	e0b9      	b.n	8006186 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800601e:	b29b      	uxth	r3, r3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80ab 	beq.w	800618a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a6 	beq.w	800618a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
 8006062:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e4      	bne.n	800603e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	623b      	str	r3, [r7, #32]
   return(result);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006098:	633a      	str	r2, [r7, #48]	; 0x30
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e3      	bne.n	8006074 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 0310 	bic.w	r3, r3, #16
 80060d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	69b9      	ldr	r1, [r7, #24]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	617b      	str	r3, [r7, #20]
   return(result);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e4      	bne.n	80060c0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f85c 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006108:	e03f      	b.n	800618a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <HAL_UART_IRQHandler+0x570>
 8006116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800611a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800612a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fd3b 	bl	8006ba8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006132:	e02d      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
    }
    return;
 800615c:	e017      	b.n	800618e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d012      	beq.n	8006190 <HAL_UART_IRQHandler+0x5cc>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc85 	bl	8006a86 <UART_EndTransmit_IT>
    return;
 800617c:	e008      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
      return;
 800617e:	bf00      	nop
 8006180:	e006      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
      return;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_UART_IRQHandler+0x5cc>
    return;
 800618e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006190:	37e8      	adds	r7, #232	; 0xe8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b08a      	sub	sp, #40	; 0x28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4bb4      	ldr	r3, [pc, #720]	; (80064d8 <UART_SetConfig+0x300>)
 8006208:	4013      	ands	r3, r2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006210:	430b      	orrs	r3, r1
 8006212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4aa9      	ldr	r2, [pc, #676]	; (80064dc <UART_SetConfig+0x304>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	4313      	orrs	r3, r2
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	430a      	orrs	r2, r1
 8006256:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4aa0      	ldr	r2, [pc, #640]	; (80064e0 <UART_SetConfig+0x308>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d126      	bne.n	80062b0 <UART_SetConfig+0xd8>
 8006262:	4ba0      	ldr	r3, [pc, #640]	; (80064e4 <UART_SetConfig+0x30c>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d81b      	bhi.n	80062a8 <UART_SetConfig+0xd0>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <UART_SetConfig+0xa0>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006289 	.word	0x08006289
 800627c:	08006299 	.word	0x08006299
 8006280:	08006291 	.word	0x08006291
 8006284:	080062a1 	.word	0x080062a1
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	e080      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006296:	e07c      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629e:	e078      	b.n	8006392 <UART_SetConfig+0x1ba>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a6:	e074      	b.n	8006392 <UART_SetConfig+0x1ba>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e070      	b.n	8006392 <UART_SetConfig+0x1ba>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a8c      	ldr	r2, [pc, #560]	; (80064e8 <UART_SetConfig+0x310>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d138      	bne.n	800632c <UART_SetConfig+0x154>
 80062ba:	4b8a      	ldr	r3, [pc, #552]	; (80064e4 <UART_SetConfig+0x30c>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f003 030c 	and.w	r3, r3, #12
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	d82d      	bhi.n	8006324 <UART_SetConfig+0x14c>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0xf8>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006305 	.word	0x08006305
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006325 	.word	0x08006325
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006315 	.word	0x08006315
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
 80062f0:	0800630d 	.word	0x0800630d
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006325 	.word	0x08006325
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800631d 	.word	0x0800631d
 8006304:	2300      	movs	r3, #0
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630a:	e042      	b.n	8006392 <UART_SetConfig+0x1ba>
 800630c:	2302      	movs	r3, #2
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006312:	e03e      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e03a      	b.n	8006392 <UART_SetConfig+0x1ba>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e036      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e032      	b.n	8006392 <UART_SetConfig+0x1ba>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a6a      	ldr	r2, [pc, #424]	; (80064dc <UART_SetConfig+0x304>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d12a      	bne.n	800638c <UART_SetConfig+0x1b4>
 8006336:	4b6b      	ldr	r3, [pc, #428]	; (80064e4 <UART_SetConfig+0x30c>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006344:	d01a      	beq.n	800637c <UART_SetConfig+0x1a4>
 8006346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634a:	d81b      	bhi.n	8006384 <UART_SetConfig+0x1ac>
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d00c      	beq.n	800636c <UART_SetConfig+0x194>
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d815      	bhi.n	8006384 <UART_SetConfig+0x1ac>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <UART_SetConfig+0x18c>
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d008      	beq.n	8006374 <UART_SetConfig+0x19c>
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x1ac>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636a:	e012      	b.n	8006392 <UART_SetConfig+0x1ba>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006372:	e00e      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e00a      	b.n	8006392 <UART_SetConfig+0x1ba>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e006      	b.n	8006392 <UART_SetConfig+0x1ba>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0x1ba>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a51      	ldr	r2, [pc, #324]	; (80064dc <UART_SetConfig+0x304>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d17a      	bne.n	8006492 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800639c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d824      	bhi.n	80063ee <UART_SetConfig+0x216>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x1d4>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063d1 	.word	0x080063d1
 80063b0:	080063ef 	.word	0x080063ef
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063df 	.word	0x080063df
 80063c0:	080063ef 	.word	0x080063ef
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ef 	.word	0x080063ef
 80063cc:	080063e7 	.word	0x080063e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d0:	f7fd ffe4 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80063d4:	61f8      	str	r0, [r7, #28]
        break;
 80063d6:	e010      	b.n	80063fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d8:	4b44      	ldr	r3, [pc, #272]	; (80064ec <UART_SetConfig+0x314>)
 80063da:	61fb      	str	r3, [r7, #28]
        break;
 80063dc:	e00d      	b.n	80063fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063de:	f7fd ff45 	bl	800426c <HAL_RCC_GetSysClockFreq>
 80063e2:	61f8      	str	r0, [r7, #28]
        break;
 80063e4:	e009      	b.n	80063fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ea:	61fb      	str	r3, [r7, #28]
        break;
 80063ec:	e005      	b.n	80063fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8107 	beq.w	8006610 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	4413      	add	r3, r2
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	429a      	cmp	r2, r3
 8006410:	d305      	bcc.n	800641e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	429a      	cmp	r2, r3
 800641c:	d903      	bls.n	8006426 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006424:	e0f4      	b.n	8006610 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2200      	movs	r2, #0
 800642a:	461c      	mov	r4, r3
 800642c:	4615      	mov	r5, r2
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	022b      	lsls	r3, r5, #8
 8006438:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800643c:	0222      	lsls	r2, r4, #8
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6849      	ldr	r1, [r1, #4]
 8006442:	0849      	lsrs	r1, r1, #1
 8006444:	2000      	movs	r0, #0
 8006446:	4688      	mov	r8, r1
 8006448:	4681      	mov	r9, r0
 800644a:	eb12 0a08 	adds.w	sl, r2, r8
 800644e:	eb43 0b09 	adc.w	fp, r3, r9
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	603b      	str	r3, [r7, #0]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006460:	4650      	mov	r0, sl
 8006462:	4659      	mov	r1, fp
 8006464:	f7fa faf2 	bl	8000a4c <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4613      	mov	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006476:	d308      	bcc.n	800648a <UART_SetConfig+0x2b2>
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647e:	d204      	bcs.n	800648a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e0c2      	b.n	8006610 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006490:	e0be      	b.n	8006610 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649a:	d16a      	bne.n	8006572 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800649c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d834      	bhi.n	800650e <UART_SetConfig+0x336>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <UART_SetConfig+0x2d4>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	080064f9 	.word	0x080064f9
 80064b8:	0800650f 	.word	0x0800650f
 80064bc:	080064ff 	.word	0x080064ff
 80064c0:	0800650f 	.word	0x0800650f
 80064c4:	0800650f 	.word	0x0800650f
 80064c8:	0800650f 	.word	0x0800650f
 80064cc:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7fd ff64 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80064d4:	61f8      	str	r0, [r7, #28]
        break;
 80064d6:	e020      	b.n	800651a <UART_SetConfig+0x342>
 80064d8:	efff69f3 	.word	0xefff69f3
 80064dc:	40008000 	.word	0x40008000
 80064e0:	40013800 	.word	0x40013800
 80064e4:	40021000 	.word	0x40021000
 80064e8:	40004400 	.word	0x40004400
 80064ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fd ff6a 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80064f4:	61f8      	str	r0, [r7, #28]
        break;
 80064f6:	e010      	b.n	800651a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <UART_SetConfig+0x454>)
 80064fa:	61fb      	str	r3, [r7, #28]
        break;
 80064fc:	e00d      	b.n	800651a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fd feb5 	bl	800426c <HAL_RCC_GetSysClockFreq>
 8006502:	61f8      	str	r0, [r7, #28]
        break;
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61fb      	str	r3, [r7, #28]
        break;
 800650c:	e005      	b.n	800651a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d077      	beq.n	8006610 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	005a      	lsls	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	441a      	add	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	d916      	bls.n	800656a <UART_SetConfig+0x392>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006542:	d212      	bcs.n	800656a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f023 030f 	bic.w	r3, r3, #15
 800654c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	b29a      	uxth	r2, r3
 800655a:	8afb      	ldrh	r3, [r7, #22]
 800655c:	4313      	orrs	r3, r2
 800655e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	8afa      	ldrh	r2, [r7, #22]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e052      	b.n	8006610 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006570:	e04e      	b.n	8006610 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006576:	2b08      	cmp	r3, #8
 8006578:	d827      	bhi.n	80065ca <UART_SetConfig+0x3f2>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0x3a8>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065b5 	.word	0x080065b5
 800658c:	080065cb 	.word	0x080065cb
 8006590:	080065bb 	.word	0x080065bb
 8006594:	080065cb 	.word	0x080065cb
 8006598:	080065cb 	.word	0x080065cb
 800659c:	080065cb 	.word	0x080065cb
 80065a0:	080065c3 	.word	0x080065c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fd fefa 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80065a8:	61f8      	str	r0, [r7, #28]
        break;
 80065aa:	e014      	b.n	80065d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7fd ff0c 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80065b0:	61f8      	str	r0, [r7, #28]
        break;
 80065b2:	e010      	b.n	80065d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <UART_SetConfig+0x454>)
 80065b6:	61fb      	str	r3, [r7, #28]
        break;
 80065b8:	e00d      	b.n	80065d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ba:	f7fd fe57 	bl	800426c <HAL_RCC_GetSysClockFreq>
 80065be:	61f8      	str	r0, [r7, #28]
        break;
 80065c0:	e009      	b.n	80065d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	61fb      	str	r3, [r7, #28]
        break;
 80065c8:	e005      	b.n	80065d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065d4:	bf00      	nop
    }

    if (pclk != 0U)
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d019      	beq.n	8006610 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	085a      	lsrs	r2, r3, #1
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	441a      	add	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b0f      	cmp	r3, #15
 80065f4:	d909      	bls.n	800660a <UART_SetConfig+0x432>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d205      	bcs.n	800660a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e002      	b.n	8006610 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800661c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006620:	4618      	mov	r0, r3
 8006622:	3728      	adds	r7, #40	; 0x28
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662a:	bf00      	nop
 800662c:	00f42400 	.word	0x00f42400

08006630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672e:	d10a      	bne.n	8006746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b098      	sub	sp, #96	; 0x60
 8006778:	af02      	add	r7, sp, #8
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006784:	f7fb fa82 	bl	8001c8c <HAL_GetTick>
 8006788:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d12e      	bne.n	80067f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a0:	2200      	movs	r2, #0
 80067a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f88c 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d021      	beq.n	80067f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c6:	653b      	str	r3, [r7, #80]	; 0x50
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
 80067d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e6      	bne.n	80067b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e062      	b.n	80068bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b04      	cmp	r3, #4
 8006802:	d149      	bne.n	8006898 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680c:	2200      	movs	r2, #0
 800680e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f856 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d03c      	beq.n	8006898 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	623b      	str	r3, [r7, #32]
   return(result);
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	633b      	str	r3, [r7, #48]	; 0x30
 800683e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e6      	bne.n	800681e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	64bb      	str	r3, [r7, #72]	; 0x48
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006870:	61fa      	str	r2, [r7, #28]
 8006872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	69b9      	ldr	r1, [r7, #24]
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	617b      	str	r3, [r7, #20]
   return(result);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e5      	bne.n	8006850 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e011      	b.n	80068bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3758      	adds	r7, #88	; 0x58
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e049      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d045      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fb f9d5 	bl	8001c8c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e048      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d031      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d110      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2208      	movs	r2, #8
 800691a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f838 	bl	8006992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2208      	movs	r2, #8
 8006926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e029      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006944:	d111      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800694e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f81e 	bl	8006992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e00f      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4013      	ands	r3, r2
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	429a      	cmp	r2, r3
 8006986:	d0a6      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006992:	b480      	push	{r7}
 8006994:	b095      	sub	sp, #84	; 0x54
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	643b      	str	r3, [r7, #64]	; 0x40
 80069ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e6      	bne.n	800699a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	61fb      	str	r3, [r7, #28]
   return(result);
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d118      	bne.n	8006a3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f023 0310 	bic.w	r3, r3, #16
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6979      	ldr	r1, [r7, #20]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	613b      	str	r3, [r7, #16]
   return(result);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a4e:	bf00      	nop
 8006a50:	3754      	adds	r7, #84	; 0x54
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff fb97 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b088      	sub	sp, #32
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fb63 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad2:	bf00      	nop
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e056      	b.n	8006ba0 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7fa feca 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2224      	movs	r2, #36	; 0x24
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7ff fd82 	bl	8006630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff fb53 	bl	80061d8 <UART_SetConfig>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e031      	b.n	8006ba0 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	055b      	lsls	r3, r3, #21
 8006b64:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006b7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fdeb 	bl	8006774 <UART_CheckIdleState>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <DWT_Delay_ms+0x44>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8006bca:	f7fd fbdb 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <DWT_Delay_ms+0x48>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	099b      	lsrs	r3, r3, #6
 8006bd8:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8006be4:	bf00      	nop
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <DWT_Delay_ms+0x44>)
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d3f8      	bcc.n	8006be6 <DWT_Delay_ms+0x2a>
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	e0001000 	.word	0xe0001000
 8006c04:	10624dd3 	.word	0x10624dd3

08006c08 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c0e:	f107 0310 	add.w	r3, r7, #16
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8006c2a:	f000 fcb7 	bl	800759c <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c34:	e102      	b.n	8006e3c <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c3c:	e079      	b.n	8006d32 <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8006c3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c42:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006c46:	4889      	ldr	r0, [pc, #548]	; (8006e6c <STEPPERS_Init+0x264>)
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	440b      	add	r3, r1
 8006c50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006c54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c58:	d10c      	bne.n	8006c74 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5a:	4b85      	ldr	r3, [pc, #532]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	4a84      	ldr	r2, [pc, #528]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c66:	4b82      	ldr	r3, [pc, #520]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	e034      	b.n	8006cde <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8006c74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c78:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006c7c:	487b      	ldr	r0, [pc, #492]	; (8006e6c <STEPPERS_Init+0x264>)
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	440b      	add	r3, r1
 8006c86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006c8a:	4a7a      	ldr	r2, [pc, #488]	; (8006e74 <STEPPERS_Init+0x26c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c90:	4b77      	ldr	r3, [pc, #476]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	4a76      	ldr	r2, [pc, #472]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c96:	f043 0302 	orr.w	r3, r3, #2
 8006c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c9c:	4b74      	ldr	r3, [pc, #464]	; (8006e70 <STEPPERS_Init+0x268>)
 8006c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	e019      	b.n	8006cde <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8006caa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cae:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006cb2:	486e      	ldr	r0, [pc, #440]	; (8006e6c <STEPPERS_Init+0x264>)
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006cc0:	4a6d      	ldr	r2, [pc, #436]	; (8006e78 <STEPPERS_Init+0x270>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d10b      	bne.n	8006cde <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc6:	4b6a      	ldr	r3, [pc, #424]	; (8006e70 <STEPPERS_Init+0x268>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cca:	4a69      	ldr	r2, [pc, #420]	; (8006e70 <STEPPERS_Init+0x268>)
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cd2:	4b67      	ldr	r3, [pc, #412]	; (8006e70 <STEPPERS_Init+0x268>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8006cde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ce2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006ce6:	4861      	ldr	r0, [pc, #388]	; (8006e6c <STEPPERS_Init+0x264>)
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006cf8:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8006d06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d0a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d0e:	4857      	ldr	r0, [pc, #348]	; (8006e6c <STEPPERS_Init+0x264>)
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	440b      	add	r3, r1
 8006d18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d1c:	f107 0210 	add.w	r2, r7, #16
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fc fba8 	bl	8003478 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8006d28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d981      	bls.n	8006c3e <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CCW;
 8006d3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d3e:	494f      	ldr	r1, [pc, #316]	; (8006e7c <STEPPERS_Init+0x274>)
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	3311      	adds	r3, #17
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8006d50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d54:	4949      	ldr	r1, [pc, #292]	; (8006e7c <STEPPERS_Init+0x274>)
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	330f      	adds	r3, #15
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8006d66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d6a:	4944      	ldr	r1, [pc, #272]	; (8006e7c <STEPPERS_Init+0x274>)
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8006d7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d7e:	493f      	ldr	r1, [pc, #252]	; (8006e7c <STEPPERS_Init+0x274>)
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8006d90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d94:	4939      	ldr	r1, [pc, #228]	; (8006e7c <STEPPERS_Init+0x274>)
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3308      	adds	r3, #8
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8006da6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006daa:	4934      	ldr	r1, [pc, #208]	; (8006e7c <STEPPERS_Init+0x274>)
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	330e      	adds	r3, #14
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8006dbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dc0:	492a      	ldr	r1, [pc, #168]	; (8006e6c <STEPPERS_Init+0x264>)
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	331b      	adds	r3, #27
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d00b      	beq.n	8006dec <STEPPERS_Init+0x1e4>
 8006dd4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dd8:	4924      	ldr	r1, [pc, #144]	; (8006e6c <STEPPERS_Init+0x264>)
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	331b      	adds	r3, #27
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8006dec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006df0:	4922      	ldr	r1, [pc, #136]	; (8006e7c <STEPPERS_Init+0x274>)
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	2204      	movs	r2, #4
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e016      	b.n	8006e32 <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8006e04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e08:	4918      	ldr	r1, [pc, #96]	; (8006e6c <STEPPERS_Init+0x264>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	331b      	adds	r3, #27
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d10a      	bne.n	8006e32 <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8006e1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e20:	4916      	ldr	r1, [pc, #88]	; (8006e7c <STEPPERS_Init+0x274>)
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3310      	adds	r3, #16
 8006e2e:	2208      	movs	r2, #8
 8006e30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8006e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e36:	3301      	adds	r3, #1
 8006e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f43f aef8 	beq.w	8006c36 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006e46:	2301      	movs	r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4805      	ldr	r0, [pc, #20]	; (8006e74 <STEPPERS_Init+0x26c>)
 8006e5e:	f7fc fb0b 	bl	8003478 <HAL_GPIO_Init>
}
 8006e62:	bf00      	nop
 8006e64:	3728      	adds	r7, #40	; 0x28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	0801b9b4 	.word	0x0801b9b4
 8006e70:	40021000 	.word	0x40021000
 8006e74:	48000400 	.word	0x48000400
 8006e78:	48000800 	.word	0x48000800
 8006e7c:	20000424 	.word	0x20000424

08006e80 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8006e94:	79fa      	ldrb	r2, [r7, #7]
 8006e96:	4928      	ldr	r1, [pc, #160]	; (8006f38 <STEPPER_SetSpeed+0xb8>)
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	88ba      	ldrh	r2, [r7, #4]
 8006ea6:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8006ea8:	79fa      	ldrb	r2, [r7, #7]
 8006eaa:	4924      	ldr	r1, [pc, #144]	; (8006f3c <STEPPER_SetSpeed+0xbc>)
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	331b      	adds	r3, #27
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d10b      	bne.n	8006ed6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8006ebe:	79fa      	ldrb	r2, [r7, #7]
 8006ec0:	491e      	ldr	r1, [pc, #120]	; (8006f3c <STEPPER_SetSpeed+0xbc>)
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	3318      	adds	r3, #24
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e009      	b.n	8006eea <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8006ed6:	79fa      	ldrb	r2, [r7, #7]
 8006ed8:	4918      	ldr	r1, [pc, #96]	; (8006f3c <STEPPER_SetSpeed+0xbc>)
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8006eea:	88bb      	ldrh	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fafe 	bl	80004f4 <__aeabi_ui2d>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	a10c      	add	r1, pc, #48	; (adr r1, 8006f30 <STEPPER_SetSpeed+0xb0>)
 8006efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f02:	f7f9 fc9b 	bl	800083c <__aeabi_ddiv>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	79fc      	ldrb	r4, [r7, #7]
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f7f9 fd7c 	bl	8000a0c <__aeabi_d2uiz>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4908      	ldr	r1, [pc, #32]	; (8006f38 <STEPPER_SetSpeed+0xb8>)
 8006f18:	4623      	mov	r3, r4
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4423      	add	r3, r4
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3308      	adds	r3, #8
 8006f24:	601a      	str	r2, [r3, #0]
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	00000000 	.word	0x00000000
 8006f34:	40ed4c00 	.word	0x40ed4c00
 8006f38:	20000424 	.word	0x20000424
 8006f3c:	0801b9b4 	.word	0x0801b9b4

08006f40 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8006f4a:	79fa      	ldrb	r2, [r7, #7]
 8006f4c:	4999      	ldr	r1, [pc, #612]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	331a      	adds	r3, #26
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 81c4 	bne.w	80072ea <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8006f62:	79fa      	ldrb	r2, [r7, #7]
 8006f64:	4993      	ldr	r1, [pc, #588]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006f66:	4613      	mov	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	331b      	adds	r3, #27
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f040 8088 	bne.w	800708a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8006f7a:	79fa      	ldrb	r2, [r7, #7]
 8006f7c:	498d      	ldr	r1, [pc, #564]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006f7e:	4613      	mov	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	79fa      	ldrb	r2, [r7, #7]
 8006f8c:	4989      	ldr	r1, [pc, #548]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	3310      	adds	r3, #16
 8006f9a:	8819      	ldrh	r1, [r3, #0]
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	4c86      	ldr	r4, [pc, #536]	; (80071b8 <STEPPER_One_Step+0x278>)
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4423      	add	r3, r4
 8006faa:	330f      	adds	r3, #15
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4b82      	ldr	r3, [pc, #520]	; (80071bc <STEPPER_One_Step+0x27c>)
 8006fb2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fc fbc8 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	497d      	ldr	r1, [pc, #500]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	3304      	adds	r3, #4
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	79fa      	ldrb	r2, [r7, #7]
 8006fd0:	4978      	ldr	r1, [pc, #480]	; (80071b4 <STEPPER_One_Step+0x274>)
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	3312      	adds	r3, #18
 8006fde:	8819      	ldrh	r1, [r3, #0]
 8006fe0:	79fa      	ldrb	r2, [r7, #7]
 8006fe2:	4c75      	ldr	r4, [pc, #468]	; (80071b8 <STEPPER_One_Step+0x278>)
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4423      	add	r3, r4
 8006fee:	330f      	adds	r3, #15
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4a72      	ldr	r2, [pc, #456]	; (80071bc <STEPPER_One_Step+0x27c>)
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fc fba6 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007000:	79fa      	ldrb	r2, [r7, #7]
 8007002:	496c      	ldr	r1, [pc, #432]	; (80071b4 <STEPPER_One_Step+0x274>)
 8007004:	4613      	mov	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	3308      	adds	r3, #8
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	79fa      	ldrb	r2, [r7, #7]
 8007014:	4967      	ldr	r1, [pc, #412]	; (80071b4 <STEPPER_One_Step+0x274>)
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3314      	adds	r3, #20
 8007022:	8819      	ldrh	r1, [r3, #0]
 8007024:	79fa      	ldrb	r2, [r7, #7]
 8007026:	4c64      	ldr	r4, [pc, #400]	; (80071b8 <STEPPER_One_Step+0x278>)
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4423      	add	r3, r4
 8007032:	330f      	adds	r3, #15
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4a61      	ldr	r2, [pc, #388]	; (80071bc <STEPPER_One_Step+0x27c>)
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	789b      	ldrb	r3, [r3, #2]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fc fb84 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007044:	79fa      	ldrb	r2, [r7, #7]
 8007046:	495b      	ldr	r1, [pc, #364]	; (80071b4 <STEPPER_One_Step+0x274>)
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	330c      	adds	r3, #12
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	79fa      	ldrb	r2, [r7, #7]
 8007058:	4956      	ldr	r1, [pc, #344]	; (80071b4 <STEPPER_One_Step+0x274>)
 800705a:	4613      	mov	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3316      	adds	r3, #22
 8007066:	8819      	ldrh	r1, [r3, #0]
 8007068:	79fa      	ldrb	r2, [r7, #7]
 800706a:	4c53      	ldr	r4, [pc, #332]	; (80071b8 <STEPPER_One_Step+0x278>)
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4423      	add	r3, r4
 8007076:	330f      	adds	r3, #15
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	4a50      	ldr	r2, [pc, #320]	; (80071bc <STEPPER_One_Step+0x27c>)
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	78db      	ldrb	r3, [r3, #3]
 8007082:	461a      	mov	r2, r3
 8007084:	f7fc fb62 	bl	800374c <HAL_GPIO_WritePin>
 8007088:	e12f      	b.n	80072ea <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800708a:	79fa      	ldrb	r2, [r7, #7]
 800708c:	4949      	ldr	r1, [pc, #292]	; (80071b4 <STEPPER_One_Step+0x274>)
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	331b      	adds	r3, #27
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	f040 8091 	bne.w	80071c4 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	4943      	ldr	r1, [pc, #268]	; (80071b4 <STEPPER_One_Step+0x274>)
 80070a6:	4613      	mov	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	79fa      	ldrb	r2, [r7, #7]
 80070b4:	493f      	ldr	r1, [pc, #252]	; (80071b4 <STEPPER_One_Step+0x274>)
 80070b6:	4613      	mov	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3310      	adds	r3, #16
 80070c2:	8819      	ldrh	r1, [r3, #0]
 80070c4:	79fa      	ldrb	r2, [r7, #7]
 80070c6:	4c3c      	ldr	r4, [pc, #240]	; (80071b8 <STEPPER_One_Step+0x278>)
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4423      	add	r3, r4
 80070d2:	330f      	adds	r3, #15
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <STEPPER_One_Step+0x280>)
 80070da:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80070de:	461a      	mov	r2, r3
 80070e0:	f7fc fb34 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80070e4:	79fa      	ldrb	r2, [r7, #7]
 80070e6:	4933      	ldr	r1, [pc, #204]	; (80071b4 <STEPPER_One_Step+0x274>)
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	3304      	adds	r3, #4
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	79fa      	ldrb	r2, [r7, #7]
 80070f8:	492e      	ldr	r1, [pc, #184]	; (80071b4 <STEPPER_One_Step+0x274>)
 80070fa:	4613      	mov	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	3312      	adds	r3, #18
 8007106:	8819      	ldrh	r1, [r3, #0]
 8007108:	79fa      	ldrb	r2, [r7, #7]
 800710a:	4c2b      	ldr	r4, [pc, #172]	; (80071b8 <STEPPER_One_Step+0x278>)
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4423      	add	r3, r4
 8007116:	330f      	adds	r3, #15
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	4a29      	ldr	r2, [pc, #164]	; (80071c0 <STEPPER_One_Step+0x280>)
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	461a      	mov	r2, r3
 8007124:	f7fc fb12 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007128:	79fa      	ldrb	r2, [r7, #7]
 800712a:	4922      	ldr	r1, [pc, #136]	; (80071b4 <STEPPER_One_Step+0x274>)
 800712c:	4613      	mov	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	3308      	adds	r3, #8
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	79fa      	ldrb	r2, [r7, #7]
 800713c:	491d      	ldr	r1, [pc, #116]	; (80071b4 <STEPPER_One_Step+0x274>)
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	3314      	adds	r3, #20
 800714a:	8819      	ldrh	r1, [r3, #0]
 800714c:	79fa      	ldrb	r2, [r7, #7]
 800714e:	4c1a      	ldr	r4, [pc, #104]	; (80071b8 <STEPPER_One_Step+0x278>)
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4423      	add	r3, r4
 800715a:	330f      	adds	r3, #15
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <STEPPER_One_Step+0x280>)
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	789b      	ldrb	r3, [r3, #2]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fc faf0 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800716c:	79fa      	ldrb	r2, [r7, #7]
 800716e:	4911      	ldr	r1, [pc, #68]	; (80071b4 <STEPPER_One_Step+0x274>)
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	330c      	adds	r3, #12
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	79fa      	ldrb	r2, [r7, #7]
 8007180:	490c      	ldr	r1, [pc, #48]	; (80071b4 <STEPPER_One_Step+0x274>)
 8007182:	4613      	mov	r3, r2
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	1a9b      	subs	r3, r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	3316      	adds	r3, #22
 800718e:	8819      	ldrh	r1, [r3, #0]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	4c09      	ldr	r4, [pc, #36]	; (80071b8 <STEPPER_One_Step+0x278>)
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4423      	add	r3, r4
 800719e:	330f      	adds	r3, #15
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <STEPPER_One_Step+0x280>)
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7fc face 	bl	800374c <HAL_GPIO_WritePin>
 80071b0:	e09b      	b.n	80072ea <STEPPER_One_Step+0x3aa>
 80071b2:	bf00      	nop
 80071b4:	0801b9b4 	.word	0x0801b9b4
 80071b8:	20000424 	.word	0x20000424
 80071bc:	2000000c 	.word	0x2000000c
 80071c0:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80071c4:	79fa      	ldrb	r2, [r7, #7]
 80071c6:	4988      	ldr	r1, [pc, #544]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	331b      	adds	r3, #27
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f040 8087 	bne.w	80072ea <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	4982      	ldr	r1, [pc, #520]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 80071e0:	4613      	mov	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	497e      	ldr	r1, [pc, #504]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 80071f0:	4613      	mov	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	3310      	adds	r3, #16
 80071fc:	8819      	ldrh	r1, [r3, #0]
 80071fe:	79fa      	ldrb	r2, [r7, #7]
 8007200:	4c7a      	ldr	r4, [pc, #488]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4423      	add	r3, r4
 800720c:	330f      	adds	r3, #15
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	4b77      	ldr	r3, [pc, #476]	; (80073f0 <STEPPER_One_Step+0x4b0>)
 8007214:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007218:	461a      	mov	r2, r3
 800721a:	f7fc fa97 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800721e:	79fa      	ldrb	r2, [r7, #7]
 8007220:	4971      	ldr	r1, [pc, #452]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 8007222:	4613      	mov	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3304      	adds	r3, #4
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	79fa      	ldrb	r2, [r7, #7]
 8007232:	496d      	ldr	r1, [pc, #436]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	3312      	adds	r3, #18
 8007240:	8819      	ldrh	r1, [r3, #0]
 8007242:	79fa      	ldrb	r2, [r7, #7]
 8007244:	4c69      	ldr	r4, [pc, #420]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4423      	add	r3, r4
 8007250:	330f      	adds	r3, #15
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	4a66      	ldr	r2, [pc, #408]	; (80073f0 <STEPPER_One_Step+0x4b0>)
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	461a      	mov	r2, r3
 800725e:	f7fc fa75 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007262:	79fa      	ldrb	r2, [r7, #7]
 8007264:	4960      	ldr	r1, [pc, #384]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	3308      	adds	r3, #8
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	79fa      	ldrb	r2, [r7, #7]
 8007276:	495c      	ldr	r1, [pc, #368]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 8007278:	4613      	mov	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	3314      	adds	r3, #20
 8007284:	8819      	ldrh	r1, [r3, #0]
 8007286:	79fa      	ldrb	r2, [r7, #7]
 8007288:	4c58      	ldr	r4, [pc, #352]	; (80073ec <STEPPER_One_Step+0x4ac>)
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4423      	add	r3, r4
 8007294:	330f      	adds	r3, #15
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4a55      	ldr	r2, [pc, #340]	; (80073f0 <STEPPER_One_Step+0x4b0>)
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	789b      	ldrb	r3, [r3, #2]
 80072a0:	461a      	mov	r2, r3
 80072a2:	f7fc fa53 	bl	800374c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80072a6:	79fa      	ldrb	r2, [r7, #7]
 80072a8:	494f      	ldr	r1, [pc, #316]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 80072aa:	4613      	mov	r3, r2
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	330c      	adds	r3, #12
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	79fa      	ldrb	r2, [r7, #7]
 80072ba:	494b      	ldr	r1, [pc, #300]	; (80073e8 <STEPPER_One_Step+0x4a8>)
 80072bc:	4613      	mov	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	3316      	adds	r3, #22
 80072c8:	8819      	ldrh	r1, [r3, #0]
 80072ca:	79fa      	ldrb	r2, [r7, #7]
 80072cc:	4c47      	ldr	r4, [pc, #284]	; (80073ec <STEPPER_One_Step+0x4ac>)
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4423      	add	r3, r4
 80072d8:	330f      	adds	r3, #15
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4a44      	ldr	r2, [pc, #272]	; (80073f0 <STEPPER_One_Step+0x4b0>)
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	78db      	ldrb	r3, [r3, #3]
 80072e4:	461a      	mov	r2, r3
 80072e6:	f7fc fa31 	bl	800374c <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	493f      	ldr	r1, [pc, #252]	; (80073ec <STEPPER_One_Step+0x4ac>)
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	3311      	adds	r3, #17
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d132      	bne.n	8007366 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8007300:	79fa      	ldrb	r2, [r7, #7]
 8007302:	493a      	ldr	r1, [pc, #232]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	330f      	adds	r3, #15
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d112      	bne.n	800733c <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8007316:	79f9      	ldrb	r1, [r7, #7]
 8007318:	79fa      	ldrb	r2, [r7, #7]
 800731a:	4834      	ldr	r0, [pc, #208]	; (80073ec <STEPPER_One_Step+0x4ac>)
 800731c:	460b      	mov	r3, r1
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4403      	add	r3, r0
 8007326:	3310      	adds	r3, #16
 8007328:	7818      	ldrb	r0, [r3, #0]
 800732a:	4930      	ldr	r1, [pc, #192]	; (80073ec <STEPPER_One_Step+0x4ac>)
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	330f      	adds	r3, #15
 8007338:	4602      	mov	r2, r0
 800733a:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 800733c:	79fa      	ldrb	r2, [r7, #7]
 800733e:	492b      	ldr	r1, [pc, #172]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	330f      	adds	r3, #15
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	b2d8      	uxtb	r0, r3
 8007352:	4926      	ldr	r1, [pc, #152]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	330f      	adds	r3, #15
 8007360:	4602      	mov	r2, r0
 8007362:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8007364:	e03c      	b.n	80073e0 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8007366:	79fa      	ldrb	r2, [r7, #7]
 8007368:	4920      	ldr	r1, [pc, #128]	; (80073ec <STEPPER_One_Step+0x4ac>)
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3311      	adds	r3, #17
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d131      	bne.n	80073e0 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 800737c:	79fa      	ldrb	r2, [r7, #7]
 800737e:	491b      	ldr	r1, [pc, #108]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	330f      	adds	r3, #15
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	b2d8      	uxtb	r0, r3
 8007392:	4916      	ldr	r1, [pc, #88]	; (80073ec <STEPPER_One_Step+0x4ac>)
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	330f      	adds	r3, #15
 80073a0:	4602      	mov	r2, r0
 80073a2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80073a4:	79fa      	ldrb	r2, [r7, #7]
 80073a6:	4911      	ldr	r1, [pc, #68]	; (80073ec <STEPPER_One_Step+0x4ac>)
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	330f      	adds	r3, #15
 80073b4:	7819      	ldrb	r1, [r3, #0]
 80073b6:	79fa      	ldrb	r2, [r7, #7]
 80073b8:	480c      	ldr	r0, [pc, #48]	; (80073ec <STEPPER_One_Step+0x4ac>)
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4403      	add	r3, r0
 80073c4:	3310      	adds	r3, #16
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d109      	bne.n	80073e0 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80073cc:	79fa      	ldrb	r2, [r7, #7]
 80073ce:	4907      	ldr	r1, [pc, #28]	; (80073ec <STEPPER_One_Step+0x4ac>)
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	330f      	adds	r3, #15
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}
 80073e8:	0801b9b4 	.word	0x0801b9b4
 80073ec:	20000424 	.word	0x20000424
 80073f0:	2000002c 	.word	0x2000002c

080073f4 <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
 8007400:	4613      	mov	r3, r2
 8007402:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 800740c:	79fa      	ldrb	r2, [r7, #7]
 800740e:	4926      	ldr	r1, [pc, #152]	; (80074a8 <STEPPER_Step_Blocking+0xb4>)
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	3311      	adds	r3, #17
 800741c:	79ba      	ldrb	r2, [r7, #6]
 800741e:	701a      	strb	r2, [r3, #0]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 8007420:	79fa      	ldrb	r2, [r7, #7]
 8007422:	4921      	ldr	r1, [pc, #132]	; (80074a8 <STEPPER_Step_Blocking+0xb4>)
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	330e      	adds	r3, #14
 8007430:	2201      	movs	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 8007434:	79fa      	ldrb	r2, [r7, #7]
 8007436:	491c      	ldr	r1, [pc, #112]	; (80074a8 <STEPPER_Step_Blocking+0xb4>)
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	330c      	adds	r3, #12
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	79fa      	ldrb	r2, [r7, #7]
 800744a:	4918      	ldr	r1, [pc, #96]	; (80074ac <STEPPER_Step_Blocking+0xb8>)
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3318      	adds	r3, #24
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	fb00 f303 	mul.w	r3, r0, r3
 800745e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007462:	fb92 f3f3 	sdiv	r3, r2, r3
 8007466:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e009      	b.n	8007482 <STEPPER_Step_Blocking+0x8e>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fd65 	bl	8006f40 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 8007476:	68b8      	ldr	r0, [r7, #8]
 8007478:	f7ff fba0 	bl	8006bbc <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d3f1      	bcc.n	800746e <STEPPER_Step_Blocking+0x7a>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 800748a:	79fa      	ldrb	r2, [r7, #7]
 800748c:	4906      	ldr	r1, [pc, #24]	; (80074a8 <STEPPER_Step_Blocking+0xb4>)
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	330e      	adds	r3, #14
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000424 	.word	0x20000424
 80074ac:	0801b9b4 	.word	0x0801b9b4

080074b0 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a34      	ldr	r2, [pc, #208]	; (8007594 <STEPPER_TMR_OVF_ISR+0xe4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d162      	bne.n	800758c <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	e05c      	b.n	8007586 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80074cc:	7bfa      	ldrb	r2, [r7, #15]
 80074ce:	4932      	ldr	r1, [pc, #200]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	3304      	adds	r3, #4
 80074dc:	6819      	ldr	r1, [r3, #0]
 80074de:	7bfa      	ldrb	r2, [r7, #15]
 80074e0:	482d      	ldr	r0, [pc, #180]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4403      	add	r3, r0
 80074ec:	3308      	adds	r3, #8
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4299      	cmp	r1, r3
 80074f2:	d333      	bcc.n	800755c <STEPPER_TMR_OVF_ISR+0xac>
 80074f4:	7bfa      	ldrb	r2, [r7, #15]
 80074f6:	4928      	ldr	r1, [pc, #160]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	330e      	adds	r3, #14
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d028      	beq.n	800755c <STEPPER_TMR_OVF_ISR+0xac>
 800750a:	7bfa      	ldrb	r2, [r7, #15]
 800750c:	4922      	ldr	r1, [pc, #136]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01e      	beq.n	800755c <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fd0d 	bl	8006f40 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	491b      	ldr	r1, [pc, #108]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	1e59      	subs	r1, r3, #1
 8007538:	4817      	ldr	r0, [pc, #92]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4403      	add	r3, r0
 8007544:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8007546:	7bfa      	ldrb	r2, [r7, #15]
 8007548:	4913      	ldr	r1, [pc, #76]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3304      	adds	r3, #4
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e011      	b.n	8007580 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	490e      	ldr	r1, [pc, #56]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	3304      	adds	r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	4809      	ldr	r0, [pc, #36]	; (8007598 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4403      	add	r3, r0
 800757c:	3304      	adds	r3, #4
 800757e:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	3301      	adds	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d09f      	beq.n	80074cc <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40014000 	.word	0x40014000
 8007598:	20000424 	.word	0x20000424

0800759c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80075a0:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <DWT_Delay_Init+0x58>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <DWT_Delay_Init+0x58>)
 80075a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075aa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <DWT_Delay_Init+0x58>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <DWT_Delay_Init+0x58>)
 80075b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0e      	ldr	r2, [pc, #56]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80075d6:	bf00      	nop
    __ASM volatile ("NOP");
 80075d8:	bf00      	nop
    __ASM volatile ("NOP");
 80075da:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <DWT_Delay_Init+0x5c>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80075e4:	2300      	movs	r3, #0
 80075e6:	e000      	b.n	80075ea <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80075e8:	2301      	movs	r3, #1
    }
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	e000edf0 	.word	0xe000edf0
 80075f8:	e0001000 	.word	0xe0001000

080075fc <std>:
 80075fc:	2300      	movs	r3, #0
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
 8007602:	e9c0 3300 	strd	r3, r3, [r0]
 8007606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800760a:	6083      	str	r3, [r0, #8]
 800760c:	8181      	strh	r1, [r0, #12]
 800760e:	6643      	str	r3, [r0, #100]	; 0x64
 8007610:	81c2      	strh	r2, [r0, #14]
 8007612:	6183      	str	r3, [r0, #24]
 8007614:	4619      	mov	r1, r3
 8007616:	2208      	movs	r2, #8
 8007618:	305c      	adds	r0, #92	; 0x5c
 800761a:	f000 f906 	bl	800782a <memset>
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <std+0x58>)
 8007620:	6263      	str	r3, [r4, #36]	; 0x24
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <std+0x5c>)
 8007624:	62a3      	str	r3, [r4, #40]	; 0x28
 8007626:	4b0d      	ldr	r3, [pc, #52]	; (800765c <std+0x60>)
 8007628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <std+0x64>)
 800762c:	6323      	str	r3, [r4, #48]	; 0x30
 800762e:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <std+0x68>)
 8007630:	6224      	str	r4, [r4, #32]
 8007632:	429c      	cmp	r4, r3
 8007634:	d006      	beq.n	8007644 <std+0x48>
 8007636:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800763a:	4294      	cmp	r4, r2
 800763c:	d002      	beq.n	8007644 <std+0x48>
 800763e:	33d0      	adds	r3, #208	; 0xd0
 8007640:	429c      	cmp	r4, r3
 8007642:	d105      	bne.n	8007650 <std+0x54>
 8007644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764c:	f000 b966 	b.w	800791c <__retarget_lock_init_recursive>
 8007650:	bd10      	pop	{r4, pc}
 8007652:	bf00      	nop
 8007654:	080077a5 	.word	0x080077a5
 8007658:	080077c7 	.word	0x080077c7
 800765c:	080077ff 	.word	0x080077ff
 8007660:	08007823 	.word	0x08007823
 8007664:	20000438 	.word	0x20000438

08007668 <stdio_exit_handler>:
 8007668:	4a02      	ldr	r2, [pc, #8]	; (8007674 <stdio_exit_handler+0xc>)
 800766a:	4903      	ldr	r1, [pc, #12]	; (8007678 <stdio_exit_handler+0x10>)
 800766c:	4803      	ldr	r0, [pc, #12]	; (800767c <stdio_exit_handler+0x14>)
 800766e:	f000 b869 	b.w	8007744 <_fwalk_sglue>
 8007672:	bf00      	nop
 8007674:	2000004c 	.word	0x2000004c
 8007678:	080081c9 	.word	0x080081c9
 800767c:	20000058 	.word	0x20000058

08007680 <cleanup_stdio>:
 8007680:	6841      	ldr	r1, [r0, #4]
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <cleanup_stdio+0x34>)
 8007684:	4299      	cmp	r1, r3
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	d001      	beq.n	8007690 <cleanup_stdio+0x10>
 800768c:	f000 fd9c 	bl	80081c8 <_fflush_r>
 8007690:	68a1      	ldr	r1, [r4, #8]
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <cleanup_stdio+0x38>)
 8007694:	4299      	cmp	r1, r3
 8007696:	d002      	beq.n	800769e <cleanup_stdio+0x1e>
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fd95 	bl	80081c8 <_fflush_r>
 800769e:	68e1      	ldr	r1, [r4, #12]
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <cleanup_stdio+0x3c>)
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d004      	beq.n	80076b0 <cleanup_stdio+0x30>
 80076a6:	4620      	mov	r0, r4
 80076a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ac:	f000 bd8c 	b.w	80081c8 <_fflush_r>
 80076b0:	bd10      	pop	{r4, pc}
 80076b2:	bf00      	nop
 80076b4:	20000438 	.word	0x20000438
 80076b8:	200004a0 	.word	0x200004a0
 80076bc:	20000508 	.word	0x20000508

080076c0 <global_stdio_init.part.0>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <global_stdio_init.part.0+0x30>)
 80076c4:	4c0b      	ldr	r4, [pc, #44]	; (80076f4 <global_stdio_init.part.0+0x34>)
 80076c6:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <global_stdio_init.part.0+0x38>)
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	4620      	mov	r0, r4
 80076cc:	2200      	movs	r2, #0
 80076ce:	2104      	movs	r1, #4
 80076d0:	f7ff ff94 	bl	80075fc <std>
 80076d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076d8:	2201      	movs	r2, #1
 80076da:	2109      	movs	r1, #9
 80076dc:	f7ff ff8e 	bl	80075fc <std>
 80076e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076e4:	2202      	movs	r2, #2
 80076e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ea:	2112      	movs	r1, #18
 80076ec:	f7ff bf86 	b.w	80075fc <std>
 80076f0:	20000570 	.word	0x20000570
 80076f4:	20000438 	.word	0x20000438
 80076f8:	08007669 	.word	0x08007669

080076fc <__sfp_lock_acquire>:
 80076fc:	4801      	ldr	r0, [pc, #4]	; (8007704 <__sfp_lock_acquire+0x8>)
 80076fe:	f000 b90e 	b.w	800791e <__retarget_lock_acquire_recursive>
 8007702:	bf00      	nop
 8007704:	20000579 	.word	0x20000579

08007708 <__sfp_lock_release>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__sfp_lock_release+0x8>)
 800770a:	f000 b909 	b.w	8007920 <__retarget_lock_release_recursive>
 800770e:	bf00      	nop
 8007710:	20000579 	.word	0x20000579

08007714 <__sinit>:
 8007714:	b510      	push	{r4, lr}
 8007716:	4604      	mov	r4, r0
 8007718:	f7ff fff0 	bl	80076fc <__sfp_lock_acquire>
 800771c:	6a23      	ldr	r3, [r4, #32]
 800771e:	b11b      	cbz	r3, 8007728 <__sinit+0x14>
 8007720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007724:	f7ff bff0 	b.w	8007708 <__sfp_lock_release>
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <__sinit+0x28>)
 800772a:	6223      	str	r3, [r4, #32]
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <__sinit+0x2c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f5      	bne.n	8007720 <__sinit+0xc>
 8007734:	f7ff ffc4 	bl	80076c0 <global_stdio_init.part.0>
 8007738:	e7f2      	b.n	8007720 <__sinit+0xc>
 800773a:	bf00      	nop
 800773c:	08007681 	.word	0x08007681
 8007740:	20000570 	.word	0x20000570

08007744 <_fwalk_sglue>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	4607      	mov	r7, r0
 800774a:	4688      	mov	r8, r1
 800774c:	4614      	mov	r4, r2
 800774e:	2600      	movs	r6, #0
 8007750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007754:	f1b9 0901 	subs.w	r9, r9, #1
 8007758:	d505      	bpl.n	8007766 <_fwalk_sglue+0x22>
 800775a:	6824      	ldr	r4, [r4, #0]
 800775c:	2c00      	cmp	r4, #0
 800775e:	d1f7      	bne.n	8007750 <_fwalk_sglue+0xc>
 8007760:	4630      	mov	r0, r6
 8007762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007766:	89ab      	ldrh	r3, [r5, #12]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d907      	bls.n	800777c <_fwalk_sglue+0x38>
 800776c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007770:	3301      	adds	r3, #1
 8007772:	d003      	beq.n	800777c <_fwalk_sglue+0x38>
 8007774:	4629      	mov	r1, r5
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	4306      	orrs	r6, r0
 800777c:	3568      	adds	r5, #104	; 0x68
 800777e:	e7e9      	b.n	8007754 <_fwalk_sglue+0x10>

08007780 <iprintf>:
 8007780:	b40f      	push	{r0, r1, r2, r3}
 8007782:	b507      	push	{r0, r1, r2, lr}
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <iprintf+0x20>)
 8007786:	ab04      	add	r3, sp, #16
 8007788:	6808      	ldr	r0, [r1, #0]
 800778a:	f853 2b04 	ldr.w	r2, [r3], #4
 800778e:	6881      	ldr	r1, [r0, #8]
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	f000 f9e9 	bl	8007b68 <_vfiprintf_r>
 8007796:	b003      	add	sp, #12
 8007798:	f85d eb04 	ldr.w	lr, [sp], #4
 800779c:	b004      	add	sp, #16
 800779e:	4770      	bx	lr
 80077a0:	200000a4 	.word	0x200000a4

080077a4 <__sread>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	460c      	mov	r4, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	f000 f868 	bl	8007880 <_read_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	bfab      	itete	ge
 80077b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077b6:	89a3      	ldrhlt	r3, [r4, #12]
 80077b8:	181b      	addge	r3, r3, r0
 80077ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077be:	bfac      	ite	ge
 80077c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077c2:	81a3      	strhlt	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__swrite>:
 80077c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ca:	461f      	mov	r7, r3
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	05db      	lsls	r3, r3, #23
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4616      	mov	r6, r2
 80077d6:	d505      	bpl.n	80077e4 <__swrite+0x1e>
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	2302      	movs	r3, #2
 80077de:	2200      	movs	r2, #0
 80077e0:	f000 f83c 	bl	800785c <_lseek_r>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	4628      	mov	r0, r5
 80077f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	f000 b853 	b.w	80078a4 <_write_r>

080077fe <__sseek>:
 80077fe:	b510      	push	{r4, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007806:	f000 f829 	bl	800785c <_lseek_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	bf15      	itete	ne
 8007810:	6560      	strne	r0, [r4, #84]	; 0x54
 8007812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800781a:	81a3      	strheq	r3, [r4, #12]
 800781c:	bf18      	it	ne
 800781e:	81a3      	strhne	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__sclose>:
 8007822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007826:	f000 b809 	b.w	800783c <_close_r>

0800782a <memset>:
 800782a:	4402      	add	r2, r0
 800782c:	4603      	mov	r3, r0
 800782e:	4293      	cmp	r3, r2
 8007830:	d100      	bne.n	8007834 <memset+0xa>
 8007832:	4770      	bx	lr
 8007834:	f803 1b01 	strb.w	r1, [r3], #1
 8007838:	e7f9      	b.n	800782e <memset+0x4>
	...

0800783c <_close_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4d06      	ldr	r5, [pc, #24]	; (8007858 <_close_r+0x1c>)
 8007840:	2300      	movs	r3, #0
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	f7fa f911 	bl	8001a6e <_close>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_close_r+0x1a>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	b103      	cbz	r3, 8007856 <_close_r+0x1a>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	20000574 	.word	0x20000574

0800785c <_lseek_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	; (800787c <_lseek_r+0x20>)
 8007860:	4604      	mov	r4, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	602a      	str	r2, [r5, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7fa f926 	bl	8001abc <_lseek>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_lseek_r+0x1e>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_lseek_r+0x1e>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20000574 	.word	0x20000574

08007880 <_read_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d07      	ldr	r5, [pc, #28]	; (80078a0 <_read_r+0x20>)
 8007884:	4604      	mov	r4, r0
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fa f8b4 	bl	80019fc <_read>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_read_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_read_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000574 	.word	0x20000574

080078a4 <_write_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_write_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fa f8bf 	bl	8001a36 <_write>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_write_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_write_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000574 	.word	0x20000574

080078c8 <__errno>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	; (80078d0 <__errno+0x8>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	200000a4 	.word	0x200000a4

080078d4 <__libc_init_array>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	4d0d      	ldr	r5, [pc, #52]	; (800790c <__libc_init_array+0x38>)
 80078d8:	4c0d      	ldr	r4, [pc, #52]	; (8007910 <__libc_init_array+0x3c>)
 80078da:	1b64      	subs	r4, r4, r5
 80078dc:	10a4      	asrs	r4, r4, #2
 80078de:	2600      	movs	r6, #0
 80078e0:	42a6      	cmp	r6, r4
 80078e2:	d109      	bne.n	80078f8 <__libc_init_array+0x24>
 80078e4:	4d0b      	ldr	r5, [pc, #44]	; (8007914 <__libc_init_array+0x40>)
 80078e6:	4c0c      	ldr	r4, [pc, #48]	; (8007918 <__libc_init_array+0x44>)
 80078e8:	f000 fdc0 	bl	800846c <_init>
 80078ec:	1b64      	subs	r4, r4, r5
 80078ee:	10a4      	asrs	r4, r4, #2
 80078f0:	2600      	movs	r6, #0
 80078f2:	42a6      	cmp	r6, r4
 80078f4:	d105      	bne.n	8007902 <__libc_init_array+0x2e>
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fc:	4798      	blx	r3
 80078fe:	3601      	adds	r6, #1
 8007900:	e7ee      	b.n	80078e0 <__libc_init_array+0xc>
 8007902:	f855 3b04 	ldr.w	r3, [r5], #4
 8007906:	4798      	blx	r3
 8007908:	3601      	adds	r6, #1
 800790a:	e7f2      	b.n	80078f2 <__libc_init_array+0x1e>
 800790c:	0801ba0c 	.word	0x0801ba0c
 8007910:	0801ba0c 	.word	0x0801ba0c
 8007914:	0801ba0c 	.word	0x0801ba0c
 8007918:	0801ba10 	.word	0x0801ba10

0800791c <__retarget_lock_init_recursive>:
 800791c:	4770      	bx	lr

0800791e <__retarget_lock_acquire_recursive>:
 800791e:	4770      	bx	lr

08007920 <__retarget_lock_release_recursive>:
 8007920:	4770      	bx	lr
	...

08007924 <_free_r>:
 8007924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007926:	2900      	cmp	r1, #0
 8007928:	d044      	beq.n	80079b4 <_free_r+0x90>
 800792a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792e:	9001      	str	r0, [sp, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f1a1 0404 	sub.w	r4, r1, #4
 8007936:	bfb8      	it	lt
 8007938:	18e4      	addlt	r4, r4, r3
 800793a:	f000 f8df 	bl	8007afc <__malloc_lock>
 800793e:	4a1e      	ldr	r2, [pc, #120]	; (80079b8 <_free_r+0x94>)
 8007940:	9801      	ldr	r0, [sp, #4]
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	b933      	cbnz	r3, 8007954 <_free_r+0x30>
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	6014      	str	r4, [r2, #0]
 800794a:	b003      	add	sp, #12
 800794c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007950:	f000 b8da 	b.w	8007b08 <__malloc_unlock>
 8007954:	42a3      	cmp	r3, r4
 8007956:	d908      	bls.n	800796a <_free_r+0x46>
 8007958:	6825      	ldr	r5, [r4, #0]
 800795a:	1961      	adds	r1, r4, r5
 800795c:	428b      	cmp	r3, r1
 800795e:	bf01      	itttt	eq
 8007960:	6819      	ldreq	r1, [r3, #0]
 8007962:	685b      	ldreq	r3, [r3, #4]
 8007964:	1949      	addeq	r1, r1, r5
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	e7ed      	b.n	8007946 <_free_r+0x22>
 800796a:	461a      	mov	r2, r3
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b10b      	cbz	r3, 8007974 <_free_r+0x50>
 8007970:	42a3      	cmp	r3, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x46>
 8007974:	6811      	ldr	r1, [r2, #0]
 8007976:	1855      	adds	r5, r2, r1
 8007978:	42a5      	cmp	r5, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x70>
 800797c:	6824      	ldr	r4, [r4, #0]
 800797e:	4421      	add	r1, r4
 8007980:	1854      	adds	r4, r2, r1
 8007982:	42a3      	cmp	r3, r4
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	d1e0      	bne.n	800794a <_free_r+0x26>
 8007988:	681c      	ldr	r4, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6053      	str	r3, [r2, #4]
 800798e:	440c      	add	r4, r1
 8007990:	6014      	str	r4, [r2, #0]
 8007992:	e7da      	b.n	800794a <_free_r+0x26>
 8007994:	d902      	bls.n	800799c <_free_r+0x78>
 8007996:	230c      	movs	r3, #12
 8007998:	6003      	str	r3, [r0, #0]
 800799a:	e7d6      	b.n	800794a <_free_r+0x26>
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1961      	adds	r1, r4, r5
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1949      	addeq	r1, r1, r5
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	6054      	str	r4, [r2, #4]
 80079b2:	e7ca      	b.n	800794a <_free_r+0x26>
 80079b4:	b003      	add	sp, #12
 80079b6:	bd30      	pop	{r4, r5, pc}
 80079b8:	2000057c 	.word	0x2000057c

080079bc <sbrk_aligned>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4e0e      	ldr	r6, [pc, #56]	; (80079f8 <sbrk_aligned+0x3c>)
 80079c0:	460c      	mov	r4, r1
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	4605      	mov	r5, r0
 80079c6:	b911      	cbnz	r1, 80079ce <sbrk_aligned+0x12>
 80079c8:	f000 fcbc 	bl	8008344 <_sbrk_r>
 80079cc:	6030      	str	r0, [r6, #0]
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fcb7 	bl	8008344 <_sbrk_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d00a      	beq.n	80079f0 <sbrk_aligned+0x34>
 80079da:	1cc4      	adds	r4, r0, #3
 80079dc:	f024 0403 	bic.w	r4, r4, #3
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d007      	beq.n	80079f4 <sbrk_aligned+0x38>
 80079e4:	1a21      	subs	r1, r4, r0
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fcac 	bl	8008344 <_sbrk_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	d101      	bne.n	80079f4 <sbrk_aligned+0x38>
 80079f0:	f04f 34ff 	mov.w	r4, #4294967295
 80079f4:	4620      	mov	r0, r4
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	20000580 	.word	0x20000580

080079fc <_malloc_r>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	1ccd      	adds	r5, r1, #3
 8007a02:	f025 0503 	bic.w	r5, r5, #3
 8007a06:	3508      	adds	r5, #8
 8007a08:	2d0c      	cmp	r5, #12
 8007a0a:	bf38      	it	cc
 8007a0c:	250c      	movcc	r5, #12
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	4607      	mov	r7, r0
 8007a12:	db01      	blt.n	8007a18 <_malloc_r+0x1c>
 8007a14:	42a9      	cmp	r1, r5
 8007a16:	d905      	bls.n	8007a24 <_malloc_r+0x28>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007af8 <_malloc_r+0xfc>
 8007a28:	f000 f868 	bl	8007afc <__malloc_lock>
 8007a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a30:	461c      	mov	r4, r3
 8007a32:	bb5c      	cbnz	r4, 8007a8c <_malloc_r+0x90>
 8007a34:	4629      	mov	r1, r5
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff ffc0 	bl	80079bc <sbrk_aligned>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	4604      	mov	r4, r0
 8007a40:	d155      	bne.n	8007aee <_malloc_r+0xf2>
 8007a42:	f8d8 4000 	ldr.w	r4, [r8]
 8007a46:	4626      	mov	r6, r4
 8007a48:	2e00      	cmp	r6, #0
 8007a4a:	d145      	bne.n	8007ad8 <_malloc_r+0xdc>
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	d048      	beq.n	8007ae2 <_malloc_r+0xe6>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	4631      	mov	r1, r6
 8007a54:	4638      	mov	r0, r7
 8007a56:	eb04 0903 	add.w	r9, r4, r3
 8007a5a:	f000 fc73 	bl	8008344 <_sbrk_r>
 8007a5e:	4581      	cmp	r9, r0
 8007a60:	d13f      	bne.n	8007ae2 <_malloc_r+0xe6>
 8007a62:	6821      	ldr	r1, [r4, #0]
 8007a64:	1a6d      	subs	r5, r5, r1
 8007a66:	4629      	mov	r1, r5
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffa7 	bl	80079bc <sbrk_aligned>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d037      	beq.n	8007ae2 <_malloc_r+0xe6>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	442b      	add	r3, r5
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d038      	beq.n	8007af2 <_malloc_r+0xf6>
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	42a2      	cmp	r2, r4
 8007a84:	d12b      	bne.n	8007ade <_malloc_r+0xe2>
 8007a86:	2200      	movs	r2, #0
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	e00f      	b.n	8007aac <_malloc_r+0xb0>
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	1b52      	subs	r2, r2, r5
 8007a90:	d41f      	bmi.n	8007ad2 <_malloc_r+0xd6>
 8007a92:	2a0b      	cmp	r2, #11
 8007a94:	d917      	bls.n	8007ac6 <_malloc_r+0xca>
 8007a96:	1961      	adds	r1, r4, r5
 8007a98:	42a3      	cmp	r3, r4
 8007a9a:	6025      	str	r5, [r4, #0]
 8007a9c:	bf18      	it	ne
 8007a9e:	6059      	strne	r1, [r3, #4]
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	bf08      	it	eq
 8007aa4:	f8c8 1000 	streq.w	r1, [r8]
 8007aa8:	5162      	str	r2, [r4, r5]
 8007aaa:	604b      	str	r3, [r1, #4]
 8007aac:	4638      	mov	r0, r7
 8007aae:	f104 060b 	add.w	r6, r4, #11
 8007ab2:	f000 f829 	bl	8007b08 <__malloc_unlock>
 8007ab6:	f026 0607 	bic.w	r6, r6, #7
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	1af2      	subs	r2, r6, r3
 8007abe:	d0ae      	beq.n	8007a1e <_malloc_r+0x22>
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	50a3      	str	r3, [r4, r2]
 8007ac4:	e7ab      	b.n	8007a1e <_malloc_r+0x22>
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	6862      	ldr	r2, [r4, #4]
 8007aca:	d1dd      	bne.n	8007a88 <_malloc_r+0x8c>
 8007acc:	f8c8 2000 	str.w	r2, [r8]
 8007ad0:	e7ec      	b.n	8007aac <_malloc_r+0xb0>
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	6864      	ldr	r4, [r4, #4]
 8007ad6:	e7ac      	b.n	8007a32 <_malloc_r+0x36>
 8007ad8:	4634      	mov	r4, r6
 8007ada:	6876      	ldr	r6, [r6, #4]
 8007adc:	e7b4      	b.n	8007a48 <_malloc_r+0x4c>
 8007ade:	4613      	mov	r3, r2
 8007ae0:	e7cc      	b.n	8007a7c <_malloc_r+0x80>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	f000 f80e 	bl	8007b08 <__malloc_unlock>
 8007aec:	e797      	b.n	8007a1e <_malloc_r+0x22>
 8007aee:	6025      	str	r5, [r4, #0]
 8007af0:	e7dc      	b.n	8007aac <_malloc_r+0xb0>
 8007af2:	605b      	str	r3, [r3, #4]
 8007af4:	deff      	udf	#255	; 0xff
 8007af6:	bf00      	nop
 8007af8:	2000057c 	.word	0x2000057c

08007afc <__malloc_lock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	; (8007b04 <__malloc_lock+0x8>)
 8007afe:	f7ff bf0e 	b.w	800791e <__retarget_lock_acquire_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000578 	.word	0x20000578

08007b08 <__malloc_unlock>:
 8007b08:	4801      	ldr	r0, [pc, #4]	; (8007b10 <__malloc_unlock+0x8>)
 8007b0a:	f7ff bf09 	b.w	8007920 <__retarget_lock_release_recursive>
 8007b0e:	bf00      	nop
 8007b10:	20000578 	.word	0x20000578

08007b14 <__sfputc_r>:
 8007b14:	6893      	ldr	r3, [r2, #8]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	b410      	push	{r4}
 8007b1c:	6093      	str	r3, [r2, #8]
 8007b1e:	da08      	bge.n	8007b32 <__sfputc_r+0x1e>
 8007b20:	6994      	ldr	r4, [r2, #24]
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	db01      	blt.n	8007b2a <__sfputc_r+0x16>
 8007b26:	290a      	cmp	r1, #10
 8007b28:	d103      	bne.n	8007b32 <__sfputc_r+0x1e>
 8007b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b2e:	f000 bb73 	b.w	8008218 <__swbuf_r>
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	1c58      	adds	r0, r3, #1
 8007b36:	6010      	str	r0, [r2, #0]
 8007b38:	7019      	strb	r1, [r3, #0]
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <__sfputs_r>:
 8007b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	18d5      	adds	r5, r2, r3
 8007b4c:	42ac      	cmp	r4, r5
 8007b4e:	d101      	bne.n	8007b54 <__sfputs_r+0x12>
 8007b50:	2000      	movs	r0, #0
 8007b52:	e007      	b.n	8007b64 <__sfputs_r+0x22>
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ffda 	bl	8007b14 <__sfputc_r>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d1f3      	bne.n	8007b4c <__sfputs_r+0xa>
 8007b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b68 <_vfiprintf_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	b09d      	sub	sp, #116	; 0x74
 8007b70:	4614      	mov	r4, r2
 8007b72:	4698      	mov	r8, r3
 8007b74:	4606      	mov	r6, r0
 8007b76:	b118      	cbz	r0, 8007b80 <_vfiprintf_r+0x18>
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b90b      	cbnz	r3, 8007b80 <_vfiprintf_r+0x18>
 8007b7c:	f7ff fdca 	bl	8007714 <__sinit>
 8007b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_vfiprintf_r+0x2a>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_vfiprintf_r+0x2a>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f7ff fec6 	bl	800791e <__retarget_lock_acquire_recursive>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	071b      	lsls	r3, r3, #28
 8007b96:	d501      	bpl.n	8007b9c <_vfiprintf_r+0x34>
 8007b98:	692b      	ldr	r3, [r5, #16]
 8007b9a:	b99b      	cbnz	r3, 8007bc4 <_vfiprintf_r+0x5c>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 fb78 	bl	8008294 <__swsetup_r>
 8007ba4:	b170      	cbz	r0, 8007bc4 <_vfiprintf_r+0x5c>
 8007ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba8:	07dc      	lsls	r4, r3, #31
 8007baa:	d504      	bpl.n	8007bb6 <_vfiprintf_r+0x4e>
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	b01d      	add	sp, #116	; 0x74
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	0598      	lsls	r0, r3, #22
 8007bba:	d4f7      	bmi.n	8007bac <_vfiprintf_r+0x44>
 8007bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bbe:	f7ff feaf 	bl	8007920 <__retarget_lock_release_recursive>
 8007bc2:	e7f3      	b.n	8007bac <_vfiprintf_r+0x44>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd2:	2330      	movs	r3, #48	; 0x30
 8007bd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d88 <_vfiprintf_r+0x220>
 8007bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bdc:	f04f 0901 	mov.w	r9, #1
 8007be0:	4623      	mov	r3, r4
 8007be2:	469a      	mov	sl, r3
 8007be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be8:	b10a      	cbz	r2, 8007bee <_vfiprintf_r+0x86>
 8007bea:	2a25      	cmp	r2, #37	; 0x25
 8007bec:	d1f9      	bne.n	8007be2 <_vfiprintf_r+0x7a>
 8007bee:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf2:	d00b      	beq.n	8007c0c <_vfiprintf_r+0xa4>
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ffa1 	bl	8007b42 <__sfputs_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	f000 80a9 	beq.w	8007d58 <_vfiprintf_r+0x1f0>
 8007c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c08:	445a      	add	r2, fp
 8007c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80a1 	beq.w	8007d58 <_vfiprintf_r+0x1f0>
 8007c16:	2300      	movs	r3, #0
 8007c18:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c20:	f10a 0a01 	add.w	sl, sl, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c2e:	4654      	mov	r4, sl
 8007c30:	2205      	movs	r2, #5
 8007c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c36:	4854      	ldr	r0, [pc, #336]	; (8007d88 <_vfiprintf_r+0x220>)
 8007c38:	f7f8 faca 	bl	80001d0 <memchr>
 8007c3c:	9a04      	ldr	r2, [sp, #16]
 8007c3e:	b9d8      	cbnz	r0, 8007c78 <_vfiprintf_r+0x110>
 8007c40:	06d1      	lsls	r1, r2, #27
 8007c42:	bf44      	itt	mi
 8007c44:	2320      	movmi	r3, #32
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c4a:	0713      	lsls	r3, r2, #28
 8007c4c:	bf44      	itt	mi
 8007c4e:	232b      	movmi	r3, #43	; 0x2b
 8007c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c54:	f89a 3000 	ldrb.w	r3, [sl]
 8007c58:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5a:	d015      	beq.n	8007c88 <_vfiprintf_r+0x120>
 8007c5c:	9a07      	ldr	r2, [sp, #28]
 8007c5e:	4654      	mov	r4, sl
 8007c60:	2000      	movs	r0, #0
 8007c62:	f04f 0c0a 	mov.w	ip, #10
 8007c66:	4621      	mov	r1, r4
 8007c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6c:	3b30      	subs	r3, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d94d      	bls.n	8007d0e <_vfiprintf_r+0x1a6>
 8007c72:	b1b0      	cbz	r0, 8007ca2 <_vfiprintf_r+0x13a>
 8007c74:	9207      	str	r2, [sp, #28]
 8007c76:	e014      	b.n	8007ca2 <_vfiprintf_r+0x13a>
 8007c78:	eba0 0308 	sub.w	r3, r0, r8
 8007c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	46a2      	mov	sl, r4
 8007c86:	e7d2      	b.n	8007c2e <_vfiprintf_r+0xc6>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	1d19      	adds	r1, r3, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	9103      	str	r1, [sp, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbb      	ittet	lt
 8007c94:	425b      	neglt	r3, r3
 8007c96:	f042 0202 	orrlt.w	r2, r2, #2
 8007c9a:	9307      	strge	r3, [sp, #28]
 8007c9c:	9307      	strlt	r3, [sp, #28]
 8007c9e:	bfb8      	it	lt
 8007ca0:	9204      	strlt	r2, [sp, #16]
 8007ca2:	7823      	ldrb	r3, [r4, #0]
 8007ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca6:	d10c      	bne.n	8007cc2 <_vfiprintf_r+0x15a>
 8007ca8:	7863      	ldrb	r3, [r4, #1]
 8007caa:	2b2a      	cmp	r3, #42	; 0x2a
 8007cac:	d134      	bne.n	8007d18 <_vfiprintf_r+0x1b0>
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	9203      	str	r2, [sp, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cbe:	3402      	adds	r4, #2
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d98 <_vfiprintf_r+0x230>
 8007cc6:	7821      	ldrb	r1, [r4, #0]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	4650      	mov	r0, sl
 8007ccc:	f7f8 fa80 	bl	80001d0 <memchr>
 8007cd0:	b138      	cbz	r0, 8007ce2 <_vfiprintf_r+0x17a>
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	eba0 000a 	sub.w	r0, r0, sl
 8007cd8:	2240      	movs	r2, #64	; 0x40
 8007cda:	4082      	lsls	r2, r0
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	3401      	adds	r4, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	4829      	ldr	r0, [pc, #164]	; (8007d8c <_vfiprintf_r+0x224>)
 8007ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cec:	2206      	movs	r2, #6
 8007cee:	f7f8 fa6f 	bl	80001d0 <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d03f      	beq.n	8007d76 <_vfiprintf_r+0x20e>
 8007cf6:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <_vfiprintf_r+0x228>)
 8007cf8:	bb1b      	cbnz	r3, 8007d42 <_vfiprintf_r+0x1da>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	443b      	add	r3, r7
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e768      	b.n	8007be0 <_vfiprintf_r+0x78>
 8007d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d12:	460c      	mov	r4, r1
 8007d14:	2001      	movs	r0, #1
 8007d16:	e7a6      	b.n	8007c66 <_vfiprintf_r+0xfe>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	f04f 0c0a 	mov.w	ip, #10
 8007d24:	4620      	mov	r0, r4
 8007d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d2a:	3a30      	subs	r2, #48	; 0x30
 8007d2c:	2a09      	cmp	r2, #9
 8007d2e:	d903      	bls.n	8007d38 <_vfiprintf_r+0x1d0>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0c6      	beq.n	8007cc2 <_vfiprintf_r+0x15a>
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	e7c4      	b.n	8007cc2 <_vfiprintf_r+0x15a>
 8007d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e7f0      	b.n	8007d24 <_vfiprintf_r+0x1bc>
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <_vfiprintf_r+0x22c>)
 8007d4a:	a904      	add	r1, sp, #16
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f3af 8000 	nop.w
 8007d52:	4607      	mov	r7, r0
 8007d54:	1c78      	adds	r0, r7, #1
 8007d56:	d1d6      	bne.n	8007d06 <_vfiprintf_r+0x19e>
 8007d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_vfiprintf_r+0x202>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	059a      	lsls	r2, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_vfiprintf_r+0x202>
 8007d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d66:	f7ff fddb 	bl	8007920 <__retarget_lock_release_recursive>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	065b      	lsls	r3, r3, #25
 8007d6e:	f53f af1d 	bmi.w	8007bac <_vfiprintf_r+0x44>
 8007d72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d74:	e71c      	b.n	8007bb0 <_vfiprintf_r+0x48>
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <_vfiprintf_r+0x22c>)
 8007d7e:	a904      	add	r1, sp, #16
 8007d80:	4630      	mov	r0, r6
 8007d82:	f000 f879 	bl	8007e78 <_printf_i>
 8007d86:	e7e4      	b.n	8007d52 <_vfiprintf_r+0x1ea>
 8007d88:	0801b9d0 	.word	0x0801b9d0
 8007d8c:	0801b9da 	.word	0x0801b9da
 8007d90:	00000000 	.word	0x00000000
 8007d94:	08007b43 	.word	0x08007b43
 8007d98:	0801b9d6 	.word	0x0801b9d6

08007d9c <_printf_common>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	4616      	mov	r6, r2
 8007da2:	4699      	mov	r9, r3
 8007da4:	688a      	ldr	r2, [r1, #8]
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	bfb8      	it	lt
 8007db0:	4613      	movlt	r3, r2
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007db8:	4607      	mov	r7, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b10a      	cbz	r2, 8007dc2 <_printf_common+0x26>
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	6033      	str	r3, [r6, #0]
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	0699      	lsls	r1, r3, #26
 8007dc6:	bf42      	ittt	mi
 8007dc8:	6833      	ldrmi	r3, [r6, #0]
 8007dca:	3302      	addmi	r3, #2
 8007dcc:	6033      	strmi	r3, [r6, #0]
 8007dce:	6825      	ldr	r5, [r4, #0]
 8007dd0:	f015 0506 	ands.w	r5, r5, #6
 8007dd4:	d106      	bne.n	8007de4 <_printf_common+0x48>
 8007dd6:	f104 0a19 	add.w	sl, r4, #25
 8007dda:	68e3      	ldr	r3, [r4, #12]
 8007ddc:	6832      	ldr	r2, [r6, #0]
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	42ab      	cmp	r3, r5
 8007de2:	dc26      	bgt.n	8007e32 <_printf_common+0x96>
 8007de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007de8:	1e13      	subs	r3, r2, #0
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	bf18      	it	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	0692      	lsls	r2, r2, #26
 8007df2:	d42b      	bmi.n	8007e4c <_printf_common+0xb0>
 8007df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d01e      	beq.n	8007e40 <_printf_common+0xa4>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	6922      	ldr	r2, [r4, #16]
 8007e06:	f003 0306 	and.w	r3, r3, #6
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	bf02      	ittt	eq
 8007e0e:	68e5      	ldreq	r5, [r4, #12]
 8007e10:	6833      	ldreq	r3, [r6, #0]
 8007e12:	1aed      	subeq	r5, r5, r3
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	bf0c      	ite	eq
 8007e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e1c:	2500      	movne	r5, #0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	bfc4      	itt	gt
 8007e22:	1a9b      	subgt	r3, r3, r2
 8007e24:	18ed      	addgt	r5, r5, r3
 8007e26:	2600      	movs	r6, #0
 8007e28:	341a      	adds	r4, #26
 8007e2a:	42b5      	cmp	r5, r6
 8007e2c:	d11a      	bne.n	8007e64 <_printf_common+0xc8>
 8007e2e:	2000      	movs	r0, #0
 8007e30:	e008      	b.n	8007e44 <_printf_common+0xa8>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4652      	mov	r2, sl
 8007e36:	4649      	mov	r1, r9
 8007e38:	4638      	mov	r0, r7
 8007e3a:	47c0      	blx	r8
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d103      	bne.n	8007e48 <_printf_common+0xac>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e48:	3501      	adds	r5, #1
 8007e4a:	e7c6      	b.n	8007dda <_printf_common+0x3e>
 8007e4c:	18e1      	adds	r1, r4, r3
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	2030      	movs	r0, #48	; 0x30
 8007e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e56:	4422      	add	r2, r4
 8007e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e60:	3302      	adds	r3, #2
 8007e62:	e7c7      	b.n	8007df4 <_printf_common+0x58>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4622      	mov	r2, r4
 8007e68:	4649      	mov	r1, r9
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	47c0      	blx	r8
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d0e6      	beq.n	8007e40 <_printf_common+0xa4>
 8007e72:	3601      	adds	r6, #1
 8007e74:	e7d9      	b.n	8007e2a <_printf_common+0x8e>
	...

08007e78 <_printf_i>:
 8007e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	7e0f      	ldrb	r7, [r1, #24]
 8007e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e80:	2f78      	cmp	r7, #120	; 0x78
 8007e82:	4691      	mov	r9, r2
 8007e84:	4680      	mov	r8, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	469a      	mov	sl, r3
 8007e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e8e:	d807      	bhi.n	8007ea0 <_printf_i+0x28>
 8007e90:	2f62      	cmp	r7, #98	; 0x62
 8007e92:	d80a      	bhi.n	8007eaa <_printf_i+0x32>
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	f000 80d4 	beq.w	8008042 <_printf_i+0x1ca>
 8007e9a:	2f58      	cmp	r7, #88	; 0x58
 8007e9c:	f000 80c0 	beq.w	8008020 <_printf_i+0x1a8>
 8007ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ea8:	e03a      	b.n	8007f20 <_printf_i+0xa8>
 8007eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eae:	2b15      	cmp	r3, #21
 8007eb0:	d8f6      	bhi.n	8007ea0 <_printf_i+0x28>
 8007eb2:	a101      	add	r1, pc, #4	; (adr r1, 8007eb8 <_printf_i+0x40>)
 8007eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f25 	.word	0x08007f25
 8007ec0:	08007ea1 	.word	0x08007ea1
 8007ec4:	08007ea1 	.word	0x08007ea1
 8007ec8:	08007ea1 	.word	0x08007ea1
 8007ecc:	08007ea1 	.word	0x08007ea1
 8007ed0:	08007f25 	.word	0x08007f25
 8007ed4:	08007ea1 	.word	0x08007ea1
 8007ed8:	08007ea1 	.word	0x08007ea1
 8007edc:	08007ea1 	.word	0x08007ea1
 8007ee0:	08007ea1 	.word	0x08007ea1
 8007ee4:	08008029 	.word	0x08008029
 8007ee8:	08007f51 	.word	0x08007f51
 8007eec:	08007fe3 	.word	0x08007fe3
 8007ef0:	08007ea1 	.word	0x08007ea1
 8007ef4:	08007ea1 	.word	0x08007ea1
 8007ef8:	0800804b 	.word	0x0800804b
 8007efc:	08007ea1 	.word	0x08007ea1
 8007f00:	08007f51 	.word	0x08007f51
 8007f04:	08007ea1 	.word	0x08007ea1
 8007f08:	08007ea1 	.word	0x08007ea1
 8007f0c:	08007feb 	.word	0x08007feb
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	1d1a      	adds	r2, r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	602a      	str	r2, [r5, #0]
 8007f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f20:	2301      	movs	r3, #1
 8007f22:	e09f      	b.n	8008064 <_printf_i+0x1ec>
 8007f24:	6820      	ldr	r0, [r4, #0]
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	0607      	lsls	r7, r0, #24
 8007f2a:	f103 0104 	add.w	r1, r3, #4
 8007f2e:	6029      	str	r1, [r5, #0]
 8007f30:	d501      	bpl.n	8007f36 <_printf_i+0xbe>
 8007f32:	681e      	ldr	r6, [r3, #0]
 8007f34:	e003      	b.n	8007f3e <_printf_i+0xc6>
 8007f36:	0646      	lsls	r6, r0, #25
 8007f38:	d5fb      	bpl.n	8007f32 <_printf_i+0xba>
 8007f3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	da03      	bge.n	8007f4a <_printf_i+0xd2>
 8007f42:	232d      	movs	r3, #45	; 0x2d
 8007f44:	4276      	negs	r6, r6
 8007f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4a:	485a      	ldr	r0, [pc, #360]	; (80080b4 <_printf_i+0x23c>)
 8007f4c:	230a      	movs	r3, #10
 8007f4e:	e012      	b.n	8007f76 <_printf_i+0xfe>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	6820      	ldr	r0, [r4, #0]
 8007f54:	1d19      	adds	r1, r3, #4
 8007f56:	6029      	str	r1, [r5, #0]
 8007f58:	0605      	lsls	r5, r0, #24
 8007f5a:	d501      	bpl.n	8007f60 <_printf_i+0xe8>
 8007f5c:	681e      	ldr	r6, [r3, #0]
 8007f5e:	e002      	b.n	8007f66 <_printf_i+0xee>
 8007f60:	0641      	lsls	r1, r0, #25
 8007f62:	d5fb      	bpl.n	8007f5c <_printf_i+0xe4>
 8007f64:	881e      	ldrh	r6, [r3, #0]
 8007f66:	4853      	ldr	r0, [pc, #332]	; (80080b4 <_printf_i+0x23c>)
 8007f68:	2f6f      	cmp	r7, #111	; 0x6f
 8007f6a:	bf0c      	ite	eq
 8007f6c:	2308      	moveq	r3, #8
 8007f6e:	230a      	movne	r3, #10
 8007f70:	2100      	movs	r1, #0
 8007f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f76:	6865      	ldr	r5, [r4, #4]
 8007f78:	60a5      	str	r5, [r4, #8]
 8007f7a:	2d00      	cmp	r5, #0
 8007f7c:	bfa2      	ittt	ge
 8007f7e:	6821      	ldrge	r1, [r4, #0]
 8007f80:	f021 0104 	bicge.w	r1, r1, #4
 8007f84:	6021      	strge	r1, [r4, #0]
 8007f86:	b90e      	cbnz	r6, 8007f8c <_printf_i+0x114>
 8007f88:	2d00      	cmp	r5, #0
 8007f8a:	d04b      	beq.n	8008024 <_printf_i+0x1ac>
 8007f8c:	4615      	mov	r5, r2
 8007f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f92:	fb03 6711 	mls	r7, r3, r1, r6
 8007f96:	5dc7      	ldrb	r7, [r0, r7]
 8007f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f9c:	4637      	mov	r7, r6
 8007f9e:	42bb      	cmp	r3, r7
 8007fa0:	460e      	mov	r6, r1
 8007fa2:	d9f4      	bls.n	8007f8e <_printf_i+0x116>
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d10b      	bne.n	8007fc0 <_printf_i+0x148>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	07de      	lsls	r6, r3, #31
 8007fac:	d508      	bpl.n	8007fc0 <_printf_i+0x148>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	6861      	ldr	r1, [r4, #4]
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	bfde      	ittt	le
 8007fb6:	2330      	movle	r3, #48	; 0x30
 8007fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fc0:	1b52      	subs	r2, r2, r5
 8007fc2:	6122      	str	r2, [r4, #16]
 8007fc4:	f8cd a000 	str.w	sl, [sp]
 8007fc8:	464b      	mov	r3, r9
 8007fca:	aa03      	add	r2, sp, #12
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4640      	mov	r0, r8
 8007fd0:	f7ff fee4 	bl	8007d9c <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d14a      	bne.n	800806e <_printf_i+0x1f6>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	b004      	add	sp, #16
 8007fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	f043 0320 	orr.w	r3, r3, #32
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	4833      	ldr	r0, [pc, #204]	; (80080b8 <_printf_i+0x240>)
 8007fec:	2778      	movs	r7, #120	; 0x78
 8007fee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	6829      	ldr	r1, [r5, #0]
 8007ff6:	061f      	lsls	r7, r3, #24
 8007ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ffc:	d402      	bmi.n	8008004 <_printf_i+0x18c>
 8007ffe:	065f      	lsls	r7, r3, #25
 8008000:	bf48      	it	mi
 8008002:	b2b6      	uxthmi	r6, r6
 8008004:	07df      	lsls	r7, r3, #31
 8008006:	bf48      	it	mi
 8008008:	f043 0320 	orrmi.w	r3, r3, #32
 800800c:	6029      	str	r1, [r5, #0]
 800800e:	bf48      	it	mi
 8008010:	6023      	strmi	r3, [r4, #0]
 8008012:	b91e      	cbnz	r6, 800801c <_printf_i+0x1a4>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	f023 0320 	bic.w	r3, r3, #32
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	2310      	movs	r3, #16
 800801e:	e7a7      	b.n	8007f70 <_printf_i+0xf8>
 8008020:	4824      	ldr	r0, [pc, #144]	; (80080b4 <_printf_i+0x23c>)
 8008022:	e7e4      	b.n	8007fee <_printf_i+0x176>
 8008024:	4615      	mov	r5, r2
 8008026:	e7bd      	b.n	8007fa4 <_printf_i+0x12c>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	6826      	ldr	r6, [r4, #0]
 800802c:	6961      	ldr	r1, [r4, #20]
 800802e:	1d18      	adds	r0, r3, #4
 8008030:	6028      	str	r0, [r5, #0]
 8008032:	0635      	lsls	r5, r6, #24
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	d501      	bpl.n	800803c <_printf_i+0x1c4>
 8008038:	6019      	str	r1, [r3, #0]
 800803a:	e002      	b.n	8008042 <_printf_i+0x1ca>
 800803c:	0670      	lsls	r0, r6, #25
 800803e:	d5fb      	bpl.n	8008038 <_printf_i+0x1c0>
 8008040:	8019      	strh	r1, [r3, #0]
 8008042:	2300      	movs	r3, #0
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	4615      	mov	r5, r2
 8008048:	e7bc      	b.n	8007fc4 <_printf_i+0x14c>
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	1d1a      	adds	r2, r3, #4
 800804e:	602a      	str	r2, [r5, #0]
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	6862      	ldr	r2, [r4, #4]
 8008054:	2100      	movs	r1, #0
 8008056:	4628      	mov	r0, r5
 8008058:	f7f8 f8ba 	bl	80001d0 <memchr>
 800805c:	b108      	cbz	r0, 8008062 <_printf_i+0x1ea>
 800805e:	1b40      	subs	r0, r0, r5
 8008060:	6060      	str	r0, [r4, #4]
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	2300      	movs	r3, #0
 8008068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800806c:	e7aa      	b.n	8007fc4 <_printf_i+0x14c>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	462a      	mov	r2, r5
 8008072:	4649      	mov	r1, r9
 8008074:	4640      	mov	r0, r8
 8008076:	47d0      	blx	sl
 8008078:	3001      	adds	r0, #1
 800807a:	d0ad      	beq.n	8007fd8 <_printf_i+0x160>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	079b      	lsls	r3, r3, #30
 8008080:	d413      	bmi.n	80080aa <_printf_i+0x232>
 8008082:	68e0      	ldr	r0, [r4, #12]
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	4298      	cmp	r0, r3
 8008088:	bfb8      	it	lt
 800808a:	4618      	movlt	r0, r3
 800808c:	e7a6      	b.n	8007fdc <_printf_i+0x164>
 800808e:	2301      	movs	r3, #1
 8008090:	4632      	mov	r2, r6
 8008092:	4649      	mov	r1, r9
 8008094:	4640      	mov	r0, r8
 8008096:	47d0      	blx	sl
 8008098:	3001      	adds	r0, #1
 800809a:	d09d      	beq.n	8007fd8 <_printf_i+0x160>
 800809c:	3501      	adds	r5, #1
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	9903      	ldr	r1, [sp, #12]
 80080a2:	1a5b      	subs	r3, r3, r1
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dcf2      	bgt.n	800808e <_printf_i+0x216>
 80080a8:	e7eb      	b.n	8008082 <_printf_i+0x20a>
 80080aa:	2500      	movs	r5, #0
 80080ac:	f104 0619 	add.w	r6, r4, #25
 80080b0:	e7f5      	b.n	800809e <_printf_i+0x226>
 80080b2:	bf00      	nop
 80080b4:	0801b9e1 	.word	0x0801b9e1
 80080b8:	0801b9f2 	.word	0x0801b9f2

080080bc <__sflush_r>:
 80080bc:	898a      	ldrh	r2, [r1, #12]
 80080be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c2:	4605      	mov	r5, r0
 80080c4:	0710      	lsls	r0, r2, #28
 80080c6:	460c      	mov	r4, r1
 80080c8:	d458      	bmi.n	800817c <__sflush_r+0xc0>
 80080ca:	684b      	ldr	r3, [r1, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dc05      	bgt.n	80080dc <__sflush_r+0x20>
 80080d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc02      	bgt.n	80080dc <__sflush_r+0x20>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d0f9      	beq.n	80080d6 <__sflush_r+0x1a>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e8:	682f      	ldr	r7, [r5, #0]
 80080ea:	6a21      	ldr	r1, [r4, #32]
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	d032      	beq.n	8008156 <__sflush_r+0x9a>
 80080f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	075a      	lsls	r2, r3, #29
 80080f6:	d505      	bpl.n	8008104 <__sflush_r+0x48>
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	1ac0      	subs	r0, r0, r3
 80080fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080fe:	b10b      	cbz	r3, 8008104 <__sflush_r+0x48>
 8008100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008102:	1ac0      	subs	r0, r0, r3
 8008104:	2300      	movs	r3, #0
 8008106:	4602      	mov	r2, r0
 8008108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800810a:	6a21      	ldr	r1, [r4, #32]
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	d106      	bne.n	8008124 <__sflush_r+0x68>
 8008116:	6829      	ldr	r1, [r5, #0]
 8008118:	291d      	cmp	r1, #29
 800811a:	d82b      	bhi.n	8008174 <__sflush_r+0xb8>
 800811c:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <__sflush_r+0x108>)
 800811e:	410a      	asrs	r2, r1
 8008120:	07d6      	lsls	r6, r2, #31
 8008122:	d427      	bmi.n	8008174 <__sflush_r+0xb8>
 8008124:	2200      	movs	r2, #0
 8008126:	6062      	str	r2, [r4, #4]
 8008128:	04d9      	lsls	r1, r3, #19
 800812a:	6922      	ldr	r2, [r4, #16]
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	d504      	bpl.n	800813a <__sflush_r+0x7e>
 8008130:	1c42      	adds	r2, r0, #1
 8008132:	d101      	bne.n	8008138 <__sflush_r+0x7c>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b903      	cbnz	r3, 800813a <__sflush_r+0x7e>
 8008138:	6560      	str	r0, [r4, #84]	; 0x54
 800813a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813c:	602f      	str	r7, [r5, #0]
 800813e:	2900      	cmp	r1, #0
 8008140:	d0c9      	beq.n	80080d6 <__sflush_r+0x1a>
 8008142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008146:	4299      	cmp	r1, r3
 8008148:	d002      	beq.n	8008150 <__sflush_r+0x94>
 800814a:	4628      	mov	r0, r5
 800814c:	f7ff fbea 	bl	8007924 <_free_r>
 8008150:	2000      	movs	r0, #0
 8008152:	6360      	str	r0, [r4, #52]	; 0x34
 8008154:	e7c0      	b.n	80080d8 <__sflush_r+0x1c>
 8008156:	2301      	movs	r3, #1
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	1c41      	adds	r1, r0, #1
 800815e:	d1c8      	bne.n	80080f2 <__sflush_r+0x36>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0c5      	beq.n	80080f2 <__sflush_r+0x36>
 8008166:	2b1d      	cmp	r3, #29
 8008168:	d001      	beq.n	800816e <__sflush_r+0xb2>
 800816a:	2b16      	cmp	r3, #22
 800816c:	d101      	bne.n	8008172 <__sflush_r+0xb6>
 800816e:	602f      	str	r7, [r5, #0]
 8008170:	e7b1      	b.n	80080d6 <__sflush_r+0x1a>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7ad      	b.n	80080d8 <__sflush_r+0x1c>
 800817c:	690f      	ldr	r7, [r1, #16]
 800817e:	2f00      	cmp	r7, #0
 8008180:	d0a9      	beq.n	80080d6 <__sflush_r+0x1a>
 8008182:	0793      	lsls	r3, r2, #30
 8008184:	680e      	ldr	r6, [r1, #0]
 8008186:	bf08      	it	eq
 8008188:	694b      	ldreq	r3, [r1, #20]
 800818a:	600f      	str	r7, [r1, #0]
 800818c:	bf18      	it	ne
 800818e:	2300      	movne	r3, #0
 8008190:	eba6 0807 	sub.w	r8, r6, r7
 8008194:	608b      	str	r3, [r1, #8]
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	dd9c      	ble.n	80080d6 <__sflush_r+0x1a>
 800819c:	6a21      	ldr	r1, [r4, #32]
 800819e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081a0:	4643      	mov	r3, r8
 80081a2:	463a      	mov	r2, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b0      	blx	r6
 80081a8:	2800      	cmp	r0, #0
 80081aa:	dc06      	bgt.n	80081ba <__sflush_r+0xfe>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	e78e      	b.n	80080d8 <__sflush_r+0x1c>
 80081ba:	4407      	add	r7, r0
 80081bc:	eba8 0800 	sub.w	r8, r8, r0
 80081c0:	e7e9      	b.n	8008196 <__sflush_r+0xda>
 80081c2:	bf00      	nop
 80081c4:	dfbffffe 	.word	0xdfbffffe

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b913      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d2:	2500      	movs	r5, #0
 80081d4:	4628      	mov	r0, r5
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	b118      	cbz	r0, 80081e2 <_fflush_r+0x1a>
 80081da:	6a03      	ldr	r3, [r0, #32]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_fflush_r+0x1a>
 80081de:	f7ff fa99 	bl	8007714 <__sinit>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f3      	beq.n	80081d2 <_fflush_r+0xa>
 80081ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081ec:	07d0      	lsls	r0, r2, #31
 80081ee:	d404      	bmi.n	80081fa <_fflush_r+0x32>
 80081f0:	0599      	lsls	r1, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_fflush_r+0x32>
 80081f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f6:	f7ff fb92 	bl	800791e <__retarget_lock_acquire_recursive>
 80081fa:	4628      	mov	r0, r5
 80081fc:	4621      	mov	r1, r4
 80081fe:	f7ff ff5d 	bl	80080bc <__sflush_r>
 8008202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008204:	07da      	lsls	r2, r3, #31
 8008206:	4605      	mov	r5, r0
 8008208:	d4e4      	bmi.n	80081d4 <_fflush_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	d4e1      	bmi.n	80081d4 <_fflush_r+0xc>
 8008210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008212:	f7ff fb85 	bl	8007920 <__retarget_lock_release_recursive>
 8008216:	e7dd      	b.n	80081d4 <_fflush_r+0xc>

08008218 <__swbuf_r>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	460e      	mov	r6, r1
 800821c:	4614      	mov	r4, r2
 800821e:	4605      	mov	r5, r0
 8008220:	b118      	cbz	r0, 800822a <__swbuf_r+0x12>
 8008222:	6a03      	ldr	r3, [r0, #32]
 8008224:	b90b      	cbnz	r3, 800822a <__swbuf_r+0x12>
 8008226:	f7ff fa75 	bl	8007714 <__sinit>
 800822a:	69a3      	ldr	r3, [r4, #24]
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	071a      	lsls	r2, r3, #28
 8008232:	d525      	bpl.n	8008280 <__swbuf_r+0x68>
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b31b      	cbz	r3, 8008280 <__swbuf_r+0x68>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	6922      	ldr	r2, [r4, #16]
 800823c:	1a98      	subs	r0, r3, r2
 800823e:	6963      	ldr	r3, [r4, #20]
 8008240:	b2f6      	uxtb	r6, r6
 8008242:	4283      	cmp	r3, r0
 8008244:	4637      	mov	r7, r6
 8008246:	dc04      	bgt.n	8008252 <__swbuf_r+0x3a>
 8008248:	4621      	mov	r1, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff ffbc 	bl	80081c8 <_fflush_r>
 8008250:	b9e0      	cbnz	r0, 800828c <__swbuf_r+0x74>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	3b01      	subs	r3, #1
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	701e      	strb	r6, [r3, #0]
 8008260:	6962      	ldr	r2, [r4, #20]
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	429a      	cmp	r2, r3
 8008266:	d004      	beq.n	8008272 <__swbuf_r+0x5a>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d506      	bpl.n	800827c <__swbuf_r+0x64>
 800826e:	2e0a      	cmp	r6, #10
 8008270:	d104      	bne.n	800827c <__swbuf_r+0x64>
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f7ff ffa7 	bl	80081c8 <_fflush_r>
 800827a:	b938      	cbnz	r0, 800828c <__swbuf_r+0x74>
 800827c:	4638      	mov	r0, r7
 800827e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f806 	bl	8008294 <__swsetup_r>
 8008288:	2800      	cmp	r0, #0
 800828a:	d0d5      	beq.n	8008238 <__swbuf_r+0x20>
 800828c:	f04f 37ff 	mov.w	r7, #4294967295
 8008290:	e7f4      	b.n	800827c <__swbuf_r+0x64>
	...

08008294 <__swsetup_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <__swsetup_r+0xac>)
 8008298:	4605      	mov	r5, r0
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	460c      	mov	r4, r1
 800829e:	b118      	cbz	r0, 80082a8 <__swsetup_r+0x14>
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b90b      	cbnz	r3, 80082a8 <__swsetup_r+0x14>
 80082a4:	f7ff fa36 	bl	8007714 <__sinit>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ae:	0718      	lsls	r0, r3, #28
 80082b0:	d422      	bmi.n	80082f8 <__swsetup_r+0x64>
 80082b2:	06d9      	lsls	r1, r3, #27
 80082b4:	d407      	bmi.n	80082c6 <__swsetup_r+0x32>
 80082b6:	2309      	movs	r3, #9
 80082b8:	602b      	str	r3, [r5, #0]
 80082ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	e034      	b.n	8008330 <__swsetup_r+0x9c>
 80082c6:	0758      	lsls	r0, r3, #29
 80082c8:	d512      	bpl.n	80082f0 <__swsetup_r+0x5c>
 80082ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082cc:	b141      	cbz	r1, 80082e0 <__swsetup_r+0x4c>
 80082ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d2:	4299      	cmp	r1, r3
 80082d4:	d002      	beq.n	80082dc <__swsetup_r+0x48>
 80082d6:	4628      	mov	r0, r5
 80082d8:	f7ff fb24 	bl	8007924 <_free_r>
 80082dc:	2300      	movs	r3, #0
 80082de:	6363      	str	r3, [r4, #52]	; 0x34
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	2300      	movs	r3, #0
 80082ea:	6063      	str	r3, [r4, #4]
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f043 0308 	orr.w	r3, r3, #8
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	b94b      	cbnz	r3, 8008310 <__swsetup_r+0x7c>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008306:	d003      	beq.n	8008310 <__swsetup_r+0x7c>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 f850 	bl	80083b0 <__smakebuf_r>
 8008310:	89a0      	ldrh	r0, [r4, #12]
 8008312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008316:	f010 0301 	ands.w	r3, r0, #1
 800831a:	d00a      	beq.n	8008332 <__swsetup_r+0x9e>
 800831c:	2300      	movs	r3, #0
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	6963      	ldr	r3, [r4, #20]
 8008322:	425b      	negs	r3, r3
 8008324:	61a3      	str	r3, [r4, #24]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	b943      	cbnz	r3, 800833c <__swsetup_r+0xa8>
 800832a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800832e:	d1c4      	bne.n	80082ba <__swsetup_r+0x26>
 8008330:	bd38      	pop	{r3, r4, r5, pc}
 8008332:	0781      	lsls	r1, r0, #30
 8008334:	bf58      	it	pl
 8008336:	6963      	ldrpl	r3, [r4, #20]
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	e7f4      	b.n	8008326 <__swsetup_r+0x92>
 800833c:	2000      	movs	r0, #0
 800833e:	e7f7      	b.n	8008330 <__swsetup_r+0x9c>
 8008340:	200000a4 	.word	0x200000a4

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	; (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f9 fbc2 	bl	8001ad8 <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000574 	.word	0x20000574

08008364 <__swhatbuf_r>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	2900      	cmp	r1, #0
 800836e:	b096      	sub	sp, #88	; 0x58
 8008370:	4615      	mov	r5, r2
 8008372:	461e      	mov	r6, r3
 8008374:	da0d      	bge.n	8008392 <__swhatbuf_r+0x2e>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	f013 0f80 	tst.w	r3, #128	; 0x80
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	bf0c      	ite	eq
 8008382:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008386:	2340      	movne	r3, #64	; 0x40
 8008388:	2000      	movs	r0, #0
 800838a:	6031      	str	r1, [r6, #0]
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	b016      	add	sp, #88	; 0x58
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	466a      	mov	r2, sp
 8008394:	f000 f848 	bl	8008428 <_fstat_r>
 8008398:	2800      	cmp	r0, #0
 800839a:	dbec      	blt.n	8008376 <__swhatbuf_r+0x12>
 800839c:	9901      	ldr	r1, [sp, #4]
 800839e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083a6:	4259      	negs	r1, r3
 80083a8:	4159      	adcs	r1, r3
 80083aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ae:	e7eb      	b.n	8008388 <__swhatbuf_r+0x24>

080083b0 <__smakebuf_r>:
 80083b0:	898b      	ldrh	r3, [r1, #12]
 80083b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083b4:	079d      	lsls	r5, r3, #30
 80083b6:	4606      	mov	r6, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	d507      	bpl.n	80083cc <__smakebuf_r+0x1c>
 80083bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	2301      	movs	r3, #1
 80083c6:	6163      	str	r3, [r4, #20]
 80083c8:	b002      	add	sp, #8
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	ab01      	add	r3, sp, #4
 80083ce:	466a      	mov	r2, sp
 80083d0:	f7ff ffc8 	bl	8008364 <__swhatbuf_r>
 80083d4:	9900      	ldr	r1, [sp, #0]
 80083d6:	4605      	mov	r5, r0
 80083d8:	4630      	mov	r0, r6
 80083da:	f7ff fb0f 	bl	80079fc <_malloc_r>
 80083de:	b948      	cbnz	r0, 80083f4 <__smakebuf_r+0x44>
 80083e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e4:	059a      	lsls	r2, r3, #22
 80083e6:	d4ef      	bmi.n	80083c8 <__smakebuf_r+0x18>
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	f043 0302 	orr.w	r3, r3, #2
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7e3      	b.n	80083bc <__smakebuf_r+0xc>
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	6020      	str	r0, [r4, #0]
 80083f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	9b00      	ldr	r3, [sp, #0]
 8008400:	6163      	str	r3, [r4, #20]
 8008402:	9b01      	ldr	r3, [sp, #4]
 8008404:	6120      	str	r0, [r4, #16]
 8008406:	b15b      	cbz	r3, 8008420 <__smakebuf_r+0x70>
 8008408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800840c:	4630      	mov	r0, r6
 800840e:	f000 f81d 	bl	800844c <_isatty_r>
 8008412:	b128      	cbz	r0, 8008420 <__smakebuf_r+0x70>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	f043 0301 	orr.w	r3, r3, #1
 800841e:	81a3      	strh	r3, [r4, #12]
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	431d      	orrs	r5, r3
 8008424:	81a5      	strh	r5, [r4, #12]
 8008426:	e7cf      	b.n	80083c8 <__smakebuf_r+0x18>

08008428 <_fstat_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	; (8008448 <_fstat_r+0x20>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	4611      	mov	r1, r2
 8008434:	602b      	str	r3, [r5, #0]
 8008436:	f7f9 fb26 	bl	8001a86 <_fstat>
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	d102      	bne.n	8008444 <_fstat_r+0x1c>
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	b103      	cbz	r3, 8008444 <_fstat_r+0x1c>
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	bd38      	pop	{r3, r4, r5, pc}
 8008446:	bf00      	nop
 8008448:	20000574 	.word	0x20000574

0800844c <_isatty_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_isatty_r+0x1c>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	f7f9 fb25 	bl	8001aa6 <_isatty>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_isatty_r+0x1a>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_isatty_r+0x1a>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	20000574 	.word	0x20000574

0800846c <_init>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr

08008478 <_fini>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr
