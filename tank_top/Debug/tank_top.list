
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a04c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013640  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d81c  0801d81c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d81c  0801d81c  0002d81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d824  0801d824  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d824  0801d824  0002d824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d828  0801d828  0002d828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801d82c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5a0  2000009c  0801d8c8  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a63c  0801d8c8  0003a63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad11  00000000  00000000  0003010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380d  00000000  00000000  0004ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0004e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022acc  00000000  00000000  0004fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da88  00000000  00000000  000726bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de3ab  00000000  00000000  00090144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001094  00000000  00000000  0016e4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d34  00000000  00000000  0016f584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001752b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1c4 	.word	0x0800a1c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800a1c4 	.word	0x0800a1c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b08b      	sub	sp, #44	; 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000dd8:	e030      	b.n	8000e3c <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1d1a      	adds	r2, r3, #4
 8000dde:	60fa      	str	r2, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1d1a      	adds	r2, r3, #4
 8000de8:	60fa      	str	r2, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000dee:	edd7 7a08 	vldr	s15, [r7, #32]
 8000df2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000df6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dfa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1d1a      	adds	r2, r3, #4
 8000e06:	60ba      	str	r2, [r7, #8]
 8000e08:	edc7 7a06 	vstr	s15, [r7, #24]
 8000e0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1a:	db07      	blt.n	8000e2c <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000e1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e20:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000e2a:	e004      	b.n	8000e36 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000e34:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1cb      	bne.n	8000dda <arm_cmplx_mag_f32+0x12>
  }

}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	372c      	adds	r7, #44	; 0x2c
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e043      	b.n	8000eec <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	441a      	add	r2, r3
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	68f9      	ldr	r1, [r7, #12]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	441a      	add	r2, r3
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

    i += 2;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3302      	adds	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3b7      	bcc.n	8000e64 <arm_bitreversal_32+0x14>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b0a0      	sub	sp, #128	; 0x80
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f28:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f40:	4413      	add	r3, r2
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f4a:	e1b6      	b.n	80012ba <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8000f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8000f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8000f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8000f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8000f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8000f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8000f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8000f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8000f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8000f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8000fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8000fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8000fac:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000fb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	603a      	str	r2, [r7, #0]
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbe:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8000fc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000fc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	1d1a      	adds	r2, r3, #4
 8000fce:	603a      	str	r2, [r7, #0]
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8000fd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000fdc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	1d1a      	adds	r2, r3, #4
 8000fe4:	603a      	str	r2, [r7, #0]
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000fee:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ff2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	1d1a      	adds	r2, r3, #4
 8000ffa:	603a      	str	r2, [r7, #0]
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001004:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001008:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800100c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001010:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8001014:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001018:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8001024:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001028:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8001034:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001038:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001040:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8001044:	ed97 7a06 	vldr	s14, [r7, #24]
 8001048:	edd7 7a02 	vldr	s15, [r7, #8]
 800104c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104e:	1d1a      	adds	r2, r3, #4
 8001050:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001056:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800105a:	ed97 7a07 	vldr	s14, [r7, #28]
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001064:	1d1a      	adds	r2, r3, #4
 8001066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001070:	ed97 7a08 	vldr	s14, [r7, #32]
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001086:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001090:	1d1a      	adds	r2, r3, #4
 8001092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001098:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800109c:	ed97 7a02 	vldr	s14, [r7, #8]
 80010a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80010ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80010bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80010cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80010d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80010dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	673a      	str	r2, [r7, #112]	; 0x70
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80010e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010e8:	1d1a      	adds	r2, r3, #4
 80010ea:	673a      	str	r2, [r7, #112]	; 0x70
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80010f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010f4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8001100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001104:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8001110:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001114:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8001120:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001124:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001132:	1d1a      	adds	r2, r3, #4
 8001134:	677a      	str	r2, [r7, #116]	; 0x74
 8001136:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800113a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8001146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	677a      	str	r2, [r7, #116]	; 0x74
 800114c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001150:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800115c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001160:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800116c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001170:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800117c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001180:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800118c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001190:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001198:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800119c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800119e:	1d1a      	adds	r2, r3, #4
 80011a0:	67ba      	str	r2, [r7, #120]	; 0x78
 80011a2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80011a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ae:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80011b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011b4:	1d1a      	adds	r2, r3, #4
 80011b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80011b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80011c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011ca:	1d1a      	adds	r2, r3, #4
 80011cc:	673a      	str	r2, [r7, #112]	; 0x70
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80011d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011d4:	1d1a      	adds	r2, r3, #4
 80011d6:	673a      	str	r2, [r7, #112]	; 0x70
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 80011dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80011ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 80011fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001200:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800120c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001210:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800121c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800121e:	1d1a      	adds	r2, r3, #4
 8001220:	677a      	str	r2, [r7, #116]	; 0x74
 8001222:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001226:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001234:	1d1a      	adds	r2, r3, #4
 8001236:	677a      	str	r2, [r7, #116]	; 0x74
 8001238:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800123c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001244:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8001248:	edd7 7a04 	vldr	s15, [r7, #16]
 800124c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8001268:	edd7 7a05 	vldr	s15, [r7, #20]
 800126c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8001278:	edd7 7a04 	vldr	s15, [r7, #16]
 800127c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001284:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800128a:	1d1a      	adds	r2, r3, #4
 800128c:	67ba      	str	r2, [r7, #120]	; 0x78
 800128e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001292:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800129e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012a0:	1d1a      	adds	r2, r3, #4
 80012a2:	67ba      	str	r2, [r7, #120]	; 0x78
 80012a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80012b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012b6:	3b01      	subs	r3, #1
 80012b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae45 	bne.w	8000f4c <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80012c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c4:	b299      	uxth	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2302      	movs	r3, #2
 80012cc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80012ce:	f001 f80f 	bl	80022f0 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80012d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012d4:	b299      	uxth	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2302      	movs	r3, #2
 80012dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80012de:	f001 f807 	bl	80022f0 <arm_radix8_butterfly_f32>
}
 80012e2:	bf00      	nop
 80012e4:	3780      	adds	r7, #128	; 0x80
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b0ac      	sub	sp, #176	; 0xb0
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800130e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001318:	4413      	add	r3, r2
 800131a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800131e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001328:	4413      	add	r3, r2
 800132a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001336:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800133e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001342:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8001344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001348:	3b04      	subs	r3, #4
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800134e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001352:	3b04      	subs	r3, #4
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800135c:	3b04      	subs	r3, #4
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800136c:	4413      	add	r3, r2
 800136e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800137a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800137e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800138a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800139c:	2306      	movs	r3, #6
 800139e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	ed93 7a00 	vldr	s14, [r3]
 80013a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	ed93 7a00 	vldr	s14, [r3]
 80013bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3304      	adds	r3, #4
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013d8:	3304      	adds	r3, #4
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013f2:	3304      	adds	r3, #4
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001404:	3304      	adds	r3, #4
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800140e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001416:	3304      	adds	r3, #4
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001424:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001450:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001468:	3304      	adds	r3, #4
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001476:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800147a:	3304      	adds	r3, #4
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800148c:	3304      	adds	r3, #4
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800149e:	3304      	adds	r3, #4
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80014cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	603a      	str	r2, [r7, #0]
 80014ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ee:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80014f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014f6:	3304      	adds	r3, #4
 80014f8:	ed93 7a00 	vldr	s14, [r3]
 80014fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001508:	3304      	adds	r3, #4
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	1d1a      	adds	r2, r3, #4
 8001512:	603a      	str	r2, [r7, #0]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800151c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001520:	1d1a      	adds	r2, r3, #4
 8001522:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001528:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800152a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001536:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800153c:	1d1a      	adds	r2, r3, #4
 800153e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800154a:	1d1a      	adds	r2, r3, #4
 800154c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001550:	6a3a      	ldr	r2, [r7, #32]
 8001552:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001558:	1d1a      	adds	r2, r3, #4
 800155a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001578:	4413      	add	r3, r2
 800157a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800157e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001586:	4413      	add	r3, r2
 8001588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800158c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001594:	4413      	add	r3, r2
 8001596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800159a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800159e:	3b02      	subs	r3, #2
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015a6:	e31c      	b.n	8001be2 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	3304      	adds	r3, #4
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015e0:	3304      	adds	r3, #4
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015fa:	3304      	adds	r3, #4
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001604:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800160c:	3304      	adds	r3, #4
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800161e:	3304      	adds	r3, #4
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800162c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800164c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800166c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001670:	3304      	adds	r3, #4
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800167a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001682:	3304      	adds	r3, #4
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001694:	3304      	adds	r3, #4
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800169e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016a6:	3304      	adds	r3, #4
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80016b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80016d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d8:	ed93 7a00 	vldr	s14, [r3]
 80016dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	1d1a      	adds	r2, r3, #4
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80016fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016fe:	3304      	adds	r3, #4
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001710:	3304      	adds	r3, #4
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	1d1a      	adds	r2, r3, #4
 800171a:	603a      	str	r2, [r7, #0]
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001728:	3b04      	subs	r3, #4
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001732:	3b04      	subs	r3, #4
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001744:	3b04      	subs	r3, #4
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800174e:	3b04      	subs	r3, #4
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800175c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800178c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80017ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	3b04      	subs	r3, #4
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017d2:	3b04      	subs	r3, #4
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80017e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017e4:	3b04      	subs	r3, #4
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017f6:	3b04      	subs	r3, #4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001814:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8001824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001828:	ed93 7a00 	vldr	s14, [r3]
 800182c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001838:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001844:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001848:	3b04      	subs	r3, #4
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001852:	3b04      	subs	r3, #4
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8001868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001884:	1f1a      	subs	r2, r3, #4
 8001886:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001896:	3b04      	subs	r3, #4
 8001898:	ed93 7a00 	vldr	s14, [r3]
 800189c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018a8:	3b04      	subs	r3, #4
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018b2:	1f1a      	subs	r2, r3, #4
 80018b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80018c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c4:	1d1a      	adds	r2, r3, #4
 80018c6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 80018ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018d2:	1d1a      	adds	r2, r3, #4
 80018d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 80018dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 80018ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 80018fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001900:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001908:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800190c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001910:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800191c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001920:	1d1a      	adds	r2, r3, #4
 8001922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800192a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8001936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001940:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001944:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8001950:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001954:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8001960:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001964:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8001970:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001974:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8001980:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001984:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8001990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001994:	1f1a      	subs	r2, r3, #4
 8001996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800199a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800199e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80019aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ae:	1f1a      	subs	r2, r3, #4
 80019b0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80019b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80019b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 80019c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 80019cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 80019d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019de:	4413      	add	r3, r2
 80019e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 80019e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 80019f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001a04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001a14:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a54:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001a58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a5c:	eef1 7a67 	vneg.f32	s15, s15
 8001a60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8001a6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001a8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a90:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aa0:	1f1a      	subs	r2, r3, #4
 8001aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001aa6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001aaa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aba:	1f1a      	subs	r2, r3, #4
 8001abc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ac0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ac4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001acc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001adc:	3304      	adds	r3, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8001ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aea:	4413      	add	r3, r2
 8001aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8001b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8001b10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8001b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8001b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b4e:	1d1a      	adds	r2, r3, #4
 8001b50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001b54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001b84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001b94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001ba4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ba8:	1f1a      	subs	r2, r3, #4
 8001baa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001bae:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bba:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bc2:	1f1a      	subs	r2, r3, #4
 8001bc4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001bc8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001bcc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f acde 	bne.w	80015a8 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c24:	3304      	adds	r3, #4
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3304      	adds	r3, #4
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3e:	3304      	adds	r3, #4
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c50:	3304      	adds	r3, #4
 8001c52:	ed93 7a00 	vldr	s14, [r3]
 8001c56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c62:	3304      	adds	r3, #4
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001c90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd8:	3304      	adds	r3, #4
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ce2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cea:	3304      	adds	r3, #4
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	603a      	str	r2, [r7, #0]
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d42:	3304      	adds	r3, #4
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d54:	3304      	adds	r3, #4
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	1d1a      	adds	r2, r3, #4
 8001d5e:	603a      	str	r2, [r7, #0]
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001d7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001d8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d96:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001d9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001daa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001dae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dbe:	1d1a      	adds	r2, r3, #4
 8001dc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001dc4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001dc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd8:	1d1a      	adds	r2, r3, #4
 8001dda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001dde:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001de2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dea:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001e10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001e20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e24:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e34:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e44:	1d1a      	adds	r2, r3, #4
 8001e46:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e56:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5e:	1d1a      	adds	r2, r3, #4
 8001e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e68:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e70:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001ea6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eaa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001ed0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ed4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee4:	1d1a      	adds	r2, r3, #4
 8001ee6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001eea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001eee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001efe:	b299      	uxth	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	2304      	movs	r3, #4
 8001f06:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001f08:	f000 f9f2 	bl	80022f0 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001f0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f10:	b299      	uxth	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2304      	movs	r3, #4
 8001f18:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f1a:	f000 f9e9 	bl	80022f0 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f22:	b299      	uxth	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2304      	movs	r3, #4
 8001f2a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f2c:	f000 f9e0 	bl	80022f0 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f34:	b299      	uxth	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f3e:	f000 f9d7 	bl	80022f0 <arm_radix8_butterfly_f32>
}
 8001f42:	bf00      	nop
 8001f44:	37b0      	adds	r7, #176	; 0xb0
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	4611      	mov	r1, r2
 8001f56:	461a      	mov	r2, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d117      	bne.n	8001f9c <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e00d      	b.n	8001f94 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	eef1 7a67 	vneg.f32	s15, s15
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3ed      	bcc.n	8001f78 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa2:	d040      	beq.n	8002026 <arm_cfft_f32+0xdc>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001faa:	d845      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb2:	d033      	beq.n	800201c <arm_cfft_f32+0xd2>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fba:	d83d      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d026      	beq.n	8002012 <arm_cfft_f32+0xc8>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d835      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d028      	beq.n	8002026 <arm_cfft_f32+0xdc>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	d82d      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe2:	d01b      	beq.n	800201c <arm_cfft_f32+0xd2>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d825      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d00f      	beq.n	8002012 <arm_cfft_f32+0xc8>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d81f      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d013      	beq.n	8002026 <arm_cfft_f32+0xdc>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d819      	bhi.n	8002038 <arm_cfft_f32+0xee>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b10      	cmp	r3, #16
 8002008:	d003      	beq.n	8002012 <arm_cfft_f32+0xc8>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b20      	cmp	r3, #32
 800200e:	d005      	beq.n	800201c <arm_cfft_f32+0xd2>
 8002010:	e012      	b.n	8002038 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7fe ff74 	bl	8000f02 <arm_cfft_radix8by2_f32>
    break;
 800201a:	e00d      	b.n	8002038 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff f963 	bl	80012ea <arm_cfft_radix8by4_f32>
    break;
 8002024:	e008      	b.n	8002038 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	b299      	uxth	r1, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	2301      	movs	r3, #1
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f000 f95d 	bl	80022f0 <arm_radix8_butterfly_f32>
    break;
 8002036:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002038:	79bb      	ldrb	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8999      	ldrh	r1, [r3, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	461a      	mov	r2, r3
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f7fe ff01 	bl	8000e50 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d130      	bne.n	80020b6 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800205e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002066:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e01c      	b.n	80020ae <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	61ba      	str	r2, [r7, #24]
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	eeb1 7a67 	vneg.f32	s14, s15
 8002094:	edd7 7a04 	vldr	s15, [r7, #16]
 8002098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	3304      	adds	r3, #4
 80020a6:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3de      	bcc.n	8002074 <arm_cfft_f32+0x12a>
    }
  }
}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <arm_cfft_init_2048_f32+0x44>)
 80020dc:	899a      	ldrh	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	819a      	strh	r2, [r3, #12]
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <arm_cfft_init_2048_f32+0x44>)
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <arm_cfft_init_2048_f32+0x44>)
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	0801d6a4 	.word	0x0801d6a4

08002108 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <arm_cfft_init_1024_f32+0x44>)
 8002124:	899a      	ldrh	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	819a      	strh	r2, [r3, #12]
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <arm_cfft_init_1024_f32+0x44>)
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <arm_cfft_init_1024_f32+0x44>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	0801d694 	.word	0x0801d694

08002150 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <arm_cfft_init_512_f32+0x44>)
 800216c:	899a      	ldrh	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	819a      	strh	r2, [r3, #12]
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <arm_cfft_init_512_f32+0x44>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <arm_cfft_init_512_f32+0x44>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0801d684 	.word	0x0801d684

08002198 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <arm_cfft_init_256_f32+0x44>)
 80021b4:	899a      	ldrh	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	819a      	strh	r2, [r3, #12]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <arm_cfft_init_256_f32+0x44>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <arm_cfft_init_256_f32+0x44>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	0801d674 	.word	0x0801d674

080021e0 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <arm_cfft_init_128_f32+0x40>)
 80021fa:	899a      	ldrh	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	819a      	strh	r2, [r3, #12]
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <arm_cfft_init_128_f32+0x40>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <arm_cfft_init_128_f32+0x40>)
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	0801d664 	.word	0x0801d664

08002224 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <arm_cfft_init_64_f32+0x40>)
 800223e:	899a      	ldrh	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	819a      	strh	r2, [r3, #12]
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <arm_cfft_init_64_f32+0x40>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <arm_cfft_init_64_f32+0x40>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	0801d654 	.word	0x0801d654

08002268 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <arm_cfft_init_32_f32+0x40>)
 8002282:	899a      	ldrh	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	819a      	strh	r2, [r3, #12]
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <arm_cfft_init_32_f32+0x40>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <arm_cfft_init_32_f32+0x40>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	0801d644 	.word	0x0801d644

080022ac <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2210      	movs	r2, #16
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <arm_cfft_init_16_f32+0x40>)
 80022c6:	899a      	ldrh	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	819a      	strh	r2, [r3, #12]
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <arm_cfft_init_16_f32+0x40>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <arm_cfft_init_16_f32+0x40>)
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	0801d634 	.word	0x0801d634

080022f0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b0bd      	sub	sp, #244	; 0xf4
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <arm_radix8_butterfly_f32+0x3c>)
 8002306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800230a:	897b      	ldrh	r3, [r7, #10]
 800230c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8002310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002328:	e002      	b.n	8002330 <arm_radix8_butterfly_f32+0x40>
 800232a:	bf00      	nop
 800232c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002330:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002338:	4413      	add	r3, r2
 800233a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800233e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002346:	4413      	add	r3, r2
 8002348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800234c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002354:	4413      	add	r3, r2
 8002356:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800235a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	4413      	add	r3, r2
 8002364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002368:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800236c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002370:	4413      	add	r3, r2
 8002372:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002376:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237e:	4413      	add	r3, r2
 8002380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238c:	4413      	add	r3, r2
 800238e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002392:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80023b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	ed93 7a00 	vldr	s14, [r3]
 80023c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80023da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80023fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002422:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002446:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002466:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800246a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800248e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	ed93 7a00 	vldr	s14, [r3]
 800249c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80024b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80024b6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80024ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80024c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80024c6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80024d2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80024d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80024e2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80024e6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80024f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002500:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800250c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800251a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002526:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3304      	adds	r3, #4
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	3304      	adds	r3, #4
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800254e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	3304      	adds	r3, #4
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	ed93 7a00 	vldr	s14, [r3]
 800255e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3304      	adds	r3, #4
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002572:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3304      	adds	r3, #4
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3304      	adds	r3, #4
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800259e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3304      	adds	r3, #4
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	ed93 7a00 	vldr	s14, [r3]
 80025ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	3304      	adds	r3, #4
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80025c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	3304      	adds	r3, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80025ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3304      	adds	r3, #4
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3304      	adds	r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002612:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	ed93 7a00 	vldr	s14, [r3]
 8002626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	3304      	adds	r3, #4
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800263e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3304      	adds	r3, #4
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002662:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002666:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800266a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800266e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002672:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002676:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800267a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800267e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002682:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002686:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800268a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800268e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002692:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002696:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800269a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80026a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80026b6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80026c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	3304      	adds	r3, #4
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80026d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80026de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026ec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80026f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002706:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3304      	adds	r3, #4
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002722:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800272e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	3304      	adds	r3, #4
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800273e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800274a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800274e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002756:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002762:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002766:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800277a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800277e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002786:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002792:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002796:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80027aa:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80027ae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80027ba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80027be:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80027c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80027ca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80027ce:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80027da:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80027de:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80027ea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80027ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80027f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80027fa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80027fe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800280a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800280e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800281a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800281e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800282a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002838:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002852:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800285e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800286c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002874:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002886:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	3304      	adds	r3, #4
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80028a2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80028ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3304      	adds	r3, #4
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80028be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80028ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3304      	adds	r3, #4
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4413      	add	r3, r2
 80028d6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028da:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80028e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	3304      	adds	r3, #4
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80028fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fe:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002902:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800290a:	4413      	add	r3, r2
 800290c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002916:	429a      	cmp	r2, r3
 8002918:	f4ff ad0a 	bcc.w	8002330 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002920:	2b07      	cmp	r3, #7
 8002922:	f240 84e3 	bls.w	80032ec <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800292c:	2301      	movs	r3, #1
 800292e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002932:	893b      	ldrh	r3, [r7, #8]
 8002934:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002938:	4413      	add	r3, r2
 800293a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800293c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002942:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002948:	4413      	add	r3, r2
 800294a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800294c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800294e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002950:	4413      	add	r3, r2
 8002952:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002954:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002958:	4413      	add	r3, r2
 800295a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800295c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800295e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002960:	4413      	add	r3, r2
 8002962:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002968:	4413      	add	r3, r2
 800296a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800296c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800296e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002970:	4413      	add	r3, r2
 8002972:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80029b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80029be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80029ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	3304      	adds	r3, #4
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80029da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	3304      	adds	r3, #4
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80029e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	3304      	adds	r3, #4
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80029f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	3304      	adds	r3, #4
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3304      	adds	r3, #4
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	3304      	adds	r3, #4
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3304      	adds	r3, #4
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002a36:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	4413      	add	r3, r2
 8002a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002a44:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002a52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002a60:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	4413      	add	r3, r2
 8002a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a76:	4413      	add	r3, r2
 8002a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002a7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	4413      	add	r3, r2
 8002a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002a8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	4413      	add	r3, r2
 8002a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002a98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002adc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b24:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002b4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	ed93 7a00 	vldr	s14, [r3]
 8002b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002bb8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002bbc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002bc8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002bcc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002bd8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002bdc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002be8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002bec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002bf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c06:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002c12:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c16:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	3304      	adds	r3, #4
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	3304      	adds	r3, #4
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	ed93 7a00 	vldr	s14, [r3]
 8002c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	3304      	adds	r3, #4
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3304      	adds	r3, #4
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	ed93 7a00 	vldr	s14, [r3]
 8002c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3304      	adds	r3, #4
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	ed93 7a00 	vldr	s14, [r3]
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002cc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3304      	adds	r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3304      	adds	r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002cea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	ed93 7a00 	vldr	s14, [r3]
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3304      	adds	r3, #4
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	ed93 7a00 	vldr	s14, [r3]
 8002d22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	3304      	adds	r3, #4
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	ed93 7a00 	vldr	s14, [r3]
 8002d4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	3304      	adds	r3, #4
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002d62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d66:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002d72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002d82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d86:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002d92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d96:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002da2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002da6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002db2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002db6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbe:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002dc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3304      	adds	r3, #4
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dda:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002dde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002de2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002dee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002df2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002dfe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e02:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002e0e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002e12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002e1e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002e2e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002e32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002e3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e42:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3304      	adds	r3, #4
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002e84:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e90:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002e94:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002ea4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ea8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002eb4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002eb8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002efa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002efe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002f0a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f0e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f16:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002f1a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f1e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f26:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002f2a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f2e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002f70:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002f74:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f84:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002f88:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002f8c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8002fa0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002fa4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002fb8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002fbc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fcc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8002fd0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002fd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fdc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8002fe0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002fe4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fec:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8002ff0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002ff4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003000:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003004:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003010:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003014:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003020:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003030:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003034:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003040:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003044:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003050:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003054:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003060:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003064:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003070:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003074:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003080:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003084:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003090:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003094:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80030a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80030b0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80030b4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80030b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030bc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80030c0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80030c4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80030d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80030d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030dc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80030e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80030e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80030f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80030f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003100:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003104:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	ed97 7a07 	vldr	s14, [r7, #28]
 800311e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003126:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	3304      	adds	r3, #4
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4413      	add	r3, r2
 8003136:	ed97 7a05 	vldr	s14, [r7, #20]
 800313a:	edd7 7a04 	vldr	s15, [r7, #16]
 800313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003142:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003146:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800314a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003156:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800315a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003166:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800316a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003176:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800317a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	ed97 7a07 	vldr	s14, [r7, #28]
 8003194:	edd7 7a06 	vldr	s15, [r7, #24]
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80031a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	3304      	adds	r3, #4
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80031b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80031bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80031c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80031cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80031d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80031d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80031dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80031e0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80031ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80031f0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80031fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	ed97 7a07 	vldr	s14, [r7, #28]
 800320a:	edd7 7a06 	vldr	s15, [r7, #24]
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	3304      	adds	r3, #4
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	ed97 7a05 	vldr	s14, [r7, #20]
 8003226:	edd7 7a04 	vldr	s15, [r7, #16]
 800322a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003232:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003236:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003242:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003246:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003252:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003256:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003262:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003266:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003288:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	3304      	adds	r3, #4
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	ed97 7a05 	vldr	s14, [r7, #20]
 800329c:	edd7 7a04 	vldr	s15, [r7, #16]
 80032a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a4:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80032a8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80032ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032b0:	4413      	add	r3, r2
 80032b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80032bc:	429a      	cmp	r2, r3
 80032be:	f4ff abba 	bcc.w	8002a36 <arm_radix8_butterfly_f32+0x746>

         j++;
 80032c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c6:	3301      	adds	r3, #1
 80032c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80032cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f4ff ab2c 	bcc.w	8002932 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	f63f a813 	bhi.w	8002310 <arm_radix8_butterfly_f32+0x20>
}
 80032ea:	e000      	b.n	80032ee <arm_radix8_butterfly_f32+0xffe>
         break;
 80032ec:	bf00      	nop
}
 80032ee:	bf00      	nop
 80032f0:	37f4      	adds	r7, #244	; 0xf4
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b095      	sub	sp, #84	; 0x54
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	3b01      	subs	r3, #1
 800331c:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800332a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8003336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003338:	1d1a      	adds	r2, r3, #4
 800333a:	64ba      	str	r2, [r7, #72]	; 0x48
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8003340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	64ba      	str	r2, [r7, #72]	; 0x48
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800334a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800334e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003356:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800335a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800335e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800336a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800336e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003384:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003388:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800338c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1d1a      	adds	r2, r3, #4
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800339e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a2:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80033a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	3308      	adds	r3, #8
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80033b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80033c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80033d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80033e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80033f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80033f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fe:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003402:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003406:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003412:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003416:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003422:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003426:	edd7 7a08 	vldr	s15, [r7, #32]
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8003432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003436:	edd7 7a08 	vldr	s15, [r7, #32]
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8003442:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003446:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800344a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003456:	edd7 7a04 	vldr	s15, [r7, #16]
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003470:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003474:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800347c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003484:	edd7 7a05 	vldr	s15, [r7, #20]
 8003488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	3308      	adds	r3, #8
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	3b08      	subs	r3, #8
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80034aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ac:	3b01      	subs	r3, #1
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f73f af7f 	bgt.w	80033b6 <stage_rfft_f32+0xba>
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3754      	adds	r7, #84	; 0x54
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b095      	sub	sp, #84	; 0x54
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80034ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	3308      	adds	r3, #8
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80034fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80034fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003514:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8003518:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800351c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800352e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003532:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4413      	add	r3, r2
 800353e:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8003540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003542:	3308      	adds	r3, #8
 8003544:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8003546:	e07c      	b.n	8003642 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800354e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8003560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003562:	1d1a      	adds	r2, r3, #4
 8003564:	64ba      	str	r2, [r7, #72]	; 0x48
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8003574:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003578:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800357c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003580:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8003584:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003588:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003590:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003594:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003598:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80035a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80035a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80035ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b0:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80035b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80035b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80035c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80035cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d0:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80035d4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80035e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035fe:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003602:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003606:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800360a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003616:	edd7 7a04 	vldr	s15, [r7, #16]
 800361a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1d1a      	adds	r2, r3, #4
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800362c:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	3308      	adds	r3, #8
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003638:	3b08      	subs	r3, #8
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	3b01      	subs	r3, #1
 8003640:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f73f af7f 	bgt.w	8003548 <merge_rfft_f32+0x82>
   }

}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	3754      	adds	r7, #84	; 0x54
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ff26 	bl	80034c6 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	2301      	movs	r3, #1
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f7fe fc62 	bl	8001f4a <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003686:	e00a      	b.n	800369e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	2301      	movs	r3, #1
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7fe fc5b 	bl	8001f4a <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fe2f 	bl	80032fc <stage_rfft_f32>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <arm_rfft_fast_init_32_f32+0x14>
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e013      	b.n	80036e4 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fdf4 	bl	80022ac <arm_cfft_init_16_f32>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d4:	e006      	b.n	80036e4 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <arm_rfft_fast_init_32_f32+0x44>)
 80036e0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080156b4 	.word	0x080156b4

080036f0 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <arm_rfft_fast_init_64_f32+0x14>
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e013      	b.n	800372c <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fdae 	bl	8002268 <arm_cfft_init_32_f32>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8003718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371c:	e006      	b.n	800372c <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a03      	ldr	r2, [pc, #12]	; (8003734 <arm_rfft_fast_init_64_f32+0x44>)
 8003728:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	08015734 	.word	0x08015734

08003738 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <arm_rfft_fast_init_128_f32+0x14>
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e013      	b.n	8003774 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fd68 	bl	8002224 <arm_cfft_init_64_f32>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003764:	e006      	b.n	8003774 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a03      	ldr	r2, [pc, #12]	; (800377c <arm_rfft_fast_init_128_f32+0x44>)
 8003770:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08015834 	.word	0x08015834

08003780 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <arm_rfft_fast_init_256_f32+0x14>
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e014      	b.n	80037be <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fd22 	bl	80021e0 <arm_cfft_init_128_f32>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 80037a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ac:	e007      	b.n	80037be <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a03      	ldr	r2, [pc, #12]	; (80037c8 <arm_rfft_fast_init_256_f32+0x48>)
 80037ba:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	08015a34 	.word	0x08015a34

080037cc <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <arm_rfft_fast_init_512_f32+0x14>
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e014      	b.n	800380a <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fcd8 	bl	8002198 <arm_cfft_init_256_f32>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f8:	e007      	b.n	800380a <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a03      	ldr	r2, [pc, #12]	; (8003814 <arm_rfft_fast_init_512_f32+0x48>)
 8003806:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	08015e34 	.word	0x08015e34

08003818 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <arm_rfft_fast_init_1024_f32+0x14>
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	e014      	b.n	8003856 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fc8e 	bl	8002150 <arm_cfft_init_512_f32>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	e007      	b.n	8003856 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a03      	ldr	r2, [pc, #12]	; (8003860 <arm_rfft_fast_init_1024_f32+0x48>)
 8003852:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08016634 	.word	0x08016634

08003864 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <arm_rfft_fast_init_2048_f32+0x14>
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e014      	b.n	80038a2 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fc44 	bl	8002108 <arm_cfft_init_1024_f32>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003890:	e007      	b.n	80038a2 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <arm_rfft_fast_init_2048_f32+0x48>)
 800389e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	08017634 	.word	0x08017634

080038b0 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <arm_rfft_fast_init_4096_f32+0x14>
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e014      	b.n	80038ee <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fbfa 	bl	80020c0 <arm_cfft_init_2048_f32>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038dc:	e007      	b.n	80038ee <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <arm_rfft_fast_init_4096_f32+0x48>)
 80038ea:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	08019634 	.word	0x08019634

080038fc <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390e:	d023      	beq.n	8003958 <arm_rfft_fast_init_f32+0x5c>
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	dc50      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 8003916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391a:	d023      	beq.n	8003964 <arm_rfft_fast_init_f32+0x68>
 800391c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003920:	dc4a      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d023      	beq.n	8003970 <arm_rfft_fast_init_f32+0x74>
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	dc44      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 800392e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003932:	d023      	beq.n	800397c <arm_rfft_fast_init_f32+0x80>
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	dc3e      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d023      	beq.n	8003988 <arm_rfft_fast_init_f32+0x8c>
 8003940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003944:	dc38      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d024      	beq.n	8003994 <arm_rfft_fast_init_f32+0x98>
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	dc34      	bgt.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d02c      	beq.n	80039ac <arm_rfft_fast_init_f32+0xb0>
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d024      	beq.n	80039a0 <arm_rfft_fast_init_f32+0xa4>
 8003956:	e02f      	b.n	80039b8 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffa9 	bl	80038b0 <arm_rfft_fast_init_4096_f32>
 800395e:	4603      	mov	r3, r0
 8003960:	73fb      	strb	r3, [r7, #15]
    break;
 8003962:	e02c      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff7d 	bl	8003864 <arm_rfft_fast_init_2048_f32>
 800396a:	4603      	mov	r3, r0
 800396c:	73fb      	strb	r3, [r7, #15]
    break;
 800396e:	e026      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff51 	bl	8003818 <arm_rfft_fast_init_1024_f32>
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]
    break;
 800397a:	e020      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff25 	bl	80037cc <arm_rfft_fast_init_512_f32>
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]
    break;
 8003986:	e01a      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fef9 	bl	8003780 <arm_rfft_fast_init_256_f32>
 800398e:	4603      	mov	r3, r0
 8003990:	73fb      	strb	r3, [r7, #15]
    break;
 8003992:	e014      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fecf 	bl	8003738 <arm_rfft_fast_init_128_f32>
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
    break;
 800399e:	e00e      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fea5 	bl	80036f0 <arm_rfft_fast_init_64_f32>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
    break;
 80039aa:	e008      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fe7b 	bl	80036a8 <arm_rfft_fast_init_32_f32>
 80039b2:	4603      	mov	r3, r0
 80039b4:	73fb      	strb	r3, [r7, #15]
    break;
 80039b6:	e002      	b.n	80039be <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	e001      	b.n	80039c2 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 80039be:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039d0:	f000 fddd 	bl	800458e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039d4:	f000 f864 	bl	8003aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039d8:	f000 fa20 	bl	8003e1c <MX_GPIO_Init>
  MX_TIM2_Init();
 80039dc:	f000 f926 	bl	8003c2c <MX_TIM2_Init>
  MX_ADC1_Init();
 80039e0:	f000 f8c0 	bl	8003b64 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80039e4:	f000 f9e8 	bl	8003db8 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 80039e8:	f000 f994 	bl	8003d14 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80039ec:	4822      	ldr	r0, [pc, #136]	; (8003a78 <main+0xac>)
 80039ee:	f7fc fbef 	bl	80001d0 <strlen>
 80039f2:	4603      	mov	r3, r0
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	491f      	ldr	r1, [pc, #124]	; (8003a78 <main+0xac>)
 80039fc:	481f      	ldr	r0, [pc, #124]	; (8003a7c <main+0xb0>)
 80039fe:	f004 fd3d 	bl	800847c <HAL_UART_Transmit>
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8003a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a06:	481e      	ldr	r0, [pc, #120]	; (8003a80 <main+0xb4>)
 8003a08:	f7ff ff78 	bl	80038fc <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a0c:	217f      	movs	r1, #127	; 0x7f
 8003a0e:	481d      	ldr	r0, [pc, #116]	; (8003a84 <main+0xb8>)
 8003a10:	f001 ff78 	bl	8005904 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 8003a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a18:	491b      	ldr	r1, [pc, #108]	; (8003a88 <main+0xbc>)
 8003a1a:	481a      	ldr	r0, [pc, #104]	; (8003a84 <main+0xb8>)
 8003a1c:	f001 f95c 	bl	8004cd8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003a20:	481a      	ldr	r0, [pc, #104]	; (8003a8c <main+0xc0>)
 8003a22:	f003 fd6d 	bl	8007500 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init_TMR(&htim15);
 8003a26:	481a      	ldr	r0, [pc, #104]	; (8003a90 <main+0xc4>)
 8003a28:	f005 ff10 	bl	800984c <STEPPERS_Init_TMR>

	STEPPER_SetSpeed(STEPPER_MOTOR1, 14);
 8003a2c:	210e      	movs	r1, #14
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f005 ff56 	bl	80098e0 <STEPPER_SetSpeed>
	STEPPER_Step_Blocking(STEPPER_MOTOR1, 5000, Stepper1_Dir);
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <main+0xc8>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f006 fa08 	bl	8009e54 <STEPPER_Step_Blocking>

		 updatedFlag = 0;
		 }
		 }
		 */
		if (halfFlag) {
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <main+0xcc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <main+0x90>
			process_data(0, BUFFER_SIZE / 2);
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	2000      	movs	r0, #0
 8003a52:	f000 fb25 	bl	80040a0 <process_data>
			halfFlag = 0;
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <main+0xcc>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
		}

		if (fullFlag) {
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <main+0xd0>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ee      	beq.n	8003a44 <main+0x78>
			process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 8003a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a6a:	2080      	movs	r0, #128	; 0x80
 8003a6c:	f000 fb18 	bl	80040a0 <process_data>
			fullFlag = 0;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <main+0xd0>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
		if (halfFlag) {
 8003a76:	e7e5      	b.n	8003a44 <main+0x78>
 8003a78:	2000023c 	.word	0x2000023c
 8003a7c:	200001b4 	.word	0x200001b4
 8003a80:	2000044c 	.word	0x2000044c
 8003a84:	200000b8 	.word	0x200000b8
 8003a88:	20000248 	.word	0x20000248
 8003a8c:	2000011c 	.word	0x2000011c
 8003a90:	20000168 	.word	0x20000168
 8003a94:	2000a4e8 	.word	0x2000a4e8
 8003a98:	20000448 	.word	0x20000448
 8003a9c:	20000449 	.word	0x20000449

08003aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b096      	sub	sp, #88	; 0x58
 8003aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	2244      	movs	r2, #68	; 0x44
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f006 fb56 	bl	800a160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ac6:	f002 fb3d 	bl	8006144 <HAL_PWREx_ControlVoltageScaling>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003ad0:	f000 fbad 	bl	800422e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003ad4:	f002 fb18 	bl	8006108 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <SystemClock_Config+0xc0>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <SystemClock_Config+0xc0>)
 8003ae0:	f023 0318 	bic.w	r3, r3, #24
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003ae8:	2314      	movs	r3, #20
 8003aea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003af8:	2360      	movs	r3, #96	; 0x60
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003afc:	2302      	movs	r3, #2
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003b00:	2301      	movs	r3, #1
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b04:	2301      	movs	r3, #1
 8003b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003b08:	2328      	movs	r3, #40	; 0x28
 8003b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b10:	2302      	movs	r3, #2
 8003b12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b14:	2302      	movs	r3, #2
 8003b16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 fb67 	bl	80061f0 <HAL_RCC_OscConfig>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003b28:	f000 fb81 	bl	800422e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b30:	2303      	movs	r3, #3
 8003b32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b40:	463b      	mov	r3, r7
 8003b42:	2104      	movs	r1, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 ff67 	bl	8006a18 <HAL_RCC_ClockConfig>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003b50:	f000 fb6d 	bl	800422e <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003b54:	f003 fb7a 	bl	800724c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003b58:	bf00      	nop
 8003b5a:	3758      	adds	r7, #88	; 0x58
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
 8003b78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <MX_ADC1_Init+0xc0>)
 8003b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bda:	4811      	ldr	r0, [pc, #68]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003bdc:	f000 ff3a 	bl	8004a54 <HAL_ADC_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003be6:	f000 fb22 	bl	800422e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003bea:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <MX_ADC1_Init+0xc4>)
 8003bec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bee:	2306      	movs	r3, #6
 8003bf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003bf6:	237f      	movs	r3, #127	; 0x7f
 8003bf8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c02:	463b      	mov	r3, r7
 8003c04:	4619      	mov	r1, r3
 8003c06:	4806      	ldr	r0, [pc, #24]	; (8003c20 <MX_ADC1_Init+0xbc>)
 8003c08:	f001 f8f4 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003c12:	f000 fb0c 	bl	800422e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200000b8 	.word	0x200000b8
 8003c24:	50040000 	.word	0x50040000
 8003c28:	2e300800 	.word	0x2e300800

08003c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08e      	sub	sp, #56	; 0x38
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c40:	f107 031c 	add.w	r3, r7, #28
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	615a      	str	r2, [r3, #20]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8003c66:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c68:	2203      	movs	r2, #3
 8003c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c86:	4822      	ldr	r0, [pc, #136]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003c88:	f003 fbe2 	bl	8007450 <HAL_TIM_Base_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c92:	f000 facc 	bl	800422e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	481b      	ldr	r0, [pc, #108]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003ca4:	f003 fef8 	bl	8007a98 <HAL_TIM_ConfigClockSource>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003cae:	f000 fabe 	bl	800422e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003cb2:	4817      	ldr	r0, [pc, #92]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003cb4:	f003 fc78 	bl	80075a8 <HAL_TIM_PWM_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003cbe:	f000 fab6 	bl	800422e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cca:	f107 031c 	add.w	r3, r7, #28
 8003cce:	4619      	mov	r1, r3
 8003cd0:	480f      	ldr	r0, [pc, #60]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003cd2:	f004 fb4f 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003cdc:	f000 faa7 	bl	800422e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ce0:	2360      	movs	r3, #96	; 0x60
 8003ce2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4806      	ldr	r0, [pc, #24]	; (8003d10 <MX_TIM2_Init+0xe4>)
 8003cf8:	f003 fdba 	bl	8007870 <HAL_TIM_PWM_ConfigChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003d02:	f000 fa94 	bl	800422e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d06:	bf00      	nop
 8003d08:	3738      	adds	r7, #56	; 0x38
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2000011c 	.word	0x2000011c

08003d14 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1a:	f107 0310 	add.w	r3, r7, #16
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003d32:	4b1f      	ldr	r3, [pc, #124]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <MX_TIM15_Init+0xa0>)
 8003d36:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003d52:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003d5e:	4814      	ldr	r0, [pc, #80]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d60:	f003 fb76 	bl	8007450 <HAL_TIM_Base_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003d6a:	f000 fa60 	bl	800422e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	4619      	mov	r1, r3
 8003d7a:	480d      	ldr	r0, [pc, #52]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d7c:	f003 fe8c 	bl	8007a98 <HAL_TIM_ConfigClockSource>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003d86:	f000 fa52 	bl	800422e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	4619      	mov	r1, r3
 8003d96:	4806      	ldr	r0, [pc, #24]	; (8003db0 <MX_TIM15_Init+0x9c>)
 8003d98:	f004 faec 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8003da2:	f000 fa44 	bl	800422e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000168 	.word	0x20000168
 8003db4:	40014000 	.word	0x40014000

08003db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <MX_USART2_UART_Init+0x60>)
 8003dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dde:	220c      	movs	r2, #12
 8003de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4804      	ldr	r0, [pc, #16]	; (8003e14 <MX_USART2_UART_Init+0x5c>)
 8003e02:	f005 fb50 	bl	80094a6 <HAL_RS485Ex_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003e0c:	f000 fa0f 	bl	800422e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200001b4 	.word	0x200001b4
 8003e18:	40004400 	.word	0x40004400

08003e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	4a28      	ldr	r2, [pc, #160]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e3e:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <MX_GPIO_Init+0xbc>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e84:	f002 f928 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2130      	movs	r1, #48	; 0x30
 8003e8c:	4813      	ldr	r0, [pc, #76]	; (8003edc <MX_GPIO_Init+0xc0>)
 8003e8e:	f002 f923 	bl	80060d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003e92:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eae:	f001 ffa9 	bl	8005e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003eb2:	2330      	movs	r3, #48	; 0x30
 8003eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <MX_GPIO_Init+0xc0>)
 8003eca:	f001 ff9b 	bl	8005e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ece:	bf00      	nop
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	48000400 	.word	0x48000400

08003ee0 <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8089 	beq.w	8004004 <receive_bit+0x124>
		return;
	}
	for (int count = 0; count < floor(amount / 15); count++) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e00d      	b.n	8003f14 <receive_bit+0x34>
		received[receivedIndex] = bit;
 8003ef8:	4b44      	ldr	r3, [pc, #272]	; (800400c <receive_bit+0x12c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4944      	ldr	r1, [pc, #272]	; (8004010 <receive_bit+0x130>)
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 8003f04:	4b41      	ldr	r3, [pc, #260]	; (800400c <receive_bit+0x12c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	4a40      	ldr	r2, [pc, #256]	; (800400c <receive_bit+0x12c>)
 8003f0c:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < floor(amount / 15); count++) {
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	3301      	adds	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fc fab5 	bl	8000484 <__aeabi_i2d>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	460d      	mov	r5, r1
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <receive_bit+0x134>)
 8003f22:	fb82 1203 	smull	r1, r2, r2, r3
 8003f26:	441a      	add	r2, r3
 8003f28:	10d2      	asrs	r2, r2, #3
 8003f2a:	17db      	asrs	r3, r3, #31
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc faa8 	bl	8000484 <__aeabi_i2d>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc fd7e 	bl	8000a3c <__aeabi_dcmplt>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1d8      	bne.n	8003ef8 <receive_bit+0x18>
	}
	if (receivedIndex > 23) {
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <receive_bit+0x12c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b17      	cmp	r3, #23
 8003f4c:	dd5b      	ble.n	8004006 <receive_bit+0x126>
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 }
		 sprintf(msg, "\r\n");
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 */
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	2308      	movs	r3, #8
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	2310      	movs	r3, #16
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	e033      	b.n	8003fc4 <receive_bit+0xe4>
				count1++, count2++, count3++) {
			if (received[count1] + received[count2] + received[count3] >= 2) {
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <receive_bit+0x130>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f64:	492a      	ldr	r1, [pc, #168]	; (8004010 <receive_bit+0x130>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	4928      	ldr	r1, [pc, #160]	; (8004010 <receive_bit+0x130>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f76:	4413      	add	r3, r2
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	dd05      	ble.n	8003f88 <receive_bit+0xa8>
				message[count1] = '1';
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <receive_bit+0x138>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	2231      	movs	r2, #49	; 0x31
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e014      	b.n	8003fb2 <receive_bit+0xd2>
			} else if (received[count1] + received[count2] + received[count3]
 8003f88:	4a21      	ldr	r2, [pc, #132]	; (8004010 <receive_bit+0x130>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f90:	491f      	ldr	r1, [pc, #124]	; (8004010 <receive_bit+0x130>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f98:	441a      	add	r2, r3
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <receive_bit+0x130>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	dc04      	bgt.n	8003fb2 <receive_bit+0xd2>
					<= 1) {
				message[count1] = '0';
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <receive_bit+0x138>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	2230      	movs	r2, #48	; 0x30
 8003fb0:	701a      	strb	r2, [r3, #0]
				count1++, count2++, count3++) {
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b07      	cmp	r3, #7
 8003fc8:	ddc8      	ble.n	8003f5c <receive_bit+0x7c>
			}
		}

		temp = strtol(message, NULL, 2);
 8003fca:	2202      	movs	r2, #2
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4812      	ldr	r0, [pc, #72]	; (8004018 <receive_bit+0x138>)
 8003fd0:	f006 f8bc 	bl	800a14c <strtol>
 8003fd4:	ee07 0a90 	vmov	s15, r0
 8003fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <receive_bit+0x13c>)
 8003fde:	edc3 7a00 	vstr	s15, [r3]
		temp /= 10;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <receive_bit+0x13c>)
 8003fe4:	ed93 7a00 	vldr	s14, [r3]
 8003fe8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <receive_bit+0x13c>)
 8003ff2:	edc3 7a00 	vstr	s15, [r3]

		updatedFlag = 1;
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <receive_bit+0x140>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
		receivedIndex = 0;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <receive_bit+0x12c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e000      	b.n	8004006 <receive_bit+0x126>
		return;
 8004004:	bf00      	nop

	}
}
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bdb0      	pop	{r4, r5, r7, pc}
 800400c:	2000a4d8 	.word	0x2000a4d8
 8004010:	2000a478 	.word	0x2000a478
 8004014:	88888889 	.word	0x88888889
 8004018:	2000a470 	.word	0x2000a470
 800401c:	2000a4e4 	.word	0x2000a4e4
 8004020:	2000044a 	.word	0x2000044a

08004024 <bit_detect>:

void bit_detect(int freq) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 100 && freq < ONE_FREQ + 100) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f240 726c 	movw	r2, #1900	; 0x76c
 8004032:	4293      	cmp	r3, r2
 8004034:	dd0a      	ble.n	800404c <bit_detect+0x28>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f640 0233 	movw	r2, #2099	; 0x833
 800403c:	4293      	cmp	r3, r2
 800403e:	dc05      	bgt.n	800404c <bit_detect+0x28>
		oneCount++;
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <bit_detect+0x74>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <bit_detect+0x74>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e008      	b.n	800405e <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <bit_detect+0x74>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	2001      	movs	r0, #1
 8004054:	f7ff ff44 	bl	8003ee0 <receive_bit>
		oneCount = 0;
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <bit_detect+0x74>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 100 && freq < ZERO_FREQ + 100) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004064:	dd0a      	ble.n	800407c <bit_detect+0x58>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f240 424b 	movw	r2, #1099	; 0x44b
 800406c:	4293      	cmp	r3, r2
 800406e:	dc05      	bgt.n	800407c <bit_detect+0x58>
		zeroCount++;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <bit_detect+0x78>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <bit_detect+0x78>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e009      	b.n	8004090 <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <bit_detect+0x78>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4619      	mov	r1, r3
 8004082:	2000      	movs	r0, #0
 8004084:	f7ff ff2c 	bl	8003ee0 <receive_bit>
		zeroCount = 0;
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <bit_detect+0x78>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
	}
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2000a4e0 	.word	0x2000a4e0
 800409c:	2000a4dc 	.word	0x2000a4dc

080040a0 <process_data>:

void process_data(int start, int end) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	float in;

	for (uint8_t count = start; count < end; count++) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	73fb      	strb	r3, [r7, #15]
 80040ae:	e076      	b.n	800419e <process_data+0xfe>
		// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	4a3f      	ldr	r2, [pc, #252]	; (80041b0 <process_data+0x110>)
 80040b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80041b4 <process_data+0x114>
 80040c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ca:	edc7 7a02 	vstr	s15, [r7, #8]

		// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 80040ce:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <process_data+0x118>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	4a39      	ldr	r2, [pc, #228]	; (80041bc <process_data+0x11c>)
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	601a      	str	r2, [r3, #0]
		fftIndex++;
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <process_data+0x118>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b21a      	sxth	r2, r3
 80040ec:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <process_data+0x118>)
 80040ee:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 80040f0:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <process_data+0x118>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	d14d      	bne.n	8004198 <process_data+0xf8>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80040fc:	2300      	movs	r3, #0
 80040fe:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <process_data+0x120>)
 8004100:	492e      	ldr	r1, [pc, #184]	; (80041bc <process_data+0x11c>)
 8004102:	4830      	ldr	r0, [pc, #192]	; (80041c4 <process_data+0x124>)
 8004104:	f7ff faa8 	bl	8003658 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 8004108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410c:	492e      	ldr	r1, [pc, #184]	; (80041c8 <process_data+0x128>)
 800410e:	482c      	ldr	r0, [pc, #176]	; (80041c0 <process_data+0x120>)
 8004110:	f7fc fe5a 	bl	8000dc8 <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <process_data+0x12c>)
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <process_data+0x130>)
 800411e:	2200      	movs	r2, #0
 8004120:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 8004122:	2301      	movs	r3, #1
 8004124:	81bb      	strh	r3, [r7, #12]
 8004126:	e02b      	b.n	8004180 <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 8004128:	89bb      	ldrh	r3, [r7, #12]
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <process_data+0x128>)
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	ed93 7a00 	vldr	s14, [r3]
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <process_data+0x12c>)
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	dd1a      	ble.n	800417a <process_data+0xda>
					peakVal = fftMagOut[index];
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <process_data+0x128>)
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <process_data+0x12c>)
 8004150:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8004152:	89bb      	ldrh	r3, [r7, #12]
 8004154:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004158:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004164:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80041d4 <process_data+0x134>
 8004168:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 800416c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004170:	ee17 3a90 	vmov	r3, s15
 8004174:	b29a      	uxth	r2, r3
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <process_data+0x130>)
 8004178:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 800417a:	89bb      	ldrh	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	81bb      	strh	r3, [r7, #12]
 8004180:	89bb      	ldrh	r3, [r7, #12]
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d3cf      	bcc.n	8004128 <process_data+0x88>
				}
			}
			//printf("%d\n", (int)peakHz);
			bit_detect(peakHz);
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <process_data+0x130>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff49 	bl	8004024 <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <process_data+0x118>)
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	3301      	adds	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	dc84      	bgt.n	80040b0 <process_data+0x10>
		}
	}

}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000248 	.word	0x20000248
 80041b4:	37fffffc 	.word	0x37fffffc
 80041b8:	2000a464 	.word	0x2000a464
 80041bc:	20000464 	.word	0x20000464
 80041c0:	20004464 	.word	0x20004464
 80041c4:	2000044c 	.word	0x2000044c
 80041c8:	20008464 	.word	0x20008464
 80041cc:	2000a468 	.word	0x2000a468
 80041d0:	2000a46c 	.word	0x2000a46c
 80041d4:	45800000 	.word	0x45800000

080041d8 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000448 	.word	0x20000448

080041f8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000449 	.word	0x20000449

08004218 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f005 fe6b 	bl	8009efc <STEPPER_TMR_OVF_ISR>
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004232:	b672      	cpsid	i
}
 8004234:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004236:	e7fe      	b.n	8004236 <Error_Handler+0x8>

08004238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <HAL_MspInit+0x44>)
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	4a0e      	ldr	r2, [pc, #56]	; (800427c <HAL_MspInit+0x44>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6613      	str	r3, [r2, #96]	; 0x60
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_MspInit+0x44>)
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_MspInit+0x44>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_MspInit+0x44>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_MspInit+0x44>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000

08004280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b09e      	sub	sp, #120	; 0x78
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	2254      	movs	r2, #84	; 0x54
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f005 ff5d 	bl	800a160 <memset>
  if(hadc->Instance==ADC1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a25      	ldr	r2, [pc, #148]	; (8004340 <HAL_ADC_MspInit+0xc0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d143      	bne.n	8004338 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042ba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80042c4:	2310      	movs	r3, #16
 80042c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80042c8:	2307      	movs	r3, #7
 80042ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80042cc:	2302      	movs	r3, #2
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80042d0:	2302      	movs	r3, #2
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80042d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042da:	f107 0310 	add.w	r3, r7, #16
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 fdbe 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80042ea:	f7ff ffa0 	bl	800422e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	4a14      	ldr	r2, [pc, #80]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 80042f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_ADC_MspInit+0xc4>)
 8004314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800431e:	2340      	movs	r3, #64	; 0x40
 8004320:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004322:	230b      	movs	r3, #11
 8004324:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004326:	2300      	movs	r3, #0
 8004328:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004334:	f001 fd66 	bl	8005e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004338:	bf00      	nop
 800433a:	3778      	adds	r7, #120	; 0x78
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	50040000 	.word	0x50040000
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d114      	bne.n	8004384 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	201c      	movs	r0, #28
 8004378:	f001 fbff 	bl	8005b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800437c:	201c      	movs	r0, #28
 800437e:	f001 fc18 	bl	8005bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004382:	e010      	b.n	80043a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_TIM_Base_MspInit+0x6c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10b      	bne.n	80043a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 8004390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6613      	str	r3, [r2, #96]	; 0x60
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_TIM_Base_MspInit+0x68>)
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40014000 	.word	0x40014000

080043b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b09e      	sub	sp, #120	; 0x78
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	2254      	movs	r2, #84	; 0x54
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f005 fec1 	bl	800a160 <memset>
  if(huart->Instance==USART2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <HAL_UART_MspInit+0xdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d150      	bne.n	800448a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043e8:	2302      	movs	r3, #2
 80043ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80043ec:	2300      	movs	r3, #0
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043f0:	f107 0310 	add.w	r3, r7, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f002 fd33 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004400:	f7ff ff15 	bl	800422e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004404:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_UART_MspInit+0xe0>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <HAL_UART_MspInit+0xe0>)
 800440a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440e:	6593      	str	r3, [r2, #88]	; 0x58
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_UART_MspInit+0xe0>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_UART_MspInit+0xe0>)
 800441e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <HAL_UART_MspInit+0xe0>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_UART_MspInit+0xe0>)
 800442a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004434:	2306      	movs	r3, #6
 8004436:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004440:	2303      	movs	r3, #3
 8004442:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004444:	2307      	movs	r3, #7
 8004446:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004448:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004452:	f001 fcd7 	bl	8005e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	2303      	movs	r3, #3
 8004466:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004468:	2303      	movs	r3, #3
 800446a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004470:	4619      	mov	r1, r3
 8004472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004476:	f001 fcc5 	bl	8005e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	2026      	movs	r0, #38	; 0x26
 8004480:	f001 fb7b 	bl	8005b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004484:	2026      	movs	r0, #38	; 0x26
 8004486:	f001 fb94 	bl	8005bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800448a:	bf00      	nop
 800448c:	3778      	adds	r7, #120	; 0x78
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40004400 	.word	0x40004400
 8004498:	40021000 	.word	0x40021000

0800449c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80044a0:	e7fe      	b.n	80044a0 <NMI_Handler+0x4>

080044a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a2:	b480      	push	{r7}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a6:	e7fe      	b.n	80044a6 <HardFault_Handler+0x4>

080044a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <MemManage_Handler+0x4>

080044ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <BusFault_Handler+0x4>

080044b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <UsageFault_Handler+0x4>

080044ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e8:	f000 f8a6 	bl	8004638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <TIM2_IRQHandler+0x10>)
 80044f6:	f003 f8b8 	bl	800766a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2000011c 	.word	0x2000011c

08004504 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <USART2_IRQHandler+0x10>)
 800450a:	f004 f841 	bl	8008590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200001b4 	.word	0x200001b4

08004518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SystemInit+0x20>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	4a05      	ldr	r2, [pc, #20]	; (8004538 <SystemInit+0x20>)
 8004524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800453c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004574 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004540:	f7ff ffea 	bl	8004518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <LoopForever+0x6>)
  ldr r1, =_edata
 8004546:	490d      	ldr	r1, [pc, #52]	; (800457c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004548:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <LoopForever+0xe>)
  movs r3, #0
 800454a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800454c:	e002      	b.n	8004554 <LoopCopyDataInit>

0800454e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800454e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004552:	3304      	adds	r3, #4

08004554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004558:	d3f9      	bcc.n	800454e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800455c:	4c0a      	ldr	r4, [pc, #40]	; (8004588 <LoopForever+0x16>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004560:	e001      	b.n	8004566 <LoopFillZerobss>

08004562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004564:	3204      	adds	r2, #4

08004566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004568:	d3fb      	bcc.n	8004562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800456a:	f005 fe07 	bl	800a17c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800456e:	f7ff fa2d 	bl	80039cc <main>

08004572 <LoopForever>:

LoopForever:
    b LoopForever
 8004572:	e7fe      	b.n	8004572 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004574:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800457c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004580:	0801d82c 	.word	0x0801d82c
  ldr r2, =_sbss
 8004584:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004588:	2000a63c 	.word	0x2000a63c

0800458c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800458c:	e7fe      	b.n	800458c <ADC1_IRQHandler>

0800458e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004598:	2003      	movs	r0, #3
 800459a:	f001 fae3 	bl	8005b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800459e:	2000      	movs	r0, #0
 80045a0:	f000 f80e 	bl	80045c0 <HAL_InitTick>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	71fb      	strb	r3, [r7, #7]
 80045ae:	e001      	b.n	80045b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045b0:	f7ff fe42 	bl	8004238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045b4:	79fb      	ldrb	r3, [r7, #7]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <HAL_InitTick+0x6c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_InitTick+0x70>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <HAL_InitTick+0x6c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 faef 	bl	8005bce <HAL_SYSTICK_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d809      	bhi.n	8004610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045fc:	2200      	movs	r2, #0
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f001 fab9 	bl	8005b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <HAL_InitTick+0x74>)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e007      	b.n	8004620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e004      	b.n	8004620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	e001      	b.n	8004620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000008 	.word	0x20000008
 8004630:	20000000 	.word	0x20000000
 8004634:	20000004 	.word	0x20000004

08004638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_IncTick+0x20>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_IncTick+0x24>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4413      	add	r3, r2
 8004648:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_IncTick+0x24>)
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000008 	.word	0x20000008
 800465c:	2000a4ec 	.word	0x2000a4ec

08004660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return uwTick;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_GetTick+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000a4ec 	.word	0x2000a4ec

08004678 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	609a      	str	r2, [r3, #8]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3360      	adds	r3, #96	; 0x60
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <LL_ADC_SetOffset+0x44>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	03fff000 	.word	0x03fff000

08004728 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3360      	adds	r3, #96	; 0x60
 8004736:	461a      	mov	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3360      	adds	r3, #96	; 0x60
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	431a      	orrs	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3330      	adds	r3, #48	; 0x30
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	211f      	movs	r1, #31
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	401a      	ands	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0e9b      	lsrs	r3, r3, #26
 80047e8:	f003 011f 	and.w	r1, r3, #31
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	431a      	orrs	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3314      	adds	r3, #20
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	0e5b      	lsrs	r3, r3, #25
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	4413      	add	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	0d1b      	lsrs	r3, r3, #20
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2107      	movs	r1, #7
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	401a      	ands	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0d1b      	lsrs	r3, r3, #20
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	431a      	orrs	r2, r3
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0318 	and.w	r3, r3, #24
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004884:	40d9      	lsrs	r1, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	400b      	ands	r3, r1
 800488a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488e:	431a      	orrs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	0007ffff 	.word	0x0007ffff

080048a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80048b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6093      	str	r3, [r2, #8]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e0:	d101      	bne.n	80048e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004930:	d101      	bne.n	8004936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004958:	f043 0201 	orr.w	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800497c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004980:	f043 0202 	orr.w	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <LL_ADC_IsEnabled+0x18>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <LL_ADC_IsEnabled+0x1a>
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d101      	bne.n	80049d2 <LL_ADC_IsDisableOngoing+0x18>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_ADC_IsDisableOngoing+0x1a>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049f4:	f043 0204 	orr.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d101      	bne.n	8004a20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d101      	bne.n	8004a46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e126      	b.n	8004cbc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fbff 	bl	8004280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff19 	bl	80048cc <LL_ADC_IsDeepPowerDownEnabled>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff feff 	bl	80048a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff34 	bl	800491c <LL_ADC_IsInternalRegulatorEnabled>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff18 	bl	80048f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac4:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <HAL_ADC_Init+0x270>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_ADC_Init+0x274>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ad8:	e002      	b.n	8004ae0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f9      	bne.n	8004ada <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ff16 	bl	800491c <LL_ADC_IsInternalRegulatorEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	f043 0210 	orr.w	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	f043 0201 	orr.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff76 	bl	8004a08 <LL_ADC_REG_IsConversionOngoing>
 8004b1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 80bf 	bne.w	8004caa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 80bb 	bne.w	8004caa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b3c:	f043 0202 	orr.w	r2, r3, #2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff23 	bl	8004994 <LL_ADC_IsEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b54:	485d      	ldr	r0, [pc, #372]	; (8004ccc <HAL_ADC_Init+0x278>)
 8004b56:	f7ff ff1d 	bl	8004994 <LL_ADC_IsEnabled>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4619      	mov	r1, r3
 8004b66:	485a      	ldr	r0, [pc, #360]	; (8004cd0 <HAL_ADC_Init+0x27c>)
 8004b68:	f7ff fd86 	bl	8004678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7e5b      	ldrb	r3, [r3, #25]
 8004b70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004b7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004b82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d106      	bne.n	8004ba8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	045b      	lsls	r3, r3, #17
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <HAL_ADC_Init+0x280>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	69b9      	ldr	r1, [r7, #24]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff ff26 	bl	8004a2e <LL_ADC_INJ_IsConversionOngoing>
 8004be2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13d      	bne.n	8004c66 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d13a      	bne.n	8004c66 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bf4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bfc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0c:	f023 0302 	bic.w	r3, r3, #2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d118      	bne.n	8004c56 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c3a:	4311      	orrs	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c46:	430a      	orrs	r2, r1
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	611a      	str	r2, [r3, #16]
 8004c54:	e007      	b.n	8004c66 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10c      	bne.n	8004c88 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f023 010f 	bic.w	r1, r3, #15
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
 8004c86:	e007      	b.n	8004c98 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 020f 	bic.w	r2, r2, #15
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ca8:	e007      	b.n	8004cba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	f043 0210 	orr.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	053e2d63 	.word	0x053e2d63
 8004ccc:	50040000 	.word	0x50040000
 8004cd0:	50040300 	.word	0x50040300
 8004cd4:	fff0c007 	.word	0xfff0c007

08004cd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fe8d 	bl	8004a08 <LL_ADC_REG_IsConversionOngoing>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d167      	bne.n	8004dc4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_Start_DMA+0x2a>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e063      	b.n	8004dca <HAL_ADC_Start_DMA+0xf2>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fc54 	bl	80055b8 <ADC_Enable>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14f      	bne.n	8004dba <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f023 0206 	bic.w	r2, r3, #6
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	659a      	str	r2, [r3, #88]	; 0x58
 8004d46:	e002      	b.n	8004d4e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <HAL_ADC_Start_DMA+0xfc>)
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_ADC_Start_DMA+0x100>)
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_ADC_Start_DMA+0x104>)
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	221c      	movs	r2, #28
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0210 	orr.w	r2, r2, #16
 8004d84:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3340      	adds	r3, #64	; 0x40
 8004da0:	4619      	mov	r1, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f000 ff1e 	bl	8005be6 <HAL_DMA_Start_IT>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fe14 	bl	80049e0 <LL_ADC_REG_StartConversion>
 8004db8:	e006      	b.n	8004dc8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004dc2:	e001      	b.n	8004dc8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	08005783 	.word	0x08005783
 8004dd8:	0800585b 	.word	0x0800585b
 8004ddc:	08005877 	.word	0x08005877

08004de0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b0b6      	sub	sp, #216	; 0xd8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x22>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e3bb      	b.n	800558e <HAL_ADC_ConfigChannel+0x79a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fdf0 	bl	8004a08 <LL_ADC_REG_IsConversionOngoing>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 83a0 	bne.w	8005570 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d824      	bhi.n	8004e8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	3b02      	subs	r3, #2
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d81b      	bhi.n	8004e82 <HAL_ADC_ConfigChannel+0x8e>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <HAL_ADC_ConfigChannel+0x5c>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e69 	.word	0x08004e69
 8004e58:	08004e71 	.word	0x08004e71
 8004e5c:	08004e79 	.word	0x08004e79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004e60:	230c      	movs	r3, #12
 8004e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004e66:	e010      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004e68:	2312      	movs	r3, #18
 8004e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004e70:	2318      	movs	r3, #24
 8004e72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004e76:	e008      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004e80:	e003      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004e82:	2306      	movs	r3, #6
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004e88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004e98:	f7ff fc8a 	bl	80047b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fdb1 	bl	8004a08 <LL_ADC_REG_IsConversionOngoing>
 8004ea6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fdbd 	bl	8004a2e <LL_ADC_INJ_IsConversionOngoing>
 8004eb4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 81a4 	bne.w	800520a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 819f 	bne.w	800520a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f7ff fc95 	bl	8004808 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d00a      	beq.n	8004f16 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6919      	ldr	r1, [r3, #16]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f10:	f7ff fbe6 	bl	80046e0 <LL_ADC_SetOffset>
 8004f14:	e179      	b.n	800520a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fc03 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x14e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fbf8 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	0e9b      	lsrs	r3, r3, #26
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	e01e      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x18c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fbed 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f58:	fa93 f3a3 	rbit	r3, r3
 8004f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e004      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1a4>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	e018      	b.n	8004fca <HAL_ADC_ConfigChannel+0x1d6>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004fac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e004      	b.n	8004fca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d106      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fbbc 	bl	8004754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fba0 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x214>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fb95 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8004ffe:	4603      	mov	r3, r0
 8005000:	0e9b      	lsrs	r3, r3, #26
 8005002:	f003 021f 	and.w	r2, r3, #31
 8005006:	e01e      	b.n	8005046 <HAL_ADC_ConfigChannel+0x252>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2101      	movs	r1, #1
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fb8a 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8005014:	4603      	mov	r3, r0
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800501e:	fa93 f3a3 	rbit	r3, r3
 8005022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800502a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800502e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005036:	2320      	movs	r3, #32
 8005038:	e004      	b.n	8005044 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800503a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <HAL_ADC_ConfigChannel+0x26a>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	0e9b      	lsrs	r3, r3, #26
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	e018      	b.n	8005090 <HAL_ADC_ConfigChannel+0x29c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005076:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800507a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8005082:	2320      	movs	r3, #32
 8005084:	e004      	b.n	8005090 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005090:	429a      	cmp	r2, r3
 8005092:	d106      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2200      	movs	r2, #0
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fb59 	bl	8004754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2102      	movs	r1, #2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fb3d 	bl	8004728 <LL_ADC_GetOffsetChannel>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x2da>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2102      	movs	r1, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fb32 	bl	8004728 <LL_ADC_GetOffsetChannel>
 80050c4:	4603      	mov	r3, r0
 80050c6:	0e9b      	lsrs	r3, r3, #26
 80050c8:	f003 021f 	and.w	r2, r3, #31
 80050cc:	e01e      	b.n	800510c <HAL_ADC_ConfigChannel+0x318>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2102      	movs	r1, #2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fb27 	bl	8004728 <LL_ADC_GetOffsetChannel>
 80050da:	4603      	mov	r3, r0
 80050dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80050ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80050f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80050fc:	2320      	movs	r3, #32
 80050fe:	e004      	b.n	800510a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x330>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	0e9b      	lsrs	r3, r3, #26
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	e014      	b.n	800514e <HAL_ADC_ConfigChannel+0x35a>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005140:	2320      	movs	r3, #32
 8005142:	e004      	b.n	800514e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800514e:	429a      	cmp	r2, r3
 8005150:	d106      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fafa 	bl	8004754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2103      	movs	r1, #3
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fade 	bl	8004728 <LL_ADC_GetOffsetChannel>
 800516c:	4603      	mov	r3, r0
 800516e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <HAL_ADC_ConfigChannel+0x398>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2103      	movs	r1, #3
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fad3 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8005182:	4603      	mov	r3, r0
 8005184:	0e9b      	lsrs	r3, r3, #26
 8005186:	f003 021f 	and.w	r2, r3, #31
 800518a:	e017      	b.n	80051bc <HAL_ADC_ConfigChannel+0x3c8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2103      	movs	r1, #3
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fac8 	bl	8004728 <LL_ADC_GetOffsetChannel>
 8005198:	4603      	mov	r3, r0
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80051a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80051ae:	2320      	movs	r3, #32
 80051b0:	e003      	b.n	80051ba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80051b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x3e0>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	0e9b      	lsrs	r3, r3, #26
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	e011      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x404>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80051e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80051e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80051ec:	2320      	movs	r3, #32
 80051ee:	e003      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80051f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d106      	bne.n	800520a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	2103      	movs	r1, #3
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff faa5 	bl	8004754 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fbc0 	bl	8004994 <LL_ADC_IsEnabled>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 8140 	bne.w	800549c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	461a      	mov	r2, r3
 800522a:	f7ff fb19 	bl	8004860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a8f      	ldr	r2, [pc, #572]	; (8005470 <HAL_ADC_ConfigChannel+0x67c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	f040 8131 	bne.w	800549c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x46e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	0e9b      	lsrs	r3, r3, #26
 8005250:	3301      	adds	r3, #1
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2b09      	cmp	r3, #9
 8005258:	bf94      	ite	ls
 800525a:	2301      	movls	r3, #1
 800525c:	2300      	movhi	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e019      	b.n	8005296 <HAL_ADC_ConfigChannel+0x4a2>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005272:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800527a:	2320      	movs	r3, #32
 800527c:	e003      	b.n	8005286 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800527e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005280:	fab3 f383 	clz	r3, r3
 8005284:	b2db      	uxtb	r3, r3
 8005286:	3301      	adds	r3, #1
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2b09      	cmp	r3, #9
 800528e:	bf94      	ite	ls
 8005290:	2301      	movls	r3, #1
 8005292:	2300      	movhi	r3, #0
 8005294:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005296:	2b00      	cmp	r3, #0
 8005298:	d079      	beq.n	800538e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x4c2>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	3301      	adds	r3, #1
 80052ae:	069b      	lsls	r3, r3, #26
 80052b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052b4:	e015      	b.n	80052e2 <HAL_ADC_ConfigChannel+0x4ee>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	fa93 f3a3 	rbit	r3, r3
 80052c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80052c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80052c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80052ce:	2320      	movs	r3, #32
 80052d0:	e003      	b.n	80052da <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	fab3 f383 	clz	r3, r3
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	069b      	lsls	r3, r3, #26
 80052de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x50e>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	0e9b      	lsrs	r3, r3, #26
 80052f4:	3301      	adds	r3, #1
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	e017      	b.n	8005332 <HAL_ADC_ConfigChannel+0x53e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800531a:	2320      	movs	r3, #32
 800531c:	e003      	b.n	8005326 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800531e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3301      	adds	r3, #1
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	ea42 0103 	orr.w	r1, r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x564>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	0e9b      	lsrs	r3, r3, #26
 8005348:	3301      	adds	r3, #1
 800534a:	f003 021f 	and.w	r2, r3, #31
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	051b      	lsls	r3, r3, #20
 8005356:	e018      	b.n	800538a <HAL_ADC_ConfigChannel+0x596>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	fa93 f3a3 	rbit	r3, r3
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005370:	2320      	movs	r3, #32
 8005372:	e003      	b.n	800537c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	3301      	adds	r3, #1
 800537e:	f003 021f 	and.w	r2, r3, #31
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800538a:	430b      	orrs	r3, r1
 800538c:	e081      	b.n	8005492 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x5b6>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	0e9b      	lsrs	r3, r3, #26
 80053a0:	3301      	adds	r3, #1
 80053a2:	069b      	lsls	r3, r3, #26
 80053a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053a8:	e015      	b.n	80053d6 <HAL_ADC_ConfigChannel+0x5e2>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	fa93 f3a3 	rbit	r3, r3
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80053c2:	2320      	movs	r3, #32
 80053c4:	e003      	b.n	80053ce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	069b      	lsls	r3, r3, #26
 80053d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_ADC_ConfigChannel+0x602>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0e9b      	lsrs	r3, r3, #26
 80053e8:	3301      	adds	r3, #1
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	e017      	b.n	8005426 <HAL_ADC_ConfigChannel+0x632>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	fa93 f3a3 	rbit	r3, r3
 8005402:	61bb      	str	r3, [r7, #24]
  return result;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800540e:	2320      	movs	r3, #32
 8005410:	e003      	b.n	800541a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	fab3 f383 	clz	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3301      	adds	r3, #1
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	ea42 0103 	orr.w	r1, r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10d      	bne.n	8005452 <HAL_ADC_ConfigChannel+0x65e>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	0e9b      	lsrs	r3, r3, #26
 800543c:	3301      	adds	r3, #1
 800543e:	f003 021f 	and.w	r2, r3, #31
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	3b1e      	subs	r3, #30
 800544a:	051b      	lsls	r3, r3, #20
 800544c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005450:	e01e      	b.n	8005490 <HAL_ADC_ConfigChannel+0x69c>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	60fb      	str	r3, [r7, #12]
  return result;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800546a:	2320      	movs	r3, #32
 800546c:	e006      	b.n	800547c <HAL_ADC_ConfigChannel+0x688>
 800546e:	bf00      	nop
 8005470:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	3301      	adds	r3, #1
 800547e:	f003 021f 	and.w	r2, r3, #31
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	3b1e      	subs	r3, #30
 800548a:	051b      	lsls	r3, r3, #20
 800548c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005490:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005496:	4619      	mov	r1, r3
 8005498:	f7ff f9b6 	bl	8004808 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <HAL_ADC_ConfigChannel+0x7a4>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d06c      	beq.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054a8:	483c      	ldr	r0, [pc, #240]	; (800559c <HAL_ADC_ConfigChannel+0x7a8>)
 80054aa:	f7ff f90b 	bl	80046c4 <LL_ADC_GetCommonPathInternalCh>
 80054ae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a3a      	ldr	r2, [pc, #232]	; (80055a0 <HAL_ADC_ConfigChannel+0x7ac>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d127      	bne.n	800550c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d121      	bne.n	800550c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a35      	ldr	r2, [pc, #212]	; (80055a4 <HAL_ADC_ConfigChannel+0x7b0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d157      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054da:	4619      	mov	r1, r3
 80054dc:	482f      	ldr	r0, [pc, #188]	; (800559c <HAL_ADC_ConfigChannel+0x7a8>)
 80054de:	f7ff f8de 	bl	800469e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e2:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	099b      	lsrs	r3, r3, #6
 80054e8:	4a30      	ldr	r2, [pc, #192]	; (80055ac <HAL_ADC_ConfigChannel+0x7b8>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80054fc:	e002      	b.n	8005504 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3b01      	subs	r3, #1
 8005502:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f9      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800550a:	e03a      	b.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a27      	ldr	r2, [pc, #156]	; (80055b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d113      	bne.n	800553e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800551a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d12a      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800552c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005534:	4619      	mov	r1, r3
 8005536:	4819      	ldr	r0, [pc, #100]	; (800559c <HAL_ADC_ConfigChannel+0x7a8>)
 8005538:	f7ff f8b1 	bl	800469e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800553c:	e021      	b.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d11c      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800554c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_ADC_ConfigChannel+0x7b0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d111      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800555e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005566:	4619      	mov	r1, r3
 8005568:	480c      	ldr	r0, [pc, #48]	; (800559c <HAL_ADC_ConfigChannel+0x7a8>)
 800556a:	f7ff f898 	bl	800469e <LL_ADC_SetCommonPathInternalCh>
 800556e:	e008      	b.n	8005582 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800558a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800558e:	4618      	mov	r0, r3
 8005590:	37d8      	adds	r7, #216	; 0xd8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	80080000 	.word	0x80080000
 800559c:	50040300 	.word	0x50040300
 80055a0:	c7520000 	.word	0xc7520000
 80055a4:	50040000 	.word	0x50040000
 80055a8:	20000000 	.word	0x20000000
 80055ac:	053e2d63 	.word	0x053e2d63
 80055b0:	cb840000 	.word	0xcb840000
 80055b4:	80000001 	.word	0x80000001

080055b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff f9e3 	bl	8004994 <LL_ADC_IsEnabled>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d169      	bne.n	80056a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <ADC_Enable+0xfc>)
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f043 0210 	orr.w	r2, r3, #16
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f043 0201 	orr.w	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e055      	b.n	80056aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff f99e 	bl	8004944 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005608:	482b      	ldr	r0, [pc, #172]	; (80056b8 <ADC_Enable+0x100>)
 800560a:	f7ff f85b 	bl	80046c4 <LL_ADC_GetCommonPathInternalCh>
 800560e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <ADC_Enable+0x104>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <ADC_Enable+0x108>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005632:	e002      	b.n	800563a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f9      	bne.n	8005634 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005640:	f7ff f80e 	bl	8004660 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005646:	e028      	b.n	800569a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff f9a1 	bl	8004994 <LL_ADC_IsEnabled>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff f971 	bl	8004944 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005662:	f7fe fffd 	bl	8004660 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d914      	bls.n	800569a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d00d      	beq.n	800569a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	f043 0210 	orr.w	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e007      	b.n	80056aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d1cf      	bne.n	8005648 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	8000003f 	.word	0x8000003f
 80056b8:	50040300 	.word	0x50040300
 80056bc:	20000000 	.word	0x20000000
 80056c0:	053e2d63 	.word	0x053e2d63

080056c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff f972 	bl	80049ba <LL_ADC_IsDisableOngoing>
 80056d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff f959 	bl	8004994 <LL_ADC_IsEnabled>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d047      	beq.n	8005778 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d144      	bne.n	8005778 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030d 	and.w	r3, r3, #13
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10c      	bne.n	8005716 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f933 	bl	800496c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2203      	movs	r2, #3
 800570c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800570e:	f7fe ffa7 	bl	8004660 <HAL_GetTick>
 8005712:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005714:	e029      	b.n	800576a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f043 0210 	orr.w	r2, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	f043 0201 	orr.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e023      	b.n	800577a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005732:	f7fe ff95 	bl	8004660 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d914      	bls.n	800576a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f043 0210 	orr.w	r2, r3, #16
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e007      	b.n	800577a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1dc      	bne.n	8005732 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005798:	2b00      	cmp	r3, #0
 800579a:	d14b      	bne.n	8005834 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d021      	beq.n	80057fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe ffe5 	bl	800478a <LL_ADC_REG_IsTriggerSourceSWStart>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d032      	beq.n	800582c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d12b      	bne.n	800582c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11f      	bne.n	800582c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
 80057f8:	e018      	b.n	800582c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d111      	bne.n	800582c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f043 0201 	orr.w	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7fe fce3 	bl	80041f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005832:	e00e      	b.n	8005852 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff facd 	bl	8004de0 <HAL_ADC_ErrorCallback>
}
 8005846:	e004      	b.n	8005852 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7fe fcb5 	bl	80041d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fa9f 	bl	8004de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <LL_ADC_StartCalibration>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80058bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_ADC_IsCalibrationOnGoing>:
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f0:	d101      	bne.n	80058f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_ADCEx_Calibration_Start+0x1c>
 800591c:	2302      	movs	r3, #2
 800591e:	e04d      	b.n	80059bc <HAL_ADCEx_Calibration_Start+0xb8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fecb 	bl	80056c4 <ADC_Disable>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d136      	bne.n	80059a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005940:	f023 0302 	bic.w	r3, r3, #2
 8005944:	f043 0202 	orr.w	r2, r3, #2
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ffa9 	bl	80058aa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005958:	e014      	b.n	8005984 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	3301      	adds	r3, #1
 800595e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005966:	d30d      	bcc.n	8005984 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	f023 0312 	bic.w	r3, r3, #18
 8005970:	f043 0210 	orr.w	r2, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e01b      	b.n	80059bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ffa7 	bl	80058dc <LL_ADC_IsCalibrationOnGoing>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e2      	bne.n	800595a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f023 0303 	bic.w	r3, r3, #3
 800599c:	f043 0201 	orr.w	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
 80059a4:	e005      	b.n	80059b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0210 	orr.w	r2, r3, #16
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f6:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	60d3      	str	r3, [r2, #12]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <__NVIC_GetPriorityGrouping+0x18>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 0307 	and.w	r3, r3, #7
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db0b      	blt.n	8005a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	f003 021f 	and.w	r2, r3, #31
 8005a40:	4907      	ldr	r1, [pc, #28]	; (8005a60 <__NVIC_EnableIRQ+0x38>)
 8005a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	2001      	movs	r0, #1
 8005a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000e100 	.word	0xe000e100

08005a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	6039      	str	r1, [r7, #0]
 8005a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db0a      	blt.n	8005a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	490c      	ldr	r1, [pc, #48]	; (8005ab0 <__NVIC_SetPriority+0x4c>)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	0112      	lsls	r2, r2, #4
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	440b      	add	r3, r1
 8005a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a8c:	e00a      	b.n	8005aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4908      	ldr	r1, [pc, #32]	; (8005ab4 <__NVIC_SetPriority+0x50>)
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	761a      	strb	r2, [r3, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000e100 	.word	0xe000e100
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	; 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f1c3 0307 	rsb	r3, r3, #7
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	bf28      	it	cs
 8005ad6:	2304      	movcs	r3, #4
 8005ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d902      	bls.n	8005ae8 <NVIC_EncodePriority+0x30>
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3b03      	subs	r3, #3
 8005ae6:	e000      	b.n	8005aea <NVIC_EncodePriority+0x32>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	401a      	ands	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b00:	f04f 31ff 	mov.w	r1, #4294967295
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	43d9      	mvns	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b10:	4313      	orrs	r3, r2
         );
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3724      	adds	r7, #36	; 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b30:	d301      	bcc.n	8005b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b32:	2301      	movs	r3, #1
 8005b34:	e00f      	b.n	8005b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b36:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <SysTick_Config+0x40>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b3e:	210f      	movs	r1, #15
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	f7ff ff8e 	bl	8005a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <SysTick_Config+0x40>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b4e:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <SysTick_Config+0x40>)
 8005b50:	2207      	movs	r2, #7
 8005b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	e000e010 	.word	0xe000e010

08005b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ff29 	bl	80059c4 <__NVIC_SetPriorityGrouping>
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	4603      	mov	r3, r0
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b8c:	f7ff ff3e 	bl	8005a0c <__NVIC_GetPriorityGrouping>
 8005b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	6978      	ldr	r0, [r7, #20]
 8005b98:	f7ff ff8e 	bl	8005ab8 <NVIC_EncodePriority>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff ff5d 	bl	8005a64 <__NVIC_SetPriority>
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff ff31 	bl	8005a28 <__NVIC_EnableIRQ>
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff ffa2 	bl	8005b20 <SysTick_Config>
 8005bdc:	4603      	mov	r3, r0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_DMA_Start_IT+0x20>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e04b      	b.n	8005c9e <HAL_DMA_Start_IT+0xb8>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d13a      	bne.n	8005c90 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f8b0 	bl	8005da4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 020e 	orr.w	r2, r2, #14
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e00f      	b.n	8005c7e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0204 	bic.w	r2, r2, #4
 8005c6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 020a 	orr.w	r2, r2, #10
 8005c7c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e005      	b.n	8005c9c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d008      	beq.n	8005cd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e022      	b.n	8005d16 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 020e 	bic.w	r2, r2, #14
 8005cde:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	f003 021c 	and.w	r2, r3, #28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d005      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e029      	b.n	8005d9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 020e 	bic.w	r2, r2, #14
 8005d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f003 021c 	and.w	r2, r3, #28
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2101      	movs	r1, #1
 8005d74:	fa01 f202 	lsl.w	r2, r1, r2
 8005d78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
    }
  }
  return status;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f003 021c 	and.w	r2, r3, #28
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d108      	bne.n	8005de8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005de6:	e007      	b.n	8005df8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	60da      	str	r2, [r3, #12]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e12:	e148      	b.n	80060a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 813a 	beq.w	80060a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d005      	beq.n	8005e44 <HAL_GPIO_Init+0x40>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d130      	bne.n	8005ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	2203      	movs	r2, #3
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	f003 0201 	and.w	r2, r3, #1
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d017      	beq.n	8005ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d123      	bne.n	8005f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	08da      	lsrs	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	220f      	movs	r2, #15
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	08da      	lsrs	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3208      	adds	r2, #8
 8005f30:	6939      	ldr	r1, [r7, #16]
 8005f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f003 0203 	and.w	r2, r3, #3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8094 	beq.w	80060a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f78:	4b52      	ldr	r3, [pc, #328]	; (80060c4 <HAL_GPIO_Init+0x2c0>)
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7c:	4a51      	ldr	r2, [pc, #324]	; (80060c4 <HAL_GPIO_Init+0x2c0>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	6613      	str	r3, [r2, #96]	; 0x60
 8005f84:	4b4f      	ldr	r3, [pc, #316]	; (80060c4 <HAL_GPIO_Init+0x2c0>)
 8005f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f90:	4a4d      	ldr	r2, [pc, #308]	; (80060c8 <HAL_GPIO_Init+0x2c4>)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	3302      	adds	r3, #2
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fba:	d00d      	beq.n	8005fd8 <HAL_GPIO_Init+0x1d4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a43      	ldr	r2, [pc, #268]	; (80060cc <HAL_GPIO_Init+0x2c8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <HAL_GPIO_Init+0x1d0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a42      	ldr	r2, [pc, #264]	; (80060d0 <HAL_GPIO_Init+0x2cc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d101      	bne.n	8005fd0 <HAL_GPIO_Init+0x1cc>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e004      	b.n	8005fda <HAL_GPIO_Init+0x1d6>
 8005fd0:	2307      	movs	r3, #7
 8005fd2:	e002      	b.n	8005fda <HAL_GPIO_Init+0x1d6>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_GPIO_Init+0x1d6>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	f002 0203 	and.w	r2, r2, #3
 8005fe0:	0092      	lsls	r2, r2, #2
 8005fe2:	4093      	lsls	r3, r2
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fea:	4937      	ldr	r1, [pc, #220]	; (80060c8 <HAL_GPIO_Init+0x2c4>)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ff8:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	43db      	mvns	r3, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4013      	ands	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800601c:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006022:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	43db      	mvns	r3, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4013      	ands	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006046:	4a23      	ldr	r2, [pc, #140]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	43db      	mvns	r3, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4013      	ands	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006070:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006076:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	43db      	mvns	r3, r3
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4013      	ands	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_GPIO_Init+0x2d0>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	3301      	adds	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f aeaf 	bne.w	8005e14 <HAL_GPIO_Init+0x10>
  }
}
 80060b6:	bf00      	nop
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40010000 	.word	0x40010000
 80060cc:	48000400 	.word	0x48000400
 80060d0:	48000800 	.word	0x48000800
 80060d4:	40010400 	.word	0x40010400

080060d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	807b      	strh	r3, [r7, #2]
 80060e4:	4613      	mov	r3, r2
 80060e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060e8:	787b      	ldrb	r3, [r7, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060ee:	887a      	ldrh	r2, [r7, #2]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f4:	e002      	b.n	80060fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a04      	ldr	r2, [pc, #16]	; (8006124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	6013      	str	r3, [r2, #0]
}
 8006118:	bf00      	nop
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40007000 	.word	0x40007000

08006128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <HAL_PWREx_GetVoltageRange+0x18>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40007000 	.word	0x40007000

08006144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006152:	d130      	bne.n	80061b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006154:	4b23      	ldr	r3, [pc, #140]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800615c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006160:	d038      	beq.n	80061d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800616c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006170:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2232      	movs	r2, #50	; 0x32
 8006178:	fb02 f303 	mul.w	r3, r2, r3
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	0c9b      	lsrs	r3, r3, #18
 8006184:	3301      	adds	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006188:	e002      	b.n	8006190 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3b01      	subs	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619c:	d102      	bne.n	80061a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f2      	bne.n	800618a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b0:	d110      	bne.n	80061d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e00f      	b.n	80061d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c2:	d007      	beq.n	80061d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061c4:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061cc:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40007000 	.word	0x40007000
 80061e8:	20000000 	.word	0x20000000
 80061ec:	431bde83 	.word	0x431bde83

080061f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f000 bc02 	b.w	8006a08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006204:	4b96      	ldr	r3, [pc, #600]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
 800620c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800620e:	4b94      	ldr	r3, [pc, #592]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80e4 	beq.w	80063ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <HAL_RCC_OscConfig+0x4c>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b0c      	cmp	r3, #12
 8006230:	f040 808b 	bne.w	800634a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b01      	cmp	r3, #1
 8006238:	f040 8087 	bne.w	800634a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800623c:	4b88      	ldr	r3, [pc, #544]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_OscConfig+0x64>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e3d9      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	4b81      	ldr	r3, [pc, #516]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <HAL_RCC_OscConfig+0x7e>
 8006264:	4b7e      	ldr	r3, [pc, #504]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800626c:	e005      	b.n	800627a <HAL_RCC_OscConfig+0x8a>
 800626e:	4b7c      	ldr	r3, [pc, #496]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800627a:	4293      	cmp	r3, r2
 800627c:	d223      	bcs.n	80062c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fd8c 	bl	8006da0 <RCC_SetFlashLatencyFromMSIRange>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e3ba      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006292:	4b73      	ldr	r3, [pc, #460]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a72      	ldr	r2, [pc, #456]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006298:	f043 0308 	orr.w	r3, r3, #8
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b70      	ldr	r3, [pc, #448]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	496d      	ldr	r1, [pc, #436]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062b0:	4b6b      	ldr	r3, [pc, #428]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	4968      	ldr	r1, [pc, #416]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
 80062c4:	e025      	b.n	8006312 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c6:	4b66      	ldr	r3, [pc, #408]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a65      	ldr	r2, [pc, #404]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062cc:	f043 0308 	orr.w	r3, r3, #8
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4b63      	ldr	r3, [pc, #396]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	4960      	ldr	r1, [pc, #384]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062e4:	4b5e      	ldr	r3, [pc, #376]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	495b      	ldr	r1, [pc, #364]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd4c 	bl	8006da0 <RCC_SetFlashLatencyFromMSIRange>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e37a      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006312:	f000 fc81 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8006316:	4602      	mov	r2, r0
 8006318:	4b51      	ldr	r3, [pc, #324]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	4950      	ldr	r1, [pc, #320]	; (8006464 <HAL_RCC_OscConfig+0x274>)
 8006324:	5ccb      	ldrb	r3, [r1, r3]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <HAL_RCC_OscConfig+0x278>)
 8006330:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006332:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_RCC_OscConfig+0x27c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe f942 	bl	80045c0 <HAL_InitTick>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d052      	beq.n	80063ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	e35e      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d032      	beq.n	80063b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006352:	4b43      	ldr	r3, [pc, #268]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a42      	ldr	r2, [pc, #264]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006358:	f043 0301 	orr.w	r3, r3, #1
 800635c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800635e:	f7fe f97f 	bl	8004660 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006366:	f7fe f97b 	bl	8004660 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e347      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006378:	4b39      	ldr	r3, [pc, #228]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006384:	4b36      	ldr	r3, [pc, #216]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a35      	ldr	r2, [pc, #212]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800638a:	f043 0308 	orr.w	r3, r3, #8
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b33      	ldr	r3, [pc, #204]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	4930      	ldr	r1, [pc, #192]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063a2:	4b2f      	ldr	r3, [pc, #188]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	492b      	ldr	r1, [pc, #172]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]
 80063b6:	e01a      	b.n	80063ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063b8:	4b29      	ldr	r3, [pc, #164]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a28      	ldr	r2, [pc, #160]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063c4:	f7fe f94c 	bl	8004660 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063cc:	f7fe f948 	bl	8004660 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e314      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x1dc>
 80063ea:	e000      	b.n	80063ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d073      	beq.n	80064e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d005      	beq.n	800640c <HAL_RCC_OscConfig+0x21c>
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d10e      	bne.n	8006424 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b03      	cmp	r3, #3
 800640a:	d10b      	bne.n	8006424 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d063      	beq.n	80064e0 <HAL_RCC_OscConfig+0x2f0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d15f      	bne.n	80064e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e2f1      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d106      	bne.n	800643c <HAL_RCC_OscConfig+0x24c>
 800642e:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e025      	b.n	8006488 <HAL_RCC_OscConfig+0x298>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006444:	d114      	bne.n	8006470 <HAL_RCC_OscConfig+0x280>
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a05      	ldr	r2, [pc, #20]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 800644c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	4b03      	ldr	r3, [pc, #12]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a02      	ldr	r2, [pc, #8]	; (8006460 <HAL_RCC_OscConfig+0x270>)
 8006458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e013      	b.n	8006488 <HAL_RCC_OscConfig+0x298>
 8006460:	40021000 	.word	0x40021000
 8006464:	0801d6b4 	.word	0x0801d6b4
 8006468:	20000000 	.word	0x20000000
 800646c:	20000004 	.word	0x20000004
 8006470:	4ba0      	ldr	r3, [pc, #640]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a9f      	ldr	r2, [pc, #636]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b9d      	ldr	r3, [pc, #628]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a9c      	ldr	r2, [pc, #624]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fe f8e6 	bl	8004660 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006498:	f7fe f8e2 	bl	8004660 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e2ae      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064aa:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0x2a8>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fe f8d2 	bl	8004660 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fe f8ce 	bl	8004660 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e29a      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064d2:	4b88      	ldr	r3, [pc, #544]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0x2d0>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d060      	beq.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_OscConfig+0x310>
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b0c      	cmp	r3, #12
 80064f8:	d119      	bne.n	800652e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d116      	bne.n	800652e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006500:	4b7c      	ldr	r3, [pc, #496]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCC_OscConfig+0x328>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e277      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006518:	4b76      	ldr	r3, [pc, #472]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	061b      	lsls	r3, r3, #24
 8006526:	4973      	ldr	r1, [pc, #460]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006528:	4313      	orrs	r3, r2
 800652a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800652c:	e040      	b.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d023      	beq.n	800657e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006536:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800653c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006542:	f7fe f88d 	bl	8004660 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654a:	f7fe f889 	bl	8004660 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e255      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800655c:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b62      	ldr	r3, [pc, #392]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	495f      	ldr	r1, [pc, #380]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
 800657c:	e018      	b.n	80065b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657e:	4b5d      	ldr	r3, [pc, #372]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5c      	ldr	r2, [pc, #368]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658a:	f7fe f869 	bl	8004660 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006592:	f7fe f865 	bl	8004660 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e231      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065a4:	4b53      	ldr	r3, [pc, #332]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03c      	beq.n	8006636 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01c      	beq.n	80065fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80065c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ca:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fe f844 	bl	8004660 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fe f840 	bl	8004660 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e20c      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80065f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0ef      	beq.n	80065dc <HAL_RCC_OscConfig+0x3ec>
 80065fc:	e01b      	b.n	8006636 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fe:	4b3d      	ldr	r3, [pc, #244]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006604:	4a3b      	ldr	r2, [pc, #236]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660e:	f7fe f827 	bl	8004660 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006616:	f7fe f823 	bl	8004660 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e1ef      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006628:	4b32      	ldr	r3, [pc, #200]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800662a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1ef      	bne.n	8006616 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80a6 	beq.w	8006790 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006644:	2300      	movs	r3, #0
 8006646:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006648:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800664a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665e:	6593      	str	r3, [r2, #88]	; 0x58
 8006660:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 8006662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666c:	2301      	movs	r3, #1
 800666e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006670:	4b21      	ldr	r3, [pc, #132]	; (80066f8 <HAL_RCC_OscConfig+0x508>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d118      	bne.n	80066ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800667c:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <HAL_RCC_OscConfig+0x508>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <HAL_RCC_OscConfig+0x508>)
 8006682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006688:	f7fd ffea 	bl	8004660 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006690:	f7fd ffe6 	bl	8004660 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e1b2      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <HAL_RCC_OscConfig+0x508>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d108      	bne.n	80066c8 <HAL_RCC_OscConfig+0x4d8>
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066bc:	4a0d      	ldr	r2, [pc, #52]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066c6:	e029      	b.n	800671c <HAL_RCC_OscConfig+0x52c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d115      	bne.n	80066fc <HAL_RCC_OscConfig+0x50c>
 80066d0:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066d8:	f043 0304 	orr.w	r3, r3, #4
 80066dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	4a03      	ldr	r2, [pc, #12]	; (80066f4 <HAL_RCC_OscConfig+0x504>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x52c>
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40007000 	.word	0x40007000
 80066fc:	4b9a      	ldr	r3, [pc, #616]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	4a99      	ldr	r2, [pc, #612]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800670c:	4b96      	ldr	r3, [pc, #600]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	4a95      	ldr	r2, [pc, #596]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006714:	f023 0304 	bic.w	r3, r3, #4
 8006718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d016      	beq.n	8006752 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fd ff9c 	bl	8004660 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800672a:	e00a      	b.n	8006742 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672c:	f7fd ff98 	bl	8004660 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e162      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006742:	4b89      	ldr	r3, [pc, #548]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0ed      	beq.n	800672c <HAL_RCC_OscConfig+0x53c>
 8006750:	e015      	b.n	800677e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006752:	f7fd ff85 	bl	8004660 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006758:	e00a      	b.n	8006770 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800675a:	f7fd ff81 	bl	8004660 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e14b      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006770:	4b7d      	ldr	r3, [pc, #500]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1ed      	bne.n	800675a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006784:	4b78      	ldr	r3, [pc, #480]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	4a77      	ldr	r2, [pc, #476]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 800678a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d03c      	beq.n	8006816 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01c      	beq.n	80067de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067a4:	4b70      	ldr	r3, [pc, #448]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80067a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067aa:	4a6f      	ldr	r2, [pc, #444]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b4:	f7fd ff54 	bl	8004660 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067bc:	f7fd ff50 	bl	8004660 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e11c      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067ce:	4b66      	ldr	r3, [pc, #408]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80067d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0ef      	beq.n	80067bc <HAL_RCC_OscConfig+0x5cc>
 80067dc:	e01b      	b.n	8006816 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067de:	4b62      	ldr	r3, [pc, #392]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80067e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067e4:	4a60      	ldr	r2, [pc, #384]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ee:	f7fd ff37 	bl	8004660 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f6:	f7fd ff33 	bl	8004660 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e0ff      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006808:	4b57      	ldr	r3, [pc, #348]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 800680a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1ef      	bne.n	80067f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80f3 	beq.w	8006a06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	2b02      	cmp	r3, #2
 8006826:	f040 80c9 	bne.w	80069bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800682a:	4b4f      	ldr	r3, [pc, #316]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0203 	and.w	r2, r3, #3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	429a      	cmp	r2, r3
 800683c:	d12c      	bne.n	8006898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	3b01      	subs	r3, #1
 800684a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d123      	bne.n	8006898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800685c:	429a      	cmp	r2, r3
 800685e:	d11b      	bne.n	8006898 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d113      	bne.n	8006898 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	3b01      	subs	r3, #1
 800687e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d109      	bne.n	8006898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	3b01      	subs	r3, #1
 8006892:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d06b      	beq.n	8006970 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d062      	beq.n	8006964 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800689e:	4b32      	ldr	r3, [pc, #200]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e0ac      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068ae:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2d      	ldr	r2, [pc, #180]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80068b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068ba:	f7fd fed1 	bl	8004660 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c2:	f7fd fecd 	bl	8004660 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e099      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d4:	4b24      	ldr	r3, [pc, #144]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e0:	4b21      	ldr	r3, [pc, #132]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	4b21      	ldr	r3, [pc, #132]	; (800696c <HAL_RCC_OscConfig+0x77c>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068f0:	3a01      	subs	r2, #1
 80068f2:	0112      	lsls	r2, r2, #4
 80068f4:	4311      	orrs	r1, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068fa:	0212      	lsls	r2, r2, #8
 80068fc:	4311      	orrs	r1, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006902:	0852      	lsrs	r2, r2, #1
 8006904:	3a01      	subs	r2, #1
 8006906:	0552      	lsls	r2, r2, #21
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800690e:	0852      	lsrs	r2, r2, #1
 8006910:	3a01      	subs	r2, #1
 8006912:	0652      	lsls	r2, r2, #25
 8006914:	4311      	orrs	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800691a:	06d2      	lsls	r2, r2, #27
 800691c:	430a      	orrs	r2, r1
 800691e:	4912      	ldr	r1, [pc, #72]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006920:	4313      	orrs	r3, r2
 8006922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006924:	4b10      	ldr	r3, [pc, #64]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 800692a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800692e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800693a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800693c:	f7fd fe90 	bl	8004660 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd fe8c 	bl	8004660 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e058      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <HAL_RCC_OscConfig+0x778>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006962:	e050      	b.n	8006a06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e04f      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
 8006968:	40021000 	.word	0x40021000
 800696c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d144      	bne.n	8006a06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 8006982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 800698e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006994:	f7fd fe64 	bl	8004660 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699c:	f7fd fe60 	bl	8004660 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e02c      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x7ac>
 80069ba:	e024      	b.n	8006a06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	2b0c      	cmp	r3, #12
 80069c0:	d01f      	beq.n	8006a02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ce:	f7fd fe47 	bl	8004660 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d6:	f7fd fe43 	bl	8004660 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e00f      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f0      	bne.n	80069d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	4905      	ldr	r1, [pc, #20]	; (8006a10 <HAL_RCC_OscConfig+0x820>)
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <HAL_RCC_OscConfig+0x824>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60cb      	str	r3, [r1, #12]
 8006a00:	e001      	b.n	8006a06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40021000 	.word	0x40021000
 8006a14:	feeefffc 	.word	0xfeeefffc

08006a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0e7      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b75      	ldr	r3, [pc, #468]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d910      	bls.n	8006a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b72      	ldr	r3, [pc, #456]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f023 0207 	bic.w	r2, r3, #7
 8006a42:	4970      	ldr	r1, [pc, #448]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4a:	4b6e      	ldr	r3, [pc, #440]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0cf      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d010      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	4b66      	ldr	r3, [pc, #408]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d908      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a78:	4b63      	ldr	r3, [pc, #396]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4960      	ldr	r1, [pc, #384]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04c      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9e:	4b5a      	ldr	r3, [pc, #360]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d121      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0a6      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab6:	4b54      	ldr	r3, [pc, #336]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d115      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e09a      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ace:	4b4e      	ldr	r3, [pc, #312]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e08e      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ade:	4b4a      	ldr	r3, [pc, #296]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e086      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aee:	4b46      	ldr	r3, [pc, #280]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 0203 	bic.w	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4943      	ldr	r1, [pc, #268]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b00:	f7fd fdae 	bl	8004660 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b06:	e00a      	b.n	8006b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b08:	f7fd fdaa 	bl	8004660 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e06e      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 020c 	and.w	r2, r3, #12
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d1eb      	bne.n	8006b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d010      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d208      	bcs.n	8006b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4c:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	492b      	ldr	r1, [pc, #172]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d210      	bcs.n	8006b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6c:	4b25      	ldr	r3, [pc, #148]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f023 0207 	bic.w	r2, r3, #7
 8006b74:	4923      	ldr	r1, [pc, #140]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7c:	4b21      	ldr	r3, [pc, #132]	; (8006c04 <HAL_RCC_ClockConfig+0x1ec>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e036      	b.n	8006bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d008      	beq.n	8006bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9a:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	4918      	ldr	r1, [pc, #96]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4910      	ldr	r1, [pc, #64]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bcc:	f000 f824 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	490b      	ldr	r1, [pc, #44]	; (8006c0c <HAL_RCC_ClockConfig+0x1f4>)
 8006bde:	5ccb      	ldrb	r3, [r1, r3]
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <HAL_RCC_ClockConfig+0x1f8>)
 8006bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <HAL_RCC_ClockConfig+0x1fc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fd fce5 	bl	80045c0 <HAL_InitTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40022000 	.word	0x40022000
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	0801d6b4 	.word	0x0801d6b4
 8006c10:	20000000 	.word	0x20000000
 8006c14:	20000004 	.word	0x20000004

08006c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	2300      	movs	r3, #0
 8006c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c26:	4b3e      	ldr	r3, [pc, #248]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c30:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_GetSysClockFreq+0x34>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b0c      	cmp	r3, #12
 8006c44:	d121      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d11e      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c4c:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c58:	4b31      	ldr	r3, [pc, #196]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e005      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c68:	4b2d      	ldr	r3, [pc, #180]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c74:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c88:	e00a      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e004      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c9c:	4b23      	ldr	r3, [pc, #140]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8006c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d134      	bne.n	8006d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ca6:	4b1e      	ldr	r3, [pc, #120]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8006cbc:	e005      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cc0:	617b      	str	r3, [r7, #20]
      break;
 8006cc2:	e005      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8006cc6:	617b      	str	r3, [r7, #20]
      break;
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	617b      	str	r3, [r7, #20]
      break;
 8006cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cd0:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	3301      	adds	r3, #1
 8006cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cde:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	fb03 f202 	mul.w	r2, r3, r2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	0e5b      	lsrs	r3, r3, #25
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	3301      	adds	r3, #1
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d10:	69bb      	ldr	r3, [r7, #24]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3724      	adds	r7, #36	; 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40021000 	.word	0x40021000
 8006d24:	0801d6cc 	.word	0x0801d6cc
 8006d28:	00f42400 	.word	0x00f42400
 8006d2c:	007a1200 	.word	0x007a1200

08006d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d36:	681b      	ldr	r3, [r3, #0]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000000 	.word	0x20000000

08006d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d4c:	f7ff fff0 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	4904      	ldr	r1, [pc, #16]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	0801d6c4 	.word	0x0801d6c4

08006d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d78:	f7ff ffda 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0adb      	lsrs	r3, r3, #11
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4904      	ldr	r1, [pc, #16]	; (8006d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	0801d6c4 	.word	0x0801d6c4

08006da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006dac:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006db8:	f7ff f9b6 	bl	8006128 <HAL_PWREx_GetVoltageRange>
 8006dbc:	6178      	str	r0, [r7, #20]
 8006dbe:	e014      	b.n	8006dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc4:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dca:	6593      	str	r3, [r2, #88]	; 0x58
 8006dcc:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006dd8:	f7ff f9a6 	bl	8006128 <HAL_PWREx_GetVoltageRange>
 8006ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b1e      	ldr	r3, [pc, #120]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d10b      	bne.n	8006e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b80      	cmp	r3, #128	; 0x80
 8006df6:	d919      	bls.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8006dfc:	d902      	bls.n	8006e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dfe:	2302      	movs	r3, #2
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e013      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e04:	2301      	movs	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	e010      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b80      	cmp	r3, #128	; 0x80
 8006e0e:	d902      	bls.n	8006e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e10:	2303      	movs	r3, #3
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e00a      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d102      	bne.n	8006e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	e004      	b.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b70      	cmp	r3, #112	; 0x70
 8006e26:	d101      	bne.n	8006e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e28:	2301      	movs	r3, #1
 8006e2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f023 0207 	bic.w	r2, r3, #7
 8006e34:	4909      	ldr	r1, [pc, #36]	; (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e3c:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d001      	beq.n	8006e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40022000 	.word	0x40022000

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d031      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e84:	d01a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e8a:	d814      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e94:	d10f      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006e96:	4b5d      	ldr	r3, [pc, #372]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	4a5c      	ldr	r2, [pc, #368]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ea2:	e00c      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f9de 	bl	800726c <RCCEx_PLLSAI1_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006eb4:	e003      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eba:	e000      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebe:	7cfb      	ldrb	r3, [r7, #19]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ec4:	4b51      	ldr	r3, [pc, #324]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	494e      	ldr	r1, [pc, #312]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006eda:	e001      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 809e 	beq.w	800702a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ef2:	4b46      	ldr	r3, [pc, #280]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f08:	4b40      	ldr	r3, [pc, #256]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	4a3f      	ldr	r2, [pc, #252]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	6593      	str	r3, [r2, #88]	; 0x58
 8006f14:	4b3d      	ldr	r3, [pc, #244]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f20:	2301      	movs	r3, #1
 8006f22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f24:	4b3a      	ldr	r3, [pc, #232]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a39      	ldr	r2, [pc, #228]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f30:	f7fd fb96 	bl	8004660 <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f36:	e009      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f38:	f7fd fb92 	bl	8004660 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d902      	bls.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	74fb      	strb	r3, [r7, #19]
        break;
 8006f4a:	e005      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f4c:	4b30      	ldr	r3, [pc, #192]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0ef      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006f58:	7cfb      	ldrb	r3, [r7, #19]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d15a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f5e:	4b2b      	ldr	r3, [pc, #172]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01e      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d019      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f7a:	4b24      	ldr	r3, [pc, #144]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f86:	4b21      	ldr	r3, [pc, #132]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8c:	4a1f      	ldr	r2, [pc, #124]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d016      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fd fb52 	bl	8004660 <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fbe:	e00b      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc0:	f7fd fb4e 	bl	8004660 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d902      	bls.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	74fb      	strb	r3, [r7, #19]
            break;
 8006fd6:	e006      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fd8:	4b0c      	ldr	r3, [pc, #48]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0ec      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006fe6:	7cfb      	ldrb	r3, [r7, #19]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007002:	e009      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	74bb      	strb	r3, [r7, #18]
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007018:	7c7b      	ldrb	r3, [r7, #17]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701e:	4b8a      	ldr	r3, [pc, #552]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	4a89      	ldr	r2, [pc, #548]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007028:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007036:	4b84      	ldr	r3, [pc, #528]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703c:	f023 0203 	bic.w	r2, r3, #3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	4980      	ldr	r1, [pc, #512]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007058:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705e:	f023 020c 	bic.w	r2, r3, #12
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	4978      	ldr	r1, [pc, #480]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800707a:	4b73      	ldr	r3, [pc, #460]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	496f      	ldr	r1, [pc, #444]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800709c:	4b6a      	ldr	r3, [pc, #424]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	4967      	ldr	r1, [pc, #412]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070be:	4b62      	ldr	r3, [pc, #392]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	495e      	ldr	r1, [pc, #376]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070e0:	4b59      	ldr	r3, [pc, #356]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	4956      	ldr	r1, [pc, #344]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007102:	4b51      	ldr	r3, [pc, #324]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	494d      	ldr	r1, [pc, #308]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d028      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007124:	4b48      	ldr	r3, [pc, #288]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	4945      	ldr	r1, [pc, #276]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007142:	d106      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007144:	4b40      	ldr	r3, [pc, #256]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a3f      	ldr	r2, [pc, #252]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800714a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714e:	60d3      	str	r3, [r2, #12]
 8007150:	e011      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800715a:	d10c      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	2101      	movs	r1, #1
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f882 	bl	800726c <RCCEx_PLLSAI1_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800716c:	7cfb      	ldrb	r3, [r7, #19]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007172:	7cfb      	ldrb	r3, [r7, #19]
 8007174:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d028      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007182:	4b31      	ldr	r3, [pc, #196]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	492d      	ldr	r1, [pc, #180]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a0:	d106      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a2:	4b29      	ldr	r3, [pc, #164]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	4a28      	ldr	r2, [pc, #160]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ac:	60d3      	str	r3, [r2, #12]
 80071ae:	e011      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071b8:	d10c      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2101      	movs	r1, #1
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f853 	bl	800726c <RCCEx_PLLSAI1_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071ca:	7cfb      	ldrb	r3, [r7, #19]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01c      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071e0:	4b19      	ldr	r3, [pc, #100]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ee:	4916      	ldr	r1, [pc, #88]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071fe:	d10c      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	2102      	movs	r1, #2
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f830 	bl	800726c <RCCEx_PLLSAI1_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007210:	7cfb      	ldrb	r3, [r7, #19]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007216:	7cfb      	ldrb	r3, [r7, #19]
 8007218:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007226:	4b08      	ldr	r3, [pc, #32]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	4904      	ldr	r1, [pc, #16]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800723c:	7cbb      	ldrb	r3, [r7, #18]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40021000 	.word	0x40021000

0800724c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a04      	ldr	r2, [pc, #16]	; (8007268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40021000 	.word	0x40021000

0800726c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800727a:	4b74      	ldr	r3, [pc, #464]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d018      	beq.n	80072b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007286:	4b71      	ldr	r3, [pc, #452]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0203 	and.w	r2, r3, #3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d10d      	bne.n	80072b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
       ||
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800729e:	4b6b      	ldr	r3, [pc, #428]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
       ||
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d047      	beq.n	8007342 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e044      	b.n	8007342 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d018      	beq.n	80072f2 <RCCEx_PLLSAI1_Config+0x86>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d825      	bhi.n	8007310 <RCCEx_PLLSAI1_Config+0xa4>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d002      	beq.n	80072ce <RCCEx_PLLSAI1_Config+0x62>
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d009      	beq.n	80072e0 <RCCEx_PLLSAI1_Config+0x74>
 80072cc:	e020      	b.n	8007310 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072ce:	4b5f      	ldr	r3, [pc, #380]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d11d      	bne.n	8007316 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072de:	e01a      	b.n	8007316 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072e0:	4b5a      	ldr	r3, [pc, #360]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d116      	bne.n	800731a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072f0:	e013      	b.n	800731a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072f2:	4b56      	ldr	r3, [pc, #344]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072fe:	4b53      	ldr	r3, [pc, #332]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800730e:	e006      	b.n	800731e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
      break;
 8007314:	e004      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800731e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007326:	4b49      	ldr	r3, [pc, #292]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	3b01      	subs	r3, #1
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	430b      	orrs	r3, r1
 800733c:	4943      	ldr	r1, [pc, #268]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d17c      	bne.n	8007442 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007348:	4b40      	ldr	r3, [pc, #256]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3f      	ldr	r2, [pc, #252]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800734e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007354:	f7fd f984 	bl	8004660 <HAL_GetTick>
 8007358:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800735a:	e009      	b.n	8007370 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800735c:	f7fd f980 	bl	8004660 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d902      	bls.n	8007370 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	73fb      	strb	r3, [r7, #15]
        break;
 800736e:	e005      	b.n	800737c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007370:	4b36      	ldr	r3, [pc, #216]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1ef      	bne.n	800735c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d15f      	bne.n	8007442 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d110      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007388:	4b30      	ldr	r3, [pc, #192]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6892      	ldr	r2, [r2, #8]
 8007398:	0211      	lsls	r1, r2, #8
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68d2      	ldr	r2, [r2, #12]
 800739e:	06d2      	lsls	r2, r2, #27
 80073a0:	430a      	orrs	r2, r1
 80073a2:	492a      	ldr	r1, [pc, #168]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	610b      	str	r3, [r1, #16]
 80073a8:	e027      	b.n	80073fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d112      	bne.n	80073d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073b0:	4b26      	ldr	r3, [pc, #152]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6892      	ldr	r2, [r2, #8]
 80073c0:	0211      	lsls	r1, r2, #8
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6912      	ldr	r2, [r2, #16]
 80073c6:	0852      	lsrs	r2, r2, #1
 80073c8:	3a01      	subs	r2, #1
 80073ca:	0552      	lsls	r2, r2, #21
 80073cc:	430a      	orrs	r2, r1
 80073ce:	491f      	ldr	r1, [pc, #124]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
 80073d4:	e011      	b.n	80073fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80073de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6892      	ldr	r2, [r2, #8]
 80073e6:	0211      	lsls	r1, r2, #8
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6952      	ldr	r2, [r2, #20]
 80073ec:	0852      	lsrs	r2, r2, #1
 80073ee:	3a01      	subs	r2, #1
 80073f0:	0652      	lsls	r2, r2, #25
 80073f2:	430a      	orrs	r2, r1
 80073f4:	4915      	ldr	r1, [pc, #84]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a13      	ldr	r2, [pc, #76]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007404:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007406:	f7fd f92b 	bl	8004660 <HAL_GetTick>
 800740a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800740c:	e009      	b.n	8007422 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800740e:	f7fd f927 	bl	8004660 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d902      	bls.n	8007422 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	73fb      	strb	r3, [r7, #15]
          break;
 8007420:	e005      	b.n	800742e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ef      	beq.n	800740e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4903      	ldr	r1, [pc, #12]	; (800744c <RCCEx_PLLSAI1_Config+0x1e0>)
 800743e:	4313      	orrs	r3, r2
 8007440:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40021000 	.word	0x40021000

08007450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e049      	b.n	80074f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fc ff66 	bl	8004348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f000 fbf4 	bl	8007c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e03b      	b.n	8007590 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <HAL_TIM_Base_Start_IT+0x9c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d009      	beq.n	800754e <HAL_TIM_Base_Start_IT+0x4e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d004      	beq.n	800754e <HAL_TIM_Base_Start_IT+0x4e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d115      	bne.n	800757a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007556:	4013      	ands	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b06      	cmp	r3, #6
 800755e:	d015      	beq.n	800758c <HAL_TIM_Base_Start_IT+0x8c>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007566:	d011      	beq.n	800758c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	e008      	b.n	800758c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e000      	b.n	800758e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40014000 	.word	0x40014000
 80075a4:	00010007 	.word	0x00010007

080075a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e049      	b.n	800764e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f841 	bl	8007656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f000 fb48 	bl	8007c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d020      	beq.n	80076ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01b      	beq.n	80076ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f06f 0202 	mvn.w	r2, #2
 800769e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fac2 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 80076ba:	e005      	b.n	80076c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fab4 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fac5 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d020      	beq.n	800771a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01b      	beq.n	800771a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f06f 0204 	mvn.w	r2, #4
 80076ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa9c 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007706:	e005      	b.n	8007714 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa8e 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa9f 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d020      	beq.n	8007766 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01b      	beq.n	8007766 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f06f 0208 	mvn.w	r2, #8
 8007736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2204      	movs	r2, #4
 800773c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa76 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007752:	e005      	b.n	8007760 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa68 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa79 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	d020      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01b      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f06f 0210 	mvn.w	r2, #16
 8007782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2208      	movs	r2, #8
 8007788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fa50 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 800779e:	e005      	b.n	80077ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa42 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa53 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00c      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d007      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f06f 0201 	mvn.w	r2, #1
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fc fd21 	bl	8004218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fe2d 	bl	8008454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fe25 	bl	8008468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800783a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa12 	bl	8007c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f06f 0220 	mvn.w	r2, #32
 800785e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fded 	bl	8008440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800788a:	2302      	movs	r3, #2
 800788c:	e0ff      	b.n	8007a8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b14      	cmp	r3, #20
 800789a:	f200 80f0 	bhi.w	8007a7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	08007a7f 	.word	0x08007a7f
 80078ac:	08007a7f 	.word	0x08007a7f
 80078b0:	08007a7f 	.word	0x08007a7f
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007a7f 	.word	0x08007a7f
 80078bc:	08007a7f 	.word	0x08007a7f
 80078c0:	08007a7f 	.word	0x08007a7f
 80078c4:	0800797b 	.word	0x0800797b
 80078c8:	08007a7f 	.word	0x08007a7f
 80078cc:	08007a7f 	.word	0x08007a7f
 80078d0:	08007a7f 	.word	0x08007a7f
 80078d4:	080079bb 	.word	0x080079bb
 80078d8:	08007a7f 	.word	0x08007a7f
 80078dc:	08007a7f 	.word	0x08007a7f
 80078e0:	08007a7f 	.word	0x08007a7f
 80078e4:	080079fd 	.word	0x080079fd
 80078e8:	08007a7f 	.word	0x08007a7f
 80078ec:	08007a7f 	.word	0x08007a7f
 80078f0:	08007a7f 	.word	0x08007a7f
 80078f4:	08007a3d 	.word	0x08007a3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fa20 	bl	8007d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0208 	orr.w	r2, r2, #8
 8007912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0204 	bic.w	r2, r2, #4
 8007922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6999      	ldr	r1, [r3, #24]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	619a      	str	r2, [r3, #24]
      break;
 8007936:	e0a5      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fa7c 	bl	8007e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6999      	ldr	r1, [r3, #24]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	619a      	str	r2, [r3, #24]
      break;
 8007978:	e084      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fad5 	bl	8007f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0208 	orr.w	r2, r2, #8
 8007994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0204 	bic.w	r2, r2, #4
 80079a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69d9      	ldr	r1, [r3, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	61da      	str	r2, [r3, #28]
      break;
 80079b8:	e064      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fb2d 	bl	8008020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69d9      	ldr	r1, [r3, #28]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	021a      	lsls	r2, r3, #8
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61da      	str	r2, [r3, #28]
      break;
 80079fa:	e043      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb6a 	bl	80080dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0208 	orr.w	r2, r2, #8
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0204 	bic.w	r2, r2, #4
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a3a:	e023      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fba2 	bl	800818c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a7c:	e002      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]
      break;
 8007a82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop

08007a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e0b6      	b.n	8007c22 <HAL_TIM_ConfigClockSource+0x18a>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af0:	d03e      	beq.n	8007b70 <HAL_TIM_ConfigClockSource+0xd8>
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af6:	f200 8087 	bhi.w	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	f000 8086 	beq.w	8007c0e <HAL_TIM_ConfigClockSource+0x176>
 8007b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b06:	d87f      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b08:	2b70      	cmp	r3, #112	; 0x70
 8007b0a:	d01a      	beq.n	8007b42 <HAL_TIM_ConfigClockSource+0xaa>
 8007b0c:	2b70      	cmp	r3, #112	; 0x70
 8007b0e:	d87b      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b10:	2b60      	cmp	r3, #96	; 0x60
 8007b12:	d050      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x11e>
 8007b14:	2b60      	cmp	r3, #96	; 0x60
 8007b16:	d877      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b18:	2b50      	cmp	r3, #80	; 0x50
 8007b1a:	d03c      	beq.n	8007b96 <HAL_TIM_ConfigClockSource+0xfe>
 8007b1c:	2b50      	cmp	r3, #80	; 0x50
 8007b1e:	d873      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d058      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x13e>
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d86f      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d064      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8007b2c:	2b30      	cmp	r3, #48	; 0x30
 8007b2e:	d86b      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d060      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d867      	bhi.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05c      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d05a      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8007b40:	e062      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b52:	f000 fbef 	bl	8008334 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
      break;
 8007b6e:	e04f      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b80:	f000 fbd8 	bl	8008334 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b92:	609a      	str	r2, [r3, #8]
      break;
 8007b94:	e03c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f000 fb4c 	bl	8008240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2150      	movs	r1, #80	; 0x50
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fba5 	bl	80082fe <TIM_ITRx_SetConfig>
      break;
 8007bb4:	e02c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f000 fb6b 	bl	800829e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2160      	movs	r1, #96	; 0x60
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fb95 	bl	80082fe <TIM_ITRx_SetConfig>
      break;
 8007bd4:	e01c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be2:	461a      	mov	r2, r3
 8007be4:	f000 fb2c 	bl	8008240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2140      	movs	r1, #64	; 0x40
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fb85 	bl	80082fe <TIM_ITRx_SetConfig>
      break;
 8007bf4:	e00c      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f000 fb7c 	bl	80082fe <TIM_ITRx_SetConfig>
      break;
 8007c06:	e003      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0c:	e000      	b.n	8007c10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a2a      	ldr	r2, [pc, #168]	; (8007d38 <TIM_Base_SetConfig+0xbc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_Base_SetConfig+0x20>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d108      	bne.n	8007cae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <TIM_Base_SetConfig+0xbc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <TIM_Base_SetConfig+0xc0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x52>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1d      	ldr	r2, [pc, #116]	; (8007d40 <TIM_Base_SetConfig+0xc4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <TIM_Base_SetConfig+0xbc>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d007      	beq.n	8007d1c <TIM_Base_SetConfig+0xa0>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a0b      	ldr	r2, [pc, #44]	; (8007d3c <TIM_Base_SetConfig+0xc0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d003      	beq.n	8007d1c <TIM_Base_SetConfig+0xa0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <TIM_Base_SetConfig+0xc4>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d103      	bne.n	8007d24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	615a      	str	r2, [r3, #20]
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40012c00 	.word	0x40012c00
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400

08007d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f023 0201 	bic.w	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f023 0302 	bic.w	r3, r3, #2
 8007d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a24      	ldr	r2, [pc, #144]	; (8007e30 <TIM_OC1_SetConfig+0xec>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d007      	beq.n	8007db4 <TIM_OC1_SetConfig+0x70>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a23      	ldr	r2, [pc, #140]	; (8007e34 <TIM_OC1_SetConfig+0xf0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d003      	beq.n	8007db4 <TIM_OC1_SetConfig+0x70>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a22      	ldr	r2, [pc, #136]	; (8007e38 <TIM_OC1_SetConfig+0xf4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d10c      	bne.n	8007dce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0308 	bic.w	r3, r3, #8
 8007dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f023 0304 	bic.w	r3, r3, #4
 8007dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <TIM_OC1_SetConfig+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <TIM_OC1_SetConfig+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <TIM_OC1_SetConfig+0xf0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d003      	beq.n	8007de6 <TIM_OC1_SetConfig+0xa2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <TIM_OC1_SetConfig+0xf4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d111      	bne.n	8007e0a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	621a      	str	r2, [r3, #32]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400

08007e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f023 0210 	bic.w	r2, r3, #16
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f023 0320 	bic.w	r3, r3, #32
 8007e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <TIM_OC2_SetConfig+0xe8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10d      	bne.n	8007ebc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <TIM_OC2_SetConfig+0xe8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <TIM_OC2_SetConfig+0x98>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <TIM_OC2_SetConfig+0xec>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_OC2_SetConfig+0x98>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <TIM_OC2_SetConfig+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d113      	bne.n	8007efc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400

08007f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a21      	ldr	r2, [pc, #132]	; (8008014 <TIM_OC3_SetConfig+0xe4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10d      	bne.n	8007fae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a18      	ldr	r2, [pc, #96]	; (8008014 <TIM_OC3_SetConfig+0xe4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_OC3_SetConfig+0x96>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <TIM_OC3_SetConfig+0xe8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC3_SetConfig+0x96>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	; (800801c <TIM_OC3_SetConfig+0xec>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d113      	bne.n	8007fee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400

08008020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800805a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800806e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	031b      	lsls	r3, r3, #12
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <TIM_OC4_SetConfig+0xb0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d007      	beq.n	8008094 <TIM_OC4_SetConfig+0x74>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <TIM_OC4_SetConfig+0xb4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_OC4_SetConfig+0x74>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <TIM_OC4_SetConfig+0xb8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d109      	bne.n	80080a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800809a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	019b      	lsls	r3, r3, #6
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40012c00 	.word	0x40012c00
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40014400 	.word	0x40014400

080080dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a13      	ldr	r2, [pc, #76]	; (8008180 <TIM_OC5_SetConfig+0xa4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_OC5_SetConfig+0x6a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a12      	ldr	r2, [pc, #72]	; (8008184 <TIM_OC5_SetConfig+0xa8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_OC5_SetConfig+0x6a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a11      	ldr	r2, [pc, #68]	; (8008188 <TIM_OC5_SetConfig+0xac>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d109      	bne.n	800815a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800814c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	621a      	str	r2, [r3, #32]
}
 8008174:	bf00      	nop
 8008176:	371c      	adds	r7, #28
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40014000 	.word	0x40014000
 8008188:	40014400 	.word	0x40014400

0800818c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	051b      	lsls	r3, r3, #20
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a14      	ldr	r2, [pc, #80]	; (8008234 <TIM_OC6_SetConfig+0xa8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d007      	beq.n	80081f8 <TIM_OC6_SetConfig+0x6c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a13      	ldr	r2, [pc, #76]	; (8008238 <TIM_OC6_SetConfig+0xac>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC6_SetConfig+0x6c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a12      	ldr	r2, [pc, #72]	; (800823c <TIM_OC6_SetConfig+0xb0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d109      	bne.n	800820c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	029b      	lsls	r3, r3, #10
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400

08008240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f023 0201 	bic.w	r2, r3, #1
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800826a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4313      	orrs	r3, r2
 8008274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f023 030a 	bic.w	r3, r3, #10
 800827c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800829e:	b480      	push	{r7}
 80082a0:	b087      	sub	sp, #28
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f023 0210 	bic.w	r2, r3, #16
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	031b      	lsls	r3, r3, #12
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	621a      	str	r2, [r3, #32]
}
 80082f2:	bf00      	nop
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	f043 0307 	orr.w	r3, r3, #7
 8008320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	609a      	str	r2, [r3, #8]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800834e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	021a      	lsls	r2, r3, #8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4313      	orrs	r3, r2
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	609a      	str	r2, [r3, #8]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008388:	2302      	movs	r3, #2
 800838a:	e04f      	b.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d108      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a14      	ldr	r2, [pc, #80]	; (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d009      	beq.n	8008400 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f4:	d004      	beq.n	8008400 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10c      	bne.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	4313      	orrs	r3, r2
 8008410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40014000 	.word	0x40014000

08008440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	; 0x28
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	4613      	mov	r3, r2
 800848a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008490:	2b20      	cmp	r3, #32
 8008492:	d178      	bne.n	8008586 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_UART_Transmit+0x24>
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e071      	b.n	8008588 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2221      	movs	r2, #33	; 0x21
 80084b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084b2:	f7fc f8d5 	bl	8004660 <HAL_GetTick>
 80084b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	88fa      	ldrh	r2, [r7, #6]
 80084bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d0:	d108      	bne.n	80084e4 <HAL_UART_Transmit+0x68>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d104      	bne.n	80084e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	e003      	b.n	80084ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084ec:	e030      	b.n	8008550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	2180      	movs	r1, #128	; 0x80
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fec9 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e03c      	b.n	8008588 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10b      	bne.n	800852c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008520:	b292      	uxth	r2, r2
 8008522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	3302      	adds	r3, #2
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	e008      	b.n	800853e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	781a      	ldrb	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	b292      	uxth	r2, r2
 8008536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3301      	adds	r3, #1
 800853c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008544:	b29b      	uxth	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008556:	b29b      	uxth	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1c8      	bne.n	80084ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2200      	movs	r2, #0
 8008564:	2140      	movs	r1, #64	; 0x40
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fe92 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2220      	movs	r2, #32
 8008576:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e005      	b.n	8008588 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	e000      	b.n	8008588 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008586:	2302      	movs	r3, #2
  }
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b0ba      	sub	sp, #232	; 0xe8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80085be:	4013      	ands	r3, r2
 80085c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d115      	bne.n	80085f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00f      	beq.n	80085f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 82ae 	beq.w	8008b4a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
      }
      return;
 80085f6:	e2a8      	b.n	8008b4a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80085f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8117 	beq.w	8008830 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800860e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008612:	4b85      	ldr	r3, [pc, #532]	; (8008828 <HAL_UART_IRQHandler+0x298>)
 8008614:	4013      	ands	r3, r2
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 810a 	beq.w	8008830 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d011      	beq.n	800864c <HAL_UART_IRQHandler+0xbc>
 8008628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2201      	movs	r2, #1
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008642:	f043 0201 	orr.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d011      	beq.n	800867c <HAL_UART_IRQHandler+0xec>
 8008658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2202      	movs	r2, #2
 800866a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008672:	f043 0204 	orr.w	r2, r3, #4
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800867c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d011      	beq.n	80086ac <HAL_UART_IRQHandler+0x11c>
 8008688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2204      	movs	r2, #4
 800869a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a2:	f043 0202 	orr.w	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d017      	beq.n	80086e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086bc:	f003 0320 	and.w	r3, r3, #32
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2208      	movs	r2, #8
 80086d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086de:	f043 0208 	orr.w	r2, r3, #8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d012      	beq.n	800871a <HAL_UART_IRQHandler+0x18a>
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00c      	beq.n	800871a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008710:	f043 0220 	orr.w	r2, r3, #32
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8214 	beq.w	8008b4e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d005      	beq.n	8008772 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800876a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800876e:	2b00      	cmp	r3, #0
 8008770:	d04f      	beq.n	8008812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fdf3 	bl	800935e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b40      	cmp	r3, #64	; 0x40
 8008784:	d141      	bne.n	800880a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800879c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1d9      	bne.n	8008786 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d013      	beq.n	8008802 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087de:	4a13      	ldr	r2, [pc, #76]	; (800882c <HAL_UART_IRQHandler+0x29c>)
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd fa9b 	bl	8005d22 <HAL_DMA_Abort_IT>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d017      	beq.n	8008822 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087fc:	4610      	mov	r0, r2
 80087fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	e00f      	b.n	8008822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f9b8 	bl	8008b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	e00b      	b.n	8008822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f9b4 	bl	8008b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008810:	e007      	b.n	8008822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9b0 	bl	8008b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008820:	e195      	b.n	8008b4e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008822:	bf00      	nop
    return;
 8008824:	e193      	b.n	8008b4e <HAL_UART_IRQHandler+0x5be>
 8008826:	bf00      	nop
 8008828:	04000120 	.word	0x04000120
 800882c:	08009427 	.word	0x08009427

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008834:	2b01      	cmp	r3, #1
 8008836:	f040 814e 	bne.w	8008ad6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 8147 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8140 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2210      	movs	r2, #16
 800885c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	f040 80b8 	bne.w	80089de <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800887a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8167 	beq.w	8008b52 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800888a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800888e:	429a      	cmp	r2, r3
 8008890:	f080 815f 	bcs.w	8008b52 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800889a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 8086 	bne.w	80089bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1da      	bne.n	80088b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800890a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800891e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e1      	bne.n	80088fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800894c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800895a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800895c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e3      	bne.n	8008936 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800898a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898c:	f023 0310 	bic.w	r3, r3, #16
 8008990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800899e:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e4      	bne.n	800897c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fd f975 	bl	8005ca6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8d8 	bl	8008b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089dc:	e0b9      	b.n	8008b52 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80ab 	beq.w	8008b56 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80a6 	beq.w	8008b56 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e4      	bne.n	8008a0a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a64:	633a      	str	r2, [r7, #48]	; 0x30
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e3      	bne.n	8008a40 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f023 0310 	bic.w	r3, r3, #16
 8008aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	69b9      	ldr	r1, [r7, #24]
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	617b      	str	r3, [r7, #20]
   return(result);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e4      	bne.n	8008a8c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f85c 	bl	8008b8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ad4:	e03f      	b.n	8008b56 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <HAL_UART_IRQHandler+0x570>
 8008ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d008      	beq.n	8008b00 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008af6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fd3b 	bl	8009574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008afe:	e02d      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00e      	beq.n	8008b2a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01c      	beq.n	8008b5a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	4798      	blx	r3
    }
    return;
 8008b28:	e017      	b.n	8008b5a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d012      	beq.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
 8008b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00c      	beq.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fc85 	bl	8009452 <UART_EndTransmit_IT>
    return;
 8008b48:	e008      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008b4a:	bf00      	nop
 8008b4c:	e006      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
    return;
 8008b4e:	bf00      	nop
 8008b50:	e004      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008b52:	bf00      	nop
 8008b54:	e002      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008b56:	bf00      	nop
 8008b58:	e000      	b.n	8008b5c <HAL_UART_IRQHandler+0x5cc>
    return;
 8008b5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b5c:	37e8      	adds	r7, #232	; 0xe8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop

08008b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba8:	b08a      	sub	sp, #40	; 0x28
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4bb4      	ldr	r3, [pc, #720]	; (8008ea4 <UART_SetConfig+0x300>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4aa9      	ldr	r2, [pc, #676]	; (8008ea8 <UART_SetConfig+0x304>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d004      	beq.n	8008c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4aa0      	ldr	r2, [pc, #640]	; (8008eac <UART_SetConfig+0x308>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d126      	bne.n	8008c7c <UART_SetConfig+0xd8>
 8008c2e:	4ba0      	ldr	r3, [pc, #640]	; (8008eb0 <UART_SetConfig+0x30c>)
 8008c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d81b      	bhi.n	8008c74 <UART_SetConfig+0xd0>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0xa0>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c65 	.word	0x08008c65
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c6d 	.word	0x08008c6d
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5a:	e080      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c62:	e07c      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008c64:	2304      	movs	r3, #4
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6a:	e078      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008c6c:	2308      	movs	r3, #8
 8008c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c72:	e074      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008c74:	2310      	movs	r3, #16
 8008c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c7a:	e070      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a8c      	ldr	r2, [pc, #560]	; (8008eb4 <UART_SetConfig+0x310>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d138      	bne.n	8008cf8 <UART_SetConfig+0x154>
 8008c86:	4b8a      	ldr	r3, [pc, #552]	; (8008eb0 <UART_SetConfig+0x30c>)
 8008c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b0c      	cmp	r3, #12
 8008c92:	d82d      	bhi.n	8008cf0 <UART_SetConfig+0x14c>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <UART_SetConfig+0xf8>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008cd1 	.word	0x08008cd1
 8008ca0:	08008cf1 	.word	0x08008cf1
 8008ca4:	08008cf1 	.word	0x08008cf1
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008ce1 	.word	0x08008ce1
 8008cb0:	08008cf1 	.word	0x08008cf1
 8008cb4:	08008cf1 	.word	0x08008cf1
 8008cb8:	08008cf1 	.word	0x08008cf1
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	08008cf1 	.word	0x08008cf1
 8008cc4:	08008cf1 	.word	0x08008cf1
 8008cc8:	08008cf1 	.word	0x08008cf1
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cd6:	e042      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cde:	e03e      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ce6:	e03a      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008ce8:	2308      	movs	r3, #8
 8008cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cee:	e036      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cf6:	e032      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a6a      	ldr	r2, [pc, #424]	; (8008ea8 <UART_SetConfig+0x304>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d12a      	bne.n	8008d58 <UART_SetConfig+0x1b4>
 8008d02:	4b6b      	ldr	r3, [pc, #428]	; (8008eb0 <UART_SetConfig+0x30c>)
 8008d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d10:	d01a      	beq.n	8008d48 <UART_SetConfig+0x1a4>
 8008d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d16:	d81b      	bhi.n	8008d50 <UART_SetConfig+0x1ac>
 8008d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d1c:	d00c      	beq.n	8008d38 <UART_SetConfig+0x194>
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d22:	d815      	bhi.n	8008d50 <UART_SetConfig+0x1ac>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <UART_SetConfig+0x18c>
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2c:	d008      	beq.n	8008d40 <UART_SetConfig+0x19c>
 8008d2e:	e00f      	b.n	8008d50 <UART_SetConfig+0x1ac>
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d36:	e012      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d3e:	e00e      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d40:	2304      	movs	r3, #4
 8008d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d46:	e00a      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d48:	2308      	movs	r3, #8
 8008d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d4e:	e006      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d50:	2310      	movs	r3, #16
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d56:	e002      	b.n	8008d5e <UART_SetConfig+0x1ba>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a51      	ldr	r2, [pc, #324]	; (8008ea8 <UART_SetConfig+0x304>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d17a      	bne.n	8008e5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d824      	bhi.n	8008dba <UART_SetConfig+0x216>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <UART_SetConfig+0x1d4>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d9d 	.word	0x08008d9d
 8008d7c:	08008dbb 	.word	0x08008dbb
 8008d80:	08008da5 	.word	0x08008da5
 8008d84:	08008dbb 	.word	0x08008dbb
 8008d88:	08008dab 	.word	0x08008dab
 8008d8c:	08008dbb 	.word	0x08008dbb
 8008d90:	08008dbb 	.word	0x08008dbb
 8008d94:	08008dbb 	.word	0x08008dbb
 8008d98:	08008db3 	.word	0x08008db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d9c:	f7fd ffd4 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 8008da0:	61f8      	str	r0, [r7, #28]
        break;
 8008da2:	e010      	b.n	8008dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008da4:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <UART_SetConfig+0x314>)
 8008da6:	61fb      	str	r3, [r7, #28]
        break;
 8008da8:	e00d      	b.n	8008dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008daa:	f7fd ff35 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008dae:	61f8      	str	r0, [r7, #28]
        break;
 8008db0:	e009      	b.n	8008dc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db6:	61fb      	str	r3, [r7, #28]
        break;
 8008db8:	e005      	b.n	8008dc6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8107 	beq.w	8008fdc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d305      	bcc.n	8008dea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d903      	bls.n	8008df2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008df0:	e0f4      	b.n	8008fdc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2200      	movs	r2, #0
 8008df6:	461c      	mov	r4, r3
 8008df8:	4615      	mov	r5, r2
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	f04f 0300 	mov.w	r3, #0
 8008e02:	022b      	lsls	r3, r5, #8
 8008e04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e08:	0222      	lsls	r2, r4, #8
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6849      	ldr	r1, [r1, #4]
 8008e0e:	0849      	lsrs	r1, r1, #1
 8008e10:	2000      	movs	r0, #0
 8008e12:	4688      	mov	r8, r1
 8008e14:	4681      	mov	r9, r0
 8008e16:	eb12 0a08 	adds.w	sl, r2, r8
 8008e1a:	eb43 0b09 	adc.w	fp, r3, r9
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	603b      	str	r3, [r7, #0]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	4659      	mov	r1, fp
 8008e30:	f7f7 fe4c 	bl	8000acc <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e42:	d308      	bcc.n	8008e56 <UART_SetConfig+0x2b2>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4a:	d204      	bcs.n	8008e56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	60da      	str	r2, [r3, #12]
 8008e54:	e0c2      	b.n	8008fdc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e5c:	e0be      	b.n	8008fdc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e66:	d16a      	bne.n	8008f3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d834      	bhi.n	8008eda <UART_SetConfig+0x336>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <UART_SetConfig+0x2d4>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008ebd 	.word	0x08008ebd
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008edb 	.word	0x08008edb
 8008e88:	08008ecb 	.word	0x08008ecb
 8008e8c:	08008edb 	.word	0x08008edb
 8008e90:	08008edb 	.word	0x08008edb
 8008e94:	08008edb 	.word	0x08008edb
 8008e98:	08008ed3 	.word	0x08008ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e9c:	f7fd ff54 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 8008ea0:	61f8      	str	r0, [r7, #28]
        break;
 8008ea2:	e020      	b.n	8008ee6 <UART_SetConfig+0x342>
 8008ea4:	efff69f3 	.word	0xefff69f3
 8008ea8:	40008000 	.word	0x40008000
 8008eac:	40013800 	.word	0x40013800
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	40004400 	.word	0x40004400
 8008eb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ebc:	f7fd ff5a 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8008ec0:	61f8      	str	r0, [r7, #28]
        break;
 8008ec2:	e010      	b.n	8008ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec4:	4b4c      	ldr	r3, [pc, #304]	; (8008ff8 <UART_SetConfig+0x454>)
 8008ec6:	61fb      	str	r3, [r7, #28]
        break;
 8008ec8:	e00d      	b.n	8008ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eca:	f7fd fea5 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008ece:	61f8      	str	r0, [r7, #28]
        break;
 8008ed0:	e009      	b.n	8008ee6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed6:	61fb      	str	r3, [r7, #28]
        break;
 8008ed8:	e005      	b.n	8008ee6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d077      	beq.n	8008fdc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	005a      	lsls	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	085b      	lsrs	r3, r3, #1
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b0f      	cmp	r3, #15
 8008f06:	d916      	bls.n	8008f36 <UART_SetConfig+0x392>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0e:	d212      	bcs.n	8008f36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f023 030f 	bic.w	r3, r3, #15
 8008f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f003 0307 	and.w	r3, r3, #7
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	8afb      	ldrh	r3, [r7, #22]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	8afa      	ldrh	r2, [r7, #22]
 8008f32:	60da      	str	r2, [r3, #12]
 8008f34:	e052      	b.n	8008fdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f3c:	e04e      	b.n	8008fdc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f42:	2b08      	cmp	r3, #8
 8008f44:	d827      	bhi.n	8008f96 <UART_SetConfig+0x3f2>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <UART_SetConfig+0x3a8>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f71 	.word	0x08008f71
 8008f50:	08008f79 	.word	0x08008f79
 8008f54:	08008f81 	.word	0x08008f81
 8008f58:	08008f97 	.word	0x08008f97
 8008f5c:	08008f87 	.word	0x08008f87
 8008f60:	08008f97 	.word	0x08008f97
 8008f64:	08008f97 	.word	0x08008f97
 8008f68:	08008f97 	.word	0x08008f97
 8008f6c:	08008f8f 	.word	0x08008f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fd feea 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 8008f74:	61f8      	str	r0, [r7, #28]
        break;
 8008f76:	e014      	b.n	8008fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f78:	f7fd fefc 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8008f7c:	61f8      	str	r0, [r7, #28]
        break;
 8008f7e:	e010      	b.n	8008fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f80:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <UART_SetConfig+0x454>)
 8008f82:	61fb      	str	r3, [r7, #28]
        break;
 8008f84:	e00d      	b.n	8008fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f86:	f7fd fe47 	bl	8006c18 <HAL_RCC_GetSysClockFreq>
 8008f8a:	61f8      	str	r0, [r7, #28]
        break;
 8008f8c:	e009      	b.n	8008fa2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f92:	61fb      	str	r3, [r7, #28]
        break;
 8008f94:	e005      	b.n	8008fa2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d019      	beq.n	8008fdc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	085a      	lsrs	r2, r3, #1
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	441a      	add	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b0f      	cmp	r3, #15
 8008fc0:	d909      	bls.n	8008fd6 <UART_SetConfig+0x432>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc8:	d205      	bcs.n	8008fd6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60da      	str	r2, [r3, #12]
 8008fd4:	e002      	b.n	8008fdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3728      	adds	r7, #40	; 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ff6:	bf00      	nop
 8008ff8:	00f42400 	.word	0x00f42400

08008ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00a      	beq.n	8009026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00a      	beq.n	800906a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	f003 0310 	and.w	r3, r3, #16
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00a      	beq.n	80090ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	430a      	orrs	r2, r1
 80090ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01a      	beq.n	8009112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090fa:	d10a      	bne.n	8009112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	605a      	str	r2, [r3, #4]
  }
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b098      	sub	sp, #96	; 0x60
 8009144:	af02      	add	r7, sp, #8
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009150:	f7fb fa86 	bl	8004660 <HAL_GetTick>
 8009154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b08      	cmp	r3, #8
 8009162:	d12e      	bne.n	80091c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916c:	2200      	movs	r2, #0
 800916e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f88c 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d021      	beq.n	80091c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009192:	653b      	str	r3, [r7, #80]	; 0x50
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919c:	647b      	str	r3, [r7, #68]	; 0x44
 800919e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e062      	b.n	8009288 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d149      	bne.n	8009264 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d8:	2200      	movs	r2, #0
 80091da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f856 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d03c      	beq.n	8009264 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	623b      	str	r3, [r7, #32]
   return(result);
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009208:	633b      	str	r3, [r7, #48]	; 0x30
 800920a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800920e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e6      	bne.n	80091ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3308      	adds	r3, #8
 8009222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	60fb      	str	r3, [r7, #12]
   return(result);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	64bb      	str	r3, [r7, #72]	; 0x48
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800923c:	61fa      	str	r2, [r7, #28]
 800923e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	69b9      	ldr	r1, [r7, #24]
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	617b      	str	r3, [r7, #20]
   return(result);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e5      	bne.n	800921c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2220      	movs	r2, #32
 8009254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e011      	b.n	8009288 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3758      	adds	r7, #88	; 0x58
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a0:	e049      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d045      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092aa:	f7fb f9d9 	bl	8004660 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d302      	bcc.n	80092c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e048      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0304 	and.w	r3, r3, #4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d031      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	f003 0308 	and.w	r3, r3, #8
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d110      	bne.n	8009302 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2208      	movs	r2, #8
 80092e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f838 	bl	800935e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2208      	movs	r2, #8
 80092f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e029      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800930c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009310:	d111      	bne.n	8009336 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800931a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f81e 	bl	800935e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e00f      	b.n	8009356 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69da      	ldr	r2, [r3, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4013      	ands	r3, r2
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	bf0c      	ite	eq
 8009346:	2301      	moveq	r3, #1
 8009348:	2300      	movne	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	461a      	mov	r2, r3
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	429a      	cmp	r2, r3
 8009352:	d0a6      	beq.n	80092a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800935e:	b480      	push	{r7}
 8009360:	b095      	sub	sp, #84	; 0x54
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800937a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009384:	643b      	str	r3, [r7, #64]	; 0x40
 8009386:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800938a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e6      	bne.n	8009366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	f023 0301 	bic.w	r3, r3, #1
 80093ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d118      	bne.n	8009406 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f023 0310 	bic.w	r3, r3, #16
 80093e8:	647b      	str	r3, [r7, #68]	; 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f2:	61bb      	str	r3, [r7, #24]
 80093f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6979      	ldr	r1, [r7, #20]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	669a      	str	r2, [r3, #104]	; 0x68
}
 800941a:	bf00      	nop
 800941c:	3754      	adds	r7, #84	; 0x54
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff fb97 	bl	8008b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b088      	sub	sp, #32
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	60bb      	str	r3, [r7, #8]
   return(result);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	613b      	str	r3, [r7, #16]
   return(result);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff fb63 	bl	8008b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800949e:	bf00      	nop
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b086      	sub	sp, #24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e056      	b.n	800956c <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7fa ff72 	bl	80043b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2224      	movs	r2, #36	; 0x24
 80094d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff fd82 	bl	8008ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fb53 	bl	8008ba4 <UART_SetConfig>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e031      	b.n	800956c <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009516:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	430a      	orrs	r2, r1
 800952a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	055b      	lsls	r3, r3, #21
 8009530:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8009546:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	6812      	ldr	r2, [r2, #0]
 800954e:	6979      	ldr	r1, [r7, #20]
 8009550:	430b      	orrs	r3, r1
 8009552:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fdeb 	bl	8009140 <UART_CheckIdleState>
 800956a:	4603      	mov	r3, r0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8009590:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <DWT_Delay_ms+0x44>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8009596:	f7fd fbcb 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 800959a:	4603      	mov	r3, r0
 800959c:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <DWT_Delay_ms+0x48>)
 800959e:	fba2 2303 	umull	r2, r3, r2, r3
 80095a2:	099b      	lsrs	r3, r3, #6
 80095a4:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	fb02 f303 	mul.w	r3, r2, r3
 80095ae:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 80095b0:	bf00      	nop
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <DWT_Delay_ms+0x44>)
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad2      	subs	r2, r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d3f8      	bcc.n	80095b2 <DWT_Delay_ms+0x2a>
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	e0001000 	.word	0xe0001000
 80095d0:	10624dd3 	.word	0x10624dd3

080095d4 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095da:	f107 0310 	add.w	r3, r7, #16
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	609a      	str	r2, [r3, #8]
 80095e6:	60da      	str	r2, [r3, #12]
 80095e8:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095f0:	2300      	movs	r3, #0
 80095f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 80095f6:	f000 fcf7 	bl	8009fe8 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009600:	e102      	b.n	8009808 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8009602:	2300      	movs	r3, #0
 8009604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009608:	e079      	b.n	80096fe <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 800960a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800960e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009612:	4889      	ldr	r0, [pc, #548]	; (8009838 <STEPPERS_Init+0x264>)
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	440b      	add	r3, r1
 800961c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009620:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009624:	d10c      	bne.n	8009640 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009626:	4b85      	ldr	r3, [pc, #532]	; (800983c <STEPPERS_Init+0x268>)
 8009628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962a:	4a84      	ldr	r2, [pc, #528]	; (800983c <STEPPERS_Init+0x268>)
 800962c:	f043 0301 	orr.w	r3, r3, #1
 8009630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009632:	4b82      	ldr	r3, [pc, #520]	; (800983c <STEPPERS_Init+0x268>)
 8009634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	e034      	b.n	80096aa <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8009640:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009644:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009648:	487b      	ldr	r0, [pc, #492]	; (8009838 <STEPPERS_Init+0x264>)
 800964a:	4613      	mov	r3, r2
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	1a9b      	subs	r3, r3, r2
 8009650:	440b      	add	r3, r1
 8009652:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009656:	4a7a      	ldr	r2, [pc, #488]	; (8009840 <STEPPERS_Init+0x26c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d10c      	bne.n	8009676 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 800965c:	4b77      	ldr	r3, [pc, #476]	; (800983c <STEPPERS_Init+0x268>)
 800965e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009660:	4a76      	ldr	r2, [pc, #472]	; (800983c <STEPPERS_Init+0x268>)
 8009662:	f043 0302 	orr.w	r3, r3, #2
 8009666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009668:	4b74      	ldr	r3, [pc, #464]	; (800983c <STEPPERS_Init+0x268>)
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	e019      	b.n	80096aa <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8009676:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800967a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800967e:	486e      	ldr	r0, [pc, #440]	; (8009838 <STEPPERS_Init+0x264>)
 8009680:	4613      	mov	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	440b      	add	r3, r1
 8009688:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800968c:	4a6d      	ldr	r2, [pc, #436]	; (8009844 <STEPPERS_Init+0x270>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10b      	bne.n	80096aa <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009692:	4b6a      	ldr	r3, [pc, #424]	; (800983c <STEPPERS_Init+0x268>)
 8009694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009696:	4a69      	ldr	r2, [pc, #420]	; (800983c <STEPPERS_Init+0x268>)
 8009698:	f043 0304 	orr.w	r3, r3, #4
 800969c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800969e:	4b67      	ldr	r3, [pc, #412]	; (800983c <STEPPERS_Init+0x268>)
 80096a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 80096aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80096ae:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80096b2:	4861      	ldr	r0, [pc, #388]	; (8009838 <STEPPERS_Init+0x264>)
 80096b4:	4613      	mov	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	440b      	add	r3, r1
 80096be:	3308      	adds	r3, #8
 80096c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80096c4:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096c6:	2301      	movs	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ce:	2300      	movs	r3, #0
 80096d0:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 80096d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80096d6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80096da:	4857      	ldr	r0, [pc, #348]	; (8009838 <STEPPERS_Init+0x264>)
 80096dc:	4613      	mov	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	1a9b      	subs	r3, r3, r2
 80096e2:	440b      	add	r3, r1
 80096e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80096e8:	f107 0210 	add.w	r2, r7, #16
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fc fb88 	bl	8005e04 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 80096f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096f8:	3301      	adds	r3, #1
 80096fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009702:	2b03      	cmp	r3, #3
 8009704:	d981      	bls.n	800960a <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8009706:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800970a:	494f      	ldr	r1, [pc, #316]	; (8009848 <STEPPERS_Init+0x274>)
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	3311      	adds	r3, #17
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800971c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009720:	4949      	ldr	r1, [pc, #292]	; (8009848 <STEPPERS_Init+0x274>)
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	440b      	add	r3, r1
 800972c:	330f      	adds	r3, #15
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8009732:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009736:	4944      	ldr	r1, [pc, #272]	; (8009848 <STEPPERS_Init+0x274>)
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8009746:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800974a:	493f      	ldr	r1, [pc, #252]	; (8009848 <STEPPERS_Init+0x274>)
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	3304      	adds	r3, #4
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 800975c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009760:	4939      	ldr	r1, [pc, #228]	; (8009848 <STEPPERS_Init+0x274>)
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	440b      	add	r3, r1
 800976c:	3308      	adds	r3, #8
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8009772:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009776:	4934      	ldr	r1, [pc, #208]	; (8009848 <STEPPERS_Init+0x274>)
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	330e      	adds	r3, #14
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8009788:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800978c:	492a      	ldr	r1, [pc, #168]	; (8009838 <STEPPERS_Init+0x264>)
 800978e:	4613      	mov	r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	331b      	adds	r3, #27
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d00b      	beq.n	80097b8 <STEPPERS_Init+0x1e4>
 80097a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097a4:	4924      	ldr	r1, [pc, #144]	; (8009838 <STEPPERS_Init+0x264>)
 80097a6:	4613      	mov	r3, r2
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	440b      	add	r3, r1
 80097b0:	331b      	adds	r3, #27
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10b      	bne.n	80097d0 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 80097b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097bc:	4922      	ldr	r1, [pc, #136]	; (8009848 <STEPPERS_Init+0x274>)
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	3310      	adds	r3, #16
 80097ca:	2204      	movs	r2, #4
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	e016      	b.n	80097fe <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80097d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097d4:	4918      	ldr	r1, [pc, #96]	; (8009838 <STEPPERS_Init+0x264>)
 80097d6:	4613      	mov	r3, r2
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	1a9b      	subs	r3, r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	440b      	add	r3, r1
 80097e0:	331b      	adds	r3, #27
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d10a      	bne.n	80097fe <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 80097e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097ec:	4916      	ldr	r1, [pc, #88]	; (8009848 <STEPPERS_Init+0x274>)
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	3310      	adds	r3, #16
 80097fa:	2208      	movs	r2, #8
 80097fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 80097fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009802:	3301      	adds	r3, #1
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800980c:	2b00      	cmp	r3, #0
 800980e:	f43f aef8 	beq.w	8009602 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009812:	2301      	movs	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009816:	2301      	movs	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981e:	2300      	movs	r3, #0
 8009820:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009822:	f107 0310 	add.w	r3, r7, #16
 8009826:	4619      	mov	r1, r3
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <STEPPERS_Init+0x26c>)
 800982a:	f7fc faeb 	bl	8005e04 <HAL_GPIO_Init>
}
 800982e:	bf00      	nop
 8009830:	3728      	adds	r7, #40	; 0x28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	0801d6fc 	.word	0x0801d6fc
 800983c:	40021000 	.word	0x40021000
 8009840:	48000400 	.word	0x48000400
 8009844:	48000800 	.word	0x48000800
 8009848:	2000a4f0 	.word	0x2000a4f0

0800984c <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	609a      	str	r2, [r3, #8]
 8009860:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	605a      	str	r2, [r3, #4]
 800986c:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8009872:	f7ff feaf 	bl	80095d4 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8009876:	f44f 7348 	mov.w	r3, #800	; 0x320
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a17      	ldr	r2, [pc, #92]	; (80098dc <STEPPERS_Init_TMR+0x90>)
 8009880:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2263      	movs	r2, #99	; 0x63
 8009886:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2280      	movs	r2, #128	; 0x80
 80098a0:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fd fdd4 	bl	8007450 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ac:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80098ae:	f107 0314 	add.w	r3, r7, #20
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7fe f8ef 	bl	8007a98 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098be:	2300      	movs	r3, #0
 80098c0:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe fd53 	bl	8008374 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fd fe16 	bl	8007500 <HAL_TIM_Base_Start_IT>
    }
}
 80098d4:	bf00      	nop
 80098d6:	3728      	adds	r7, #40	; 0x28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40014000 	.word	0x40014000

080098e0 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	460a      	mov	r2, r1
 80098ea:	71fb      	strb	r3, [r7, #7]
 80098ec:	4613      	mov	r3, r2
 80098ee:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 80098f4:	79fa      	ldrb	r2, [r7, #7]
 80098f6:	4928      	ldr	r1, [pc, #160]	; (8009998 <STEPPER_SetSpeed+0xb8>)
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	330c      	adds	r3, #12
 8009904:	88ba      	ldrh	r2, [r7, #4]
 8009906:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8009908:	79fa      	ldrb	r2, [r7, #7]
 800990a:	4924      	ldr	r1, [pc, #144]	; (800999c <STEPPER_SetSpeed+0xbc>)
 800990c:	4613      	mov	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	331b      	adds	r3, #27
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d10b      	bne.n	8009936 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 800991e:	79fa      	ldrb	r2, [r7, #7]
 8009920:	491e      	ldr	r1, [pc, #120]	; (800999c <STEPPER_SetSpeed+0xbc>)
 8009922:	4613      	mov	r3, r2
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	1a9b      	subs	r3, r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	440b      	add	r3, r1
 800992c:	3318      	adds	r3, #24
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e009      	b.n	800994a <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8009936:	79fa      	ldrb	r2, [r7, #7]
 8009938:	4918      	ldr	r1, [pc, #96]	; (800999c <STEPPER_SetSpeed+0xbc>)
 800993a:	4613      	mov	r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	1a9b      	subs	r3, r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	3318      	adds	r3, #24
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 800994a:	88bb      	ldrh	r3, [r7, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	fb02 f303 	mul.w	r3, r2, r3
 8009952:	4618      	mov	r0, r3
 8009954:	f7f6 fd86 	bl	8000464 <__aeabi_ui2d>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	a10c      	add	r1, pc, #48	; (adr r1, 8009990 <STEPPER_SetSpeed+0xb0>)
 800995e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009962:	f7f6 ff23 	bl	80007ac <__aeabi_ddiv>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	79fc      	ldrb	r4, [r7, #7]
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	f7f7 f88c 	bl	8000a8c <__aeabi_d2uiz>
 8009974:	4602      	mov	r2, r0
 8009976:	4908      	ldr	r1, [pc, #32]	; (8009998 <STEPPER_SetSpeed+0xb8>)
 8009978:	4623      	mov	r3, r4
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4423      	add	r3, r4
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	3308      	adds	r3, #8
 8009984:	601a      	str	r2, [r3, #0]
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	bd90      	pop	{r4, r7, pc}
 800998e:	bf00      	nop
 8009990:	00000000 	.word	0x00000000
 8009994:	40ed4c00 	.word	0x40ed4c00
 8009998:	2000a4f0 	.word	0x2000a4f0
 800999c:	0801d6fc 	.word	0x0801d6fc

080099a0 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 80099aa:	79fa      	ldrb	r2, [r7, #7]
 80099ac:	4999      	ldr	r1, [pc, #612]	; (8009c14 <STEPPER_One_Step+0x274>)
 80099ae:	4613      	mov	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	331a      	adds	r3, #26
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 81c4 	bne.w	8009d4a <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 80099c2:	79fa      	ldrb	r2, [r7, #7]
 80099c4:	4993      	ldr	r1, [pc, #588]	; (8009c14 <STEPPER_One_Step+0x274>)
 80099c6:	4613      	mov	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	331b      	adds	r3, #27
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f040 8088 	bne.w	8009aea <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	498d      	ldr	r1, [pc, #564]	; (8009c14 <STEPPER_One_Step+0x274>)
 80099de:	4613      	mov	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	79fa      	ldrb	r2, [r7, #7]
 80099ec:	4989      	ldr	r1, [pc, #548]	; (8009c14 <STEPPER_One_Step+0x274>)
 80099ee:	4613      	mov	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	3310      	adds	r3, #16
 80099fa:	8819      	ldrh	r1, [r3, #0]
 80099fc:	79fa      	ldrb	r2, [r7, #7]
 80099fe:	4c86      	ldr	r4, [pc, #536]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4423      	add	r3, r4
 8009a0a:	330f      	adds	r3, #15
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4b82      	ldr	r3, [pc, #520]	; (8009c1c <STEPPER_One_Step+0x27c>)
 8009a12:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7fc fb5e 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	497d      	ldr	r1, [pc, #500]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	79fa      	ldrb	r2, [r7, #7]
 8009a30:	4978      	ldr	r1, [pc, #480]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3312      	adds	r3, #18
 8009a3e:	8819      	ldrh	r1, [r3, #0]
 8009a40:	79fa      	ldrb	r2, [r7, #7]
 8009a42:	4c75      	ldr	r4, [pc, #468]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4423      	add	r3, r4
 8009a4e:	330f      	adds	r3, #15
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	4a72      	ldr	r2, [pc, #456]	; (8009c1c <STEPPER_One_Step+0x27c>)
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f7fc fb3c 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009a60:	79fa      	ldrb	r2, [r7, #7]
 8009a62:	496c      	ldr	r1, [pc, #432]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009a64:	4613      	mov	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3308      	adds	r3, #8
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	79fa      	ldrb	r2, [r7, #7]
 8009a74:	4967      	ldr	r1, [pc, #412]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009a76:	4613      	mov	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	3314      	adds	r3, #20
 8009a82:	8819      	ldrh	r1, [r3, #0]
 8009a84:	79fa      	ldrb	r2, [r7, #7]
 8009a86:	4c64      	ldr	r4, [pc, #400]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4423      	add	r3, r4
 8009a92:	330f      	adds	r3, #15
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	4a61      	ldr	r2, [pc, #388]	; (8009c1c <STEPPER_One_Step+0x27c>)
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	789b      	ldrb	r3, [r3, #2]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7fc fb1a 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009aa4:	79fa      	ldrb	r2, [r7, #7]
 8009aa6:	495b      	ldr	r1, [pc, #364]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	330c      	adds	r3, #12
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	79fa      	ldrb	r2, [r7, #7]
 8009ab8:	4956      	ldr	r1, [pc, #344]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009aba:	4613      	mov	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3316      	adds	r3, #22
 8009ac6:	8819      	ldrh	r1, [r3, #0]
 8009ac8:	79fa      	ldrb	r2, [r7, #7]
 8009aca:	4c53      	ldr	r4, [pc, #332]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4423      	add	r3, r4
 8009ad6:	330f      	adds	r3, #15
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4a50      	ldr	r2, [pc, #320]	; (8009c1c <STEPPER_One_Step+0x27c>)
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	78db      	ldrb	r3, [r3, #3]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7fc faf8 	bl	80060d8 <HAL_GPIO_WritePin>
 8009ae8:	e12f      	b.n	8009d4a <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8009aea:	79fa      	ldrb	r2, [r7, #7]
 8009aec:	4949      	ldr	r1, [pc, #292]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009aee:	4613      	mov	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	331b      	adds	r3, #27
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	f040 8091 	bne.w	8009c24 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8009b02:	79fa      	ldrb	r2, [r7, #7]
 8009b04:	4943      	ldr	r1, [pc, #268]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b06:	4613      	mov	r3, r2
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	79fa      	ldrb	r2, [r7, #7]
 8009b14:	493f      	ldr	r1, [pc, #252]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b16:	4613      	mov	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	440b      	add	r3, r1
 8009b20:	3310      	adds	r3, #16
 8009b22:	8819      	ldrh	r1, [r3, #0]
 8009b24:	79fa      	ldrb	r2, [r7, #7]
 8009b26:	4c3c      	ldr	r4, [pc, #240]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4423      	add	r3, r4
 8009b32:	330f      	adds	r3, #15
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	4b39      	ldr	r3, [pc, #228]	; (8009c20 <STEPPER_One_Step+0x280>)
 8009b3a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7fc faca 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8009b44:	79fa      	ldrb	r2, [r7, #7]
 8009b46:	4933      	ldr	r1, [pc, #204]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b48:	4613      	mov	r3, r2
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	3304      	adds	r3, #4
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	79fa      	ldrb	r2, [r7, #7]
 8009b58:	492e      	ldr	r1, [pc, #184]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	3312      	adds	r3, #18
 8009b66:	8819      	ldrh	r1, [r3, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	4c2b      	ldr	r4, [pc, #172]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4423      	add	r3, r4
 8009b76:	330f      	adds	r3, #15
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	4a29      	ldr	r2, [pc, #164]	; (8009c20 <STEPPER_One_Step+0x280>)
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f7fc faa8 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009b88:	79fa      	ldrb	r2, [r7, #7]
 8009b8a:	4922      	ldr	r1, [pc, #136]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	3308      	adds	r3, #8
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	79fa      	ldrb	r2, [r7, #7]
 8009b9c:	491d      	ldr	r1, [pc, #116]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	1a9b      	subs	r3, r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3314      	adds	r3, #20
 8009baa:	8819      	ldrh	r1, [r3, #0]
 8009bac:	79fa      	ldrb	r2, [r7, #7]
 8009bae:	4c1a      	ldr	r4, [pc, #104]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4423      	add	r3, r4
 8009bba:	330f      	adds	r3, #15
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <STEPPER_One_Step+0x280>)
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	789b      	ldrb	r3, [r3, #2]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f7fc fa86 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009bcc:	79fa      	ldrb	r2, [r7, #7]
 8009bce:	4911      	ldr	r1, [pc, #68]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	330c      	adds	r3, #12
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	79fa      	ldrb	r2, [r7, #7]
 8009be0:	490c      	ldr	r1, [pc, #48]	; (8009c14 <STEPPER_One_Step+0x274>)
 8009be2:	4613      	mov	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	3316      	adds	r3, #22
 8009bee:	8819      	ldrh	r1, [r3, #0]
 8009bf0:	79fa      	ldrb	r2, [r7, #7]
 8009bf2:	4c09      	ldr	r4, [pc, #36]	; (8009c18 <STEPPER_One_Step+0x278>)
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4423      	add	r3, r4
 8009bfe:	330f      	adds	r3, #15
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	4a07      	ldr	r2, [pc, #28]	; (8009c20 <STEPPER_One_Step+0x280>)
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f7fc fa64 	bl	80060d8 <HAL_GPIO_WritePin>
 8009c10:	e09b      	b.n	8009d4a <STEPPER_One_Step+0x3aa>
 8009c12:	bf00      	nop
 8009c14:	0801d6fc 	.word	0x0801d6fc
 8009c18:	2000a4f0 	.word	0x2000a4f0
 8009c1c:	2000000c 	.word	0x2000000c
 8009c20:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8009c24:	79fa      	ldrb	r2, [r7, #7]
 8009c26:	4988      	ldr	r1, [pc, #544]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009c28:	4613      	mov	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	331b      	adds	r3, #27
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	f040 8087 	bne.w	8009d4a <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8009c3c:	79fa      	ldrb	r2, [r7, #7]
 8009c3e:	4982      	ldr	r1, [pc, #520]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	79fa      	ldrb	r2, [r7, #7]
 8009c4e:	497e      	ldr	r1, [pc, #504]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009c50:	4613      	mov	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	1a9b      	subs	r3, r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	3310      	adds	r3, #16
 8009c5c:	8819      	ldrh	r1, [r3, #0]
 8009c5e:	79fa      	ldrb	r2, [r7, #7]
 8009c60:	4c7a      	ldr	r4, [pc, #488]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4423      	add	r3, r4
 8009c6c:	330f      	adds	r3, #15
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	4b77      	ldr	r3, [pc, #476]	; (8009e50 <STEPPER_One_Step+0x4b0>)
 8009c74:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f7fc fa2d 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8009c7e:	79fa      	ldrb	r2, [r7, #7]
 8009c80:	4971      	ldr	r1, [pc, #452]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009c82:	4613      	mov	r3, r2
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	79fa      	ldrb	r2, [r7, #7]
 8009c92:	496d      	ldr	r1, [pc, #436]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009c94:	4613      	mov	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3312      	adds	r3, #18
 8009ca0:	8819      	ldrh	r1, [r3, #0]
 8009ca2:	79fa      	ldrb	r2, [r7, #7]
 8009ca4:	4c69      	ldr	r4, [pc, #420]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4423      	add	r3, r4
 8009cb0:	330f      	adds	r3, #15
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4a66      	ldr	r2, [pc, #408]	; (8009e50 <STEPPER_One_Step+0x4b0>)
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	f7fc fa0b 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009cc2:	79fa      	ldrb	r2, [r7, #7]
 8009cc4:	4960      	ldr	r1, [pc, #384]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	00db      	lsls	r3, r3, #3
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	79fa      	ldrb	r2, [r7, #7]
 8009cd6:	495c      	ldr	r1, [pc, #368]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009cd8:	4613      	mov	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	3314      	adds	r3, #20
 8009ce4:	8819      	ldrh	r1, [r3, #0]
 8009ce6:	79fa      	ldrb	r2, [r7, #7]
 8009ce8:	4c58      	ldr	r4, [pc, #352]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4423      	add	r3, r4
 8009cf4:	330f      	adds	r3, #15
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	4a55      	ldr	r2, [pc, #340]	; (8009e50 <STEPPER_One_Step+0x4b0>)
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	789b      	ldrb	r3, [r3, #2]
 8009d00:	461a      	mov	r2, r3
 8009d02:	f7fc f9e9 	bl	80060d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009d06:	79fa      	ldrb	r2, [r7, #7]
 8009d08:	494f      	ldr	r1, [pc, #316]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	330c      	adds	r3, #12
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	79fa      	ldrb	r2, [r7, #7]
 8009d1a:	494b      	ldr	r1, [pc, #300]	; (8009e48 <STEPPER_One_Step+0x4a8>)
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	3316      	adds	r3, #22
 8009d28:	8819      	ldrh	r1, [r3, #0]
 8009d2a:	79fa      	ldrb	r2, [r7, #7]
 8009d2c:	4c47      	ldr	r4, [pc, #284]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4423      	add	r3, r4
 8009d38:	330f      	adds	r3, #15
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4a44      	ldr	r2, [pc, #272]	; (8009e50 <STEPPER_One_Step+0x4b0>)
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	78db      	ldrb	r3, [r3, #3]
 8009d44:	461a      	mov	r2, r3
 8009d46:	f7fc f9c7 	bl	80060d8 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8009d4a:	79fa      	ldrb	r2, [r7, #7]
 8009d4c:	493f      	ldr	r1, [pc, #252]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	440b      	add	r3, r1
 8009d58:	3311      	adds	r3, #17
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d132      	bne.n	8009dc6 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8009d60:	79fa      	ldrb	r2, [r7, #7]
 8009d62:	493a      	ldr	r1, [pc, #232]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	330f      	adds	r3, #15
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d112      	bne.n	8009d9c <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8009d76:	79f9      	ldrb	r1, [r7, #7]
 8009d78:	79fa      	ldrb	r2, [r7, #7]
 8009d7a:	4834      	ldr	r0, [pc, #208]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4403      	add	r3, r0
 8009d86:	3310      	adds	r3, #16
 8009d88:	7818      	ldrb	r0, [r3, #0]
 8009d8a:	4930      	ldr	r1, [pc, #192]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	330f      	adds	r3, #15
 8009d98:	4602      	mov	r2, r0
 8009d9a:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8009d9c:	79fa      	ldrb	r2, [r7, #7]
 8009d9e:	492b      	ldr	r1, [pc, #172]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	330f      	adds	r3, #15
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b2d8      	uxtb	r0, r3
 8009db2:	4926      	ldr	r1, [pc, #152]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	440b      	add	r3, r1
 8009dbe:	330f      	adds	r3, #15
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8009dc4:	e03c      	b.n	8009e40 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8009dc6:	79fa      	ldrb	r2, [r7, #7]
 8009dc8:	4920      	ldr	r1, [pc, #128]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3311      	adds	r3, #17
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d131      	bne.n	8009e40 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8009ddc:	79fa      	ldrb	r2, [r7, #7]
 8009dde:	491b      	ldr	r1, [pc, #108]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	330f      	adds	r3, #15
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	b2d8      	uxtb	r0, r3
 8009df2:	4916      	ldr	r1, [pc, #88]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	440b      	add	r3, r1
 8009dfe:	330f      	adds	r3, #15
 8009e00:	4602      	mov	r2, r0
 8009e02:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8009e04:	79fa      	ldrb	r2, [r7, #7]
 8009e06:	4911      	ldr	r1, [pc, #68]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	330f      	adds	r3, #15
 8009e14:	7819      	ldrb	r1, [r3, #0]
 8009e16:	79fa      	ldrb	r2, [r7, #7]
 8009e18:	480c      	ldr	r0, [pc, #48]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4403      	add	r3, r0
 8009e24:	3310      	adds	r3, #16
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d109      	bne.n	8009e40 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8009e2c:	79fa      	ldrb	r2, [r7, #7]
 8009e2e:	4907      	ldr	r1, [pc, #28]	; (8009e4c <STEPPER_One_Step+0x4ac>)
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	440b      	add	r3, r1
 8009e3a:	330f      	adds	r3, #15
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd90      	pop	{r4, r7, pc}
 8009e48:	0801d6fc 	.word	0x0801d6fc
 8009e4c:	2000a4f0 	.word	0x2000a4f0
 8009e50:	2000002c 	.word	0x2000002c

08009e54 <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	6039      	str	r1, [r7, #0]
 8009e5e:	71fb      	strb	r3, [r7, #7]
 8009e60:	4613      	mov	r3, r2
 8009e62:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 8009e6c:	79fa      	ldrb	r2, [r7, #7]
 8009e6e:	4921      	ldr	r1, [pc, #132]	; (8009ef4 <STEPPER_Step_Blocking+0xa0>)
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	330e      	adds	r3, #14
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 8009e80:	79fa      	ldrb	r2, [r7, #7]
 8009e82:	491c      	ldr	r1, [pc, #112]	; (8009ef4 <STEPPER_Step_Blocking+0xa0>)
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	330c      	adds	r3, #12
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	79fa      	ldrb	r2, [r7, #7]
 8009e96:	4918      	ldr	r1, [pc, #96]	; (8009ef8 <STEPPER_Step_Blocking+0xa4>)
 8009e98:	4613      	mov	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	fb00 f303 	mul.w	r3, r0, r3
 8009eaa:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8009eb2:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	e009      	b.n	8009ece <STEPPER_Step_Blocking+0x7a>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7ff fd6f 	bl	80099a0 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 8009ec2:	68b8      	ldr	r0, [r7, #8]
 8009ec4:	f7ff fb60 	bl	8009588 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d3f1      	bcc.n	8009eba <STEPPER_Step_Blocking+0x66>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	4906      	ldr	r1, [pc, #24]	; (8009ef4 <STEPPER_Step_Blocking+0xa0>)
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	330e      	adds	r3, #14
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	2000a4f0 	.word	0x2000a4f0
 8009ef8:	0801d6fc 	.word	0x0801d6fc

08009efc <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a34      	ldr	r2, [pc, #208]	; (8009fe0 <STEPPER_TMR_OVF_ISR+0xe4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d162      	bne.n	8009fd8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
 8009f16:	e05c      	b.n	8009fd2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8009f18:	7bfa      	ldrb	r2, [r7, #15]
 8009f1a:	4932      	ldr	r1, [pc, #200]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	3304      	adds	r3, #4
 8009f28:	6819      	ldr	r1, [r3, #0]
 8009f2a:	7bfa      	ldrb	r2, [r7, #15]
 8009f2c:	482d      	ldr	r0, [pc, #180]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4403      	add	r3, r0
 8009f38:	3308      	adds	r3, #8
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4299      	cmp	r1, r3
 8009f3e:	d333      	bcc.n	8009fa8 <STEPPER_TMR_OVF_ISR+0xac>
 8009f40:	7bfa      	ldrb	r2, [r7, #15]
 8009f42:	4928      	ldr	r1, [pc, #160]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	330e      	adds	r3, #14
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d028      	beq.n	8009fa8 <STEPPER_TMR_OVF_ISR+0xac>
 8009f56:	7bfa      	ldrb	r2, [r7, #15]
 8009f58:	4922      	ldr	r1, [pc, #136]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d01e      	beq.n	8009fa8 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fd17 	bl	80099a0 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8009f72:	7bfa      	ldrb	r2, [r7, #15]
 8009f74:	491b      	ldr	r1, [pc, #108]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	1e59      	subs	r1, r3, #1
 8009f84:	4817      	ldr	r0, [pc, #92]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4403      	add	r3, r0
 8009f90:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8009f92:	7bfa      	ldrb	r2, [r7, #15]
 8009f94:	4913      	ldr	r1, [pc, #76]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	e011      	b.n	8009fcc <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8009fa8:	7bfa      	ldrb	r2, [r7, #15]
 8009faa:	490e      	ldr	r1, [pc, #56]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	4809      	ldr	r0, [pc, #36]	; (8009fe4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4403      	add	r3, r0
 8009fc8:	3304      	adds	r3, #4
 8009fca:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	73fb      	strb	r3, [r7, #15]
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d09f      	beq.n	8009f18 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	40014000 	.word	0x40014000
 8009fe4:	2000a4f0 	.word	0x2000a4f0

08009fe8 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009fec:	4b14      	ldr	r3, [pc, #80]	; (800a040 <DWT_Delay_Init+0x58>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4a13      	ldr	r2, [pc, #76]	; (800a040 <DWT_Delay_Init+0x58>)
 8009ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ff6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	; (800a040 <DWT_Delay_Init+0x58>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	4a10      	ldr	r2, [pc, #64]	; (800a040 <DWT_Delay_Init+0x58>)
 8009ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a002:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a0e      	ldr	r2, [pc, #56]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a00a:	f023 0301 	bic.w	r3, r3, #1
 800a00e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800a010:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a016:	f043 0301 	orr.w	r3, r3, #1
 800a01a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800a01c:	4b09      	ldr	r3, [pc, #36]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a01e:	2200      	movs	r2, #0
 800a020:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800a022:	bf00      	nop
    __ASM volatile ("NOP");
 800a024:	bf00      	nop
    __ASM volatile ("NOP");
 800a026:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800a028:	4b06      	ldr	r3, [pc, #24]	; (800a044 <DWT_Delay_Init+0x5c>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800a030:	2300      	movs	r3, #0
 800a032:	e000      	b.n	800a036 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800a034:	2301      	movs	r3, #1
    }
}
 800a036:	4618      	mov	r0, r3
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	e000edf0 	.word	0xe000edf0
 800a044:	e0001000 	.word	0xe0001000

0800a048 <_strtol_l.constprop.0>:
 800a048:	2b01      	cmp	r3, #1
 800a04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04e:	d001      	beq.n	800a054 <_strtol_l.constprop.0+0xc>
 800a050:	2b24      	cmp	r3, #36	; 0x24
 800a052:	d906      	bls.n	800a062 <_strtol_l.constprop.0+0x1a>
 800a054:	f000 f88c 	bl	800a170 <__errno>
 800a058:	2316      	movs	r3, #22
 800a05a:	6003      	str	r3, [r0, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a148 <_strtol_l.constprop.0+0x100>
 800a066:	460d      	mov	r5, r1
 800a068:	462e      	mov	r6, r5
 800a06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a072:	f017 0708 	ands.w	r7, r7, #8
 800a076:	d1f7      	bne.n	800a068 <_strtol_l.constprop.0+0x20>
 800a078:	2c2d      	cmp	r4, #45	; 0x2d
 800a07a:	d132      	bne.n	800a0e2 <_strtol_l.constprop.0+0x9a>
 800a07c:	782c      	ldrb	r4, [r5, #0]
 800a07e:	2701      	movs	r7, #1
 800a080:	1cb5      	adds	r5, r6, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d05b      	beq.n	800a13e <_strtol_l.constprop.0+0xf6>
 800a086:	2b10      	cmp	r3, #16
 800a088:	d109      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08a:	2c30      	cmp	r4, #48	; 0x30
 800a08c:	d107      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08e:	782c      	ldrb	r4, [r5, #0]
 800a090:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a094:	2c58      	cmp	r4, #88	; 0x58
 800a096:	d14d      	bne.n	800a134 <_strtol_l.constprop.0+0xec>
 800a098:	786c      	ldrb	r4, [r5, #1]
 800a09a:	2310      	movs	r3, #16
 800a09c:	3502      	adds	r5, #2
 800a09e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a0a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0a6:	f04f 0e00 	mov.w	lr, #0
 800a0aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0ae:	4676      	mov	r6, lr
 800a0b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a0b8:	f1bc 0f09 	cmp.w	ip, #9
 800a0bc:	d816      	bhi.n	800a0ec <_strtol_l.constprop.0+0xa4>
 800a0be:	4664      	mov	r4, ip
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	dd24      	ble.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a0c4:	f1be 3fff 	cmp.w	lr, #4294967295
 800a0c8:	d008      	beq.n	800a0dc <_strtol_l.constprop.0+0x94>
 800a0ca:	45b1      	cmp	r9, r6
 800a0cc:	d31c      	bcc.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0ce:	d101      	bne.n	800a0d4 <_strtol_l.constprop.0+0x8c>
 800a0d0:	45a2      	cmp	sl, r4
 800a0d2:	db19      	blt.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0d4:	fb06 4603 	mla	r6, r6, r3, r4
 800a0d8:	f04f 0e01 	mov.w	lr, #1
 800a0dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e0:	e7e8      	b.n	800a0b4 <_strtol_l.constprop.0+0x6c>
 800a0e2:	2c2b      	cmp	r4, #43	; 0x2b
 800a0e4:	bf04      	itt	eq
 800a0e6:	782c      	ldrbeq	r4, [r5, #0]
 800a0e8:	1cb5      	addeq	r5, r6, #2
 800a0ea:	e7ca      	b.n	800a082 <_strtol_l.constprop.0+0x3a>
 800a0ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a0f0:	f1bc 0f19 	cmp.w	ip, #25
 800a0f4:	d801      	bhi.n	800a0fa <_strtol_l.constprop.0+0xb2>
 800a0f6:	3c37      	subs	r4, #55	; 0x37
 800a0f8:	e7e2      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a0fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a0fe:	f1bc 0f19 	cmp.w	ip, #25
 800a102:	d804      	bhi.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a104:	3c57      	subs	r4, #87	; 0x57
 800a106:	e7db      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a108:	f04f 3eff 	mov.w	lr, #4294967295
 800a10c:	e7e6      	b.n	800a0dc <_strtol_l.constprop.0+0x94>
 800a10e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a112:	d105      	bne.n	800a120 <_strtol_l.constprop.0+0xd8>
 800a114:	2322      	movs	r3, #34	; 0x22
 800a116:	6003      	str	r3, [r0, #0]
 800a118:	4646      	mov	r6, r8
 800a11a:	b942      	cbnz	r2, 800a12e <_strtol_l.constprop.0+0xe6>
 800a11c:	4630      	mov	r0, r6
 800a11e:	e79e      	b.n	800a05e <_strtol_l.constprop.0+0x16>
 800a120:	b107      	cbz	r7, 800a124 <_strtol_l.constprop.0+0xdc>
 800a122:	4276      	negs	r6, r6
 800a124:	2a00      	cmp	r2, #0
 800a126:	d0f9      	beq.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a128:	f1be 0f00 	cmp.w	lr, #0
 800a12c:	d000      	beq.n	800a130 <_strtol_l.constprop.0+0xe8>
 800a12e:	1e69      	subs	r1, r5, #1
 800a130:	6011      	str	r1, [r2, #0]
 800a132:	e7f3      	b.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a134:	2430      	movs	r4, #48	; 0x30
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1b1      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13a:	2308      	movs	r3, #8
 800a13c:	e7af      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13e:	2c30      	cmp	r4, #48	; 0x30
 800a140:	d0a5      	beq.n	800a08e <_strtol_l.constprop.0+0x46>
 800a142:	230a      	movs	r3, #10
 800a144:	e7ab      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a146:	bf00      	nop
 800a148:	0801d719 	.word	0x0801d719

0800a14c <strtol>:
 800a14c:	4613      	mov	r3, r2
 800a14e:	460a      	mov	r2, r1
 800a150:	4601      	mov	r1, r0
 800a152:	4802      	ldr	r0, [pc, #8]	; (800a15c <strtol+0x10>)
 800a154:	6800      	ldr	r0, [r0, #0]
 800a156:	f7ff bf77 	b.w	800a048 <_strtol_l.constprop.0>
 800a15a:	bf00      	nop
 800a15c:	20000098 	.word	0x20000098

0800a160 <memset>:
 800a160:	4402      	add	r2, r0
 800a162:	4603      	mov	r3, r0
 800a164:	4293      	cmp	r3, r2
 800a166:	d100      	bne.n	800a16a <memset+0xa>
 800a168:	4770      	bx	lr
 800a16a:	f803 1b01 	strb.w	r1, [r3], #1
 800a16e:	e7f9      	b.n	800a164 <memset+0x4>

0800a170 <__errno>:
 800a170:	4b01      	ldr	r3, [pc, #4]	; (800a178 <__errno+0x8>)
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20000098 	.word	0x20000098

0800a17c <__libc_init_array>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4d0d      	ldr	r5, [pc, #52]	; (800a1b4 <__libc_init_array+0x38>)
 800a180:	4c0d      	ldr	r4, [pc, #52]	; (800a1b8 <__libc_init_array+0x3c>)
 800a182:	1b64      	subs	r4, r4, r5
 800a184:	10a4      	asrs	r4, r4, #2
 800a186:	2600      	movs	r6, #0
 800a188:	42a6      	cmp	r6, r4
 800a18a:	d109      	bne.n	800a1a0 <__libc_init_array+0x24>
 800a18c:	4d0b      	ldr	r5, [pc, #44]	; (800a1bc <__libc_init_array+0x40>)
 800a18e:	4c0c      	ldr	r4, [pc, #48]	; (800a1c0 <__libc_init_array+0x44>)
 800a190:	f000 f818 	bl	800a1c4 <_init>
 800a194:	1b64      	subs	r4, r4, r5
 800a196:	10a4      	asrs	r4, r4, #2
 800a198:	2600      	movs	r6, #0
 800a19a:	42a6      	cmp	r6, r4
 800a19c:	d105      	bne.n	800a1aa <__libc_init_array+0x2e>
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a4:	4798      	blx	r3
 800a1a6:	3601      	adds	r6, #1
 800a1a8:	e7ee      	b.n	800a188 <__libc_init_array+0xc>
 800a1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ae:	4798      	blx	r3
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	e7f2      	b.n	800a19a <__libc_init_array+0x1e>
 800a1b4:	0801d824 	.word	0x0801d824
 800a1b8:	0801d824 	.word	0x0801d824
 800a1bc:	0801d824 	.word	0x0801d824
 800a1c0:	0801d828 	.word	0x0801d828

0800a1c4 <_init>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_fini>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr
