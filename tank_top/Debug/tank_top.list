
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000840c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013598  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb34  0801bb34  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb34  0801bb34  0002bb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb3c  0801bb3c  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb3c  0801bb3c  0002bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb40  0801bb40  0002bb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801bb44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000a8  0801bbec  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0801bbec  00030588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019af3  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003413  00000000  00000000  00049c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0004d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d6a  00000000  00000000  0004e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ffd  00000000  00000000  000712ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00a0  00000000  00000000  0008b2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001029  00000000  00000000  0016b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060f0  00000000  00000000  0016c380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00172470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008584 	.word	0x08008584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008584 	.word	0x08008584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d64:	899a      	ldrh	r2, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	819a      	strh	r2, [r3, #12]
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0801ba8c 	.word	0x0801ba8c

08000d90 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dac:	899a      	ldrh	r2, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	819a      	strh	r2, [r3, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	0801ba7c 	.word	0x0801ba7c

08000dd8 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000df4:	899a      	ldrh	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	819a      	strh	r2, [r3, #12]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0801ba6c 	.word	0x0801ba6c

08000e20 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e3c:	899a      	ldrh	r2, [r3, #12]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	819a      	strh	r2, [r3, #12]
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0801ba5c 	.word	0x0801ba5c

08000e68 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e82:	899a      	ldrh	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	819a      	strh	r2, [r3, #12]
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	0801ba4c 	.word	0x0801ba4c

08000eac <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ec6:	899a      	ldrh	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	819a      	strh	r2, [r3, #12]
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	0801ba3c 	.word	0x0801ba3c

08000ef0 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f0a:	899a      	ldrh	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	819a      	strh	r2, [r3, #12]
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	0801ba2c 	.word	0x0801ba2c

08000f34 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2210      	movs	r2, #16
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f4e:	899a      	ldrh	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	819a      	strh	r2, [r3, #12]
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	0801ba1c 	.word	0x0801ba1c

08000f78 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <arm_rfft_fast_init_32_f32+0x14>
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e013      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffd0 	bl	8000f34 <arm_cfft_init_16_f32>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	e006      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <arm_rfft_fast_init_32_f32+0x44>)
 8000fb0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08013a9c 	.word	0x08013a9c

08000fc0 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <arm_rfft_fast_init_64_f32+0x14>
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e013      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff8a 	bl	8000ef0 <arm_cfft_init_32_f32>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	e006      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <arm_rfft_fast_init_64_f32+0x44>)
 8000ff8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08013b1c 	.word	0x08013b1c

08001008 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <arm_rfft_fast_init_128_f32+0x14>
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e013      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff44 	bl	8000eac <arm_cfft_init_64_f32>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	e006      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <arm_rfft_fast_init_128_f32+0x44>)
 8001040:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08013c1c 	.word	0x08013c1c

08001050 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <arm_rfft_fast_init_256_f32+0x14>
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e014      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fefe 	bl	8000e68 <arm_cfft_init_128_f32>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	e007      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <arm_rfft_fast_init_256_f32+0x48>)
 800108a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08013e1c 	.word	0x08013e1c

0800109c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <arm_rfft_fast_init_512_f32+0x14>
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e014      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb4 	bl	8000e20 <arm_cfft_init_256_f32>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	e007      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <arm_rfft_fast_init_512_f32+0x48>)
 80010d6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0801421c 	.word	0x0801421c

080010e8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <arm_rfft_fast_init_1024_f32+0x14>
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e014      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe6a 	bl	8000dd8 <arm_cfft_init_512_f32>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	e007      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <arm_rfft_fast_init_1024_f32+0x48>)
 8001122:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08014a1c 	.word	0x08014a1c

08001134 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <arm_rfft_fast_init_2048_f32+0x14>
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e014      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe20 	bl	8000d90 <arm_cfft_init_1024_f32>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	e007      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001168:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <arm_rfft_fast_init_2048_f32+0x48>)
 800116e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08015a1c 	.word	0x08015a1c

08001180 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <arm_rfft_fast_init_4096_f32+0x14>
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e014      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd6 	bl	8000d48 <arm_cfft_init_2048_f32>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	e007      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <arm_rfft_fast_init_4096_f32+0x48>)
 80011ba:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	08017a1c 	.word	0x08017a1c

080011cc <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011de:	d023      	beq.n	8001228 <arm_rfft_fast_init_f32+0x5c>
 80011e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e4:	dc50      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ea:	d023      	beq.n	8001234 <arm_rfft_fast_init_f32+0x68>
 80011ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f0:	dc4a      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d023      	beq.n	8001240 <arm_rfft_fast_init_f32+0x74>
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fc:	dc44      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001202:	d023      	beq.n	800124c <arm_rfft_fast_init_f32+0x80>
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	dc3e      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800120a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800120e:	d023      	beq.n	8001258 <arm_rfft_fast_init_f32+0x8c>
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	dc38      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 8001216:	2b80      	cmp	r3, #128	; 0x80
 8001218:	d024      	beq.n	8001264 <arm_rfft_fast_init_f32+0x98>
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	dc34      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800121e:	2b20      	cmp	r3, #32
 8001220:	d02c      	beq.n	800127c <arm_rfft_fast_init_f32+0xb0>
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d024      	beq.n	8001270 <arm_rfft_fast_init_f32+0xa4>
 8001226:	e02f      	b.n	8001288 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffa9 	bl	8001180 <arm_rfft_fast_init_4096_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
    break;
 8001232:	e02c      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff7d 	bl	8001134 <arm_rfft_fast_init_2048_f32>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
    break;
 800123e:	e026      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff51 	bl	80010e8 <arm_rfft_fast_init_1024_f32>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
    break;
 800124a:	e020      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff25 	bl	800109c <arm_rfft_fast_init_512_f32>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    break;
 8001256:	e01a      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fef9 	bl	8001050 <arm_rfft_fast_init_256_f32>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
    break;
 8001262:	e014      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fecf 	bl	8001008 <arm_rfft_fast_init_128_f32>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
    break;
 800126e:	e00e      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fea5 	bl	8000fc0 <arm_rfft_fast_init_64_f32>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
    break;
 800127a:	e008      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe7b 	bl	8000f78 <arm_rfft_fast_init_32_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
    break;
 8001286:	e002      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e001      	b.n	8001292 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012a0:	f000 fcdb 	bl	8001c5a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012a4:	f000 f87a 	bl	800139c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012a8:	f000 f9d4 	bl	8001654 <MX_GPIO_Init>
	MX_TIM2_Init();
 80012ac:	f000 f92c 	bl	8001508 <MX_TIM2_Init>
	MX_ADC1_Init();
 80012b0:	f000 f8c6 	bl	8001440 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80012b4:	f000 f99c 	bl	80015f0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	482d      	ldr	r0, [pc, #180]	; (8001374 <main+0xd8>)
 80012be:	f7ff ff85 	bl	80011cc <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012c2:	217f      	movs	r1, #127	; 0x7f
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <main+0xdc>)
 80012c6:	f001 fea7 	bl	8003018 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	492b      	ldr	r1, [pc, #172]	; (800137c <main+0xe0>)
 80012d0:	4829      	ldr	r0, [pc, #164]	; (8001378 <main+0xdc>)
 80012d2:	f001 f88b 	bl	80023ec <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80012d6:	482a      	ldr	r0, [pc, #168]	; (8001380 <main+0xe4>)
 80012d8:	f003 fcb8 	bl	8004c4c <HAL_TIM_Base_Start_IT>

	STEPPERS_Init();
 80012dc:	f005 fd20 	bl	8006d20 <STEPPERS_Init>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 14);
 80012e0:	210e      	movs	r1, #14
 80012e2:	2000      	movs	r0, #0
 80012e4:	f005 fe58 	bl	8006f98 <STEPPER_SetSpeed>
		 STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
		 }
		 }
		 */

		if (limitFlag) {
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <main+0xe8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <main+0x6a>
			depth = 0;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <main+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
			printf("Limit Hit\n\r");
 80012f8:	4824      	ldr	r0, [pc, #144]	; (800138c <main+0xf0>)
 80012fa:	f006 facd 	bl	8007898 <iprintf>
			HAL_Delay(1000);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f000 fd1f 	bl	8001d44 <HAL_Delay>
		 updatedFlag = 0;
		 }
		 }
		 */

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f002 fa6d 	bl	80037ec <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d112      	bne.n	800133e <main+0xa2>
				&& !limitFlag) {
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <main+0xe8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <main+0xa2>
			printf("Going up\n\r");
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <main+0xf4>)
 8001324:	f006 fab8 	bl	8007898 <iprintf>
			Stepper1_Dir = DIR_CW;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <main+0xf8>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
			STEPPER_Step_Blocking(STEPPER_MOTOR1, 10, Stepper1_Dir);
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <main+0xf8>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	210a      	movs	r1, #10
 8001336:	2000      	movs	r0, #0
 8001338:	f006 f8e8 	bl	800750c <STEPPER_Step_Blocking>
 800133c:	e018      	b.n	8001370 <main+0xd4>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET) {
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f002 fa51 	bl	80037ec <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1cb      	bne.n	80012e8 <main+0x4c>
			printf("Going down\n\r");
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0xfc>)
 8001352:	f006 faa1 	bl	8007898 <iprintf>
			Stepper1_Dir = DIR_CCW;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <main+0xf8>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
			STEPPER_Step_Blocking(STEPPER_MOTOR1, 10, Stepper1_Dir);
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <main+0xf8>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	210a      	movs	r1, #10
 8001364:	2000      	movs	r0, #0
 8001366:	f006 f8d1 	bl	800750c <STEPPER_Step_Blocking>
			limitFlag = 0;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <main+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		if (limitFlag) {
 8001370:	e7ba      	b.n	80012e8 <main+0x4c>
 8001372:	bf00      	nop
 8001374:	20000400 	.word	0x20000400
 8001378:	200000c4 	.word	0x200000c4
 800137c:	200001fc 	.word	0x200001fc
 8001380:	20000128 	.word	0x20000128
 8001384:	200003fe 	.word	0x200003fe
 8001388:	20000418 	.word	0x20000418
 800138c:	0800859c 	.word	0x0800859c
 8001390:	080085a8 	.word	0x080085a8
 8001394:	2000041c 	.word	0x2000041c
 8001398:	080085b4 	.word	0x080085b4

0800139c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2244      	movs	r2, #68	; 0x44
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fac9 	bl	8007942 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c2:	f002 fa75 	bl	80038b0 <HAL_PWREx_ControlVoltageScaling>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013cc:	f000 f9f8 	bl	80017c0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013d0:	2310      	movs	r3, #16
 80013d2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013ec:	2328      	movs	r3, #40	; 0x28
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f0:	2307      	movs	r3, #7
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4618      	mov	r0, r3
 8001402:	f002 faab 	bl	800395c <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x74>
		Error_Handler();
 800140c:	f000 f9d8 	bl	80017c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2303      	movs	r3, #3
 8001416:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001424:	463b      	mov	r3, r7
 8001426:	2104      	movs	r1, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f002 feab 	bl	8004184 <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x9c>
		Error_Handler();
 8001434:	f000 f9c4 	bl	80017c0 <Error_Handler>
	}
}
 8001438:	bf00      	nop
 800143a:	3758      	adds	r7, #88	; 0x58
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <MX_ADC1_Init+0xc0>)
 800145a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_ADC1_Init+0xbc>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_ADC1_Init+0xbc>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001476:	2204      	movs	r2, #4
 8001478:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <MX_ADC1_Init+0xbc>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001488:	2201      	movs	r2, #1
 800148a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_ADC1_Init+0xbc>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0xbc>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_ADC1_Init+0xbc>)
 800149c:	2200      	movs	r2, #0
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <MX_ADC1_Init+0xbc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_ADC1_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_ADC1_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_ADC1_Init+0xbc>)
 80014b8:	f000 fe56 	bl	8002168 <HAL_ADC_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0x86>
		Error_Handler();
 80014c2:	f000 f97d 	bl	80017c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_ADC1_Init+0xc4>)
 80014c8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ca:	2306      	movs	r3, #6
 80014cc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d2:	237f      	movs	r3, #127	; 0x7f
 80014d4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014d6:	2304      	movs	r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014de:	463b      	mov	r3, r7
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_ADC1_Init+0xbc>)
 80014e4:	f001 f810 	bl	8002508 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0xb2>
		Error_Handler();
 80014ee:	f000 f967 	bl	80017c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000c4 	.word	0x200000c4
 8001500:	50040000 	.word	0x50040000
 8001504:	2e300800 	.word	0x2e300800

08001508 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_TIM2_Init+0xe4>)
 800153c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001540:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3;
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001544:	2203      	movs	r2, #3
 8001546:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <MX_TIM2_Init+0xe4>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001550:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001554:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <MX_TIM2_Init+0xe4>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001564:	f003 fb1a 	bl	8004b9c <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x6a>
		Error_Handler();
 800156e:	f000 f927 	bl	80017c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	4619      	mov	r1, r3
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001580:	f003 fe30 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x86>
		Error_Handler();
 800158a:	f000 f919 	bl	80017c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <MX_TIM2_Init+0xe4>)
 8001590:	f003 fbb0 	bl	8004cf4 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x96>
		Error_Handler();
 800159a:	f000 f911 	bl	80017c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480f      	ldr	r0, [pc, #60]	; (80015ec <MX_TIM2_Init+0xe4>)
 80015ae:	f004 fa87 	bl	8005ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80015b8:	f000 f902 	bl	80017c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_TIM2_Init+0xe4>)
 80015d4:	f003 fcf2 	bl	8004fbc <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80015de:	f000 f8ef 	bl	80017c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000128 	.word	0x20000128

080015f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_USART2_UART_Init+0x5c>)
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <MX_USART2_UART_Init+0x60>)
 80015f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART2_UART_Init+0x5c>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_USART2_UART_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_USART2_UART_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_USART2_UART_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_USART2_UART_Init+0x5c>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART2_UART_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_USART2_UART_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART2_UART_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_USART2_UART_Init+0x5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_USART2_UART_Init+0x5c>)
 800163a:	f005 fada 	bl	8006bf2 <HAL_RS485Ex_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001644:	f000 f8bc 	bl	80017c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000174 	.word	0x20000174
 8001650:	40004400 	.word	0x40004400

08001654 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <MX_GPIO_Init+0xe8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <MX_GPIO_Init+0xe8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <MX_GPIO_Init+0xe8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <MX_GPIO_Init+0xe8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a2d      	ldr	r2, [pc, #180]	; (800173c <MX_GPIO_Init+0xe8>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <MX_GPIO_Init+0xe8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, motorcontrol1_Pin | motorcontrol2_Pin,
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f002 f8ba 	bl	800381c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, motorcontrol4_Pin | motorcontrol3_Pin,
 80016a8:	2200      	movs	r2, #0
 80016aa:	2130      	movs	r1, #48	; 0x30
 80016ac:	4824      	ldr	r0, [pc, #144]	; (8001740 <MX_GPIO_Init+0xec>)
 80016ae:	f002 f8b5 	bl	800381c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : limit_switch_Pin */
	GPIO_InitStruct.Pin = limit_switch_Pin;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(limit_switch_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <MX_GPIO_Init+0xec>)
 80016c8:	f001 ff26 	bl	8003518 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol1_Pin motorcontrol2_Pin */
	GPIO_InitStruct.Pin = motorcontrol1_Pin | motorcontrol2_Pin;
 80016cc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80016d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 ff16 	bl	8003518 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80016ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f001 ff08 	bl	8003518 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol4_Pin motorcontrol3_Pin */
	GPIO_InitStruct.Pin = motorcontrol4_Pin | motorcontrol3_Pin;
 8001708:	2330      	movs	r3, #48	; 0x30
 800170a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	4808      	ldr	r0, [pc, #32]	; (8001740 <MX_GPIO_Init+0xec>)
 8001720:	f001 fefa 	bl	8003518 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2007      	movs	r0, #7
 800172a:	f001 fdb0 	bl	800328e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800172e:	2007      	movs	r0, #7
 8001730:	f001 fdc9 	bl	80032c6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400

08001744 <HAL_ADC_ConvHalfCpltCallback>:
	}

}

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200003fc 	.word	0x200003fc

08001764 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <HAL_ADC_ConvCpltCallback+0x1c>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200003fd 	.word	0x200003fd

08001784 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 ff1b 	bl	80075c8 <STEPPER_TMR_OVF_ISR>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80017a4:	1d39      	adds	r1, r7, #4
 80017a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017aa:	2201      	movs	r2, #1
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <__io_putchar+0x20>)
 80017ae:	f004 fa0b 	bl	8005bc8 <HAL_UART_Transmit>

	return ch;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000174 	.word	0x20000174

080017c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b09e      	sub	sp, #120	; 0x78
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2254      	movs	r2, #84	; 0x54
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f884 	bl	8007942 <memset>
  if(hadc->Instance==ADC1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_ADC_MspInit+0xc0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d143      	bne.n	80018cc <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001848:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800184a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800184e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001858:	2310      	movs	r3, #16
 800185a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800185c:	2307      	movs	r3, #7
 800185e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f002 feaa 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800187e:	f7ff ff9f 	bl	80017c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 8001888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_ADC_MspInit+0xc4>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018b6:	230b      	movs	r3, #11
 80018b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f001 fe26 	bl	8003518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3778      	adds	r7, #120	; 0x78
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	50040000 	.word	0x50040000
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d113      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0x44>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	201c      	movs	r0, #28
 800190c:	f001 fcbf 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001910:	201c      	movs	r0, #28
 8001912:	f001 fcd8 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b09e      	sub	sp, #120	; 0x78
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	2254      	movs	r2, #84	; 0x54
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f005 fffc 	bl	8007942 <memset>
  if(huart->Instance==USART2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <HAL_UART_MspInit+0xdc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d150      	bne.n	80019f6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fe33 	bl	80045cc <HAL_RCCEx_PeriphCLKConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800196c:	f7ff ff28 	bl	80017c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_UART_MspInit+0xe0>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80019a0:	2306      	movs	r3, #6
 80019a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b0:	2307      	movs	r3, #7
 80019b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	f001 fdab 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80019d4:	2303      	movs	r3, #3
 80019d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f001 fd99 	bl	8003518 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2026      	movs	r0, #38	; 0x26
 80019ec:	f001 fc4f 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f0:	2026      	movs	r0, #38	; 0x26
 80019f2:	f001 fc68 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3778      	adds	r7, #120	; 0x78
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40021000 	.word	0x40021000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f956 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	limitFlag = 1;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <EXTI1_IRQHandler+0x14>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(limit_switch_Pin);
 8001a66:	2002      	movs	r0, #2
 8001a68:	f001 fef0 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200003fe 	.word	0x200003fe

08001a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM2_IRQHandler+0x10>)
 8001a7a:	f003 f99c 	bl	8004db6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000128 	.word	0x20000128

08001a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <USART2_IRQHandler+0x10>)
 8001a8e:	f004 f925 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000174 	.word	0x20000174

08001a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e00a      	b.n	8001ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aae:	f3af 8000 	nop.w
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf0      	blt.n	8001aae <_read+0x12>
  }

  return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e009      	b.n	8001afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fe53 	bl	800179c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf1      	blt.n	8001ae8 <_write+0x12>
  }
  return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_close>:

int _close(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	605a      	str	r2, [r3, #4]
  return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_isatty>:

int _isatty(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f005 ff1a 	bl	80079e0 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20010000 	.word	0x20010000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000420 	.word	0x20000420
 8001be0:	20000588 	.word	0x20000588

08001be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff ffea 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	; (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	; (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f005 fed9 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7ff fb2f 	bl	800129c <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001c4c:	0801bb44 	.word	0x0801bb44
  ldr r2, =_sbss
 8001c50:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001c54:	20000588 	.word	0x20000588

08001c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_IRQHandler>

08001c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f001 fb07 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f80e 	bl	8001c8c <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	e001      	b.n	8001c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c7c:	f7ff fda6 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_InitTick+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fb13 	bl	80032e2 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d809      	bhi.n	8001cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f001 fadd 	bl	800328e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_InitTick+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e007      	b.n	8001cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e004      	b.n	8001cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e001      	b.n	8001cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000424 	.word	0x20000424

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000424 	.word	0x20000424

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008

08001d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3360      	adds	r3, #96	; 0x60
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LL_ADC_SetOffset+0x44>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	03fff000 	.word	0x03fff000

08001e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3360      	adds	r3, #96	; 0x60
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3360      	adds	r3, #96	; 0x60
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3330      	adds	r3, #48	; 0x30
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	4413      	add	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	211f      	movs	r1, #31
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	f003 011f 	and.w	r1, r3, #31
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0d1b      	lsrs	r3, r3, #20
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2107      	movs	r1, #7
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0d1b      	lsrs	r3, r3, #20
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	401a      	ands	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0318 	and.w	r3, r3, #24
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f98:	40d9      	lsrs	r1, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	0007ffff 	.word	0x0007ffff

08001fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002044:	d101      	bne.n	800204a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002094:	f043 0202 	orr.w	r2, r3, #2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_IsEnabled+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_IsEnabled+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_IsDisableOngoing+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_IsDisableOngoing+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d101      	bne.n	8002134 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d101      	bne.n	800215a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e126      	b.n	80023d0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fb3f 	bl	8001814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff19 	bl	8001fe0 <LL_ADC_IsDeepPowerDownEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff feff 	bl	8001fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff34 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff18 	bl	8002008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d8:	4b7f      	ldr	r3, [pc, #508]	; (80023d8 <HAL_ADC_Init+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <HAL_ADC_Init+0x274>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff16 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff76 	bl	800211c <LL_ADC_REG_IsConversionOngoing>
 8002230:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80bf 	bne.w	80023be <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80bb 	bne.w	80023be <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002250:	f043 0202 	orr.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff23 	bl	80020a8 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002268:	485d      	ldr	r0, [pc, #372]	; (80023e0 <HAL_ADC_Init+0x278>)
 800226a:	f7ff ff1d 	bl	80020a8 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4619      	mov	r1, r3
 800227a:	485a      	ldr	r0, [pc, #360]	; (80023e4 <HAL_ADC_Init+0x27c>)
 800227c:	f7ff fd86 	bl	8001d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e5b      	ldrb	r3, [r3, #25]
 8002284:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002290:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002296:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	045b      	lsls	r3, r3, #17
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_ADC_Init+0x280>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff26 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 80022f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d13d      	bne.n	800237a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d13a      	bne.n	800237a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002308:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002310:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002334:	2b01      	cmp	r3, #1
 8002336:	d118      	bne.n	800236a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800235a:	430a      	orrs	r2, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	e007      	b.n	800237a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10c      	bne.n	800239c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f023 010f 	bic.w	r1, r3, #15
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	e007      	b.n	80023ac <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 020f 	bic.w	r2, r2, #15
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0210 	orr.w	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000000 	.word	0x20000000
 80023dc:	053e2d63 	.word	0x053e2d63
 80023e0:	50040000 	.word	0x50040000
 80023e4:	50040300 	.word	0x50040300
 80023e8:	fff0c007 	.word	0xfff0c007

080023ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe8d 	bl	800211c <LL_ADC_REG_IsConversionOngoing>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d167      	bne.n	80024d8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Start_DMA+0x2a>
 8002412:	2302      	movs	r3, #2
 8002414:	e063      	b.n	80024de <HAL_ADC_Start_DMA+0xf2>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fc54 	bl	8002ccc <ADC_Enable>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d14f      	bne.n	80024ce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f023 0206 	bic.w	r2, r3, #6
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	659a      	str	r2, [r3, #88]	; 0x58
 800245a:	e002      	b.n	8002462 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_ADC_Start_DMA+0xfc>)
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <HAL_ADC_Start_DMA+0x100>)
 8002470:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_ADC_Start_DMA+0x104>)
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	221c      	movs	r2, #28
 8002480:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0210 	orr.w	r2, r2, #16
 8002498:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3340      	adds	r3, #64	; 0x40
 80024b4:	4619      	mov	r1, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f000 ff1e 	bl	80032fa <HAL_DMA_Start_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe14 	bl	80020f4 <LL_ADC_REG_StartConversion>
 80024cc:	e006      	b.n	80024dc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024d6:	e001      	b.n	80024dc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
 80024da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08002e97 	.word	0x08002e97
 80024ec:	08002f6f 	.word	0x08002f6f
 80024f0:	08002f8b 	.word	0x08002f8b

080024f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b6      	sub	sp, #216	; 0xd8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x22>
 8002526:	2302      	movs	r3, #2
 8002528:	e3bb      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x79a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fdf0 	bl	800211c <LL_ADC_REG_IsConversionOngoing>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 83a0 	bne.w	8002c84 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b05      	cmp	r3, #5
 8002552:	d824      	bhi.n	800259e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	3b02      	subs	r3, #2
 800255a:	2b03      	cmp	r3, #3
 800255c:	d81b      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x8e>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_ADC_ConfigChannel+0x5c>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002575 	.word	0x08002575
 8002568:	0800257d 	.word	0x0800257d
 800256c:	08002585 	.word	0x08002585
 8002570:	0800258d 	.word	0x0800258d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002574:	230c      	movs	r3, #12
 8002576:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800257a:	e010      	b.n	800259e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800257c:	2312      	movs	r3, #18
 800257e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002582:	e00c      	b.n	800259e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002584:	2318      	movs	r3, #24
 8002586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800258a:	e008      	b.n	800259e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002594:	e003      	b.n	800259e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002596:	2306      	movs	r3, #6
 8002598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800259c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80025ac:	f7ff fc8a 	bl	8001ec4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fdb1 	bl	800211c <LL_ADC_REG_IsConversionOngoing>
 80025ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fdbd 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 80025c8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 81a4 	bne.w	800291e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 819f 	bne.w	800291e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f7ff fc95 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	08db      	lsrs	r3, r3, #3
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d00a      	beq.n	800262a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6919      	ldr	r1, [r3, #16]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002624:	f7ff fbe6 	bl	8001df4 <LL_ADC_SetOffset>
 8002628:	e179      	b.n	800291e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fc03 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x14e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fbf8 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	e01e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x18c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fbed 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800267c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e004      	b.n	8002692 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1a4>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	e018      	b.n	80026de <HAL_ADC_ConfigChannel+0x1d6>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80026c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e004      	b.n	80026de <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80026d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026de:	429a      	cmp	r2, r3
 80026e0:	d106      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fbbc 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fba0 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x214>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fb95 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	e01e      	b.n	800275a <HAL_ADC_ConfigChannel+0x252>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fb8a 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800273a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800274e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x26a>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0e9b      	lsrs	r3, r3, #26
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	e018      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x29c>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800278a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e004      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800279a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d106      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fb59 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb3d 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x2da>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2102      	movs	r1, #2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fb32 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	e01e      	b.n	8002820 <HAL_ADC_ConfigChannel+0x318>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2102      	movs	r1, #2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fb27 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e004      	b.n	800281e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x330>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0e9b      	lsrs	r3, r3, #26
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	e014      	b.n	8002862 <HAL_ADC_ConfigChannel+0x35a>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800284c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2102      	movs	r1, #2
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fafa 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fade 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x398>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fad3 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	e017      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x3c8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2103      	movs	r1, #3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fac8 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ba:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80028bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80028c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x3e0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	e011      	b.n	800290c <HAL_ADC_ConfigChannel+0x404>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e003      	b.n	800290c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800290c:	429a      	cmp	r2, r3
 800290e:	d106      	bne.n	800291e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff faa5 	bl	8001e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fbc0 	bl	80020a8 <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8140 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff fb19 	bl	8001f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a8f      	ldr	r2, [pc, #572]	; (8002b84 <HAL_ADC_ConfigChannel+0x67c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f040 8131 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x46e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	3301      	adds	r3, #1
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b09      	cmp	r3, #9
 800296c:	bf94      	ite	ls
 800296e:	2301      	movls	r3, #1
 8002970:	2300      	movhi	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e019      	b.n	80029aa <HAL_ADC_ConfigChannel+0x4a2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002986:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d079      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x4c2>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c8:	e015      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x4ee>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029da:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80029e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x50e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	e017      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x53e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	ea42 0103 	orr.w	r1, r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x564>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	051b      	lsls	r3, r3, #20
 8002a6a:	e018      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x596>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	e081      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x5b6>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abc:	e015      	b.n	8002aea <HAL_ADC_ConfigChannel+0x5e2>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x602>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	e017      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x632>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	61bb      	str	r3, [r7, #24]
  return result;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	ea42 0103 	orr.w	r1, r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x65e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 021f 	and.w	r2, r3, #31
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b1e      	subs	r3, #30
 8002b5e:	051b      	lsls	r3, r3, #20
 8002b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b64:	e01e      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x69c>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  return result;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e006      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x688>
 8002b82:	bf00      	nop
 8002b84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b1e      	subs	r3, #30
 8002b9e:	051b      	lsls	r3, r3, #20
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7ff f9b6 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_ADC_ConfigChannel+0x7a4>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d06c      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bbc:	483c      	ldr	r0, [pc, #240]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bbe:	f7ff f90b 	bl	8001dd8 <LL_ADC_GetCommonPathInternalCh>
 8002bc2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d127      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d121      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a35      	ldr	r2, [pc, #212]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d157      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bee:	4619      	mov	r1, r3
 8002bf0:	482f      	ldr	r0, [pc, #188]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bf2:	f7ff f8de 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_ADC_ConfigChannel+0x7b4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c10:	e002      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f9      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c1e:	e03a      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d113      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d12a      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c4c:	f7ff f8b1 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c50:	e021      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d11c      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d111      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c7e:	f7ff f898 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
 8002c82:	e008      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	37d8      	adds	r7, #216	; 0xd8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	80080000 	.word	0x80080000
 8002cb0:	50040300 	.word	0x50040300
 8002cb4:	c7520000 	.word	0xc7520000
 8002cb8:	50040000 	.word	0x50040000
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	053e2d63 	.word	0x053e2d63
 8002cc4:	cb840000 	.word	0xcb840000
 8002cc8:	80000001 	.word	0x80000001

08002ccc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff f9e3 	bl	80020a8 <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d169      	bne.n	8002dbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <ADC_Enable+0xfc>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e055      	b.n	8002dbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f99e 	bl	8002058 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d1c:	482b      	ldr	r0, [pc, #172]	; (8002dcc <ADC_Enable+0x100>)
 8002d1e:	f7ff f85b 	bl	8001dd8 <LL_ADC_GetCommonPathInternalCh>
 8002d22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d2c:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <ADC_Enable+0x104>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <ADC_Enable+0x108>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d46:	e002      	b.n	8002d4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f9      	bne.n	8002d48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d54:	f7fe ffea 	bl	8001d2c <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d5a:	e028      	b.n	8002dae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f9a1 	bl	80020a8 <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f971 	bl	8002058 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d76:	f7fe ffd9 	bl	8001d2c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d914      	bls.n	8002dae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00d      	beq.n	8002dae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d1cf      	bne.n	8002d5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	8000003f 	.word	0x8000003f
 8002dcc:	50040300 	.word	0x50040300
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	053e2d63 	.word	0x053e2d63

08002dd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f972 	bl	80020ce <LL_ADC_IsDisableOngoing>
 8002dea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff f959 	bl	80020a8 <LL_ADC_IsEnabled>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d047      	beq.n	8002e8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d144      	bne.n	8002e8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030d 	and.w	r3, r3, #13
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10c      	bne.n	8002e2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f933 	bl	8002080 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e22:	f7fe ff83 	bl	8001d2c <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e28:	e029      	b.n	8002e7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e023      	b.n	8002e8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e46:	f7fe ff71 	bl	8001d2c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d914      	bls.n	8002e7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0210 	orr.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1dc      	bne.n	8002e46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d14b      	bne.n	8002f48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d021      	beq.n	8002f0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe ffe5 	bl	8001e9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d032      	beq.n	8002f40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d12b      	bne.n	8002f40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11f      	bne.n	8002f40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f0c:	e018      	b.n	8002f40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7fe fc0f 	bl	8001764 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f46:	e00e      	b.n	8002f66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff facd 	bl	80024f4 <HAL_ADC_ErrorCallback>
}
 8002f5a:	e004      	b.n	8002f66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7fe fbe1 	bl	8001744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff fa9f 	bl	80024f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <LL_ADC_StartCalibration>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003004:	d101      	bne.n	800300a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADCEx_Calibration_Start+0x1c>
 8003030:	2302      	movs	r3, #2
 8003032:	e04d      	b.n	80030d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fecb 	bl	8002dd8 <ADC_Disable>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d136      	bne.n	80030ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003054:	f023 0302 	bic.w	r3, r3, #2
 8003058:	f043 0202 	orr.w	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffa9 	bl	8002fbe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800306c:	e014      	b.n	8003098 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	3301      	adds	r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800307a:	d30d      	bcc.n	8003098 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f023 0312 	bic.w	r3, r3, #18
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01b      	b.n	80030d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ffa7 	bl	8002ff0 <LL_ADC_IsCalibrationOnGoing>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e2      	bne.n	800306e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f023 0303 	bic.w	r3, r3, #3
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
 80030b8:	e005      	b.n	80030c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f043 0210 	orr.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0b      	blt.n	8003166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <__NVIC_EnableIRQ+0x38>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f7ff ff8e 	bl	8003178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff29 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032a0:	f7ff ff3e 	bl	8003120 <__NVIC_GetPriorityGrouping>
 80032a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff ff8e 	bl	80031cc <NVIC_EncodePriority>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff5d 	bl	8003178 <__NVIC_SetPriority>
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff31 	bl	800313c <__NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffa2 	bl	8003234 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_DMA_Start_IT+0x20>
 8003316:	2302      	movs	r3, #2
 8003318:	e04b      	b.n	80033b2 <HAL_DMA_Start_IT+0xb8>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d13a      	bne.n	80033a4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8b0 	bl	80034b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 020e 	orr.w	r2, r2, #14
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e00f      	b.n	8003392 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0204 	bic.w	r2, r2, #4
 8003380:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 020a 	orr.w	r2, r2, #10
 8003390:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e005      	b.n	80033b0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d008      	beq.n	80033e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e022      	b.n	800342a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 020e 	bic.w	r2, r2, #14
 80033f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 021c 	and.w	r2, r3, #28
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d005      	beq.n	800345a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2204      	movs	r2, #4
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e029      	b.n	80034ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020e 	bic.w	r2, r2, #14
 8003468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f003 021c 	and.w	r2, r3, #28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
    }
  }
  return status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 021c 	and.w	r2, r3, #28
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d108      	bne.n	80034fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034fa:	e007      	b.n	800350c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003526:	e148      	b.n	80037ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	4013      	ands	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 813a 	beq.w	80037b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d005      	beq.n	8003558 <HAL_GPIO_Init+0x40>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d130      	bne.n	80035ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358e:	2201      	movs	r2, #1
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d017      	beq.n	80035f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d123      	bne.n	800364a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	08da      	lsrs	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3208      	adds	r2, #8
 800360a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	08da      	lsrs	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3208      	adds	r2, #8
 8003644:	6939      	ldr	r1, [r7, #16]
 8003646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8094 	beq.w	80037b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_GPIO_Init+0x2c0>)
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	4a51      	ldr	r2, [pc, #324]	; (80037d8 <HAL_GPIO_Init+0x2c0>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6613      	str	r3, [r2, #96]	; 0x60
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_GPIO_Init+0x2c0>)
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036a4:	4a4d      	ldr	r2, [pc, #308]	; (80037dc <HAL_GPIO_Init+0x2c4>)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ce:	d00d      	beq.n	80036ec <HAL_GPIO_Init+0x1d4>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <HAL_GPIO_Init+0x2c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <HAL_GPIO_Init+0x1d0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_GPIO_Init+0x2cc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_GPIO_Init+0x1cc>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e004      	b.n	80036ee <HAL_GPIO_Init+0x1d6>
 80036e4:	2307      	movs	r3, #7
 80036e6:	e002      	b.n	80036ee <HAL_GPIO_Init+0x1d6>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_GPIO_Init+0x1d6>
 80036ec:	2300      	movs	r3, #0
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	f002 0203 	and.w	r2, r2, #3
 80036f4:	0092      	lsls	r2, r2, #2
 80036f6:	4093      	lsls	r3, r2
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036fe:	4937      	ldr	r1, [pc, #220]	; (80037dc <HAL_GPIO_Init+0x2c4>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	3302      	adds	r3, #2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800370c:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	43db      	mvns	r3, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003730:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ae:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f47f aeaf 	bne.w	8003528 <HAL_GPIO_Init+0x10>
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40010000 	.word	0x40010000
 80037e0:	48000400 	.word	0x48000400
 80037e4:	48000800 	.word	0x48000800
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003838:	e002      	b.n	8003840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f806 	bl	800387c <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400

0800387c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_PWREx_GetVoltageRange+0x18>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038be:	d130      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d038      	beq.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f4:	e002      	b.n	80038fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d102      	bne.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x60>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f2      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d110      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d007      	beq.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40007000 	.word	0x40007000
 8003954:	20000000 	.word	0x20000000
 8003958:	431bde83 	.word	0x431bde83

0800395c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f000 bc02 	b.w	8004174 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003970:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397a:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80e4 	beq.w	8003b5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4c>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	f040 808b 	bne.w	8003ab6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f040 8087 	bne.w	8003ab6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039a8:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_OscConfig+0x64>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e3d9      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_RCC_OscConfig+0x7e>
 80039d0:	4b7e      	ldr	r3, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	e005      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d223      	bcs.n	8003a32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fd8c 	bl	800450c <RCC_SetFlashLatencyFromMSIRange>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e3ba      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b70      	ldr	r3, [pc, #448]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	496d      	ldr	r1, [pc, #436]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	4968      	ldr	r1, [pc, #416]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
 8003a30:	e025      	b.n	8003a7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a32:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a38:	f043 0308 	orr.w	r3, r3, #8
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4960      	ldr	r1, [pc, #384]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a50:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	495b      	ldr	r1, [pc, #364]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd4c 	bl	800450c <RCC_SetFlashLatencyFromMSIRange>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e37a      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a7e:	f000 fc81 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	4950      	ldr	r1, [pc, #320]	; (8003bd0 <HAL_RCC_OscConfig+0x274>)
 8003a90:	5ccb      	ldrb	r3, [r1, r3]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a4e      	ldr	r2, [pc, #312]	; (8003bd4 <HAL_RCC_OscConfig+0x278>)
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe f8f2 	bl	8001c8c <HAL_InitTick>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d052      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	e35e      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d032      	beq.n	8003b24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003abe:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aca:	f7fe f92f 	bl	8001d2c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad2:	f7fe f92b 	bl	8001d2c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e347      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003af6:	f043 0308 	orr.w	r3, r3, #8
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4930      	ldr	r1, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	492b      	ldr	r1, [pc, #172]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
 8003b22:	e01a      	b.n	8003b5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b30:	f7fe f8fc 	bl	8001d2c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b38:	f7fe f8f8 	bl	8001d2c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e314      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x1dc>
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d073      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_OscConfig+0x21c>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d10e      	bne.n	8003b90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d063      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d15f      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e2f1      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e025      	b.n	8003bf4 <HAL_RCC_OscConfig+0x298>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb0:	d114      	bne.n	8003bdc <HAL_RCC_OscConfig+0x280>
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <HAL_RCC_OscConfig+0x270>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e013      	b.n	8003bf4 <HAL_RCC_OscConfig+0x298>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	0801ba9c 	.word	0x0801ba9c
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004
 8003bdc:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a9f      	ldr	r2, [pc, #636]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b9d      	ldr	r3, [pc, #628]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a9c      	ldr	r2, [pc, #624]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f896 	bl	8001d2c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe f892 	bl	8001d2c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e2ae      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c16:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2a8>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe f882 	bl	8001d2c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f87e 	bl	8001d2c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e29a      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3e:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2d0>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d060      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x310>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d119      	bne.n	8003c9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d116      	bne.n	8003c9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6c:	4b7c      	ldr	r3, [pc, #496]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_OscConfig+0x328>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e277      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b76      	ldr	r3, [pc, #472]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	4973      	ldr	r1, [pc, #460]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c98:	e040      	b.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d023      	beq.n	8003cea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca2:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe f83d 	bl	8001d2c <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f839 	bl	8001d2c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e255      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc8:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	495f      	ldr	r1, [pc, #380]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
 8003ce8:	e018      	b.n	8003d1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5c      	ldr	r2, [pc, #368]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fe f819 	bl	8001d2c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe f815 	bl	8001d2c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e231      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d30:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	4a4a      	ldr	r2, [pc, #296]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fd fff4 	bl	8001d2c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fd fff0 	bl	8001d2c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e20c      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCC_OscConfig+0x3ec>
 8003d68:	e01b      	b.n	8003da2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d70:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd ffd7 	bl	8001d2c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fd ffd3 	bl	8001d2c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1ef      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a6 	beq.w	8003efc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db4:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6593      	str	r3, [r2, #88]	; 0x58
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <HAL_RCC_OscConfig+0x508>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d118      	bne.n	8003e1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <HAL_RCC_OscConfig+0x508>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <HAL_RCC_OscConfig+0x508>)
 8003dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df4:	f7fd ff9a 	bl	8001d2c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fd ff96 	bl	8001d2c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1b2      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_RCC_OscConfig+0x508>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d8>
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e32:	e029      	b.n	8003e88 <HAL_RCC_OscConfig+0x52c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d115      	bne.n	8003e68 <HAL_RCC_OscConfig+0x50c>
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5c:	e014      	b.n	8003e88 <HAL_RCC_OscConfig+0x52c>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
 8003e68:	4b9a      	ldr	r3, [pc, #616]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	4a99      	ldr	r2, [pc, #612]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e78:	4b96      	ldr	r3, [pc, #600]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	4a95      	ldr	r2, [pc, #596]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd ff4c 	bl	8001d2c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd ff48 	bl	8001d2c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e162      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eae:	4b89      	ldr	r3, [pc, #548]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ed      	beq.n	8003e98 <HAL_RCC_OscConfig+0x53c>
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd ff35 	bl	8001d2c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd ff31 	bl	8001d2c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e14b      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003edc:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ed      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef0:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4a77      	ldr	r2, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d03c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01c      	beq.n	8003f4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f16:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd ff04 	bl	8001d2c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f28:	f7fd ff00 	bl	8001d2c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e11c      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f3a:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <HAL_RCC_OscConfig+0x5cc>
 8003f48:	e01b      	b.n	8003f82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f4a:	4b62      	ldr	r3, [pc, #392]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f50:	4a60      	ldr	r2, [pc, #384]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fee7 	bl	8001d2c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f62:	f7fd fee3 	bl	8001d2c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0ff      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f74:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ef      	bne.n	8003f62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80f3 	beq.w	8004172 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	f040 80c9 	bne.w	8004128 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f96:	4b4f      	ldr	r3, [pc, #316]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d12c      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d123      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d11b      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d113      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d109      	bne.n	8004004 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d06b      	beq.n	80040dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d062      	beq.n	80040d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800400a:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0ac      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8004020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004024:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004026:	f7fd fe81 	bl	8001d2c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd fe7d 	bl	8001d2c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e099      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004040:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <HAL_RCC_OscConfig+0x77c>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800405c:	3a01      	subs	r2, #1
 800405e:	0112      	lsls	r2, r2, #4
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004066:	0212      	lsls	r2, r2, #8
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800406e:	0852      	lsrs	r2, r2, #1
 8004070:	3a01      	subs	r2, #1
 8004072:	0552      	lsls	r2, r2, #21
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800407a:	0852      	lsrs	r2, r2, #1
 800407c:	3a01      	subs	r2, #1
 800407e:	0652      	lsls	r2, r2, #25
 8004080:	4311      	orrs	r1, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004086:	06d2      	lsls	r2, r2, #27
 8004088:	430a      	orrs	r2, r1
 800408a:	4912      	ldr	r1, [pc, #72]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040a8:	f7fd fe40 	bl	8001d2c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fd fe3c 	bl	8001d2c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e058      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <HAL_RCC_OscConfig+0x778>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ce:	e050      	b.n	8004172 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04f      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
 80040d4:	40021000 	.word	0x40021000
 80040d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_RCC_OscConfig+0x820>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d144      	bne.n	8004172 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x820>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_RCC_OscConfig+0x820>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x820>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_RCC_OscConfig+0x820>)
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004100:	f7fd fe14 	bl	8001d2c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd fe10 	bl	8001d2c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e02c      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_RCC_OscConfig+0x820>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x7ac>
 8004126:	e024      	b.n	8004172 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d01f      	beq.n	800416e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_RCC_OscConfig+0x820>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_RCC_OscConfig+0x820>)
 8004134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd fdf7 	bl	8001d2c <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd fdf3 	bl	8001d2c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e00f      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_OscConfig+0x820>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_OscConfig+0x820>)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4905      	ldr	r1, [pc, #20]	; (800417c <HAL_RCC_OscConfig+0x820>)
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_OscConfig+0x824>)
 8004168:	4013      	ands	r3, r2
 800416a:	60cb      	str	r3, [r1, #12]
 800416c:	e001      	b.n	8004172 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	feeefffc 	.word	0xfeeefffc

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0e7      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b75      	ldr	r3, [pc, #468]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d910      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b72      	ldr	r3, [pc, #456]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 0207 	bic.w	r2, r3, #7
 80041ae:	4970      	ldr	r1, [pc, #448]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b6e      	ldr	r3, [pc, #440]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cf      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b66      	ldr	r3, [pc, #408]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d908      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b63      	ldr	r3, [pc, #396]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4960      	ldr	r1, [pc, #384]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04c      	beq.n	800429c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d121      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0a6      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004222:	4b54      	ldr	r3, [pc, #336]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d115      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e09a      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800423a:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e08e      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424a:	4b4a      	ldr	r3, [pc, #296]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e086      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800425a:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 0203 	bic.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4943      	ldr	r1, [pc, #268]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fd fd5e 	bl	8001d2c <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	e00a      	b.n	800428a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004274:	f7fd fd5a 	bl	8001d2c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e06e      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 020c 	and.w	r2, r3, #12
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	429a      	cmp	r2, r3
 800429a:	d1eb      	bne.n	8004274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d208      	bcs.n	80042ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	492b      	ldr	r1, [pc, #172]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d210      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 0207 	bic.w	r2, r3, #7
 80042e0:	4923      	ldr	r1, [pc, #140]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <HAL_RCC_ClockConfig+0x1ec>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e036      	b.n	8004368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4918      	ldr	r1, [pc, #96]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4910      	ldr	r1, [pc, #64]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004338:	f000 f824 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	490b      	ldr	r1, [pc, #44]	; (8004378 <HAL_RCC_ClockConfig+0x1f4>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1f8>)
 8004356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1fc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fd fc95 	bl	8001c8c <HAL_InitTick>
 8004362:	4603      	mov	r3, r0
 8004364:	72fb      	strb	r3, [r7, #11]

  return status;
 8004366:	7afb      	ldrb	r3, [r7, #11]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40022000 	.word	0x40022000
 8004374:	40021000 	.word	0x40021000
 8004378:	0801ba9c 	.word	0x0801ba9c
 800437c:	20000000 	.word	0x20000000
 8004380:	20000004 	.word	0x20000004

08004384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004392:	4b3e      	ldr	r3, [pc, #248]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439c:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x34>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d121      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d11e      	bne.n	80043f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043b8:	4b34      	ldr	r3, [pc, #208]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	61fb      	str	r3, [r7, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043d4:	4b2d      	ldr	r3, [pc, #180]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043e0:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <HAL_RCC_GetSysClockFreq+0x110>)
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e004      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d101      	bne.n	800440c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_RCC_GetSysClockFreq+0x114>)
 800440a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d134      	bne.n	800447c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0xa6>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d003      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0xac>
 8004428:	e005      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <HAL_RCC_GetSysClockFreq+0x110>)
 800442c:	617b      	str	r3, [r7, #20]
      break;
 800442e:	e005      	b.n	800443c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_RCC_GetSysClockFreq+0x114>)
 8004432:	617b      	str	r3, [r7, #20]
      break;
 8004434:	e002      	b.n	800443c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	617b      	str	r3, [r7, #20]
      break;
 800443a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	3301      	adds	r3, #1
 8004448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	fb03 f202 	mul.w	r2, r3, r2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_GetSysClockFreq+0x108>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	0e5b      	lsrs	r3, r3, #25
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	3301      	adds	r3, #1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800447c:	69bb      	ldr	r3, [r7, #24]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	0801bab4 	.word	0x0801bab4
 8004494:	00f42400 	.word	0x00f42400
 8004498:	007a1200 	.word	0x007a1200

0800449c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0801baac 	.word	0x0801baac

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e4:	f7ff ffda 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0adb      	lsrs	r3, r3, #11
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	0801baac 	.word	0x0801baac

0800450c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004524:	f7ff f9b6 	bl	8003894 <HAL_PWREx_GetVoltageRange>
 8004528:	6178      	str	r0, [r7, #20]
 800452a:	e014      	b.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004544:	f7ff f9a6 	bl	8003894 <HAL_PWREx_GetVoltageRange>
 8004548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d10b      	bne.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b80      	cmp	r3, #128	; 0x80
 8004562:	d919      	bls.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2ba0      	cmp	r3, #160	; 0xa0
 8004568:	d902      	bls.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800456a:	2302      	movs	r3, #2
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e013      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e010      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d902      	bls.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800457c:	2303      	movs	r3, #3
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e00a      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d102      	bne.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004588:	2302      	movs	r3, #2
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e004      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d101      	bne.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004594:	2301      	movs	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	4909      	ldr	r1, [pc, #36]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40022000 	.word	0x40022000

080045cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045d4:	2300      	movs	r3, #0
 80045d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045d8:	2300      	movs	r3, #0
 80045da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d031      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f0:	d01a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f6:	d814      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004600:	d10f      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004602:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	4a5c      	ldr	r2, [pc, #368]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460e:	e00c      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f9ce 	bl	80049b8 <RCCEx_PLLSAI1_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	74fb      	strb	r3, [r7, #19]
      break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004630:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	494e      	ldr	r1, [pc, #312]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004646:	e001      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 809e 	beq.w	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800465e:	4b46      	ldr	r3, [pc, #280]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468c:	2301      	movs	r3, #1
 800468e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004690:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a39      	ldr	r2, [pc, #228]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800469c:	f7fd fb46 	bl	8001d2c <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046a2:	e009      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fd fb42 	bl	8001d2c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d902      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	74fb      	strb	r3, [r7, #19]
        break;
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ef      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d15a      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01e      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d019      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d016      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fb02 	bl	8001d2c <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472a:	e00b      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fafe 	bl	8001d2c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d902      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	74fb      	strb	r3, [r7, #19]
            break;
 8004742:	e006      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0ec      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800476e:	e009      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
 8004774:	e006      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004784:	7c7b      	ldrb	r3, [r7, #17]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b8a      	ldr	r3, [pc, #552]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	4a89      	ldr	r2, [pc, #548]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047a2:	4b84      	ldr	r3, [pc, #528]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f023 0203 	bic.w	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4980      	ldr	r1, [pc, #512]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047c4:	4b7b      	ldr	r3, [pc, #492]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 020c 	bic.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	4978      	ldr	r1, [pc, #480]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047e6:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	496f      	ldr	r1, [pc, #444]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004808:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	4967      	ldr	r1, [pc, #412]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800482a:	4b62      	ldr	r3, [pc, #392]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	495e      	ldr	r1, [pc, #376]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4956      	ldr	r1, [pc, #344]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486e:	4b51      	ldr	r3, [pc, #324]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	494d      	ldr	r1, [pc, #308]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d028      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004890:	4b48      	ldr	r3, [pc, #288]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4945      	ldr	r1, [pc, #276]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ae:	d106      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b0:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a3f      	ldr	r2, [pc, #252]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ba:	60d3      	str	r3, [r2, #12]
 80048bc:	e011      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2101      	movs	r1, #1
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f872 	bl	80049b8 <RCCEx_PLLSAI1_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d028      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ee:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	492d      	ldr	r1, [pc, #180]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800490c:	d106      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490e:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004918:	60d3      	str	r3, [r2, #12]
 800491a:	e011      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004924:	d10c      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f843 	bl	80049b8 <RCCEx_PLLSAI1_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01c      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495a:	4916      	ldr	r1, [pc, #88]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496a:	d10c      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f820 	bl	80049b8 <RCCEx_PLLSAI1_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000

080049b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049c6:	4b74      	ldr	r3, [pc, #464]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049d2:	4b71      	ldr	r3, [pc, #452]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0203 	and.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d10d      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
       ||
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ea:	4b6b      	ldr	r3, [pc, #428]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
       ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d047      	beq.n	8004a8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e044      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d018      	beq.n	8004a3e <RCCEx_PLLSAI1_Config+0x86>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d825      	bhi.n	8004a5c <RCCEx_PLLSAI1_Config+0xa4>
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d002      	beq.n	8004a1a <RCCEx_PLLSAI1_Config+0x62>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d009      	beq.n	8004a2c <RCCEx_PLLSAI1_Config+0x74>
 8004a18:	e020      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11d      	bne.n	8004a62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2a:	e01a      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a2c:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3c:	e013      	b.n	8004a66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a3e:	4b56      	ldr	r3, [pc, #344]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a4a:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a5a:	e006      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e004      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a72:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	430b      	orrs	r3, r1
 8004a88:	4943      	ldr	r1, [pc, #268]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d17c      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa0:	f7fd f944 	bl	8001d2c <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa6:	e009      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa8:	f7fd f940 	bl	8001d2c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8004aba:	e005      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ef      	bne.n	8004aa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d15f      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d110      	bne.n	8004af6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad4:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004adc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6892      	ldr	r2, [r2, #8]
 8004ae4:	0211      	lsls	r1, r2, #8
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68d2      	ldr	r2, [r2, #12]
 8004aea:	06d2      	lsls	r2, r2, #27
 8004aec:	430a      	orrs	r2, r1
 8004aee:	492a      	ldr	r1, [pc, #168]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	610b      	str	r3, [r1, #16]
 8004af4:	e027      	b.n	8004b46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d112      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	0211      	lsls	r1, r2, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	0852      	lsrs	r2, r2, #1
 8004b14:	3a01      	subs	r2, #1
 8004b16:	0552      	lsls	r2, r2, #21
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	491f      	ldr	r1, [pc, #124]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
 8004b20:	e011      	b.n	8004b46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	0211      	lsls	r1, r2, #8
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6952      	ldr	r2, [r2, #20]
 8004b38:	0852      	lsrs	r2, r2, #1
 8004b3a:	3a01      	subs	r2, #1
 8004b3c:	0652      	lsls	r2, r2, #25
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	4915      	ldr	r1, [pc, #84]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fd f8eb 	bl	8001d2c <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b58:	e009      	b.n	8004b6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b5a:	f7fd f8e7 	bl	8001d2c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d902      	bls.n	8004b6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6c:	e005      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ef      	beq.n	8004b5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	4903      	ldr	r1, [pc, #12]	; (8004b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e049      	b.n	8004c42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fe8a 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 fbf4 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e03b      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_TIM_Base_Start_IT+0x4e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_Base_Start_IT+0x4e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <HAL_TIM_Base_Start_IT+0xa0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d115      	bne.n	8004cc6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b06      	cmp	r3, #6
 8004caa:	d015      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x8c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d011      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc4:	e008      	b.n	8004cd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	00010007 	.word	0x00010007

08004cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e049      	b.n	8004d9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f841 	bl	8004da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fb48 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01b      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0202 	mvn.w	r2, #2
 8004dea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fac2 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e06:	e005      	b.n	8004e14 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fab4 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fac5 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d01b      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f06f 0204 	mvn.w	r2, #4
 8004e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa9c 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e52:	e005      	b.n	8004e60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa8e 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa9f 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01b      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0208 	mvn.w	r2, #8
 8004e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2204      	movs	r2, #4
 8004e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa76 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e9e:	e005      	b.n	8004eac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa68 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa79 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01b      	beq.n	8004efe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0210 	mvn.w	r2, #16
 8004ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa50 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa42 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa53 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00c      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f06f 0201 	mvn.w	r2, #1
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fc fc31 	bl	8001784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fe2d 	bl	8005ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fe25 	bl	8005bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fa12 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f06f 0220 	mvn.w	r2, #32
 8004faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fded 	bl	8005b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0ff      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b14      	cmp	r3, #20
 8004fe6:	f200 80f0 	bhi.w	80051ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	080051cb 	.word	0x080051cb
 8004ff8:	080051cb 	.word	0x080051cb
 8004ffc:	080051cb 	.word	0x080051cb
 8005000:	08005085 	.word	0x08005085
 8005004:	080051cb 	.word	0x080051cb
 8005008:	080051cb 	.word	0x080051cb
 800500c:	080051cb 	.word	0x080051cb
 8005010:	080050c7 	.word	0x080050c7
 8005014:	080051cb 	.word	0x080051cb
 8005018:	080051cb 	.word	0x080051cb
 800501c:	080051cb 	.word	0x080051cb
 8005020:	08005107 	.word	0x08005107
 8005024:	080051cb 	.word	0x080051cb
 8005028:	080051cb 	.word	0x080051cb
 800502c:	080051cb 	.word	0x080051cb
 8005030:	08005149 	.word	0x08005149
 8005034:	080051cb 	.word	0x080051cb
 8005038:	080051cb 	.word	0x080051cb
 800503c:	080051cb 	.word	0x080051cb
 8005040:	08005189 	.word	0x08005189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa20 	bl	8005490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e0a5      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa7c 	bl	8005588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e084      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fad5 	bl	800567c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e064      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fb2d 	bl	800576c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e043      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb6a 	bl	8005828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0208 	orr.w	r2, r2, #8
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005186:	e023      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fba2 	bl	80058d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051c8:	e002      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
      break;
 80051ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0b6      	b.n	800536e <HAL_TIM_ConfigClockSource+0x18a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd8>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8086 	beq.w	800535a <HAL_TIM_ConfigClockSource+0x176>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xaa>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x11e>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x13e>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800529e:	f000 fbef 	bl	8005a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04f      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	f000 fbd8 	bl	8005a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fb4c 	bl	800598c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fba5 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8005300:	e02c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fb6b 	bl	80059ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fb95 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8005320:	e01c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fb2c 	bl	800598c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb85 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8005340:	e00c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fb7c 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 8005352:	e003      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e000      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800535a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <TIM_Base_SetConfig+0xbc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_Base_SetConfig+0x20>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d108      	bne.n	80053fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	; (8005484 <TIM_Base_SetConfig+0xbc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_Base_SetConfig+0x52>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d007      	beq.n	800541a <TIM_Base_SetConfig+0x52>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <TIM_Base_SetConfig+0xc0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_Base_SetConfig+0x52>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1d      	ldr	r2, [pc, #116]	; (800548c <TIM_Base_SetConfig+0xc4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d108      	bne.n	800542c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <TIM_Base_SetConfig+0xbc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0xa0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <TIM_Base_SetConfig+0xc0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0xa0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <TIM_Base_SetConfig+0xc4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d103      	bne.n	8005470 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	615a      	str	r2, [r3, #20]
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400

08005490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	f023 0201 	bic.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 0302 	bic.w	r3, r3, #2
 80054dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_OC1_SetConfig+0xec>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0x70>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_OC1_SetConfig+0xf0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x70>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a22      	ldr	r2, [pc, #136]	; (8005584 <TIM_OC1_SetConfig+0xf4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10c      	bne.n	800551a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0308 	bic.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <TIM_OC1_SetConfig+0xec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_OC1_SetConfig+0xa2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a16      	ldr	r2, [pc, #88]	; (8005580 <TIM_OC1_SetConfig+0xf0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC1_SetConfig+0xa2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC1_SetConfig+0xf4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400

08005588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 0210 	bic.w	r2, r3, #16
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0320 	bic.w	r3, r3, #32
 80055d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a22      	ldr	r2, [pc, #136]	; (8005670 <TIM_OC2_SetConfig+0xe8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d10d      	bne.n	8005608 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005606:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a19      	ldr	r2, [pc, #100]	; (8005670 <TIM_OC2_SetConfig+0xe8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC2_SetConfig+0x98>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <TIM_OC2_SetConfig+0xec>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0x98>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <TIM_OC2_SetConfig+0xf0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d113      	bne.n	8005648 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	621a      	str	r2, [r3, #32]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400

0800567c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10d      	bne.n	80056fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <TIM_OC3_SetConfig+0xe4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC3_SetConfig+0x96>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC3_SetConfig+0xe8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC3_SetConfig+0x96>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC3_SetConfig+0xec>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d113      	bne.n	800573a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400

0800576c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a14      	ldr	r2, [pc, #80]	; (800581c <TIM_OC4_SetConfig+0xb0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_OC4_SetConfig+0x74>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <TIM_OC4_SetConfig+0xb4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_OC4_SetConfig+0x74>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <TIM_OC4_SetConfig+0xb8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d109      	bne.n	80057f4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	019b      	lsls	r3, r3, #6
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400

08005828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800586c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <TIM_OC5_SetConfig+0xa4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d007      	beq.n	8005892 <TIM_OC5_SetConfig+0x6a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <TIM_OC5_SetConfig+0xa8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC5_SetConfig+0x6a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <TIM_OC5_SetConfig+0xac>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d109      	bne.n	80058a6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400

080058d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	051b      	lsls	r3, r3, #20
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <TIM_OC6_SetConfig+0xa8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_OC6_SetConfig+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a13      	ldr	r2, [pc, #76]	; (8005984 <TIM_OC6_SetConfig+0xac>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC6_SetConfig+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a12      	ldr	r2, [pc, #72]	; (8005988 <TIM_OC6_SetConfig+0xb0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d109      	bne.n	8005958 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	029b      	lsls	r3, r3, #10
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400

0800598c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 030a 	bic.w	r3, r3, #10
 80059c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f023 0210 	bic.w	r2, r3, #16
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f043 0307 	orr.w	r3, r3, #7
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e04f      	b.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b40:	d004      	beq.n	8005b4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a10      	ldr	r2, [pc, #64]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10c      	bne.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000

08005b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d178      	bne.n	8005cd2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Transmit+0x24>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e071      	b.n	8005cd4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2221      	movs	r2, #33	; 0x21
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfe:	f7fc f895 	bl	8001d2c <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x68>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c38:	e030      	b.n	8005c9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2180      	movs	r1, #128	; 0x80
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fec9 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e03c      	b.n	8005cd4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	881a      	ldrh	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	3302      	adds	r3, #2
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e008      	b.n	8005c8a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	781a      	ldrb	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	b292      	uxth	r2, r2
 8005c82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1c8      	bne.n	8005c3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2140      	movs	r1, #64	; 0x40
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fe92 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e005      	b.n	8005cd4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e000      	b.n	8005cd4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b0ba      	sub	sp, #232	; 0xe8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d06:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d115      	bne.n	8005d44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00f      	beq.n	8005d44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 82ae 	beq.w	8006296 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
      }
      return;
 8005d42:	e2a8      	b.n	8006296 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8117 	beq.w	8005f7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d5e:	4b85      	ldr	r3, [pc, #532]	; (8005f74 <HAL_UART_IRQHandler+0x298>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 810a 	beq.w	8005f7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d011      	beq.n	8005d98 <HAL_UART_IRQHandler+0xbc>
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8e:	f043 0201 	orr.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d011      	beq.n	8005dc8 <HAL_UART_IRQHandler+0xec>
 8005da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2202      	movs	r2, #2
 8005db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d011      	beq.n	8005df8 <HAL_UART_IRQHandler+0x11c>
 8005dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2204      	movs	r2, #4
 8005de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dee:	f043 0202 	orr.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d017      	beq.n	8005e34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	f043 0208 	orr.w	r2, r3, #8
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d012      	beq.n	8005e66 <HAL_UART_IRQHandler+0x18a>
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00c      	beq.n	8005e66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5c:	f043 0220 	orr.w	r2, r3, #32
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8214 	beq.w	800629a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d005      	beq.n	8005ebe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04f      	beq.n	8005f5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fdf3 	bl	8006aaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d141      	bne.n	8005f56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1d9      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d013      	beq.n	8005f4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2a:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <HAL_UART_IRQHandler+0x29c>)
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fd fa7f 	bl	8003436 <HAL_DMA_Abort_IT>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d017      	beq.n	8005f6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	e00f      	b.n	8005f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9b8 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	e00b      	b.n	8005f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9b4 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9b0 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005f6c:	e195      	b.n	800629a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	bf00      	nop
    return;
 8005f70:	e193      	b.n	800629a <HAL_UART_IRQHandler+0x5be>
 8005f72:	bf00      	nop
 8005f74:	04000120 	.word	0x04000120
 8005f78:	08006b73 	.word	0x08006b73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	f040 814e 	bne.w	8006222 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8147 	beq.w	8006222 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8140 	beq.w	8006222 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	f040 80b8 	bne.w	800612a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8167 	beq.w	800629e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f080 815f 	bcs.w	800629e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 8086 	bne.w	8006108 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800602a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1da      	bne.n	8005ffc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800606a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e1      	bne.n	8006046 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3308      	adds	r3, #8
 80060a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d8:	f023 0310 	bic.w	r3, r3, #16
 80060dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e4      	bne.n	80060c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	4618      	mov	r0, r3
 8006104:	f7fd f959 	bl	80033ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800611a:	b29b      	uxth	r3, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8d8 	bl	80062d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006128:	e0b9      	b.n	800629e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006136:	b29b      	uxth	r3, r3
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 80ab 	beq.w	80062a2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800614c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a6 	beq.w	80062a2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
 800617a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800617e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e4      	bne.n	8006156 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	623b      	str	r3, [r7, #32]
   return(result);
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061b0:	633a      	str	r2, [r7, #48]	; 0x30
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e3      	bne.n	800618c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	69b9      	ldr	r1, [r7, #24]
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	617b      	str	r3, [r7, #20]
   return(result);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e4      	bne.n	80061d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f85c 	bl	80062d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006220:	e03f      	b.n	80062a2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00e      	beq.n	800624c <HAL_UART_IRQHandler+0x570>
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fd3b 	bl	8006cc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800624a:	e02d      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01c      	beq.n	80062a6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
    }
    return;
 8006274:	e017      	b.n	80062a6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d012      	beq.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
 8006282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fc85 	bl	8006b9e <UART_EndTransmit_IT>
    return;
 8006294:	e008      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006296:	bf00      	nop
 8006298:	e006      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80062a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80062a8:	37e8      	adds	r7, #232	; 0xe8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f4:	b08a      	sub	sp, #40	; 0x28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	431a      	orrs	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4313      	orrs	r3, r2
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4bb4      	ldr	r3, [pc, #720]	; (80065f0 <UART_SetConfig+0x300>)
 8006320:	4013      	ands	r3, r2
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006328:	430b      	orrs	r3, r1
 800632a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4aa9      	ldr	r2, [pc, #676]	; (80065f4 <UART_SetConfig+0x304>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	4313      	orrs	r3, r2
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4aa0      	ldr	r2, [pc, #640]	; (80065f8 <UART_SetConfig+0x308>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d126      	bne.n	80063c8 <UART_SetConfig+0xd8>
 800637a:	4ba0      	ldr	r3, [pc, #640]	; (80065fc <UART_SetConfig+0x30c>)
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b03      	cmp	r3, #3
 8006386:	d81b      	bhi.n	80063c0 <UART_SetConfig+0xd0>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0xa0>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063b1 	.word	0x080063b1
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e080      	b.n	80064aa <UART_SetConfig+0x1ba>
 80063a8:	2302      	movs	r3, #2
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ae:	e07c      	b.n	80064aa <UART_SetConfig+0x1ba>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b6:	e078      	b.n	80064aa <UART_SetConfig+0x1ba>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063be:	e074      	b.n	80064aa <UART_SetConfig+0x1ba>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c6:	e070      	b.n	80064aa <UART_SetConfig+0x1ba>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a8c      	ldr	r2, [pc, #560]	; (8006600 <UART_SetConfig+0x310>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d138      	bne.n	8006444 <UART_SetConfig+0x154>
 80063d2:	4b8a      	ldr	r3, [pc, #552]	; (80065fc <UART_SetConfig+0x30c>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d82d      	bhi.n	800643c <UART_SetConfig+0x14c>
 80063e0:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <UART_SetConfig+0xf8>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	0800643d 	.word	0x0800643d
 8006404:	0800643d 	.word	0x0800643d
 8006408:	08006425 	.word	0x08006425
 800640c:	0800643d 	.word	0x0800643d
 8006410:	0800643d 	.word	0x0800643d
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006435 	.word	0x08006435
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006422:	e042      	b.n	80064aa <UART_SetConfig+0x1ba>
 8006424:	2302      	movs	r3, #2
 8006426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642a:	e03e      	b.n	80064aa <UART_SetConfig+0x1ba>
 800642c:	2304      	movs	r3, #4
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006432:	e03a      	b.n	80064aa <UART_SetConfig+0x1ba>
 8006434:	2308      	movs	r3, #8
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643a:	e036      	b.n	80064aa <UART_SetConfig+0x1ba>
 800643c:	2310      	movs	r3, #16
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e032      	b.n	80064aa <UART_SetConfig+0x1ba>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a6a      	ldr	r2, [pc, #424]	; (80065f4 <UART_SetConfig+0x304>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d12a      	bne.n	80064a4 <UART_SetConfig+0x1b4>
 800644e:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <UART_SetConfig+0x30c>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800645c:	d01a      	beq.n	8006494 <UART_SetConfig+0x1a4>
 800645e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006462:	d81b      	bhi.n	800649c <UART_SetConfig+0x1ac>
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006468:	d00c      	beq.n	8006484 <UART_SetConfig+0x194>
 800646a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646e:	d815      	bhi.n	800649c <UART_SetConfig+0x1ac>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <UART_SetConfig+0x18c>
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	d008      	beq.n	800648c <UART_SetConfig+0x19c>
 800647a:	e00f      	b.n	800649c <UART_SetConfig+0x1ac>
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006482:	e012      	b.n	80064aa <UART_SetConfig+0x1ba>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648a:	e00e      	b.n	80064aa <UART_SetConfig+0x1ba>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006492:	e00a      	b.n	80064aa <UART_SetConfig+0x1ba>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649a:	e006      	b.n	80064aa <UART_SetConfig+0x1ba>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a2:	e002      	b.n	80064aa <UART_SetConfig+0x1ba>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a51      	ldr	r2, [pc, #324]	; (80065f4 <UART_SetConfig+0x304>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d17a      	bne.n	80065aa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d824      	bhi.n	8006506 <UART_SetConfig+0x216>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x1d4>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	08006507 	.word	0x08006507
 80064d4:	080064f7 	.word	0x080064f7
 80064d8:	08006507 	.word	0x08006507
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006507 	.word	0x08006507
 80064e4:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fd ffe4 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b44      	ldr	r3, [pc, #272]	; (8006604 <UART_SetConfig+0x314>)
 80064f2:	61fb      	str	r3, [r7, #28]
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fd ff45 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 80064fa:	61f8      	str	r0, [r7, #28]
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8107 	beq.w	8006728 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	429a      	cmp	r2, r3
 8006528:	d305      	bcc.n	8006536 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	429a      	cmp	r2, r3
 8006534:	d903      	bls.n	800653e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800653c:	e0f4      	b.n	8006728 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2200      	movs	r2, #0
 8006542:	461c      	mov	r4, r3
 8006544:	4615      	mov	r5, r2
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	022b      	lsls	r3, r5, #8
 8006550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006554:	0222      	lsls	r2, r4, #8
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6849      	ldr	r1, [r1, #4]
 800655a:	0849      	lsrs	r1, r1, #1
 800655c:	2000      	movs	r0, #0
 800655e:	4688      	mov	r8, r1
 8006560:	4681      	mov	r9, r0
 8006562:	eb12 0a08 	adds.w	sl, r2, r8
 8006566:	eb43 0b09 	adc.w	fp, r3, r9
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006578:	4650      	mov	r0, sl
 800657a:	4659      	mov	r1, fp
 800657c:	f7fa fa66 	bl	8000a4c <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4613      	mov	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658e:	d308      	bcc.n	80065a2 <UART_SetConfig+0x2b2>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006596:	d204      	bcs.n	80065a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	e0c2      	b.n	8006728 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065a8:	e0be      	b.n	8006728 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b2:	d16a      	bne.n	800668a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80065b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d834      	bhi.n	8006626 <UART_SetConfig+0x336>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x2d4>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006609 	.word	0x08006609
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006627 	.word	0x08006627
 80065d4:	08006617 	.word	0x08006617
 80065d8:	08006627 	.word	0x08006627
 80065dc:	08006627 	.word	0x08006627
 80065e0:	08006627 	.word	0x08006627
 80065e4:	0800661f 	.word	0x0800661f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fd ff64 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e020      	b.n	8006632 <UART_SetConfig+0x342>
 80065f0:	efff69f3 	.word	0xefff69f3
 80065f4:	40008000 	.word	0x40008000
 80065f8:	40013800 	.word	0x40013800
 80065fc:	40021000 	.word	0x40021000
 8006600:	40004400 	.word	0x40004400
 8006604:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006608:	f7fd ff6a 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 800660c:	61f8      	str	r0, [r7, #28]
        break;
 800660e:	e010      	b.n	8006632 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006610:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <UART_SetConfig+0x454>)
 8006612:	61fb      	str	r3, [r7, #28]
        break;
 8006614:	e00d      	b.n	8006632 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006616:	f7fd feb5 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 800661a:	61f8      	str	r0, [r7, #28]
        break;
 800661c:	e009      	b.n	8006632 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	61fb      	str	r3, [r7, #28]
        break;
 8006624:	e005      	b.n	8006632 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d077      	beq.n	8006728 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	005a      	lsls	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	441a      	add	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d916      	bls.n	8006682 <UART_SetConfig+0x392>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665a:	d212      	bcs.n	8006682 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f023 030f 	bic.w	r3, r3, #15
 8006664:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	085b      	lsrs	r3, r3, #1
 800666a:	b29b      	uxth	r3, r3
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	b29a      	uxth	r2, r3
 8006672:	8afb      	ldrh	r3, [r7, #22]
 8006674:	4313      	orrs	r3, r2
 8006676:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	8afa      	ldrh	r2, [r7, #22]
 800667e:	60da      	str	r2, [r3, #12]
 8006680:	e052      	b.n	8006728 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006688:	e04e      	b.n	8006728 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800668e:	2b08      	cmp	r3, #8
 8006690:	d827      	bhi.n	80066e2 <UART_SetConfig+0x3f2>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0x3a8>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066e3 	.word	0x080066e3
 80066a8:	080066d3 	.word	0x080066d3
 80066ac:	080066e3 	.word	0x080066e3
 80066b0:	080066e3 	.word	0x080066e3
 80066b4:	080066e3 	.word	0x080066e3
 80066b8:	080066db 	.word	0x080066db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066bc:	f7fd fefa 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80066c0:	61f8      	str	r0, [r7, #28]
        break;
 80066c2:	e014      	b.n	80066ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c4:	f7fd ff0c 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 80066c8:	61f8      	str	r0, [r7, #28]
        break;
 80066ca:	e010      	b.n	80066ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <UART_SetConfig+0x454>)
 80066ce:	61fb      	str	r3, [r7, #28]
        break;
 80066d0:	e00d      	b.n	80066ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d2:	f7fd fe57 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 80066d6:	61f8      	str	r0, [r7, #28]
        break;
 80066d8:	e009      	b.n	80066ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066de:	61fb      	str	r3, [r7, #28]
        break;
 80066e0:	e005      	b.n	80066ee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066ec:	bf00      	nop
    }

    if (pclk != 0U)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	085a      	lsrs	r2, r3, #1
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	441a      	add	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	d909      	bls.n	8006722 <UART_SetConfig+0x432>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006714:	d205      	bcs.n	8006722 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60da      	str	r2, [r3, #12]
 8006720:	e002      	b.n	8006728 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006734:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006738:	4618      	mov	r0, r3
 800673a:	3728      	adds	r7, #40	; 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006742:	bf00      	nop
 8006744:	00f42400 	.word	0x00f42400

08006748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006846:	d10a      	bne.n	800685e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b098      	sub	sp, #96	; 0x60
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800689c:	f7fb fa46 	bl	8001d2c <HAL_GetTick>
 80068a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d12e      	bne.n	800690e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f88c 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d021      	beq.n	800690e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e062      	b.n	80069d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b04      	cmp	r3, #4
 800691a:	d149      	bne.n	80069b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006924:	2200      	movs	r2, #0
 8006926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f856 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d03c      	beq.n	80069b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	623b      	str	r3, [r7, #32]
   return(result);
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
 8006956:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60fb      	str	r3, [r7, #12]
   return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006988:	61fa      	str	r2, [r7, #28]
 800698a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	617b      	str	r3, [r7, #20]
   return(result);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e011      	b.n	80069d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3758      	adds	r7, #88	; 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e049      	b.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d045      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fb f999 	bl	8001d2c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e048      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d031      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d110      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2208      	movs	r2, #8
 8006a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f838 	bl	8006aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e029      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d111      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f81e 	bl	8006aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e00f      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	bf0c      	ite	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	2300      	movne	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d0a6      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b095      	sub	sp, #84	; 0x54
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d118      	bne.n	8006b52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f023 0310 	bic.w	r3, r3, #16
 8006b34:	647b      	str	r3, [r7, #68]	; 0x44
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6979      	ldr	r1, [r7, #20]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b66:	bf00      	nop
 8006b68:	3754      	adds	r7, #84	; 0x54
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fb97 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fb63 	bl	80062b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bea:	bf00      	nop
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e056      	b.n	8006cb8 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d106      	bne.n	8006c20 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7fa fe82 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2224      	movs	r2, #36	; 0x24
 8006c24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fd82 	bl	8006748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7ff fb53 	bl	80062f0 <UART_SetConfig>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e031      	b.n	8006cb8 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c62:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	055b      	lsls	r3, r3, #21
 8006c7c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006c92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	6979      	ldr	r1, [r7, #20]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff fdeb 	bl	800688c <UART_CheckIdleState>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <DWT_Delay_ms+0x44>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8006ce2:	f7fd fbdb 	bl	800449c <HAL_RCC_GetHCLKFreq>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <DWT_Delay_ms+0x48>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8006cfc:	bf00      	nop
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <DWT_Delay_ms+0x44>)
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1ad2      	subs	r2, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d3f8      	bcc.n	8006cfe <DWT_Delay_ms+0x2a>
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	e0001000 	.word	0xe0001000
 8006d1c:	10624dd3 	.word	0x10624dd3

08006d20 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d26:	f107 0310 	add.w	r3, r7, #16
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8006d42:	f000 fcb7 	bl	80076b4 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d4c:	e102      	b.n	8006f54 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d54:	e079      	b.n	8006e4a <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8006d56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d5a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d5e:	4889      	ldr	r0, [pc, #548]	; (8006f84 <STEPPERS_Init+0x264>)
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	440b      	add	r3, r1
 8006d68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d70:	d10c      	bne.n	8006d8c <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	4b85      	ldr	r3, [pc, #532]	; (8006f88 <STEPPERS_Init+0x268>)
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	4a84      	ldr	r2, [pc, #528]	; (8006f88 <STEPPERS_Init+0x268>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d7e:	4b82      	ldr	r3, [pc, #520]	; (8006f88 <STEPPERS_Init+0x268>)
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	e034      	b.n	8006df6 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8006d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d90:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d94:	487b      	ldr	r0, [pc, #492]	; (8006f84 <STEPPERS_Init+0x264>)
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006da2:	4a7a      	ldr	r2, [pc, #488]	; (8006f8c <STEPPERS_Init+0x26c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10c      	bne.n	8006dc2 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da8:	4b77      	ldr	r3, [pc, #476]	; (8006f88 <STEPPERS_Init+0x268>)
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	4a76      	ldr	r2, [pc, #472]	; (8006f88 <STEPPERS_Init+0x268>)
 8006dae:	f043 0302 	orr.w	r3, r3, #2
 8006db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006db4:	4b74      	ldr	r3, [pc, #464]	; (8006f88 <STEPPERS_Init+0x268>)
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	e019      	b.n	8006df6 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8006dc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dc6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006dca:	486e      	ldr	r0, [pc, #440]	; (8006f84 <STEPPERS_Init+0x264>)
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006dd8:	4a6d      	ldr	r2, [pc, #436]	; (8006f90 <STEPPERS_Init+0x270>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10b      	bne.n	8006df6 <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dde:	4b6a      	ldr	r3, [pc, #424]	; (8006f88 <STEPPERS_Init+0x268>)
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	4a69      	ldr	r2, [pc, #420]	; (8006f88 <STEPPERS_Init+0x268>)
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dea:	4b67      	ldr	r3, [pc, #412]	; (8006f88 <STEPPERS_Init+0x268>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8006df6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dfa:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006dfe:	4861      	ldr	r0, [pc, #388]	; (8006f84 <STEPPERS_Init+0x264>)
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	440b      	add	r3, r1
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006e10:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e12:	2301      	movs	r3, #1
 8006e14:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8006e1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e22:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006e26:	4857      	ldr	r0, [pc, #348]	; (8006f84 <STEPPERS_Init+0x264>)
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	440b      	add	r3, r1
 8006e30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e34:	f107 0210 	add.w	r2, r7, #16
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fc fb6c 	bl	8003518 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8006e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e44:	3301      	adds	r3, #1
 8006e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d981      	bls.n	8006d56 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CCW;
 8006e52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e56:	494f      	ldr	r1, [pc, #316]	; (8006f94 <STEPPERS_Init+0x274>)
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	3311      	adds	r3, #17
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8006e68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e6c:	4949      	ldr	r1, [pc, #292]	; (8006f94 <STEPPERS_Init+0x274>)
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	330f      	adds	r3, #15
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8006e7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e82:	4944      	ldr	r1, [pc, #272]	; (8006f94 <STEPPERS_Init+0x274>)
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8006e92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e96:	493f      	ldr	r1, [pc, #252]	; (8006f94 <STEPPERS_Init+0x274>)
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8006ea8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006eac:	4939      	ldr	r1, [pc, #228]	; (8006f94 <STEPPERS_Init+0x274>)
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3308      	adds	r3, #8
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8006ebe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ec2:	4934      	ldr	r1, [pc, #208]	; (8006f94 <STEPPERS_Init+0x274>)
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	330e      	adds	r3, #14
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8006ed4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ed8:	492a      	ldr	r1, [pc, #168]	; (8006f84 <STEPPERS_Init+0x264>)
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	331b      	adds	r3, #27
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d00b      	beq.n	8006f04 <STEPPERS_Init+0x1e4>
 8006eec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ef0:	4924      	ldr	r1, [pc, #144]	; (8006f84 <STEPPERS_Init+0x264>)
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	331b      	adds	r3, #27
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10b      	bne.n	8006f1c <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8006f04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f08:	4922      	ldr	r1, [pc, #136]	; (8006f94 <STEPPERS_Init+0x274>)
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	3310      	adds	r3, #16
 8006f16:	2204      	movs	r2, #4
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e016      	b.n	8006f4a <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8006f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f20:	4918      	ldr	r1, [pc, #96]	; (8006f84 <STEPPERS_Init+0x264>)
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	331b      	adds	r3, #27
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d10a      	bne.n	8006f4a <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8006f34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f38:	4916      	ldr	r1, [pc, #88]	; (8006f94 <STEPPERS_Init+0x274>)
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	3310      	adds	r3, #16
 8006f46:	2208      	movs	r2, #8
 8006f48:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8006f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f43f aef8 	beq.w	8006d4e <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f62:	2301      	movs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f6e:	f107 0310 	add.w	r3, r7, #16
 8006f72:	4619      	mov	r1, r3
 8006f74:	4805      	ldr	r0, [pc, #20]	; (8006f8c <STEPPERS_Init+0x26c>)
 8006f76:	f7fc facf 	bl	8003518 <HAL_GPIO_Init>
}
 8006f7a:	bf00      	nop
 8006f7c:	3728      	adds	r7, #40	; 0x28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	0801bae4 	.word	0x0801bae4
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	48000400 	.word	0x48000400
 8006f90:	48000800 	.word	0x48000800
 8006f94:	20000428 	.word	0x20000428

08006f98 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	460a      	mov	r2, r1
 8006fa2:	71fb      	strb	r3, [r7, #7]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8006fac:	79fa      	ldrb	r2, [r7, #7]
 8006fae:	4928      	ldr	r1, [pc, #160]	; (8007050 <STEPPER_SetSpeed+0xb8>)
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	330c      	adds	r3, #12
 8006fbc:	88ba      	ldrh	r2, [r7, #4]
 8006fbe:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8006fc0:	79fa      	ldrb	r2, [r7, #7]
 8006fc2:	4924      	ldr	r1, [pc, #144]	; (8007054 <STEPPER_SetSpeed+0xbc>)
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	331b      	adds	r3, #27
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d10b      	bne.n	8006fee <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	491e      	ldr	r1, [pc, #120]	; (8007054 <STEPPER_SetSpeed+0xbc>)
 8006fda:	4613      	mov	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e009      	b.n	8007002 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8006fee:	79fa      	ldrb	r2, [r7, #7]
 8006ff0:	4918      	ldr	r1, [pc, #96]	; (8007054 <STEPPER_SetSpeed+0xbc>)
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8007002:	88bb      	ldrh	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	4618      	mov	r0, r3
 800700c:	f7f9 fa72 	bl	80004f4 <__aeabi_ui2d>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	a10c      	add	r1, pc, #48	; (adr r1, 8007048 <STEPPER_SetSpeed+0xb0>)
 8007016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800701a:	f7f9 fc0f 	bl	800083c <__aeabi_ddiv>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	79fc      	ldrb	r4, [r7, #7]
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	f7f9 fcf0 	bl	8000a0c <__aeabi_d2uiz>
 800702c:	4602      	mov	r2, r0
 800702e:	4908      	ldr	r1, [pc, #32]	; (8007050 <STEPPER_SetSpeed+0xb8>)
 8007030:	4623      	mov	r3, r4
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4423      	add	r3, r4
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3308      	adds	r3, #8
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}
 8007046:	bf00      	nop
 8007048:	00000000 	.word	0x00000000
 800704c:	40ed4c00 	.word	0x40ed4c00
 8007050:	20000428 	.word	0x20000428
 8007054:	0801bae4 	.word	0x0801bae4

08007058 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8007062:	79fa      	ldrb	r2, [r7, #7]
 8007064:	4999      	ldr	r1, [pc, #612]	; (80072cc <STEPPER_One_Step+0x274>)
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	331a      	adds	r3, #26
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 81c4 	bne.w	8007402 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800707a:	79fa      	ldrb	r2, [r7, #7]
 800707c:	4993      	ldr	r1, [pc, #588]	; (80072cc <STEPPER_One_Step+0x274>)
 800707e:	4613      	mov	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	331b      	adds	r3, #27
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 8088 	bne.w	80071a2 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007092:	79fa      	ldrb	r2, [r7, #7]
 8007094:	498d      	ldr	r1, [pc, #564]	; (80072cc <STEPPER_One_Step+0x274>)
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	4989      	ldr	r1, [pc, #548]	; (80072cc <STEPPER_One_Step+0x274>)
 80070a6:	4613      	mov	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	3310      	adds	r3, #16
 80070b2:	8819      	ldrh	r1, [r3, #0]
 80070b4:	79fa      	ldrb	r2, [r7, #7]
 80070b6:	4c86      	ldr	r4, [pc, #536]	; (80072d0 <STEPPER_One_Step+0x278>)
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4423      	add	r3, r4
 80070c2:	330f      	adds	r3, #15
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	4b82      	ldr	r3, [pc, #520]	; (80072d4 <STEPPER_One_Step+0x27c>)
 80070ca:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fc fba4 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80070d4:	79fa      	ldrb	r2, [r7, #7]
 80070d6:	497d      	ldr	r1, [pc, #500]	; (80072cc <STEPPER_One_Step+0x274>)
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3304      	adds	r3, #4
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	79fa      	ldrb	r2, [r7, #7]
 80070e8:	4978      	ldr	r1, [pc, #480]	; (80072cc <STEPPER_One_Step+0x274>)
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3312      	adds	r3, #18
 80070f6:	8819      	ldrh	r1, [r3, #0]
 80070f8:	79fa      	ldrb	r2, [r7, #7]
 80070fa:	4c75      	ldr	r4, [pc, #468]	; (80072d0 <STEPPER_One_Step+0x278>)
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4423      	add	r3, r4
 8007106:	330f      	adds	r3, #15
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4a72      	ldr	r2, [pc, #456]	; (80072d4 <STEPPER_One_Step+0x27c>)
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fc fb82 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007118:	79fa      	ldrb	r2, [r7, #7]
 800711a:	496c      	ldr	r1, [pc, #432]	; (80072cc <STEPPER_One_Step+0x274>)
 800711c:	4613      	mov	r3, r2
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	3308      	adds	r3, #8
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	79fa      	ldrb	r2, [r7, #7]
 800712c:	4967      	ldr	r1, [pc, #412]	; (80072cc <STEPPER_One_Step+0x274>)
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3314      	adds	r3, #20
 800713a:	8819      	ldrh	r1, [r3, #0]
 800713c:	79fa      	ldrb	r2, [r7, #7]
 800713e:	4c64      	ldr	r4, [pc, #400]	; (80072d0 <STEPPER_One_Step+0x278>)
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4423      	add	r3, r4
 800714a:	330f      	adds	r3, #15
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4a61      	ldr	r2, [pc, #388]	; (80072d4 <STEPPER_One_Step+0x27c>)
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	789b      	ldrb	r3, [r3, #2]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fc fb60 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800715c:	79fa      	ldrb	r2, [r7, #7]
 800715e:	495b      	ldr	r1, [pc, #364]	; (80072cc <STEPPER_One_Step+0x274>)
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	330c      	adds	r3, #12
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	79fa      	ldrb	r2, [r7, #7]
 8007170:	4956      	ldr	r1, [pc, #344]	; (80072cc <STEPPER_One_Step+0x274>)
 8007172:	4613      	mov	r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	3316      	adds	r3, #22
 800717e:	8819      	ldrh	r1, [r3, #0]
 8007180:	79fa      	ldrb	r2, [r7, #7]
 8007182:	4c53      	ldr	r4, [pc, #332]	; (80072d0 <STEPPER_One_Step+0x278>)
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4423      	add	r3, r4
 800718e:	330f      	adds	r3, #15
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4a50      	ldr	r2, [pc, #320]	; (80072d4 <STEPPER_One_Step+0x27c>)
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	78db      	ldrb	r3, [r3, #3]
 800719a:	461a      	mov	r2, r3
 800719c:	f7fc fb3e 	bl	800381c <HAL_GPIO_WritePin>
 80071a0:	e12f      	b.n	8007402 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80071a2:	79fa      	ldrb	r2, [r7, #7]
 80071a4:	4949      	ldr	r1, [pc, #292]	; (80072cc <STEPPER_One_Step+0x274>)
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	331b      	adds	r3, #27
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 8091 	bne.w	80072dc <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80071ba:	79fa      	ldrb	r2, [r7, #7]
 80071bc:	4943      	ldr	r1, [pc, #268]	; (80072cc <STEPPER_One_Step+0x274>)
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	79fa      	ldrb	r2, [r7, #7]
 80071cc:	493f      	ldr	r1, [pc, #252]	; (80072cc <STEPPER_One_Step+0x274>)
 80071ce:	4613      	mov	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	3310      	adds	r3, #16
 80071da:	8819      	ldrh	r1, [r3, #0]
 80071dc:	79fa      	ldrb	r2, [r7, #7]
 80071de:	4c3c      	ldr	r4, [pc, #240]	; (80072d0 <STEPPER_One_Step+0x278>)
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4423      	add	r3, r4
 80071ea:	330f      	adds	r3, #15
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <STEPPER_One_Step+0x280>)
 80071f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f7fc fb10 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	4933      	ldr	r1, [pc, #204]	; (80072cc <STEPPER_One_Step+0x274>)
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	3304      	adds	r3, #4
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	79fa      	ldrb	r2, [r7, #7]
 8007210:	492e      	ldr	r1, [pc, #184]	; (80072cc <STEPPER_One_Step+0x274>)
 8007212:	4613      	mov	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3312      	adds	r3, #18
 800721e:	8819      	ldrh	r1, [r3, #0]
 8007220:	79fa      	ldrb	r2, [r7, #7]
 8007222:	4c2b      	ldr	r4, [pc, #172]	; (80072d0 <STEPPER_One_Step+0x278>)
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4423      	add	r3, r4
 800722e:	330f      	adds	r3, #15
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	4a29      	ldr	r2, [pc, #164]	; (80072d8 <STEPPER_One_Step+0x280>)
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	461a      	mov	r2, r3
 800723c:	f7fc faee 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007240:	79fa      	ldrb	r2, [r7, #7]
 8007242:	4922      	ldr	r1, [pc, #136]	; (80072cc <STEPPER_One_Step+0x274>)
 8007244:	4613      	mov	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	1a9b      	subs	r3, r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	3308      	adds	r3, #8
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	79fa      	ldrb	r2, [r7, #7]
 8007254:	491d      	ldr	r1, [pc, #116]	; (80072cc <STEPPER_One_Step+0x274>)
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	3314      	adds	r3, #20
 8007262:	8819      	ldrh	r1, [r3, #0]
 8007264:	79fa      	ldrb	r2, [r7, #7]
 8007266:	4c1a      	ldr	r4, [pc, #104]	; (80072d0 <STEPPER_One_Step+0x278>)
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4423      	add	r3, r4
 8007272:	330f      	adds	r3, #15
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <STEPPER_One_Step+0x280>)
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	461a      	mov	r2, r3
 8007280:	f7fc facc 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	4911      	ldr	r1, [pc, #68]	; (80072cc <STEPPER_One_Step+0x274>)
 8007288:	4613      	mov	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	330c      	adds	r3, #12
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	79fa      	ldrb	r2, [r7, #7]
 8007298:	490c      	ldr	r1, [pc, #48]	; (80072cc <STEPPER_One_Step+0x274>)
 800729a:	4613      	mov	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	3316      	adds	r3, #22
 80072a6:	8819      	ldrh	r1, [r3, #0]
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	4c09      	ldr	r4, [pc, #36]	; (80072d0 <STEPPER_One_Step+0x278>)
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4423      	add	r3, r4
 80072b6:	330f      	adds	r3, #15
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <STEPPER_One_Step+0x280>)
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	78db      	ldrb	r3, [r3, #3]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fc faaa 	bl	800381c <HAL_GPIO_WritePin>
 80072c8:	e09b      	b.n	8007402 <STEPPER_One_Step+0x3aa>
 80072ca:	bf00      	nop
 80072cc:	0801bae4 	.word	0x0801bae4
 80072d0:	20000428 	.word	0x20000428
 80072d4:	2000000c 	.word	0x2000000c
 80072d8:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80072dc:	79fa      	ldrb	r2, [r7, #7]
 80072de:	4988      	ldr	r1, [pc, #544]	; (8007500 <STEPPER_One_Step+0x4a8>)
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	331b      	adds	r3, #27
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	f040 8087 	bne.w	8007402 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	4982      	ldr	r1, [pc, #520]	; (8007500 <STEPPER_One_Step+0x4a8>)
 80072f8:	4613      	mov	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	79fa      	ldrb	r2, [r7, #7]
 8007306:	497e      	ldr	r1, [pc, #504]	; (8007500 <STEPPER_One_Step+0x4a8>)
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	3310      	adds	r3, #16
 8007314:	8819      	ldrh	r1, [r3, #0]
 8007316:	79fa      	ldrb	r2, [r7, #7]
 8007318:	4c7a      	ldr	r4, [pc, #488]	; (8007504 <STEPPER_One_Step+0x4ac>)
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4423      	add	r3, r4
 8007324:	330f      	adds	r3, #15
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	4b77      	ldr	r3, [pc, #476]	; (8007508 <STEPPER_One_Step+0x4b0>)
 800732c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007330:	461a      	mov	r2, r3
 8007332:	f7fc fa73 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007336:	79fa      	ldrb	r2, [r7, #7]
 8007338:	4971      	ldr	r1, [pc, #452]	; (8007500 <STEPPER_One_Step+0x4a8>)
 800733a:	4613      	mov	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	3304      	adds	r3, #4
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	79fa      	ldrb	r2, [r7, #7]
 800734a:	496d      	ldr	r1, [pc, #436]	; (8007500 <STEPPER_One_Step+0x4a8>)
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	3312      	adds	r3, #18
 8007358:	8819      	ldrh	r1, [r3, #0]
 800735a:	79fa      	ldrb	r2, [r7, #7]
 800735c:	4c69      	ldr	r4, [pc, #420]	; (8007504 <STEPPER_One_Step+0x4ac>)
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4423      	add	r3, r4
 8007368:	330f      	adds	r3, #15
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	4a66      	ldr	r2, [pc, #408]	; (8007508 <STEPPER_One_Step+0x4b0>)
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	461a      	mov	r2, r3
 8007376:	f7fc fa51 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800737a:	79fa      	ldrb	r2, [r7, #7]
 800737c:	4960      	ldr	r1, [pc, #384]	; (8007500 <STEPPER_One_Step+0x4a8>)
 800737e:	4613      	mov	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	3308      	adds	r3, #8
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	79fa      	ldrb	r2, [r7, #7]
 800738e:	495c      	ldr	r1, [pc, #368]	; (8007500 <STEPPER_One_Step+0x4a8>)
 8007390:	4613      	mov	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	3314      	adds	r3, #20
 800739c:	8819      	ldrh	r1, [r3, #0]
 800739e:	79fa      	ldrb	r2, [r7, #7]
 80073a0:	4c58      	ldr	r4, [pc, #352]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4423      	add	r3, r4
 80073ac:	330f      	adds	r3, #15
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4a55      	ldr	r2, [pc, #340]	; (8007508 <STEPPER_One_Step+0x4b0>)
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f7fc fa2f 	bl	800381c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80073be:	79fa      	ldrb	r2, [r7, #7]
 80073c0:	494f      	ldr	r1, [pc, #316]	; (8007500 <STEPPER_One_Step+0x4a8>)
 80073c2:	4613      	mov	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	330c      	adds	r3, #12
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	494b      	ldr	r1, [pc, #300]	; (8007500 <STEPPER_One_Step+0x4a8>)
 80073d4:	4613      	mov	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3316      	adds	r3, #22
 80073e0:	8819      	ldrh	r1, [r3, #0]
 80073e2:	79fa      	ldrb	r2, [r7, #7]
 80073e4:	4c47      	ldr	r4, [pc, #284]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4423      	add	r3, r4
 80073f0:	330f      	adds	r3, #15
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	4a44      	ldr	r2, [pc, #272]	; (8007508 <STEPPER_One_Step+0x4b0>)
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	78db      	ldrb	r3, [r3, #3]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f7fc fa0d 	bl	800381c <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8007402:	79fa      	ldrb	r2, [r7, #7]
 8007404:	493f      	ldr	r1, [pc, #252]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	3311      	adds	r3, #17
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d132      	bne.n	800747e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8007418:	79fa      	ldrb	r2, [r7, #7]
 800741a:	493a      	ldr	r1, [pc, #232]	; (8007504 <STEPPER_One_Step+0x4ac>)
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	330f      	adds	r3, #15
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d112      	bne.n	8007454 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800742e:	79f9      	ldrb	r1, [r7, #7]
 8007430:	79fa      	ldrb	r2, [r7, #7]
 8007432:	4834      	ldr	r0, [pc, #208]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007434:	460b      	mov	r3, r1
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4403      	add	r3, r0
 800743e:	3310      	adds	r3, #16
 8007440:	7818      	ldrb	r0, [r3, #0]
 8007442:	4930      	ldr	r1, [pc, #192]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	330f      	adds	r3, #15
 8007450:	4602      	mov	r2, r0
 8007452:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8007454:	79fa      	ldrb	r2, [r7, #7]
 8007456:	492b      	ldr	r1, [pc, #172]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	330f      	adds	r3, #15
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	3b01      	subs	r3, #1
 8007468:	b2d8      	uxtb	r0, r3
 800746a:	4926      	ldr	r1, [pc, #152]	; (8007504 <STEPPER_One_Step+0x4ac>)
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	330f      	adds	r3, #15
 8007478:	4602      	mov	r2, r0
 800747a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800747c:	e03c      	b.n	80074f8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800747e:	79fa      	ldrb	r2, [r7, #7]
 8007480:	4920      	ldr	r1, [pc, #128]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	3311      	adds	r3, #17
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d131      	bne.n	80074f8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8007494:	79fa      	ldrb	r2, [r7, #7]
 8007496:	491b      	ldr	r1, [pc, #108]	; (8007504 <STEPPER_One_Step+0x4ac>)
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	330f      	adds	r3, #15
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	b2d8      	uxtb	r0, r3
 80074aa:	4916      	ldr	r1, [pc, #88]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	330f      	adds	r3, #15
 80074b8:	4602      	mov	r2, r0
 80074ba:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80074bc:	79fa      	ldrb	r2, [r7, #7]
 80074be:	4911      	ldr	r1, [pc, #68]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	330f      	adds	r3, #15
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	79fa      	ldrb	r2, [r7, #7]
 80074d0:	480c      	ldr	r0, [pc, #48]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4403      	add	r3, r0
 80074dc:	3310      	adds	r3, #16
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4299      	cmp	r1, r3
 80074e2:	d109      	bne.n	80074f8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80074e4:	79fa      	ldrb	r2, [r7, #7]
 80074e6:	4907      	ldr	r1, [pc, #28]	; (8007504 <STEPPER_One_Step+0x4ac>)
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	330f      	adds	r3, #15
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd90      	pop	{r4, r7, pc}
 8007500:	0801bae4 	.word	0x0801bae4
 8007504:	20000428 	.word	0x20000428
 8007508:	2000002c 	.word	0x2000002c

0800750c <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
 8007518:	4613      	mov	r3, r2
 800751a:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8007524:	79fa      	ldrb	r2, [r7, #7]
 8007526:	4926      	ldr	r1, [pc, #152]	; (80075c0 <STEPPER_Step_Blocking+0xb4>)
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3311      	adds	r3, #17
 8007534:	79ba      	ldrb	r2, [r7, #6]
 8007536:	701a      	strb	r2, [r3, #0]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 8007538:	79fa      	ldrb	r2, [r7, #7]
 800753a:	4921      	ldr	r1, [pc, #132]	; (80075c0 <STEPPER_Step_Blocking+0xb4>)
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	330e      	adds	r3, #14
 8007548:	2201      	movs	r2, #1
 800754a:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 800754c:	79fa      	ldrb	r2, [r7, #7]
 800754e:	491c      	ldr	r1, [pc, #112]	; (80075c0 <STEPPER_Step_Blocking+0xb4>)
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	330c      	adds	r3, #12
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	79fa      	ldrb	r2, [r7, #7]
 8007562:	4918      	ldr	r1, [pc, #96]	; (80075c4 <STEPPER_Step_Blocking+0xb8>)
 8007564:	4613      	mov	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	3318      	adds	r3, #24
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	fb00 f303 	mul.w	r3, r0, r3
 8007576:	f64e 2260 	movw	r2, #60000	; 0xea60
 800757a:	fb92 f3f3 	sdiv	r3, r2, r3
 800757e:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	e009      	b.n	800759a <STEPPER_Step_Blocking+0x8e>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fd65 	bl	8007058 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 800758e:	68b8      	ldr	r0, [r7, #8]
 8007590:	f7ff fba0 	bl	8006cd4 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d3f1      	bcc.n	8007586 <STEPPER_Step_Blocking+0x7a>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 80075a2:	79fa      	ldrb	r2, [r7, #7]
 80075a4:	4906      	ldr	r1, [pc, #24]	; (80075c0 <STEPPER_Step_Blocking+0xb4>)
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	330e      	adds	r3, #14
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000428 	.word	0x20000428
 80075c4:	0801bae4 	.word	0x0801bae4

080075c8 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a34      	ldr	r2, [pc, #208]	; (80076ac <STEPPER_TMR_OVF_ISR+0xe4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d162      	bne.n	80076a4 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	e05c      	b.n	800769e <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80075e4:	7bfa      	ldrb	r2, [r7, #15]
 80075e6:	4932      	ldr	r1, [pc, #200]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	3304      	adds	r3, #4
 80075f4:	6819      	ldr	r1, [r3, #0]
 80075f6:	7bfa      	ldrb	r2, [r7, #15]
 80075f8:	482d      	ldr	r0, [pc, #180]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4403      	add	r3, r0
 8007604:	3308      	adds	r3, #8
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4299      	cmp	r1, r3
 800760a:	d333      	bcc.n	8007674 <STEPPER_TMR_OVF_ISR+0xac>
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	4928      	ldr	r1, [pc, #160]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	330e      	adds	r3, #14
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d028      	beq.n	8007674 <STEPPER_TMR_OVF_ISR+0xac>
 8007622:	7bfa      	ldrb	r2, [r7, #15]
 8007624:	4922      	ldr	r1, [pc, #136]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01e      	beq.n	8007674 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd0d 	bl	8007058 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 800763e:	7bfa      	ldrb	r2, [r7, #15]
 8007640:	491b      	ldr	r1, [pc, #108]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	440b      	add	r3, r1
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	1e59      	subs	r1, r3, #1
 8007650:	4817      	ldr	r0, [pc, #92]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4403      	add	r3, r0
 800765c:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800765e:	7bfa      	ldrb	r2, [r7, #15]
 8007660:	4913      	ldr	r1, [pc, #76]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	3304      	adds	r3, #4
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e011      	b.n	8007698 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8007674:	7bfa      	ldrb	r2, [r7, #15]
 8007676:	490e      	ldr	r1, [pc, #56]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	3304      	adds	r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	1c59      	adds	r1, r3, #1
 8007688:	4809      	ldr	r0, [pc, #36]	; (80076b0 <STEPPER_TMR_OVF_ISR+0xe8>)
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4403      	add	r3, r0
 8007694:	3304      	adds	r3, #4
 8007696:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	3301      	adds	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d09f      	beq.n	80075e4 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40014000 	.word	0x40014000
 80076b0:	20000428 	.word	0x20000428

080076b4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <DWT_Delay_Init+0x58>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4a13      	ldr	r2, [pc, #76]	; (800770c <DWT_Delay_Init+0x58>)
 80076be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076c2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80076c4:	4b11      	ldr	r3, [pc, #68]	; (800770c <DWT_Delay_Init+0x58>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	4a10      	ldr	r2, [pc, #64]	; (800770c <DWT_Delay_Init+0x58>)
 80076ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ce:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a0e      	ldr	r2, [pc, #56]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0b      	ldr	r2, [pc, #44]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80076ee:	bf00      	nop
    __ASM volatile ("NOP");
 80076f0:	bf00      	nop
    __ASM volatile ("NOP");
 80076f2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <DWT_Delay_Init+0x5c>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8007700:	2301      	movs	r3, #1
    }
}
 8007702:	4618      	mov	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	e000edf0 	.word	0xe000edf0
 8007710:	e0001000 	.word	0xe0001000

08007714 <std>:
 8007714:	2300      	movs	r3, #0
 8007716:	b510      	push	{r4, lr}
 8007718:	4604      	mov	r4, r0
 800771a:	e9c0 3300 	strd	r3, r3, [r0]
 800771e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007722:	6083      	str	r3, [r0, #8]
 8007724:	8181      	strh	r1, [r0, #12]
 8007726:	6643      	str	r3, [r0, #100]	; 0x64
 8007728:	81c2      	strh	r2, [r0, #14]
 800772a:	6183      	str	r3, [r0, #24]
 800772c:	4619      	mov	r1, r3
 800772e:	2208      	movs	r2, #8
 8007730:	305c      	adds	r0, #92	; 0x5c
 8007732:	f000 f906 	bl	8007942 <memset>
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <std+0x58>)
 8007738:	6263      	str	r3, [r4, #36]	; 0x24
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <std+0x5c>)
 800773c:	62a3      	str	r3, [r4, #40]	; 0x28
 800773e:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <std+0x60>)
 8007740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <std+0x64>)
 8007744:	6323      	str	r3, [r4, #48]	; 0x30
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <std+0x68>)
 8007748:	6224      	str	r4, [r4, #32]
 800774a:	429c      	cmp	r4, r3
 800774c:	d006      	beq.n	800775c <std+0x48>
 800774e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007752:	4294      	cmp	r4, r2
 8007754:	d002      	beq.n	800775c <std+0x48>
 8007756:	33d0      	adds	r3, #208	; 0xd0
 8007758:	429c      	cmp	r4, r3
 800775a:	d105      	bne.n	8007768 <std+0x54>
 800775c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007764:	f000 b966 	b.w	8007a34 <__retarget_lock_init_recursive>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	bf00      	nop
 800776c:	080078bd 	.word	0x080078bd
 8007770:	080078df 	.word	0x080078df
 8007774:	08007917 	.word	0x08007917
 8007778:	0800793b 	.word	0x0800793b
 800777c:	2000043c 	.word	0x2000043c

08007780 <stdio_exit_handler>:
 8007780:	4a02      	ldr	r2, [pc, #8]	; (800778c <stdio_exit_handler+0xc>)
 8007782:	4903      	ldr	r1, [pc, #12]	; (8007790 <stdio_exit_handler+0x10>)
 8007784:	4803      	ldr	r0, [pc, #12]	; (8007794 <stdio_exit_handler+0x14>)
 8007786:	f000 b869 	b.w	800785c <_fwalk_sglue>
 800778a:	bf00      	nop
 800778c:	2000004c 	.word	0x2000004c
 8007790:	080082e1 	.word	0x080082e1
 8007794:	20000058 	.word	0x20000058

08007798 <cleanup_stdio>:
 8007798:	6841      	ldr	r1, [r0, #4]
 800779a:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <cleanup_stdio+0x34>)
 800779c:	4299      	cmp	r1, r3
 800779e:	b510      	push	{r4, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	d001      	beq.n	80077a8 <cleanup_stdio+0x10>
 80077a4:	f000 fd9c 	bl	80082e0 <_fflush_r>
 80077a8:	68a1      	ldr	r1, [r4, #8]
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <cleanup_stdio+0x38>)
 80077ac:	4299      	cmp	r1, r3
 80077ae:	d002      	beq.n	80077b6 <cleanup_stdio+0x1e>
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fd95 	bl	80082e0 <_fflush_r>
 80077b6:	68e1      	ldr	r1, [r4, #12]
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <cleanup_stdio+0x3c>)
 80077ba:	4299      	cmp	r1, r3
 80077bc:	d004      	beq.n	80077c8 <cleanup_stdio+0x30>
 80077be:	4620      	mov	r0, r4
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f000 bd8c 	b.w	80082e0 <_fflush_r>
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	bf00      	nop
 80077cc:	2000043c 	.word	0x2000043c
 80077d0:	200004a4 	.word	0x200004a4
 80077d4:	2000050c 	.word	0x2000050c

080077d8 <global_stdio_init.part.0>:
 80077d8:	b510      	push	{r4, lr}
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <global_stdio_init.part.0+0x30>)
 80077dc:	4c0b      	ldr	r4, [pc, #44]	; (800780c <global_stdio_init.part.0+0x34>)
 80077de:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <global_stdio_init.part.0+0x38>)
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	4620      	mov	r0, r4
 80077e4:	2200      	movs	r2, #0
 80077e6:	2104      	movs	r1, #4
 80077e8:	f7ff ff94 	bl	8007714 <std>
 80077ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077f0:	2201      	movs	r2, #1
 80077f2:	2109      	movs	r1, #9
 80077f4:	f7ff ff8e 	bl	8007714 <std>
 80077f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077fc:	2202      	movs	r2, #2
 80077fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007802:	2112      	movs	r1, #18
 8007804:	f7ff bf86 	b.w	8007714 <std>
 8007808:	20000574 	.word	0x20000574
 800780c:	2000043c 	.word	0x2000043c
 8007810:	08007781 	.word	0x08007781

08007814 <__sfp_lock_acquire>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__sfp_lock_acquire+0x8>)
 8007816:	f000 b90e 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 800781a:	bf00      	nop
 800781c:	2000057d 	.word	0x2000057d

08007820 <__sfp_lock_release>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__sfp_lock_release+0x8>)
 8007822:	f000 b909 	b.w	8007a38 <__retarget_lock_release_recursive>
 8007826:	bf00      	nop
 8007828:	2000057d 	.word	0x2000057d

0800782c <__sinit>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4604      	mov	r4, r0
 8007830:	f7ff fff0 	bl	8007814 <__sfp_lock_acquire>
 8007834:	6a23      	ldr	r3, [r4, #32]
 8007836:	b11b      	cbz	r3, 8007840 <__sinit+0x14>
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	f7ff bff0 	b.w	8007820 <__sfp_lock_release>
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <__sinit+0x28>)
 8007842:	6223      	str	r3, [r4, #32]
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <__sinit+0x2c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f5      	bne.n	8007838 <__sinit+0xc>
 800784c:	f7ff ffc4 	bl	80077d8 <global_stdio_init.part.0>
 8007850:	e7f2      	b.n	8007838 <__sinit+0xc>
 8007852:	bf00      	nop
 8007854:	08007799 	.word	0x08007799
 8007858:	20000574 	.word	0x20000574

0800785c <_fwalk_sglue>:
 800785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007860:	4607      	mov	r7, r0
 8007862:	4688      	mov	r8, r1
 8007864:	4614      	mov	r4, r2
 8007866:	2600      	movs	r6, #0
 8007868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800786c:	f1b9 0901 	subs.w	r9, r9, #1
 8007870:	d505      	bpl.n	800787e <_fwalk_sglue+0x22>
 8007872:	6824      	ldr	r4, [r4, #0]
 8007874:	2c00      	cmp	r4, #0
 8007876:	d1f7      	bne.n	8007868 <_fwalk_sglue+0xc>
 8007878:	4630      	mov	r0, r6
 800787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d907      	bls.n	8007894 <_fwalk_sglue+0x38>
 8007884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007888:	3301      	adds	r3, #1
 800788a:	d003      	beq.n	8007894 <_fwalk_sglue+0x38>
 800788c:	4629      	mov	r1, r5
 800788e:	4638      	mov	r0, r7
 8007890:	47c0      	blx	r8
 8007892:	4306      	orrs	r6, r0
 8007894:	3568      	adds	r5, #104	; 0x68
 8007896:	e7e9      	b.n	800786c <_fwalk_sglue+0x10>

08007898 <iprintf>:
 8007898:	b40f      	push	{r0, r1, r2, r3}
 800789a:	b507      	push	{r0, r1, r2, lr}
 800789c:	4906      	ldr	r1, [pc, #24]	; (80078b8 <iprintf+0x20>)
 800789e:	ab04      	add	r3, sp, #16
 80078a0:	6808      	ldr	r0, [r1, #0]
 80078a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a6:	6881      	ldr	r1, [r0, #8]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	f000 f9e9 	bl	8007c80 <_vfiprintf_r>
 80078ae:	b003      	add	sp, #12
 80078b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b4:	b004      	add	sp, #16
 80078b6:	4770      	bx	lr
 80078b8:	200000a4 	.word	0x200000a4

080078bc <__sread>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	460c      	mov	r4, r1
 80078c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c4:	f000 f868 	bl	8007998 <_read_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	bfab      	itete	ge
 80078cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ce:	89a3      	ldrhlt	r3, [r4, #12]
 80078d0:	181b      	addge	r3, r3, r0
 80078d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078d6:	bfac      	ite	ge
 80078d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80078da:	81a3      	strhlt	r3, [r4, #12]
 80078dc:	bd10      	pop	{r4, pc}

080078de <__swrite>:
 80078de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e2:	461f      	mov	r7, r3
 80078e4:	898b      	ldrh	r3, [r1, #12]
 80078e6:	05db      	lsls	r3, r3, #23
 80078e8:	4605      	mov	r5, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	4616      	mov	r6, r2
 80078ee:	d505      	bpl.n	80078fc <__swrite+0x1e>
 80078f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f4:	2302      	movs	r3, #2
 80078f6:	2200      	movs	r2, #0
 80078f8:	f000 f83c 	bl	8007974 <_lseek_r>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	4632      	mov	r2, r6
 800790a:	463b      	mov	r3, r7
 800790c:	4628      	mov	r0, r5
 800790e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007912:	f000 b853 	b.w	80079bc <_write_r>

08007916 <__sseek>:
 8007916:	b510      	push	{r4, lr}
 8007918:	460c      	mov	r4, r1
 800791a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791e:	f000 f829 	bl	8007974 <_lseek_r>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	bf15      	itete	ne
 8007928:	6560      	strne	r0, [r4, #84]	; 0x54
 800792a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800792e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007932:	81a3      	strheq	r3, [r4, #12]
 8007934:	bf18      	it	ne
 8007936:	81a3      	strhne	r3, [r4, #12]
 8007938:	bd10      	pop	{r4, pc}

0800793a <__sclose>:
 800793a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793e:	f000 b809 	b.w	8007954 <_close_r>

08007942 <memset>:
 8007942:	4402      	add	r2, r0
 8007944:	4603      	mov	r3, r0
 8007946:	4293      	cmp	r3, r2
 8007948:	d100      	bne.n	800794c <memset+0xa>
 800794a:	4770      	bx	lr
 800794c:	f803 1b01 	strb.w	r1, [r3], #1
 8007950:	e7f9      	b.n	8007946 <memset+0x4>
	...

08007954 <_close_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_close_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7fa f8d5 	bl	8001b0e <_close>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_close_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_close_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	20000578 	.word	0x20000578

08007974 <_lseek_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d07      	ldr	r5, [pc, #28]	; (8007994 <_lseek_r+0x20>)
 8007978:	4604      	mov	r4, r0
 800797a:	4608      	mov	r0, r1
 800797c:	4611      	mov	r1, r2
 800797e:	2200      	movs	r2, #0
 8007980:	602a      	str	r2, [r5, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	f7fa f8ea 	bl	8001b5c <_lseek>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_lseek_r+0x1e>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_lseek_r+0x1e>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000578 	.word	0x20000578

08007998 <_read_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_read_r+0x20>)
 800799c:	4604      	mov	r4, r0
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7fa f878 	bl	8001a9c <_read>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_read_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_read_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000578 	.word	0x20000578

080079bc <_write_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d07      	ldr	r5, [pc, #28]	; (80079dc <_write_r+0x20>)
 80079c0:	4604      	mov	r4, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	4611      	mov	r1, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fa f883 	bl	8001ad6 <_write>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_write_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_write_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000578 	.word	0x20000578

080079e0 <__errno>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	; (80079e8 <__errno+0x8>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200000a4 	.word	0x200000a4

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4d0d      	ldr	r5, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2600      	movs	r6, #0
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f000 fdc0 	bl	8008584 <_init>
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2600      	movs	r6, #0
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	0801bb3c 	.word	0x0801bb3c
 8007a28:	0801bb3c 	.word	0x0801bb3c
 8007a2c:	0801bb3c 	.word	0x0801bb3c
 8007a30:	0801bb40 	.word	0x0801bb40

08007a34 <__retarget_lock_init_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_acquire_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <__retarget_lock_release_recursive>:
 8007a38:	4770      	bx	lr
	...

08007a3c <_free_r>:
 8007a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a3e:	2900      	cmp	r1, #0
 8007a40:	d044      	beq.n	8007acc <_free_r+0x90>
 8007a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a46:	9001      	str	r0, [sp, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a4e:	bfb8      	it	lt
 8007a50:	18e4      	addlt	r4, r4, r3
 8007a52:	f000 f8df 	bl	8007c14 <__malloc_lock>
 8007a56:	4a1e      	ldr	r2, [pc, #120]	; (8007ad0 <_free_r+0x94>)
 8007a58:	9801      	ldr	r0, [sp, #4]
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	b933      	cbnz	r3, 8007a6c <_free_r+0x30>
 8007a5e:	6063      	str	r3, [r4, #4]
 8007a60:	6014      	str	r4, [r2, #0]
 8007a62:	b003      	add	sp, #12
 8007a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a68:	f000 b8da 	b.w	8007c20 <__malloc_unlock>
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d908      	bls.n	8007a82 <_free_r+0x46>
 8007a70:	6825      	ldr	r5, [r4, #0]
 8007a72:	1961      	adds	r1, r4, r5
 8007a74:	428b      	cmp	r3, r1
 8007a76:	bf01      	itttt	eq
 8007a78:	6819      	ldreq	r1, [r3, #0]
 8007a7a:	685b      	ldreq	r3, [r3, #4]
 8007a7c:	1949      	addeq	r1, r1, r5
 8007a7e:	6021      	streq	r1, [r4, #0]
 8007a80:	e7ed      	b.n	8007a5e <_free_r+0x22>
 8007a82:	461a      	mov	r2, r3
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	b10b      	cbz	r3, 8007a8c <_free_r+0x50>
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	d9fa      	bls.n	8007a82 <_free_r+0x46>
 8007a8c:	6811      	ldr	r1, [r2, #0]
 8007a8e:	1855      	adds	r5, r2, r1
 8007a90:	42a5      	cmp	r5, r4
 8007a92:	d10b      	bne.n	8007aac <_free_r+0x70>
 8007a94:	6824      	ldr	r4, [r4, #0]
 8007a96:	4421      	add	r1, r4
 8007a98:	1854      	adds	r4, r2, r1
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	6011      	str	r1, [r2, #0]
 8007a9e:	d1e0      	bne.n	8007a62 <_free_r+0x26>
 8007aa0:	681c      	ldr	r4, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	6053      	str	r3, [r2, #4]
 8007aa6:	440c      	add	r4, r1
 8007aa8:	6014      	str	r4, [r2, #0]
 8007aaa:	e7da      	b.n	8007a62 <_free_r+0x26>
 8007aac:	d902      	bls.n	8007ab4 <_free_r+0x78>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	6003      	str	r3, [r0, #0]
 8007ab2:	e7d6      	b.n	8007a62 <_free_r+0x26>
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	1961      	adds	r1, r4, r5
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf04      	itt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	bf04      	itt	eq
 8007ac4:	1949      	addeq	r1, r1, r5
 8007ac6:	6021      	streq	r1, [r4, #0]
 8007ac8:	6054      	str	r4, [r2, #4]
 8007aca:	e7ca      	b.n	8007a62 <_free_r+0x26>
 8007acc:	b003      	add	sp, #12
 8007ace:	bd30      	pop	{r4, r5, pc}
 8007ad0:	20000580 	.word	0x20000580

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0e      	ldr	r6, [pc, #56]	; (8007b10 <sbrk_aligned+0x3c>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fcbc 	bl	800845c <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fcb7 	bl	800845c <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d00a      	beq.n	8007b08 <sbrk_aligned+0x34>
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d007      	beq.n	8007b0c <sbrk_aligned+0x38>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fcac 	bl	800845c <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d101      	bne.n	8007b0c <sbrk_aligned+0x38>
 8007b08:	f04f 34ff 	mov.w	r4, #4294967295
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	20000584 	.word	0x20000584

08007b14 <_malloc_r>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	1ccd      	adds	r5, r1, #3
 8007b1a:	f025 0503 	bic.w	r5, r5, #3
 8007b1e:	3508      	adds	r5, #8
 8007b20:	2d0c      	cmp	r5, #12
 8007b22:	bf38      	it	cc
 8007b24:	250c      	movcc	r5, #12
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	4607      	mov	r7, r0
 8007b2a:	db01      	blt.n	8007b30 <_malloc_r+0x1c>
 8007b2c:	42a9      	cmp	r1, r5
 8007b2e:	d905      	bls.n	8007b3c <_malloc_r+0x28>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	2600      	movs	r6, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c10 <_malloc_r+0xfc>
 8007b40:	f000 f868 	bl	8007c14 <__malloc_lock>
 8007b44:	f8d8 3000 	ldr.w	r3, [r8]
 8007b48:	461c      	mov	r4, r3
 8007b4a:	bb5c      	cbnz	r4, 8007ba4 <_malloc_r+0x90>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff ffc0 	bl	8007ad4 <sbrk_aligned>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	4604      	mov	r4, r0
 8007b58:	d155      	bne.n	8007c06 <_malloc_r+0xf2>
 8007b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8007b5e:	4626      	mov	r6, r4
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d145      	bne.n	8007bf0 <_malloc_r+0xdc>
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d048      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	eb04 0903 	add.w	r9, r4, r3
 8007b72:	f000 fc73 	bl	800845c <_sbrk_r>
 8007b76:	4581      	cmp	r9, r0
 8007b78:	d13f      	bne.n	8007bfa <_malloc_r+0xe6>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1a6d      	subs	r5, r5, r1
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ffa7 	bl	8007ad4 <sbrk_aligned>
 8007b86:	3001      	adds	r0, #1
 8007b88:	d037      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	442b      	add	r3, r5
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	f8d8 3000 	ldr.w	r3, [r8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d038      	beq.n	8007c0a <_malloc_r+0xf6>
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	42a2      	cmp	r2, r4
 8007b9c:	d12b      	bne.n	8007bf6 <_malloc_r+0xe2>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	e00f      	b.n	8007bc4 <_malloc_r+0xb0>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	d41f      	bmi.n	8007bea <_malloc_r+0xd6>
 8007baa:	2a0b      	cmp	r2, #11
 8007bac:	d917      	bls.n	8007bde <_malloc_r+0xca>
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	6025      	str	r5, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	6059      	strne	r1, [r3, #4]
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	bf08      	it	eq
 8007bbc:	f8c8 1000 	streq.w	r1, [r8]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f104 060b 	add.w	r6, r4, #11
 8007bca:	f000 f829 	bl	8007c20 <__malloc_unlock>
 8007bce:	f026 0607 	bic.w	r6, r6, #7
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	1af2      	subs	r2, r6, r3
 8007bd6:	d0ae      	beq.n	8007b36 <_malloc_r+0x22>
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	50a3      	str	r3, [r4, r2]
 8007bdc:	e7ab      	b.n	8007b36 <_malloc_r+0x22>
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	d1dd      	bne.n	8007ba0 <_malloc_r+0x8c>
 8007be4:	f8c8 2000 	str.w	r2, [r8]
 8007be8:	e7ec      	b.n	8007bc4 <_malloc_r+0xb0>
 8007bea:	4623      	mov	r3, r4
 8007bec:	6864      	ldr	r4, [r4, #4]
 8007bee:	e7ac      	b.n	8007b4a <_malloc_r+0x36>
 8007bf0:	4634      	mov	r4, r6
 8007bf2:	6876      	ldr	r6, [r6, #4]
 8007bf4:	e7b4      	b.n	8007b60 <_malloc_r+0x4c>
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	e7cc      	b.n	8007b94 <_malloc_r+0x80>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f000 f80e 	bl	8007c20 <__malloc_unlock>
 8007c04:	e797      	b.n	8007b36 <_malloc_r+0x22>
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	e7dc      	b.n	8007bc4 <_malloc_r+0xb0>
 8007c0a:	605b      	str	r3, [r3, #4]
 8007c0c:	deff      	udf	#255	; 0xff
 8007c0e:	bf00      	nop
 8007c10:	20000580 	.word	0x20000580

08007c14 <__malloc_lock>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__malloc_lock+0x8>)
 8007c16:	f7ff bf0e 	b.w	8007a36 <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	2000057c 	.word	0x2000057c

08007c20 <__malloc_unlock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__malloc_unlock+0x8>)
 8007c22:	f7ff bf09 	b.w	8007a38 <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	2000057c 	.word	0x2000057c

08007c2c <__sfputc_r>:
 8007c2c:	6893      	ldr	r3, [r2, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	b410      	push	{r4}
 8007c34:	6093      	str	r3, [r2, #8]
 8007c36:	da08      	bge.n	8007c4a <__sfputc_r+0x1e>
 8007c38:	6994      	ldr	r4, [r2, #24]
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	db01      	blt.n	8007c42 <__sfputc_r+0x16>
 8007c3e:	290a      	cmp	r1, #10
 8007c40:	d103      	bne.n	8007c4a <__sfputc_r+0x1e>
 8007c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c46:	f000 bb73 	b.w	8008330 <__swbuf_r>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	4608      	mov	r0, r1
 8007c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <__sfputs_r>:
 8007c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	4614      	mov	r4, r2
 8007c62:	18d5      	adds	r5, r2, r3
 8007c64:	42ac      	cmp	r4, r5
 8007c66:	d101      	bne.n	8007c6c <__sfputs_r+0x12>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e007      	b.n	8007c7c <__sfputs_r+0x22>
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	463a      	mov	r2, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ffda 	bl	8007c2c <__sfputc_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d1f3      	bne.n	8007c64 <__sfputs_r+0xa>
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c80 <_vfiprintf_r>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	b09d      	sub	sp, #116	; 0x74
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	b118      	cbz	r0, 8007c98 <_vfiprintf_r+0x18>
 8007c90:	6a03      	ldr	r3, [r0, #32]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_vfiprintf_r+0x18>
 8007c94:	f7ff fdca 	bl	800782c <__sinit>
 8007c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	059a      	lsls	r2, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_vfiprintf_r+0x2a>
 8007ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca6:	f7ff fec6 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	071b      	lsls	r3, r3, #28
 8007cae:	d501      	bpl.n	8007cb4 <_vfiprintf_r+0x34>
 8007cb0:	692b      	ldr	r3, [r5, #16]
 8007cb2:	b99b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x5c>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 fb78 	bl	80083ac <__swsetup_r>
 8007cbc:	b170      	cbz	r0, 8007cdc <_vfiprintf_r+0x5c>
 8007cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc0:	07dc      	lsls	r4, r3, #31
 8007cc2:	d504      	bpl.n	8007cce <_vfiprintf_r+0x4e>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	b01d      	add	sp, #116	; 0x74
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	89ab      	ldrh	r3, [r5, #12]
 8007cd0:	0598      	lsls	r0, r3, #22
 8007cd2:	d4f7      	bmi.n	8007cc4 <_vfiprintf_r+0x44>
 8007cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd6:	f7ff feaf 	bl	8007a38 <__retarget_lock_release_recursive>
 8007cda:	e7f3      	b.n	8007cc4 <_vfiprintf_r+0x44>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cea:	2330      	movs	r3, #48	; 0x30
 8007cec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ea0 <_vfiprintf_r+0x220>
 8007cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf4:	f04f 0901 	mov.w	r9, #1
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	469a      	mov	sl, r3
 8007cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d00:	b10a      	cbz	r2, 8007d06 <_vfiprintf_r+0x86>
 8007d02:	2a25      	cmp	r2, #37	; 0x25
 8007d04:	d1f9      	bne.n	8007cfa <_vfiprintf_r+0x7a>
 8007d06:	ebba 0b04 	subs.w	fp, sl, r4
 8007d0a:	d00b      	beq.n	8007d24 <_vfiprintf_r+0xa4>
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7ff ffa1 	bl	8007c5a <__sfputs_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	f000 80a9 	beq.w	8007e70 <_vfiprintf_r+0x1f0>
 8007d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d20:	445a      	add	r2, fp
 8007d22:	9209      	str	r2, [sp, #36]	; 0x24
 8007d24:	f89a 3000 	ldrb.w	r3, [sl]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80a1 	beq.w	8007e70 <_vfiprintf_r+0x1f0>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295
 8007d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d38:	f10a 0a01 	add.w	sl, sl, #1
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d44:	931a      	str	r3, [sp, #104]	; 0x68
 8007d46:	4654      	mov	r4, sl
 8007d48:	2205      	movs	r2, #5
 8007d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4e:	4854      	ldr	r0, [pc, #336]	; (8007ea0 <_vfiprintf_r+0x220>)
 8007d50:	f7f8 fa3e 	bl	80001d0 <memchr>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	b9d8      	cbnz	r0, 8007d90 <_vfiprintf_r+0x110>
 8007d58:	06d1      	lsls	r1, r2, #27
 8007d5a:	bf44      	itt	mi
 8007d5c:	2320      	movmi	r3, #32
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d62:	0713      	lsls	r3, r2, #28
 8007d64:	bf44      	itt	mi
 8007d66:	232b      	movmi	r3, #43	; 0x2b
 8007d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d70:	2b2a      	cmp	r3, #42	; 0x2a
 8007d72:	d015      	beq.n	8007da0 <_vfiprintf_r+0x120>
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4654      	mov	r4, sl
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f04f 0c0a 	mov.w	ip, #10
 8007d7e:	4621      	mov	r1, r4
 8007d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d84:	3b30      	subs	r3, #48	; 0x30
 8007d86:	2b09      	cmp	r3, #9
 8007d88:	d94d      	bls.n	8007e26 <_vfiprintf_r+0x1a6>
 8007d8a:	b1b0      	cbz	r0, 8007dba <_vfiprintf_r+0x13a>
 8007d8c:	9207      	str	r2, [sp, #28]
 8007d8e:	e014      	b.n	8007dba <_vfiprintf_r+0x13a>
 8007d90:	eba0 0308 	sub.w	r3, r0, r8
 8007d94:	fa09 f303 	lsl.w	r3, r9, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	46a2      	mov	sl, r4
 8007d9e:	e7d2      	b.n	8007d46 <_vfiprintf_r+0xc6>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	1d19      	adds	r1, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	9103      	str	r1, [sp, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfbb      	ittet	lt
 8007dac:	425b      	neglt	r3, r3
 8007dae:	f042 0202 	orrlt.w	r2, r2, #2
 8007db2:	9307      	strge	r3, [sp, #28]
 8007db4:	9307      	strlt	r3, [sp, #28]
 8007db6:	bfb8      	it	lt
 8007db8:	9204      	strlt	r2, [sp, #16]
 8007dba:	7823      	ldrb	r3, [r4, #0]
 8007dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8007dbe:	d10c      	bne.n	8007dda <_vfiprintf_r+0x15a>
 8007dc0:	7863      	ldrb	r3, [r4, #1]
 8007dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc4:	d134      	bne.n	8007e30 <_vfiprintf_r+0x1b0>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	9203      	str	r2, [sp, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfb8      	it	lt
 8007dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dd6:	3402      	adds	r4, #2
 8007dd8:	9305      	str	r3, [sp, #20]
 8007dda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007eb0 <_vfiprintf_r+0x230>
 8007dde:	7821      	ldrb	r1, [r4, #0]
 8007de0:	2203      	movs	r2, #3
 8007de2:	4650      	mov	r0, sl
 8007de4:	f7f8 f9f4 	bl	80001d0 <memchr>
 8007de8:	b138      	cbz	r0, 8007dfa <_vfiprintf_r+0x17a>
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	eba0 000a 	sub.w	r0, r0, sl
 8007df0:	2240      	movs	r2, #64	; 0x40
 8007df2:	4082      	lsls	r2, r0
 8007df4:	4313      	orrs	r3, r2
 8007df6:	3401      	adds	r4, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfe:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <_vfiprintf_r+0x224>)
 8007e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e04:	2206      	movs	r2, #6
 8007e06:	f7f8 f9e3 	bl	80001d0 <memchr>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d03f      	beq.n	8007e8e <_vfiprintf_r+0x20e>
 8007e0e:	4b26      	ldr	r3, [pc, #152]	; (8007ea8 <_vfiprintf_r+0x228>)
 8007e10:	bb1b      	cbnz	r3, 8007e5a <_vfiprintf_r+0x1da>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	3307      	adds	r3, #7
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e20:	443b      	add	r3, r7
 8007e22:	9309      	str	r3, [sp, #36]	; 0x24
 8007e24:	e768      	b.n	8007cf8 <_vfiprintf_r+0x78>
 8007e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7a6      	b.n	8007d7e <_vfiprintf_r+0xfe>
 8007e30:	2300      	movs	r3, #0
 8007e32:	3401      	adds	r4, #1
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	4619      	mov	r1, r3
 8007e38:	f04f 0c0a 	mov.w	ip, #10
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e42:	3a30      	subs	r2, #48	; 0x30
 8007e44:	2a09      	cmp	r2, #9
 8007e46:	d903      	bls.n	8007e50 <_vfiprintf_r+0x1d0>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0c6      	beq.n	8007dda <_vfiprintf_r+0x15a>
 8007e4c:	9105      	str	r1, [sp, #20]
 8007e4e:	e7c4      	b.n	8007dda <_vfiprintf_r+0x15a>
 8007e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e54:	4604      	mov	r4, r0
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7f0      	b.n	8007e3c <_vfiprintf_r+0x1bc>
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4b12      	ldr	r3, [pc, #72]	; (8007eac <_vfiprintf_r+0x22c>)
 8007e62:	a904      	add	r1, sp, #16
 8007e64:	4630      	mov	r0, r6
 8007e66:	f3af 8000 	nop.w
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	1c78      	adds	r0, r7, #1
 8007e6e:	d1d6      	bne.n	8007e1e <_vfiprintf_r+0x19e>
 8007e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_vfiprintf_r+0x202>
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	059a      	lsls	r2, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_vfiprintf_r+0x202>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7e:	f7ff fddb 	bl	8007a38 <__retarget_lock_release_recursive>
 8007e82:	89ab      	ldrh	r3, [r5, #12]
 8007e84:	065b      	lsls	r3, r3, #25
 8007e86:	f53f af1d 	bmi.w	8007cc4 <_vfiprintf_r+0x44>
 8007e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e8c:	e71c      	b.n	8007cc8 <_vfiprintf_r+0x48>
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	462a      	mov	r2, r5
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <_vfiprintf_r+0x22c>)
 8007e96:	a904      	add	r1, sp, #16
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f879 	bl	8007f90 <_printf_i>
 8007e9e:	e7e4      	b.n	8007e6a <_vfiprintf_r+0x1ea>
 8007ea0:	0801bb00 	.word	0x0801bb00
 8007ea4:	0801bb0a 	.word	0x0801bb0a
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	08007c5b 	.word	0x08007c5b
 8007eb0:	0801bb06 	.word	0x0801bb06

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f00:	1e13      	subs	r3, r2, #0
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	6922      	ldr	r2, [r4, #16]
 8007f1e:	f003 0306 	and.w	r3, r3, #6
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	bf02      	ittt	eq
 8007f26:	68e5      	ldreq	r5, [r4, #12]
 8007f28:	6833      	ldreq	r3, [r6, #0]
 8007f2a:	1aed      	subeq	r5, r5, r3
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c0      	blx	r8
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	; 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	7e0f      	ldrb	r7, [r1, #24]
 8007f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f98:	2f78      	cmp	r7, #120	; 0x78
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	; 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d4 	beq.w	800815a <_printf_i+0x1ca>
 8007fb2:	2f58      	cmp	r7, #88	; 0x58
 8007fb4:	f000 80c0 	beq.w	8008138 <_printf_i+0x1a8>
 8007fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a101      	add	r1, pc, #4	; (adr r1, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	08008141 	.word	0x08008141
 8008000:	08008069 	.word	0x08008069
 8008004:	080080fb 	.word	0x080080fb
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	08008163 	.word	0x08008163
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	08008069 	.word	0x08008069
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	08008103 	.word	0x08008103
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	602a      	str	r2, [r5, #0]
 8008030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e09f      	b.n	800817c <_printf_i+0x1ec>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	0607      	lsls	r7, r0, #24
 8008042:	f103 0104 	add.w	r1, r3, #4
 8008046:	6029      	str	r1, [r5, #0]
 8008048:	d501      	bpl.n	800804e <_printf_i+0xbe>
 800804a:	681e      	ldr	r6, [r3, #0]
 800804c:	e003      	b.n	8008056 <_printf_i+0xc6>
 800804e:	0646      	lsls	r6, r0, #25
 8008050:	d5fb      	bpl.n	800804a <_printf_i+0xba>
 8008052:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008056:	2e00      	cmp	r6, #0
 8008058:	da03      	bge.n	8008062 <_printf_i+0xd2>
 800805a:	232d      	movs	r3, #45	; 0x2d
 800805c:	4276      	negs	r6, r6
 800805e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008062:	485a      	ldr	r0, [pc, #360]	; (80081cc <_printf_i+0x23c>)
 8008064:	230a      	movs	r3, #10
 8008066:	e012      	b.n	800808e <_printf_i+0xfe>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	6820      	ldr	r0, [r4, #0]
 800806c:	1d19      	adds	r1, r3, #4
 800806e:	6029      	str	r1, [r5, #0]
 8008070:	0605      	lsls	r5, r0, #24
 8008072:	d501      	bpl.n	8008078 <_printf_i+0xe8>
 8008074:	681e      	ldr	r6, [r3, #0]
 8008076:	e002      	b.n	800807e <_printf_i+0xee>
 8008078:	0641      	lsls	r1, r0, #25
 800807a:	d5fb      	bpl.n	8008074 <_printf_i+0xe4>
 800807c:	881e      	ldrh	r6, [r3, #0]
 800807e:	4853      	ldr	r0, [pc, #332]	; (80081cc <_printf_i+0x23c>)
 8008080:	2f6f      	cmp	r7, #111	; 0x6f
 8008082:	bf0c      	ite	eq
 8008084:	2308      	moveq	r3, #8
 8008086:	230a      	movne	r3, #10
 8008088:	2100      	movs	r1, #0
 800808a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800808e:	6865      	ldr	r5, [r4, #4]
 8008090:	60a5      	str	r5, [r4, #8]
 8008092:	2d00      	cmp	r5, #0
 8008094:	bfa2      	ittt	ge
 8008096:	6821      	ldrge	r1, [r4, #0]
 8008098:	f021 0104 	bicge.w	r1, r1, #4
 800809c:	6021      	strge	r1, [r4, #0]
 800809e:	b90e      	cbnz	r6, 80080a4 <_printf_i+0x114>
 80080a0:	2d00      	cmp	r5, #0
 80080a2:	d04b      	beq.n	800813c <_printf_i+0x1ac>
 80080a4:	4615      	mov	r5, r2
 80080a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080aa:	fb03 6711 	mls	r7, r3, r1, r6
 80080ae:	5dc7      	ldrb	r7, [r0, r7]
 80080b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080b4:	4637      	mov	r7, r6
 80080b6:	42bb      	cmp	r3, r7
 80080b8:	460e      	mov	r6, r1
 80080ba:	d9f4      	bls.n	80080a6 <_printf_i+0x116>
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d10b      	bne.n	80080d8 <_printf_i+0x148>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	07de      	lsls	r6, r3, #31
 80080c4:	d508      	bpl.n	80080d8 <_printf_i+0x148>
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	6861      	ldr	r1, [r4, #4]
 80080ca:	4299      	cmp	r1, r3
 80080cc:	bfde      	ittt	le
 80080ce:	2330      	movle	r3, #48	; 0x30
 80080d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080d8:	1b52      	subs	r2, r2, r5
 80080da:	6122      	str	r2, [r4, #16]
 80080dc:	f8cd a000 	str.w	sl, [sp]
 80080e0:	464b      	mov	r3, r9
 80080e2:	aa03      	add	r2, sp, #12
 80080e4:	4621      	mov	r1, r4
 80080e6:	4640      	mov	r0, r8
 80080e8:	f7ff fee4 	bl	8007eb4 <_printf_common>
 80080ec:	3001      	adds	r0, #1
 80080ee:	d14a      	bne.n	8008186 <_printf_i+0x1f6>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	b004      	add	sp, #16
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	f043 0320 	orr.w	r3, r3, #32
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	4833      	ldr	r0, [pc, #204]	; (80081d0 <_printf_i+0x240>)
 8008104:	2778      	movs	r7, #120	; 0x78
 8008106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	6829      	ldr	r1, [r5, #0]
 800810e:	061f      	lsls	r7, r3, #24
 8008110:	f851 6b04 	ldr.w	r6, [r1], #4
 8008114:	d402      	bmi.n	800811c <_printf_i+0x18c>
 8008116:	065f      	lsls	r7, r3, #25
 8008118:	bf48      	it	mi
 800811a:	b2b6      	uxthmi	r6, r6
 800811c:	07df      	lsls	r7, r3, #31
 800811e:	bf48      	it	mi
 8008120:	f043 0320 	orrmi.w	r3, r3, #32
 8008124:	6029      	str	r1, [r5, #0]
 8008126:	bf48      	it	mi
 8008128:	6023      	strmi	r3, [r4, #0]
 800812a:	b91e      	cbnz	r6, 8008134 <_printf_i+0x1a4>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	f023 0320 	bic.w	r3, r3, #32
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	2310      	movs	r3, #16
 8008136:	e7a7      	b.n	8008088 <_printf_i+0xf8>
 8008138:	4824      	ldr	r0, [pc, #144]	; (80081cc <_printf_i+0x23c>)
 800813a:	e7e4      	b.n	8008106 <_printf_i+0x176>
 800813c:	4615      	mov	r5, r2
 800813e:	e7bd      	b.n	80080bc <_printf_i+0x12c>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	6826      	ldr	r6, [r4, #0]
 8008144:	6961      	ldr	r1, [r4, #20]
 8008146:	1d18      	adds	r0, r3, #4
 8008148:	6028      	str	r0, [r5, #0]
 800814a:	0635      	lsls	r5, r6, #24
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	d501      	bpl.n	8008154 <_printf_i+0x1c4>
 8008150:	6019      	str	r1, [r3, #0]
 8008152:	e002      	b.n	800815a <_printf_i+0x1ca>
 8008154:	0670      	lsls	r0, r6, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0x1c0>
 8008158:	8019      	strh	r1, [r3, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	6123      	str	r3, [r4, #16]
 800815e:	4615      	mov	r5, r2
 8008160:	e7bc      	b.n	80080dc <_printf_i+0x14c>
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	1d1a      	adds	r2, r3, #4
 8008166:	602a      	str	r2, [r5, #0]
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	6862      	ldr	r2, [r4, #4]
 800816c:	2100      	movs	r1, #0
 800816e:	4628      	mov	r0, r5
 8008170:	f7f8 f82e 	bl	80001d0 <memchr>
 8008174:	b108      	cbz	r0, 800817a <_printf_i+0x1ea>
 8008176:	1b40      	subs	r0, r0, r5
 8008178:	6060      	str	r0, [r4, #4]
 800817a:	6863      	ldr	r3, [r4, #4]
 800817c:	6123      	str	r3, [r4, #16]
 800817e:	2300      	movs	r3, #0
 8008180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008184:	e7aa      	b.n	80080dc <_printf_i+0x14c>
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	462a      	mov	r2, r5
 800818a:	4649      	mov	r1, r9
 800818c:	4640      	mov	r0, r8
 800818e:	47d0      	blx	sl
 8008190:	3001      	adds	r0, #1
 8008192:	d0ad      	beq.n	80080f0 <_printf_i+0x160>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	079b      	lsls	r3, r3, #30
 8008198:	d413      	bmi.n	80081c2 <_printf_i+0x232>
 800819a:	68e0      	ldr	r0, [r4, #12]
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	4298      	cmp	r0, r3
 80081a0:	bfb8      	it	lt
 80081a2:	4618      	movlt	r0, r3
 80081a4:	e7a6      	b.n	80080f4 <_printf_i+0x164>
 80081a6:	2301      	movs	r3, #1
 80081a8:	4632      	mov	r2, r6
 80081aa:	4649      	mov	r1, r9
 80081ac:	4640      	mov	r0, r8
 80081ae:	47d0      	blx	sl
 80081b0:	3001      	adds	r0, #1
 80081b2:	d09d      	beq.n	80080f0 <_printf_i+0x160>
 80081b4:	3501      	adds	r5, #1
 80081b6:	68e3      	ldr	r3, [r4, #12]
 80081b8:	9903      	ldr	r1, [sp, #12]
 80081ba:	1a5b      	subs	r3, r3, r1
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dcf2      	bgt.n	80081a6 <_printf_i+0x216>
 80081c0:	e7eb      	b.n	800819a <_printf_i+0x20a>
 80081c2:	2500      	movs	r5, #0
 80081c4:	f104 0619 	add.w	r6, r4, #25
 80081c8:	e7f5      	b.n	80081b6 <_printf_i+0x226>
 80081ca:	bf00      	nop
 80081cc:	0801bb11 	.word	0x0801bb11
 80081d0:	0801bb22 	.word	0x0801bb22

080081d4 <__sflush_r>:
 80081d4:	898a      	ldrh	r2, [r1, #12]
 80081d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	4605      	mov	r5, r0
 80081dc:	0710      	lsls	r0, r2, #28
 80081de:	460c      	mov	r4, r1
 80081e0:	d458      	bmi.n	8008294 <__sflush_r+0xc0>
 80081e2:	684b      	ldr	r3, [r1, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dc05      	bgt.n	80081f4 <__sflush_r+0x20>
 80081e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dc02      	bgt.n	80081f4 <__sflush_r+0x20>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	d0f9      	beq.n	80081ee <__sflush_r+0x1a>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008200:	682f      	ldr	r7, [r5, #0]
 8008202:	6a21      	ldr	r1, [r4, #32]
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	d032      	beq.n	800826e <__sflush_r+0x9a>
 8008208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	075a      	lsls	r2, r3, #29
 800820e:	d505      	bpl.n	800821c <__sflush_r+0x48>
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	1ac0      	subs	r0, r0, r3
 8008214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008216:	b10b      	cbz	r3, 800821c <__sflush_r+0x48>
 8008218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800821a:	1ac0      	subs	r0, r0, r3
 800821c:	2300      	movs	r3, #0
 800821e:	4602      	mov	r2, r0
 8008220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008222:	6a21      	ldr	r1, [r4, #32]
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	d106      	bne.n	800823c <__sflush_r+0x68>
 800822e:	6829      	ldr	r1, [r5, #0]
 8008230:	291d      	cmp	r1, #29
 8008232:	d82b      	bhi.n	800828c <__sflush_r+0xb8>
 8008234:	4a29      	ldr	r2, [pc, #164]	; (80082dc <__sflush_r+0x108>)
 8008236:	410a      	asrs	r2, r1
 8008238:	07d6      	lsls	r6, r2, #31
 800823a:	d427      	bmi.n	800828c <__sflush_r+0xb8>
 800823c:	2200      	movs	r2, #0
 800823e:	6062      	str	r2, [r4, #4]
 8008240:	04d9      	lsls	r1, r3, #19
 8008242:	6922      	ldr	r2, [r4, #16]
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	d504      	bpl.n	8008252 <__sflush_r+0x7e>
 8008248:	1c42      	adds	r2, r0, #1
 800824a:	d101      	bne.n	8008250 <__sflush_r+0x7c>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b903      	cbnz	r3, 8008252 <__sflush_r+0x7e>
 8008250:	6560      	str	r0, [r4, #84]	; 0x54
 8008252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008254:	602f      	str	r7, [r5, #0]
 8008256:	2900      	cmp	r1, #0
 8008258:	d0c9      	beq.n	80081ee <__sflush_r+0x1a>
 800825a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800825e:	4299      	cmp	r1, r3
 8008260:	d002      	beq.n	8008268 <__sflush_r+0x94>
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff fbea 	bl	8007a3c <_free_r>
 8008268:	2000      	movs	r0, #0
 800826a:	6360      	str	r0, [r4, #52]	; 0x34
 800826c:	e7c0      	b.n	80081f0 <__sflush_r+0x1c>
 800826e:	2301      	movs	r3, #1
 8008270:	4628      	mov	r0, r5
 8008272:	47b0      	blx	r6
 8008274:	1c41      	adds	r1, r0, #1
 8008276:	d1c8      	bne.n	800820a <__sflush_r+0x36>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0c5      	beq.n	800820a <__sflush_r+0x36>
 800827e:	2b1d      	cmp	r3, #29
 8008280:	d001      	beq.n	8008286 <__sflush_r+0xb2>
 8008282:	2b16      	cmp	r3, #22
 8008284:	d101      	bne.n	800828a <__sflush_r+0xb6>
 8008286:	602f      	str	r7, [r5, #0]
 8008288:	e7b1      	b.n	80081ee <__sflush_r+0x1a>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	e7ad      	b.n	80081f0 <__sflush_r+0x1c>
 8008294:	690f      	ldr	r7, [r1, #16]
 8008296:	2f00      	cmp	r7, #0
 8008298:	d0a9      	beq.n	80081ee <__sflush_r+0x1a>
 800829a:	0793      	lsls	r3, r2, #30
 800829c:	680e      	ldr	r6, [r1, #0]
 800829e:	bf08      	it	eq
 80082a0:	694b      	ldreq	r3, [r1, #20]
 80082a2:	600f      	str	r7, [r1, #0]
 80082a4:	bf18      	it	ne
 80082a6:	2300      	movne	r3, #0
 80082a8:	eba6 0807 	sub.w	r8, r6, r7
 80082ac:	608b      	str	r3, [r1, #8]
 80082ae:	f1b8 0f00 	cmp.w	r8, #0
 80082b2:	dd9c      	ble.n	80081ee <__sflush_r+0x1a>
 80082b4:	6a21      	ldr	r1, [r4, #32]
 80082b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082b8:	4643      	mov	r3, r8
 80082ba:	463a      	mov	r2, r7
 80082bc:	4628      	mov	r0, r5
 80082be:	47b0      	blx	r6
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dc06      	bgt.n	80082d2 <__sflush_r+0xfe>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e78e      	b.n	80081f0 <__sflush_r+0x1c>
 80082d2:	4407      	add	r7, r0
 80082d4:	eba8 0800 	sub.w	r8, r8, r0
 80082d8:	e7e9      	b.n	80082ae <__sflush_r+0xda>
 80082da:	bf00      	nop
 80082dc:	dfbffffe 	.word	0xdfbffffe

080082e0 <_fflush_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	690b      	ldr	r3, [r1, #16]
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	b913      	cbnz	r3, 80082f0 <_fflush_r+0x10>
 80082ea:	2500      	movs	r5, #0
 80082ec:	4628      	mov	r0, r5
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	b118      	cbz	r0, 80082fa <_fflush_r+0x1a>
 80082f2:	6a03      	ldr	r3, [r0, #32]
 80082f4:	b90b      	cbnz	r3, 80082fa <_fflush_r+0x1a>
 80082f6:	f7ff fa99 	bl	800782c <__sinit>
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f3      	beq.n	80082ea <_fflush_r+0xa>
 8008302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008304:	07d0      	lsls	r0, r2, #31
 8008306:	d404      	bmi.n	8008312 <_fflush_r+0x32>
 8008308:	0599      	lsls	r1, r3, #22
 800830a:	d402      	bmi.n	8008312 <_fflush_r+0x32>
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	f7ff fb92 	bl	8007a36 <__retarget_lock_acquire_recursive>
 8008312:	4628      	mov	r0, r5
 8008314:	4621      	mov	r1, r4
 8008316:	f7ff ff5d 	bl	80081d4 <__sflush_r>
 800831a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831c:	07da      	lsls	r2, r3, #31
 800831e:	4605      	mov	r5, r0
 8008320:	d4e4      	bmi.n	80082ec <_fflush_r+0xc>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	059b      	lsls	r3, r3, #22
 8008326:	d4e1      	bmi.n	80082ec <_fflush_r+0xc>
 8008328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832a:	f7ff fb85 	bl	8007a38 <__retarget_lock_release_recursive>
 800832e:	e7dd      	b.n	80082ec <_fflush_r+0xc>

08008330 <__swbuf_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	460e      	mov	r6, r1
 8008334:	4614      	mov	r4, r2
 8008336:	4605      	mov	r5, r0
 8008338:	b118      	cbz	r0, 8008342 <__swbuf_r+0x12>
 800833a:	6a03      	ldr	r3, [r0, #32]
 800833c:	b90b      	cbnz	r3, 8008342 <__swbuf_r+0x12>
 800833e:	f7ff fa75 	bl	800782c <__sinit>
 8008342:	69a3      	ldr	r3, [r4, #24]
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	071a      	lsls	r2, r3, #28
 800834a:	d525      	bpl.n	8008398 <__swbuf_r+0x68>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b31b      	cbz	r3, 8008398 <__swbuf_r+0x68>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	1a98      	subs	r0, r3, r2
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	b2f6      	uxtb	r6, r6
 800835a:	4283      	cmp	r3, r0
 800835c:	4637      	mov	r7, r6
 800835e:	dc04      	bgt.n	800836a <__swbuf_r+0x3a>
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f7ff ffbc 	bl	80082e0 <_fflush_r>
 8008368:	b9e0      	cbnz	r0, 80083a4 <__swbuf_r+0x74>
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	3b01      	subs	r3, #1
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	701e      	strb	r6, [r3, #0]
 8008378:	6962      	ldr	r2, [r4, #20]
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	429a      	cmp	r2, r3
 800837e:	d004      	beq.n	800838a <__swbuf_r+0x5a>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	07db      	lsls	r3, r3, #31
 8008384:	d506      	bpl.n	8008394 <__swbuf_r+0x64>
 8008386:	2e0a      	cmp	r6, #10
 8008388:	d104      	bne.n	8008394 <__swbuf_r+0x64>
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f7ff ffa7 	bl	80082e0 <_fflush_r>
 8008392:	b938      	cbnz	r0, 80083a4 <__swbuf_r+0x74>
 8008394:	4638      	mov	r0, r7
 8008396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f000 f806 	bl	80083ac <__swsetup_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d0d5      	beq.n	8008350 <__swbuf_r+0x20>
 80083a4:	f04f 37ff 	mov.w	r7, #4294967295
 80083a8:	e7f4      	b.n	8008394 <__swbuf_r+0x64>
	...

080083ac <__swsetup_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4b2a      	ldr	r3, [pc, #168]	; (8008458 <__swsetup_r+0xac>)
 80083b0:	4605      	mov	r5, r0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	460c      	mov	r4, r1
 80083b6:	b118      	cbz	r0, 80083c0 <__swsetup_r+0x14>
 80083b8:	6a03      	ldr	r3, [r0, #32]
 80083ba:	b90b      	cbnz	r3, 80083c0 <__swsetup_r+0x14>
 80083bc:	f7ff fa36 	bl	800782c <__sinit>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c6:	0718      	lsls	r0, r3, #28
 80083c8:	d422      	bmi.n	8008410 <__swsetup_r+0x64>
 80083ca:	06d9      	lsls	r1, r3, #27
 80083cc:	d407      	bmi.n	80083de <__swsetup_r+0x32>
 80083ce:	2309      	movs	r3, #9
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	e034      	b.n	8008448 <__swsetup_r+0x9c>
 80083de:	0758      	lsls	r0, r3, #29
 80083e0:	d512      	bpl.n	8008408 <__swsetup_r+0x5c>
 80083e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e4:	b141      	cbz	r1, 80083f8 <__swsetup_r+0x4c>
 80083e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d002      	beq.n	80083f4 <__swsetup_r+0x48>
 80083ee:	4628      	mov	r0, r5
 80083f0:	f7ff fb24 	bl	8007a3c <_free_r>
 80083f4:	2300      	movs	r3, #0
 80083f6:	6363      	str	r3, [r4, #52]	; 0x34
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	2300      	movs	r3, #0
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f043 0308 	orr.w	r3, r3, #8
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	b94b      	cbnz	r3, 8008428 <__swsetup_r+0x7c>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800841a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841e:	d003      	beq.n	8008428 <__swsetup_r+0x7c>
 8008420:	4621      	mov	r1, r4
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f850 	bl	80084c8 <__smakebuf_r>
 8008428:	89a0      	ldrh	r0, [r4, #12]
 800842a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800842e:	f010 0301 	ands.w	r3, r0, #1
 8008432:	d00a      	beq.n	800844a <__swsetup_r+0x9e>
 8008434:	2300      	movs	r3, #0
 8008436:	60a3      	str	r3, [r4, #8]
 8008438:	6963      	ldr	r3, [r4, #20]
 800843a:	425b      	negs	r3, r3
 800843c:	61a3      	str	r3, [r4, #24]
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	b943      	cbnz	r3, 8008454 <__swsetup_r+0xa8>
 8008442:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008446:	d1c4      	bne.n	80083d2 <__swsetup_r+0x26>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	0781      	lsls	r1, r0, #30
 800844c:	bf58      	it	pl
 800844e:	6963      	ldrpl	r3, [r4, #20]
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	e7f4      	b.n	800843e <__swsetup_r+0x92>
 8008454:	2000      	movs	r0, #0
 8008456:	e7f7      	b.n	8008448 <__swsetup_r+0x9c>
 8008458:	200000a4 	.word	0x200000a4

0800845c <_sbrk_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_sbrk_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fb86 	bl	8001b78 <_sbrk>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_sbrk_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_sbrk_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20000578 	.word	0x20000578

0800847c <__swhatbuf_r>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	460c      	mov	r4, r1
 8008480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008484:	2900      	cmp	r1, #0
 8008486:	b096      	sub	sp, #88	; 0x58
 8008488:	4615      	mov	r5, r2
 800848a:	461e      	mov	r6, r3
 800848c:	da0d      	bge.n	80084aa <__swhatbuf_r+0x2e>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008494:	f04f 0100 	mov.w	r1, #0
 8008498:	bf0c      	ite	eq
 800849a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800849e:	2340      	movne	r3, #64	; 0x40
 80084a0:	2000      	movs	r0, #0
 80084a2:	6031      	str	r1, [r6, #0]
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	b016      	add	sp, #88	; 0x58
 80084a8:	bd70      	pop	{r4, r5, r6, pc}
 80084aa:	466a      	mov	r2, sp
 80084ac:	f000 f848 	bl	8008540 <_fstat_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dbec      	blt.n	800848e <__swhatbuf_r+0x12>
 80084b4:	9901      	ldr	r1, [sp, #4]
 80084b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084be:	4259      	negs	r1, r3
 80084c0:	4159      	adcs	r1, r3
 80084c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c6:	e7eb      	b.n	80084a0 <__swhatbuf_r+0x24>

080084c8 <__smakebuf_r>:
 80084c8:	898b      	ldrh	r3, [r1, #12]
 80084ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084cc:	079d      	lsls	r5, r3, #30
 80084ce:	4606      	mov	r6, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	d507      	bpl.n	80084e4 <__smakebuf_r+0x1c>
 80084d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2301      	movs	r3, #1
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	b002      	add	sp, #8
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	ab01      	add	r3, sp, #4
 80084e6:	466a      	mov	r2, sp
 80084e8:	f7ff ffc8 	bl	800847c <__swhatbuf_r>
 80084ec:	9900      	ldr	r1, [sp, #0]
 80084ee:	4605      	mov	r5, r0
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff fb0f 	bl	8007b14 <_malloc_r>
 80084f6:	b948      	cbnz	r0, 800850c <__smakebuf_r+0x44>
 80084f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d4ef      	bmi.n	80084e0 <__smakebuf_r+0x18>
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	e7e3      	b.n	80084d4 <__smakebuf_r+0xc>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	6163      	str	r3, [r4, #20]
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	6120      	str	r0, [r4, #16]
 800851e:	b15b      	cbz	r3, 8008538 <__smakebuf_r+0x70>
 8008520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008524:	4630      	mov	r0, r6
 8008526:	f000 f81d 	bl	8008564 <_isatty_r>
 800852a:	b128      	cbz	r0, 8008538 <__smakebuf_r+0x70>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	431d      	orrs	r5, r3
 800853c:	81a5      	strh	r5, [r4, #12]
 800853e:	e7cf      	b.n	80084e0 <__smakebuf_r+0x18>

08008540 <_fstat_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	; (8008560 <_fstat_r+0x20>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	602b      	str	r3, [r5, #0]
 800854e:	f7f9 faea 	bl	8001b26 <_fstat>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	d102      	bne.n	800855c <_fstat_r+0x1c>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	b103      	cbz	r3, 800855c <_fstat_r+0x1c>
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	bf00      	nop
 8008560:	20000578 	.word	0x20000578

08008564 <_isatty_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	; (8008580 <_isatty_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f9 fae9 	bl	8001b46 <_isatty>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_isatty_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_isatty_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000578 	.word	0x20000578

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
