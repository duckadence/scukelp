
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c78  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013534  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801933c  0801933c  0003004c  2**0
                  CONTENTS
  4 .ARM          00000000  0801933c  0801933c  0003004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801933c  0801933c  0003004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801933c  0801933c  0002933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019340  08019340  00029340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08019344  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000004c  08019390  0003004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08019390  0003039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014455  00000000  00000000  000300bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6e  00000000  00000000  00044514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00047288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214d2  00000000  00000000  000484b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157c9  00000000  00000000  0006998a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9214  00000000  00000000  0007f153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000db7  00000000  00000000  00158367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bdc  00000000  00000000  00159120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015dcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df0 	.word	0x08005df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08005df0 	.word	0x08005df0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009be:	801a      	strh	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <arm_cfft_init_2048_f32+0x44>)
 80009c8:	899a      	ldrh	r2, [r3, #12]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	819a      	strh	r2, [r3, #12]
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <arm_cfft_init_2048_f32+0x44>)
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <arm_cfft_init_2048_f32+0x44>)
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	080192d0 	.word	0x080192d0

080009f4 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	801a      	strh	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <arm_cfft_init_1024_f32+0x44>)
 8000a10:	899a      	ldrh	r2, [r3, #12]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	819a      	strh	r2, [r3, #12]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <arm_cfft_init_1024_f32+0x44>)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <arm_cfft_init_1024_f32+0x44>)
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	080192c0 	.word	0x080192c0

08000a3c <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4e:	801a      	strh	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <arm_cfft_init_512_f32+0x44>)
 8000a58:	899a      	ldrh	r2, [r3, #12]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	819a      	strh	r2, [r3, #12]
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <arm_cfft_init_512_f32+0x44>)
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <arm_cfft_init_512_f32+0x44>)
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	080192b0 	.word	0x080192b0

08000a84 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a96:	801a      	strh	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <arm_cfft_init_256_f32+0x44>)
 8000aa0:	899a      	ldrh	r2, [r3, #12]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	819a      	strh	r2, [r3, #12]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <arm_cfft_init_256_f32+0x44>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <arm_cfft_init_256_f32+0x44>)
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	080192a0 	.word	0x080192a0

08000acc <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	801a      	strh	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <arm_cfft_init_128_f32+0x40>)
 8000ae6:	899a      	ldrh	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	819a      	strh	r2, [r3, #12]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <arm_cfft_init_128_f32+0x40>)
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <arm_cfft_init_128_f32+0x40>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	08019290 	.word	0x08019290

08000b10 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2240      	movs	r2, #64	; 0x40
 8000b20:	801a      	strh	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <arm_cfft_init_64_f32+0x40>)
 8000b2a:	899a      	ldrh	r2, [r3, #12]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	819a      	strh	r2, [r3, #12]
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <arm_cfft_init_64_f32+0x40>)
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <arm_cfft_init_64_f32+0x40>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	08019280 	.word	0x08019280

08000b54 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2220      	movs	r2, #32
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <arm_cfft_init_32_f32+0x40>)
 8000b6e:	899a      	ldrh	r2, [r3, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	819a      	strh	r2, [r3, #12]
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <arm_cfft_init_32_f32+0x40>)
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <arm_cfft_init_32_f32+0x40>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	08019270 	.word	0x08019270

08000b98 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	801a      	strh	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <arm_cfft_init_16_f32+0x40>)
 8000bb2:	899a      	ldrh	r2, [r3, #12]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	819a      	strh	r2, [r3, #12]
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <arm_cfft_init_16_f32+0x40>)
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <arm_cfft_init_16_f32+0x40>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	08019260 	.word	0x08019260

08000bdc <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <arm_rfft_fast_init_32_f32+0x14>
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e013      	b.n	8000c18 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ffd0 	bl	8000b98 <arm_cfft_init_16_f32>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	e006      	b.n	8000c18 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <arm_rfft_fast_init_32_f32+0x44>)
 8000c14:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	080112e0 	.word	0x080112e0

08000c24 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <arm_rfft_fast_init_64_f32+0x14>
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e013      	b.n	8000c60 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff8a 	bl	8000b54 <arm_cfft_init_32_f32>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8000c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c50:	e006      	b.n	8000c60 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <arm_rfft_fast_init_64_f32+0x44>)
 8000c5c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08011360 	.word	0x08011360

08000c6c <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <arm_rfft_fast_init_128_f32+0x14>
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e013      	b.n	8000ca8 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff44 	bl	8000b10 <arm_cfft_init_64_f32>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	e006      	b.n	8000ca8 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a03      	ldr	r2, [pc, #12]	; (8000cb0 <arm_rfft_fast_init_128_f32+0x44>)
 8000ca4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08011460 	.word	0x08011460

08000cb4 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <arm_rfft_fast_init_256_f32+0x14>
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e014      	b.n	8000cf2 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fefe 	bl	8000acc <arm_cfft_init_128_f32>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	e007      	b.n	8000cf2 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <arm_rfft_fast_init_256_f32+0x48>)
 8000cee:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08011660 	.word	0x08011660

08000d00 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <arm_rfft_fast_init_512_f32+0x14>
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e014      	b.n	8000d3e <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feb4 	bl	8000a84 <arm_cfft_init_256_f32>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	e007      	b.n	8000d3e <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <arm_rfft_fast_init_512_f32+0x48>)
 8000d3a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08011a60 	.word	0x08011a60

08000d4c <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <arm_rfft_fast_init_1024_f32+0x14>
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e014      	b.n	8000d8a <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe6a 	bl	8000a3c <arm_cfft_init_512_f32>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8000d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d78:	e007      	b.n	8000d8a <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d80:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <arm_rfft_fast_init_1024_f32+0x48>)
 8000d86:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08012260 	.word	0x08012260

08000d98 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <arm_rfft_fast_init_2048_f32+0x14>
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e014      	b.n	8000dd6 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fe20 	bl	80009f4 <arm_cfft_init_1024_f32>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8000dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc4:	e007      	b.n	8000dd6 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dcc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <arm_rfft_fast_init_2048_f32+0x48>)
 8000dd2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	08013260 	.word	0x08013260

08000de4 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <arm_rfft_fast_init_4096_f32+0x14>
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e014      	b.n	8000e22 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fdd6 	bl	80009ac <arm_cfft_init_2048_f32>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	e007      	b.n	8000e22 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e18:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <arm_rfft_fast_init_4096_f32+0x48>)
 8000e1e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	08015260 	.word	0x08015260

08000e30 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e42:	d023      	beq.n	8000e8c <arm_rfft_fast_init_f32+0x5c>
 8000e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e48:	dc50      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e4e:	d023      	beq.n	8000e98 <arm_rfft_fast_init_f32+0x68>
 8000e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e54:	dc4a      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5a:	d023      	beq.n	8000ea4 <arm_rfft_fast_init_f32+0x74>
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	dc44      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e66:	d023      	beq.n	8000eb0 <arm_rfft_fast_init_f32+0x80>
 8000e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e6c:	dc3e      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e72:	d023      	beq.n	8000ebc <arm_rfft_fast_init_f32+0x8c>
 8000e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e78:	dc38      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e7a:	2b80      	cmp	r3, #128	; 0x80
 8000e7c:	d024      	beq.n	8000ec8 <arm_rfft_fast_init_f32+0x98>
 8000e7e:	2b80      	cmp	r3, #128	; 0x80
 8000e80:	dc34      	bgt.n	8000eec <arm_rfft_fast_init_f32+0xbc>
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d02c      	beq.n	8000ee0 <arm_rfft_fast_init_f32+0xb0>
 8000e86:	2b40      	cmp	r3, #64	; 0x40
 8000e88:	d024      	beq.n	8000ed4 <arm_rfft_fast_init_f32+0xa4>
 8000e8a:	e02f      	b.n	8000eec <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ffa9 	bl	8000de4 <arm_rfft_fast_init_4096_f32>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
    break;
 8000e96:	e02c      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff7d 	bl	8000d98 <arm_rfft_fast_init_2048_f32>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8000ea2:	e026      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff51 	bl	8000d4c <arm_rfft_fast_init_1024_f32>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
    break;
 8000eae:	e020      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff25 	bl	8000d00 <arm_rfft_fast_init_512_f32>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8000eba:	e01a      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fef9 	bl	8000cb4 <arm_rfft_fast_init_256_f32>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8000ec6:	e014      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fecf 	bl	8000c6c <arm_rfft_fast_init_128_f32>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8000ed2:	e00e      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fea5 	bl	8000c24 <arm_rfft_fast_init_64_f32>
 8000eda:	4603      	mov	r3, r0
 8000edc:	73fb      	strb	r3, [r7, #15]
    break;
 8000ede:	e008      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fe7b 	bl	8000bdc <arm_rfft_fast_init_32_f32>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8000eea:	e002      	b.n	8000ef2 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	e001      	b.n	8000ef6 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fb75 	bl	80015f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f838 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f9c2 	bl	8001294 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f10:	f000 f8fa 	bl	8001108 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000f14:	f000 f96c 	bl	80011f0 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f18:	f000 f892 	bl	8001040 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <main+0x60>)
 8000f22:	f7ff ff85 	bl	8000e30 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f26:	217f      	movs	r1, #127	; 0x7f
 8000f28:	480e      	ldr	r0, [pc, #56]	; (8000f64 <main+0x64>)
 8000f2a:	f001 fd1d 	bl	8002968 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, BUFFER_SIZE);
 8000f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <main+0x68>)
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <main+0x64>)
 8000f36:	f000 ff01 	bl	8001d3c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <main+0x6c>)
 8000f3c:	f003 fa5c 	bl	80043f8 <HAL_TIM_Base_Start_IT>

  STEPPERS_Init_TMR(&htim15);
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <main+0x70>)
 8000f42:	f004 fb53 	bl	80055ec <STEPPERS_Init_TMR>
  STEPPER_SetSpeed(STEPPER_MOTOR1, 10);
 8000f46:	210a      	movs	r1, #10
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f004 fb99 	bl	8005680 <STEPPER_SetSpeed>
  STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 200000, Stepper1_Dir);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <main+0x74>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4908      	ldr	r1, [pc, #32]	; (8000f78 <main+0x78>)
 8000f56:	2000      	movs	r0, #0
 8000f58:	f004 fe4c 	bl	8005bf4 <STEPPER_Step_NonBlocking>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <main+0x5c>
 8000f5e:	bf00      	nop
 8000f60:	20000368 	.word	0x20000368
 8000f64:	20000068 	.word	0x20000068
 8000f68:	20000164 	.word	0x20000164
 8000f6c:	200000cc 	.word	0x200000cc
 8000f70:	20000118 	.word	0x20000118
 8000f74:	20000380 	.word	0x20000380
 8000f78:	00030d40 	.word	0x00030d40

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2244      	movs	r2, #68	; 0x44
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 ff04 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fa2:	f002 f883 	bl	80030ac <HAL_PWREx_ControlVoltageScaling>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fac:	f000 f9db 	bl	8001366 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fb0:	f002 f85e 	bl	8003070 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <SystemClock_Config+0xc0>)
 8000fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fba:	4a20      	ldr	r2, [pc, #128]	; (800103c <SystemClock_Config+0xc0>)
 8000fbc:	f023 0318 	bic.w	r3, r3, #24
 8000fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fc4:	2314      	movs	r3, #20
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fd4:	2360      	movs	r3, #96	; 0x60
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fe4:	2328      	movs	r3, #40	; 0x28
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f8ad 	bl	8003158 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001004:	f000 f9af 	bl	8001366 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	2104      	movs	r1, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fcad 	bl	8003980 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800102c:	f000 f99b 	bl	8001366 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001030:	f003 f888 	bl	8004144 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001034:	bf00      	nop
 8001036:	3758      	adds	r7, #88	; 0x58
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <MX_ADC1_Init+0xc0>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_ADC1_Init+0xbc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_ADC1_Init+0xbc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001076:	2204      	movs	r2, #4
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_ADC1_Init+0xbc>)
 800107c:	2200      	movs	r2, #0
 800107e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001082:	2200      	movs	r2, #0
 8001084:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001088:	2201      	movs	r2, #1
 800108a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0xbc>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_ADC1_Init+0xbc>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_ADC1_Init+0xbc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC1_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_ADC1_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <MX_ADC1_Init+0xbc>)
 80010b8:	f000 fcfe 	bl	8001ab8 <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010c2:	f000 f950 	bl	8001366 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_ADC1_Init+0xc4>)
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ca:	2306      	movs	r3, #6
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d2:	237f      	movs	r3, #127	; 0x7f
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d6:	2304      	movs	r3, #4
 80010d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_ADC1_Init+0xbc>)
 80010e4:	f000 feb8 	bl	8001e58 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 f93a 	bl	8001366 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000068 	.word	0x20000068
 8001100:	50040000 	.word	0x50040000
 8001104:	14f00020 	.word	0x14f00020

08001108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_TIM2_Init+0xe4>)
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001144:	2203      	movs	r2, #3
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_TIM2_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001150:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_TIM2_Init+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4822      	ldr	r0, [pc, #136]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001164:	f003 f8f0 	bl	8004348 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 f8fa 	bl	8001366 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001180:	f003 fc06 	bl	8004990 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800118a:	f000 f8ec 	bl	8001366 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118e:	4817      	ldr	r0, [pc, #92]	; (80011ec <MX_TIM2_Init+0xe4>)
 8001190:	f003 f986 	bl	80044a0 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 f8e4 	bl	8001366 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <MX_TIM2_Init+0xe4>)
 80011ae:	f004 f85d 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011b8:	f000 f8d5 	bl	8001366 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM2_Init+0xe4>)
 80011d4:	f003 fac8 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011de:	f000 f8c2 	bl	8001366 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3738      	adds	r7, #56	; 0x38
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000cc 	.word	0x200000cc

080011f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_TIM15_Init+0x9c>)
 8001210:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <MX_TIM15_Init+0xa0>)
 8001212:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_TIM15_Init+0x9c>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_TIM15_Init+0x9c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_TIM15_Init+0x9c>)
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_TIM15_Init+0x9c>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_TIM15_Init+0x9c>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM15_Init+0x9c>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800123a:	4814      	ldr	r0, [pc, #80]	; (800128c <MX_TIM15_Init+0x9c>)
 800123c:	f003 f884 	bl	8004348 <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001246:	f000 f88e 	bl	8001366 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM15_Init+0x9c>)
 8001258:	f003 fb9a 	bl	8004990 <HAL_TIM_ConfigClockSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001262:	f000 f880 	bl	8001366 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_TIM15_Init+0x9c>)
 8001274:	f003 fffa 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800127e:	f000 f872 	bl	8001366 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000118 	.word	0x20000118
 8001290:	40014000 	.word	0x40014000

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_GPIO_Init+0x78>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_GPIO_Init+0x78>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_GPIO_Init+0x78>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_GPIO_Init+0x78>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_GPIO_Init+0x78>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_GPIO_Init+0x78>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	211e      	movs	r1, #30
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f001 fead 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80012e6:	231e      	movs	r3, #30
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f001 fd34 	bl	8002d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_ADC_ConvHalfCpltCallback>:
	}

}

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000364 	.word	0x20000364

08001330 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_ADC_ConvCpltCallback+0x1c>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000365 	.word	0x20000365

08001350 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    STEPPER_TMR_OVF_ISR(htim);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f004 fc77 	bl	8005c4c <STEPPER_TMR_OVF_ISR>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136a:	b672      	cpsid	i
}
 800136c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136e:	e7fe      	b.n	800136e <Error_Handler+0x8>

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x44>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	; 0x60
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x44>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09e      	sub	sp, #120	; 0x78
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2254      	movs	r2, #84	; 0x54
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fcdd 	bl	8005d98 <memset>
  if(hadc->Instance==ADC1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_ADC_MspInit+0xc0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d143      	bne.n	8001470 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013f2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013fc:	2310      	movs	r3, #16
 80013fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001400:	2307      	movs	r3, #7
 8001402:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800140c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fc9e 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001422:	f7ff ffa0 	bl	8001366 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_ADC_MspInit+0xc4>)
 800142c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_ADC_MspInit+0xc4>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_ADC_MspInit+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001456:	2301      	movs	r3, #1
 8001458:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800145a:	230b      	movs	r3, #11
 800145c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f001 fc7e 	bl	8002d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3778      	adds	r7, #120	; 0x78
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	50040000 	.word	0x50040000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d114      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	201c      	movs	r0, #28
 80014b0:	f001 fb95 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b4:	201c      	movs	r0, #28
 80014b6:	f001 fbae 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014ba:	e018      	b.n	80014ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_TIM_Base_MspInit+0x7c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d113      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6613      	str	r3, [r2, #96]	; 0x60
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_TIM_Base_MspInit+0x78>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2018      	movs	r0, #24
 80014e4:	f001 fb7b 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014e8:	2018      	movs	r0, #24
 80014ea:	f001 fb94 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40014000 	.word	0x40014000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f8a6 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800155a:	f003 f802 	bl	8004562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000118 	.word	0x20000118

08001568 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM2_IRQHandler+0x10>)
 800156e:	f002 fff8 	bl	8004562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000cc 	.word	0x200000cc

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a4:	f7ff ffea 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	; (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f004 fbeb 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d2:	f7ff fc95 	bl	8000f00 <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80015e4:	08019344 	.word	0x08019344
  ldr r2, =_sbss
 80015e8:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80015ec:	2000039c 	.word	0x2000039c

080015f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_IRQHandler>

080015f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f001 fae3 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f80e 	bl	8001624 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001614:	f7ff feac 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001618:	79fb      	ldrb	r3, [r7, #7]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_InitTick+0x6c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_InitTick+0x70>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x6c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f001 faef 	bl	8002c32 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10f      	bne.n	800167a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d809      	bhi.n	8001674 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f001 fab9 	bl	8002bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_InitTick+0x74>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e007      	b.n	8001684 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e004      	b.n	8001684 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e001      	b.n	8001684 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000384 	.word	0x20000384

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000384 	.word	0x20000384

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <LL_ADC_SetOffset+0x44>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	4313      	orrs	r3, r2
 8001774:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	03fff000 	.word	0x03fff000

0800178c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3360      	adds	r3, #96	; 0x60
 800179a:	461a      	mov	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3360      	adds	r3, #96	; 0x60
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	211f      	movs	r1, #31
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0e9b      	lsrs	r3, r3, #26
 800184c:	f003 011f 	and.w	r1, r3, #31
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	431a      	orrs	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001860:	bf00      	nop
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3314      	adds	r3, #20
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0e5b      	lsrs	r3, r3, #25
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0d1b      	lsrs	r3, r3, #20
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2107      	movs	r1, #7
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	401a      	ands	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0d1b      	lsrs	r3, r3, #20
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0318 	and.w	r3, r3, #24
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e8:	40d9      	lsrs	r1, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	400b      	ands	r3, r1
 80018ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f2:	431a      	orrs	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	0007ffff 	.word	0x0007ffff

0800190c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6093      	str	r3, [r2, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001944:	d101      	bne.n	800194a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800196c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001994:	d101      	bne.n	800199a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_IsEnabled+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_IsEnabled+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_IsDisableOngoing+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_IsDisableOngoing+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e126      	b.n	8001d20 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fc69 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff19 	bl	8001930 <LL_ADC_IsDeepPowerDownEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feff 	bl	800190c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff34 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff18 	bl	8001958 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b28:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_ADC_Init+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_ADC_Init+0x274>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff16 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff76 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80bf 	bne.w	8001d0e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80bb 	bne.w	8001d0e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff23 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb8:	485d      	ldr	r0, [pc, #372]	; (8001d30 <HAL_ADC_Init+0x278>)
 8001bba:	f7ff ff1d 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	485a      	ldr	r0, [pc, #360]	; (8001d34 <HAL_ADC_Init+0x27c>)
 8001bcc:	f7ff fd86 	bl	80016dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e5b      	ldrb	r3, [r3, #25]
 8001bd4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bda:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001be0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001be6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	3b01      	subs	r3, #1
 8001c04:	045b      	lsls	r3, r3, #17
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <HAL_ADC_Init+0x280>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff26 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8001c46:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d13d      	bne.n	8001cca <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d13a      	bne.n	8001cca <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c58:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c60:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c70:	f023 0302 	bic.w	r3, r3, #2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	69b9      	ldr	r1, [r7, #24]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d118      	bne.n	8001cba <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001caa:	430a      	orrs	r2, r1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	e007      	b.n	8001cca <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10c      	bne.n	8001cec <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f023 010f 	bic.w	r1, r3, #15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020f 	bic.w	r2, r2, #15
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d0c:	e007      	b.n	8001d1e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	053e2d63 	.word	0x053e2d63
 8001d30:	50040000 	.word	0x50040000
 8001d34:	50040300 	.word	0x50040300
 8001d38:	fff0c007 	.word	0xfff0c007

08001d3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe8d 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d167      	bne.n	8001e28 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Start_DMA+0x2a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e063      	b.n	8001e2e <HAL_ADC_Start_DMA+0xf2>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fc54 	bl	800261c <ADC_Enable>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d14f      	bne.n	8001e1e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f023 0206 	bic.w	r2, r3, #6
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_ADC_Start_DMA+0xfc>)
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_ADC_Start_DMA+0x100>)
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_ADC_Start_DMA+0x104>)
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	221c      	movs	r2, #28
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0210 	orr.w	r2, r2, #16
 8001de8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3340      	adds	r3, #64	; 0x40
 8001e04:	4619      	mov	r1, r3
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f000 ff1e 	bl	8002c4a <HAL_DMA_Start_IT>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe14 	bl	8001a44 <LL_ADC_REG_StartConversion>
 8001e1c:	e006      	b.n	8001e2c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e26:	e001      	b.n	8001e2c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	080027e7 	.word	0x080027e7
 8001e3c:	080028bf 	.word	0x080028bf
 8001e40:	080028db 	.word	0x080028db

08001e44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b6      	sub	sp, #216	; 0xd8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x22>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e3bb      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x79a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fdf0 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 83a0 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d824      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	3b02      	subs	r3, #2
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d81b      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x8e>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <HAL_ADC_ConfigChannel+0x5c>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ecd 	.word	0x08001ecd
 8001ebc:	08001ed5 	.word	0x08001ed5
 8001ec0:	08001edd 	.word	0x08001edd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eca:	e010      	b.n	8001eee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ecc:	2312      	movs	r3, #18
 8001ece:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ed2:	e00c      	b.n	8001eee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ed4:	2318      	movs	r3, #24
 8001ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eda:	e008      	b.n	8001eee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001efc:	f7ff fc8a 	bl	8001814 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fdb1 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001f0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fdbd 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8001f18:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 81a4 	bne.w	800226e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 819f 	bne.w	800226e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f7ff fc95 	bl	800186c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00a      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6919      	ldr	r1, [r3, #16]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f74:	f7ff fbe6 	bl	8001744 <LL_ADC_SetOffset>
 8001f78:	e179      	b.n	800226e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc03 	bl	800178c <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x14e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fbf8 	bl	800178c <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	e01e      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x18c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fbed 	bl	800178c <LL_ADC_GetOffsetChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e004      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1a4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	e018      	b.n	800202e <HAL_ADC_ConfigChannel+0x1d6>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fbbc 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fba0 	bl	800178c <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_ADC_ConfigChannel+0x214>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fb95 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	e01e      	b.n	80020aa <HAL_ADC_ConfigChannel+0x252>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb8a 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800208a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800208e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e004      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x26a>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	e018      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x29c>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e004      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fb59 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2102      	movs	r1, #2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fb3d 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x2da>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb32 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	0e9b      	lsrs	r3, r3, #26
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	e01e      	b.n	8002170 <HAL_ADC_ConfigChannel+0x318>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2102      	movs	r1, #2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fb27 	bl	800178c <LL_ADC_GetOffsetChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e004      	b.n	800216e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x330>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	e014      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x35a>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800219c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e004      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	2102      	movs	r1, #2
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fafa 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2103      	movs	r1, #3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fade 	bl	800178c <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x398>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2103      	movs	r1, #3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fad3 	bl	800178c <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	e017      	b.n	8002220 <HAL_ADC_ConfigChannel+0x3c8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2103      	movs	r1, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fac8 	bl	800178c <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800220c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e003      	b.n	800221e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x3e0>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	e011      	b.n	800225c <HAL_ADC_ConfigChannel+0x404>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002248:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800224a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e003      	b.n	800225c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800225c:	429a      	cmp	r2, r3
 800225e:	d106      	bne.n	800226e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	2103      	movs	r1, #3
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff faa5 	bl	80017b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fbc0 	bl	80019f8 <LL_ADC_IsEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8140 	bne.w	8002500 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff fb19 	bl	80018c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a8f      	ldr	r2, [pc, #572]	; (80024d4 <HAL_ADC_ConfigChannel+0x67c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	f040 8131 	bne.w	8002500 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x46e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	3301      	adds	r3, #1
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	bf94      	ite	ls
 80022be:	2301      	movls	r3, #1
 80022c0:	2300      	movhi	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	e019      	b.n	80022fa <HAL_ADC_ConfigChannel+0x4a2>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e003      	b.n	80022ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	bf94      	ite	ls
 80022f4:	2301      	movls	r3, #1
 80022f6:	2300      	movhi	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d079      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_ADC_ConfigChannel+0x4c2>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002318:	e015      	b.n	8002346 <HAL_ADC_ConfigChannel+0x4ee>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800232c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e003      	b.n	800233e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	069b      	lsls	r3, r3, #26
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x50e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	e017      	b.n	8002396 <HAL_ADC_ConfigChannel+0x53e>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	ea42 0103 	orr.w	r1, r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x564>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	e018      	b.n	80023ee <HAL_ADC_ConfigChannel+0x596>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e003      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ee:	430b      	orrs	r3, r1
 80023f0:	e081      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_ADC_ConfigChannel+0x5b6>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240c:	e015      	b.n	800243a <HAL_ADC_ConfigChannel+0x5e2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e003      	b.n	8002432 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3301      	adds	r3, #1
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_ADC_ConfigChannel+0x602>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	3301      	adds	r3, #1
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	e017      	b.n	800248a <HAL_ADC_ConfigChannel+0x632>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	61bb      	str	r3, [r7, #24]
  return result;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e003      	b.n	800247e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	ea42 0103 	orr.w	r1, r2, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x65e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0e9b      	lsrs	r3, r3, #26
 80024a0:	3301      	adds	r3, #1
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	3b1e      	subs	r3, #30
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b4:	e01e      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x69c>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	60fb      	str	r3, [r7, #12]
  return result;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e006      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x688>
 80024d2:	bf00      	nop
 80024d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	3b1e      	subs	r3, #30
 80024ee:	051b      	lsls	r3, r3, #20
 80024f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7ff f9b6 	bl	800186c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_ADC_ConfigChannel+0x7a4>)
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d06c      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250c:	483c      	ldr	r0, [pc, #240]	; (8002600 <HAL_ADC_ConfigChannel+0x7a8>)
 800250e:	f7ff f90b 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002512:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_ADC_ConfigChannel+0x7ac>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d127      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d121      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a35      	ldr	r2, [pc, #212]	; (8002608 <HAL_ADC_ConfigChannel+0x7b0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d157      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002536:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800253a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800253e:	4619      	mov	r1, r3
 8002540:	482f      	ldr	r0, [pc, #188]	; (8002600 <HAL_ADC_ConfigChannel+0x7a8>)
 8002542:	f7ff f8de 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_ADC_ConfigChannel+0x7b4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_ADC_ConfigChannel+0x7b8>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002560:	e002      	b.n	8002568 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256e:	e03a      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_ADC_ConfigChannel+0x7bc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d113      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800257a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800257e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <HAL_ADC_ConfigChannel+0x7b0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d12a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002598:	4619      	mov	r1, r3
 800259a:	4819      	ldr	r0, [pc, #100]	; (8002600 <HAL_ADC_ConfigChannel+0x7a8>)
 800259c:	f7ff f8b1 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a0:	e021      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11c      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_ADC_ConfigChannel+0x7b0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_ADC_ConfigChannel+0x7a8>)
 80025ce:	f7ff f898 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 80025d2:	e008      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	37d8      	adds	r7, #216	; 0xd8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	80080000 	.word	0x80080000
 8002600:	50040300 	.word	0x50040300
 8002604:	c7520000 	.word	0xc7520000
 8002608:	50040000 	.word	0x50040000
 800260c:	20000000 	.word	0x20000000
 8002610:	053e2d63 	.word	0x053e2d63
 8002614:	cb840000 	.word	0xcb840000
 8002618:	80000001 	.word	0x80000001

0800261c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f9e3 	bl	80019f8 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d169      	bne.n	800270c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <ADC_Enable+0xfc>)
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e055      	b.n	800270e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f99e 	bl	80019a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800266c:	482b      	ldr	r0, [pc, #172]	; (800271c <ADC_Enable+0x100>)
 800266e:	f7ff f85b 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002672:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <ADC_Enable+0x104>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	4a28      	ldr	r2, [pc, #160]	; (8002724 <ADC_Enable+0x108>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002696:	e002      	b.n	800269e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3b01      	subs	r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f9      	bne.n	8002698 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f80e 	bl	80016c4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026aa:	e028      	b.n	80026fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f9a1 	bl	80019f8 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f971 	bl	80019a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026c6:	f7fe fffd 	bl	80016c4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d914      	bls.n	80026fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d00d      	beq.n	80026fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e007      	b.n	800270e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d1cf      	bne.n	80026ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	8000003f 	.word	0x8000003f
 800271c:	50040300 	.word	0x50040300
 8002720:	20000000 	.word	0x20000000
 8002724:	053e2d63 	.word	0x053e2d63

08002728 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f972 	bl	8001a1e <LL_ADC_IsDisableOngoing>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f959 	bl	80019f8 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d047      	beq.n	80027dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d144      	bne.n	80027dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030d 	and.w	r3, r3, #13
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10c      	bne.n	800277a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f933 	bl	80019d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2203      	movs	r2, #3
 8002770:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002772:	f7fe ffa7 	bl	80016c4 <HAL_GetTick>
 8002776:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002778:	e029      	b.n	80027ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e023      	b.n	80027de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002796:	f7fe ff95 	bl	80016c4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d914      	bls.n	80027ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e007      	b.n	80027de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1dc      	bne.n	8002796 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d14b      	bne.n	8002898 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d021      	beq.n	800285e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe ffe5 	bl	80017ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d032      	beq.n	8002890 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d12b      	bne.n	8002890 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11f      	bne.n	8002890 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002854:	f043 0201 	orr.w	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
 800285c:	e018      	b.n	8002890 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7fe fd4d 	bl	8001330 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002896:	e00e      	b.n	80028b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff facd 	bl	8001e44 <HAL_ADC_ErrorCallback>
}
 80028aa:	e004      	b.n	80028b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7fe fd1f 	bl	8001310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fa9f 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <LL_ADC_StartCalibration>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800292a:	4313      	orrs	r3, r2
 800292c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_IsCalibrationOnGoing>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002954:	d101      	bne.n	800295a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADCEx_Calibration_Start+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e04d      	b.n	8002a20 <HAL_ADCEx_Calibration_Start+0xb8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fecb 	bl	8002728 <ADC_Disable>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d136      	bne.n	8002a0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	f043 0202 	orr.w	r2, r3, #2
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ffa9 	bl	800290e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029bc:	e014      	b.n	80029e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3301      	adds	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80029ca:	d30d      	bcc.n	80029e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f023 0312 	bic.w	r3, r3, #18
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01b      	b.n	8002a20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ffa7 	bl	8002940 <LL_ADC_IsCalibrationOnGoing>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e2      	bne.n	80029be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f023 0303 	bic.w	r3, r3, #3
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
 8002a08:	e005      	b.n	8002a16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff8e 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff29 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff3e 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff8e 	bl	8002b1c <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff31 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa2 	bl	8002b84 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Start_IT+0x20>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e04b      	b.n	8002d02 <HAL_DMA_Start_IT+0xb8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d13a      	bne.n	8002cf4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f831 	bl	8002d0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 020e 	orr.w	r2, r2, #14
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e00f      	b.n	8002ce2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0204 	bic.w	r2, r2, #4
 8002cd0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 020a 	orr.w	r2, r2, #10
 8002ce0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e005      	b.n	8002d00 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d108      	bne.n	8002d4e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d4c:	e007      	b.n	8002d5e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	e148      	b.n	800300e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 813a 	beq.w	8003008 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d005      	beq.n	8002dac <HAL_GPIO_Init+0x40>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d130      	bne.n	8002e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002de2:	2201      	movs	r2, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 0201 	and.w	r2, r3, #1
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d017      	beq.n	8002e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d123      	bne.n	8002e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8094 	beq.w	8003008 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee0:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_GPIO_Init+0x2c0>)
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	4a51      	ldr	r2, [pc, #324]	; (800302c <HAL_GPIO_Init+0x2c0>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6613      	str	r3, [r2, #96]	; 0x60
 8002eec:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_GPIO_Init+0x2c0>)
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef8:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <HAL_GPIO_Init+0x2c4>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f22:	d00d      	beq.n	8002f40 <HAL_GPIO_Init+0x1d4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a43      	ldr	r2, [pc, #268]	; (8003034 <HAL_GPIO_Init+0x2c8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x1d0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <HAL_GPIO_Init+0x2cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_GPIO_Init+0x1cc>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e004      	b.n	8002f42 <HAL_GPIO_Init+0x1d6>
 8002f38:	2307      	movs	r3, #7
 8002f3a:	e002      	b.n	8002f42 <HAL_GPIO_Init+0x1d6>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_GPIO_Init+0x1d6>
 8002f40:	2300      	movs	r3, #0
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	f002 0203 	and.w	r2, r2, #3
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	4093      	lsls	r3, r2
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f52:	4937      	ldr	r1, [pc, #220]	; (8003030 <HAL_GPIO_Init+0x2c4>)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fae:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd8:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_GPIO_Init+0x2d0>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3301      	adds	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f aeaf 	bne.w	8002d7c <HAL_GPIO_Init+0x10>
  }
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000
 8003034:	48000400 	.word	0x48000400
 8003038:	48000800 	.word	0x48000800
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800305c:	e002      	b.n	8003064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000

08003090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000

080030ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d130      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c8:	d038      	beq.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2232      	movs	r2, #50	; 0x32
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	3301      	adds	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f0:	e002      	b.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d102      	bne.n	800310c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f2      	bne.n	80030f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d110      	bne.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00f      	b.n	800313e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d007      	beq.n	800313c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000
 8003150:	20000000 	.word	0x20000000
 8003154:	431bde83 	.word	0x431bde83

08003158 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f000 bc02 	b.w	8003970 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316c:	4b96      	ldr	r3, [pc, #600]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003176:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80e4 	beq.w	8003356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4c>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	f040 808b 	bne.w	80032b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	f040 8087 	bne.w	80032b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a4:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x64>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e3d9      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_RCC_OscConfig+0x7e>
 80031cc:	4b7e      	ldr	r3, [pc, #504]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	e005      	b.n	80031e2 <HAL_RCC_OscConfig+0x8a>
 80031d6:	4b7c      	ldr	r3, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d223      	bcs.n	800322e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fd54 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e3ba      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	496d      	ldr	r1, [pc, #436]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003218:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	4968      	ldr	r1, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
 800322c:	e025      	b.n	800327a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322e:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a65      	ldr	r2, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4960      	ldr	r1, [pc, #384]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	495b      	ldr	r1, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fd14 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e37a      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800327a:	f000 fc81 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	4950      	ldr	r1, [pc, #320]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 8003298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800329a:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f9c0 	bl	8001624 <HAL_InitTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d052      	beq.n	8003354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	e35e      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d032      	beq.n	8003320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ba:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a42      	ldr	r2, [pc, #264]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c6:	f7fe f9fd 	bl	80016c4 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ce:	f7fe f9f9 	bl	80016c4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e347      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a35      	ldr	r2, [pc, #212]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4930      	ldr	r1, [pc, #192]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	492b      	ldr	r1, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
 800331e:	e01a      	b.n	8003356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332c:	f7fe f9ca 	bl	80016c4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003334:	f7fe f9c6 	bl	80016c4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e314      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1dc>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d073      	beq.n	800344a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x21c>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d10e      	bne.n	800338c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d10b      	bne.n	800338c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d063      	beq.n	8003448 <HAL_RCC_OscConfig+0x2f0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d15f      	bne.n	8003448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e2f1      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_OscConfig+0x24c>
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e025      	b.n	80033f0 <HAL_RCC_OscConfig+0x298>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d114      	bne.n	80033d8 <HAL_RCC_OscConfig+0x280>
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <HAL_RCC_OscConfig+0x270>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e013      	b.n	80033f0 <HAL_RCC_OscConfig+0x298>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	080192e0 	.word	0x080192e0
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004
 80033d8:	4ba0      	ldr	r3, [pc, #640]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a9f      	ldr	r2, [pc, #636]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b9d      	ldr	r3, [pc, #628]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9c      	ldr	r2, [pc, #624]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f964 	bl	80016c4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe f960 	bl	80016c4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e2ae      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	4b92      	ldr	r3, [pc, #584]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x2a8>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe f950 	bl	80016c4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe f94c 	bl	80016c4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e29a      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x2d0>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d060      	beq.n	8003518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d005      	beq.n	8003468 <HAL_RCC_OscConfig+0x310>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d119      	bne.n	8003496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d116      	bne.n	8003496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x328>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e277      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	4973      	ldr	r1, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	e040      	b.n	8003518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d023      	beq.n	80034e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349e:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe f90b 	bl	80016c4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fe f907 	bl	80016c4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e255      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	495f      	ldr	r1, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e018      	b.n	8003518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b5d      	ldr	r3, [pc, #372]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5c      	ldr	r2, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80034ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe f8e7 	bl	80016c4 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe f8e3 	bl	80016c4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e231      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03c      	beq.n	800359e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01c      	beq.n	8003566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	4a4a      	ldr	r2, [pc, #296]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f8c2 	bl	80016c4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe f8be 	bl	80016c4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e20c      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCC_OscConfig+0x3ec>
 8003564:	e01b      	b.n	800359e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe f8a5 	bl	80016c4 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe f8a1 	bl	80016c4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1ef      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ef      	bne.n	800357e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80a6 	beq.w	80036f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x504>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d118      	bne.n	8003616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f0:	f7fe f868 	bl	80016c4 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7fe f864 	bl	80016c4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1b2      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_OscConfig+0x508>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d108      	bne.n	8003630 <HAL_RCC_OscConfig+0x4d8>
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a0d      	ldr	r2, [pc, #52]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800362e:	e029      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d115      	bne.n	8003664 <HAL_RCC_OscConfig+0x50c>
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <HAL_RCC_OscConfig+0x504>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a03      	ldr	r2, [pc, #12]	; (800365c <HAL_RCC_OscConfig+0x504>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003658:	e014      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	4b9a      	ldr	r3, [pc, #616]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a99      	ldr	r2, [pc, #612]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a95      	ldr	r2, [pc, #596]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d016      	beq.n	80036ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe f81a 	bl	80016c4 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe f816 	bl	80016c4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e162      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036aa:	4b89      	ldr	r3, [pc, #548]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ed      	beq.n	8003694 <HAL_RCC_OscConfig+0x53c>
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f803 	bl	80016c4 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd ffff 	bl	80016c4 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e14b      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d8:	4b7d      	ldr	r3, [pc, #500]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ed      	bne.n	80036c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a77      	ldr	r2, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03c      	beq.n	800377e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01c      	beq.n	8003746 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800370c:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003712:	4a6f      	ldr	r2, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd ffd2 	bl	80016c4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003724:	f7fd ffce 	bl	80016c4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e11c      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003736:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ef      	beq.n	8003724 <HAL_RCC_OscConfig+0x5cc>
 8003744:	e01b      	b.n	800377e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003746:	4b62      	ldr	r3, [pc, #392]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fd ffb5 	bl	80016c4 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375e:	f7fd ffb1 	bl	80016c4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0ff      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003770:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1ef      	bne.n	800375e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80f3 	beq.w	800396e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	2b02      	cmp	r3, #2
 800378e:	f040 80c9 	bne.w	8003924 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0203 	and.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d12c      	bne.n	8003800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	3b01      	subs	r3, #1
 80037b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d123      	bne.n	8003800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d11b      	bne.n	8003800 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d113      	bne.n	8003800 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	3b01      	subs	r3, #1
 80037e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d109      	bne.n	8003800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	3b01      	subs	r3, #1
 80037fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d06b      	beq.n	80038d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d062      	beq.n	80038cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003806:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0ac      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003816:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800381c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003822:	f7fd ff4f 	bl	80016c4 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382a:	f7fd ff4b 	bl	80016c4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e099      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_OscConfig+0x77c>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003858:	3a01      	subs	r2, #1
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003862:	0212      	lsls	r2, r2, #8
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800386a:	0852      	lsrs	r2, r2, #1
 800386c:	3a01      	subs	r2, #1
 800386e:	0552      	lsls	r2, r2, #21
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003876:	0852      	lsrs	r2, r2, #1
 8003878:	3a01      	subs	r2, #1
 800387a:	0652      	lsls	r2, r2, #25
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003882:	06d2      	lsls	r2, r2, #27
 8003884:	430a      	orrs	r2, r1
 8003886:	4912      	ldr	r1, [pc, #72]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0f      	ldr	r2, [pc, #60]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038a4:	f7fd ff0e 	bl	80016c4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd ff0a 	bl	80016c4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e058      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCC_OscConfig+0x778>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ca:	e050      	b.n	800396e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04f      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d144      	bne.n	800396e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038fc:	f7fd fee2 	bl	80016c4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fede 	bl	80016c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e02c      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x7ac>
 8003922:	e024      	b.n	800396e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d01f      	beq.n	800396a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 8003930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fec5 	bl	80016c4 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fd fec1 	bl	80016c4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e00f      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4905      	ldr	r1, [pc, #20]	; (8003978 <HAL_RCC_OscConfig+0x820>)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x824>)
 8003964:	4013      	ands	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
 8003968:	e001      	b.n	800396e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	feeefffc 	.word	0xfeeefffc

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0e7      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 0207 	bic.w	r2, r3, #7
 80039aa:	4970      	ldr	r1, [pc, #448]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b6e      	ldr	r3, [pc, #440]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cf      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	429a      	cmp	r2, r3
 80039de:	d908      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4960      	ldr	r1, [pc, #384]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04c      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0a6      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e09a      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e08e      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e086      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4943      	ldr	r1, [pc, #268]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fe2c 	bl	80016c4 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd fe28 	bl	80016c4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e06e      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d208      	bcs.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	492b      	ldr	r1, [pc, #172]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d210      	bcs.n	8003af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 0207 	bic.w	r2, r3, #7
 8003adc:	4923      	ldr	r1, [pc, #140]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e036      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	4918      	ldr	r1, [pc, #96]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4910      	ldr	r1, [pc, #64]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b34:	f000 f824 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	490b      	ldr	r1, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1f4>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1fc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd fd63 	bl	8001624 <HAL_InitTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	080192e0 	.word	0x080192e0
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	20000004 	.word	0x20000004

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d121      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d11e      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e005      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e004      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d134      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d003      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0xac>
 8003c24:	e005      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	617b      	str	r3, [r7, #20]
      break;
 8003c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	3301      	adds	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	fb03 f202 	mul.w	r2, r3, r2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	0e5b      	lsrs	r3, r3, #25
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c78:	69bb      	ldr	r3, [r7, #24]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	080192f0 	.word	0x080192f0
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f9ee 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
 8003cb6:	e014      	b.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd0:	f7ff f9de 	bl	8003090 <HAL_PWREx_GetVoltageRange>
 8003cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d10b      	bne.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d919      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf4:	d902      	bls.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e013      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e010      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d902      	bls.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d08:	2303      	movs	r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e00a      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d102      	bne.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d14:	2302      	movs	r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e004      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d101      	bne.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	4909      	ldr	r1, [pc, #36]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d60:	2300      	movs	r3, #0
 8003d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d031      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d7c:	d01a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d82:	d814      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d8c:	d10f      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a5c      	ldr	r2, [pc, #368]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9de 	bl	8004164 <RCCEx_PLLSAI1_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	74fb      	strb	r3, [r7, #19]
      break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dbc:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	494e      	ldr	r1, [pc, #312]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dd2:	e001      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 809e 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dea:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1c:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a39      	ldr	r2, [pc, #228]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e28:	f7fd fc4c 	bl	80016c4 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fd fc48 	bl	80016c4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	74fb      	strb	r3, [r7, #19]
        break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15a      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e56:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fc08 	bl	80016c4 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fc04 	bl	80016c4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ec      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	4904      	ldr	r1, [pc, #16]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4b8a      	ldr	r3, [pc, #552]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a89      	ldr	r2, [pc, #548]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	4b84      	ldr	r3, [pc, #528]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f023 0203 	bic.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4980      	ldr	r1, [pc, #512]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f50:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f023 020c 	bic.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4978      	ldr	r1, [pc, #480]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f72:	4b73      	ldr	r3, [pc, #460]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	496f      	ldr	r1, [pc, #444]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	4967      	ldr	r1, [pc, #412]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb6:	4b62      	ldr	r3, [pc, #392]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	495e      	ldr	r1, [pc, #376]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	4956      	ldr	r1, [pc, #344]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ffa:	4b51      	ldr	r3, [pc, #324]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d028      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401c:	4b48      	ldr	r3, [pc, #288]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4945      	ldr	r1, [pc, #276]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403a:	d106      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403c:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a3f      	ldr	r2, [pc, #252]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004046:	60d3      	str	r3, [r2, #12]
 8004048:	e011      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004052:	d10c      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f882 	bl	8004164 <RCCEx_PLLSAI1_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	492d      	ldr	r1, [pc, #180]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004098:	d106      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409a:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4a28      	ldr	r2, [pc, #160]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a4:	60d3      	str	r3, [r2, #12]
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f853 	bl	8004164 <RCCEx_PLLSAI1_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f6:	d10c      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f830 	bl	8004164 <RCCEx_PLLSAI1_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	4904      	ldr	r1, [pc, #16]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004134:	7cbb      	ldrb	r3, [r7, #18]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000

08004164 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004172:	4b74      	ldr	r3, [pc, #464]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800417e:	4b71      	ldr	r3, [pc, #452]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0203 	and.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d10d      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
       ||
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004196:	4b6b      	ldr	r3, [pc, #428]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
       ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d047      	beq.n	800423a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e044      	b.n	800423a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d018      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x86>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d825      	bhi.n	8004208 <RCCEx_PLLSAI1_Config+0xa4>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d002      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x62>
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d009      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0x74>
 80041c4:	e020      	b.n	8004208 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041c6:	4b5f      	ldr	r3, [pc, #380]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11d      	bne.n	800420e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d6:	e01a      	b.n	800420e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041d8:	4b5a      	ldr	r3, [pc, #360]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e8:	e013      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ea:	4b56      	ldr	r3, [pc, #344]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041f6:	4b53      	ldr	r3, [pc, #332]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004206:	e006      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      break;
 800420c:	e004      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004216:	bf00      	nop
    }

    if(status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800421e:	4b49      	ldr	r3, [pc, #292]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	430b      	orrs	r3, r1
 8004234:	4943      	ldr	r1, [pc, #268]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d17c      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004240:	4b40      	ldr	r3, [pc, #256]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004246:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800424a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424c:	f7fd fa3a 	bl	80016c4 <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004252:	e009      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004254:	f7fd fa36 	bl	80016c4 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d902      	bls.n	8004268 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	73fb      	strb	r3, [r7, #15]
        break;
 8004266:	e005      	b.n	8004274 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004268:	4b36      	ldr	r3, [pc, #216]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ef      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d15f      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d110      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	06d2      	lsls	r2, r2, #27
 8004298:	430a      	orrs	r2, r1
 800429a:	492a      	ldr	r1, [pc, #168]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]
 80042a0:	e027      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d112      	bne.n	80042ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a8:	4b26      	ldr	r3, [pc, #152]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6892      	ldr	r2, [r2, #8]
 80042b8:	0211      	lsls	r1, r2, #8
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6912      	ldr	r2, [r2, #16]
 80042be:	0852      	lsrs	r2, r2, #1
 80042c0:	3a01      	subs	r2, #1
 80042c2:	0552      	lsls	r2, r2, #21
 80042c4:	430a      	orrs	r2, r1
 80042c6:	491f      	ldr	r1, [pc, #124]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	610b      	str	r3, [r1, #16]
 80042cc:	e011      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	0211      	lsls	r1, r2, #8
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6952      	ldr	r2, [r2, #20]
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0652      	lsls	r2, r2, #25
 80042ea:	430a      	orrs	r2, r1
 80042ec:	4915      	ldr	r1, [pc, #84]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd f9e1 	bl	80016c4 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004304:	e009      	b.n	800431a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004306:	f7fd f9dd 	bl	80016c4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	73fb      	strb	r3, [r7, #15]
          break;
 8004318:	e005      	b.n	8004326 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e049      	b.n	80043ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd f886 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fbf4 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e03b      	b.n	8004488 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_TIM_Base_Start_IT+0x9c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0x4e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d004      	beq.n	8004446 <HAL_TIM_Base_Start_IT+0x4e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_TIM_Base_Start_IT+0xa0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d115      	bne.n	8004472 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_TIM_Base_Start_IT+0xa4>)
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b06      	cmp	r3, #6
 8004456:	d015      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x8c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d011      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004470:	e008      	b.n	8004484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e000      	b.n	8004486 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40014000 	.word	0x40014000
 800449c:	00010007 	.word	0x00010007

080044a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e049      	b.n	8004546 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f841 	bl	800454e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fb48 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01b      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0202 	mvn.w	r2, #2
 8004596:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fac2 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80045b2:	e005      	b.n	80045c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fab4 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fac5 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01b      	beq.n	8004612 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0204 	mvn.w	r2, #4
 80045e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa9c 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80045fe:	e005      	b.n	800460c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa8e 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa9f 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01b      	beq.n	800465e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0208 	mvn.w	r2, #8
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fa76 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 800464a:	e005      	b.n	8004658 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fa68 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa79 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01b      	beq.n	80046aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0210 	mvn.w	r2, #16
 800467a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2208      	movs	r2, #8
 8004680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa50 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004696:	e005      	b.n	80046a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fa42 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa53 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0201 	mvn.w	r2, #1
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fc fe41 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fe2d 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fe25 	bl	8005360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fa12 	bl	8004b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f06f 0220 	mvn.w	r2, #32
 8004756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fded 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004782:	2302      	movs	r3, #2
 8004784:	e0ff      	b.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b14      	cmp	r3, #20
 8004792:	f200 80f0 	bhi.w	8004976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	08004977 	.word	0x08004977
 80047a4:	08004977 	.word	0x08004977
 80047a8:	08004977 	.word	0x08004977
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004977 	.word	0x08004977
 80047b4:	08004977 	.word	0x08004977
 80047b8:	08004977 	.word	0x08004977
 80047bc:	08004873 	.word	0x08004873
 80047c0:	08004977 	.word	0x08004977
 80047c4:	08004977 	.word	0x08004977
 80047c8:	08004977 	.word	0x08004977
 80047cc:	080048b3 	.word	0x080048b3
 80047d0:	08004977 	.word	0x08004977
 80047d4:	08004977 	.word	0x08004977
 80047d8:	08004977 	.word	0x08004977
 80047dc:	080048f5 	.word	0x080048f5
 80047e0:	08004977 	.word	0x08004977
 80047e4:	08004977 	.word	0x08004977
 80047e8:	08004977 	.word	0x08004977
 80047ec:	08004935 	.word	0x08004935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fa20 	bl	8004c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0208 	orr.w	r2, r2, #8
 800480a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	619a      	str	r2, [r3, #24]
      break;
 800482e:	e0a5      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa7c 	bl	8004d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	619a      	str	r2, [r3, #24]
      break;
 8004870:	e084      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fad5 	bl	8004e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0208 	orr.w	r2, r2, #8
 800488c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0204 	bic.w	r2, r2, #4
 800489c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	61da      	str	r2, [r3, #28]
      break;
 80048b0:	e064      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fb2d 	bl	8004f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	021a      	lsls	r2, r3, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
      break;
 80048f2:	e043      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb6a 	bl	8004fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0208 	orr.w	r2, r2, #8
 800490e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004932:	e023      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fba2 	bl	8005084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004974:	e002      	b.n	800497c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
      break;
 800497a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop

08004990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_ConfigClockSource+0x1c>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0b6      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x18a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd8>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	f000 8086 	beq.w	8004b06 <HAL_TIM_ConfigClockSource+0x176>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xaa>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x11e>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a10:	2b50      	cmp	r3, #80	; 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xfe>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x13e>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15e>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15e>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15e>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15e>
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	f000 fbef 	bl	800522c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a78:	f000 fbd8 	bl	800522c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fb4c 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fba5 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fb6b 	bl	8005196 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fb95 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fb2c 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fb85 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fb7c 	bl	80051f6 <TIM_ITRx_SetConfig>
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <TIM_Base_SetConfig+0xbc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x20>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_Base_SetConfig+0xbc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_Base_SetConfig+0x52>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0x52>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <TIM_Base_SetConfig+0xc0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0x52>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <TIM_Base_SetConfig+0xc4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <TIM_Base_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0xa0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <TIM_Base_SetConfig+0xc0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0xa0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <TIM_Base_SetConfig+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d103      	bne.n	8004c1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	615a      	str	r2, [r3, #20]
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400

08004c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 0201 	bic.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <TIM_OC1_SetConfig+0xec>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_OC1_SetConfig+0x70>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <TIM_OC1_SetConfig+0xf0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC1_SetConfig+0x70>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <TIM_OC1_SetConfig+0xf4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10c      	bne.n	8004cc6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f023 0308 	bic.w	r3, r3, #8
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <TIM_OC1_SetConfig+0xec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_OC1_SetConfig+0xa2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <TIM_OC1_SetConfig+0xf0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_OC1_SetConfig+0xa2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <TIM_OC1_SetConfig+0xf4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d111      	bne.n	8004d02 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400

08004d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0210 	bic.w	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0320 	bic.w	r3, r3, #32
 8004d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10d      	bne.n	8004db4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC2_SetConfig+0x98>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <TIM_OC2_SetConfig+0xec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC2_SetConfig+0x98>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <TIM_OC2_SetConfig+0xf0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d113      	bne.n	8004df4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400

08004e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <TIM_OC3_SetConfig+0xe4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10d      	bne.n	8004ea6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <TIM_OC3_SetConfig+0xe4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_OC3_SetConfig+0x96>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <TIM_OC3_SetConfig+0xe8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_OC3_SetConfig+0x96>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	; (8004f14 <TIM_OC3_SetConfig+0xec>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d113      	bne.n	8004ee6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400

08004f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <TIM_OC4_SetConfig+0xb0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_OC4_SetConfig+0x74>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <TIM_OC4_SetConfig+0xb4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC4_SetConfig+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <TIM_OC4_SetConfig+0xb8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d109      	bne.n	8004fa0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400

08004fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <TIM_OC5_SetConfig+0xa4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_OC5_SetConfig+0x6a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a12      	ldr	r2, [pc, #72]	; (800507c <TIM_OC5_SetConfig+0xa8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC5_SetConfig+0x6a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a11      	ldr	r2, [pc, #68]	; (8005080 <TIM_OC5_SetConfig+0xac>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d109      	bne.n	8005052 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400

08005084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a14      	ldr	r2, [pc, #80]	; (800512c <TIM_OC6_SetConfig+0xa8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_OC6_SetConfig+0x6c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <TIM_OC6_SetConfig+0xac>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_OC6_SetConfig+0x6c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <TIM_OC6_SetConfig+0xb0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d109      	bne.n	8005104 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f023 0210 	bic.w	r2, r3, #16
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	f043 0307 	orr.w	r3, r3, #7
 8005218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	021a      	lsls	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	431a      	orrs	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005280:	2302      	movs	r3, #2
 8005282:	e04f      	b.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d004      	beq.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10c      	bne.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40014000 	.word	0x40014000

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537a:	f107 0310 	add.w	r3, r7, #16
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8005396:	f000 fccf 	bl	8005d38 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053a0:	e102      	b.n	80055a8 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80053a8:	e079      	b.n	800549e <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 80053aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053ae:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80053b2:	4889      	ldr	r0, [pc, #548]	; (80055d8 <STEPPERS_Init+0x264>)
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	440b      	add	r3, r1
 80053bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053c4:	d10c      	bne.n	80053e0 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c6:	4b85      	ldr	r3, [pc, #532]	; (80055dc <STEPPERS_Init+0x268>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	4a84      	ldr	r2, [pc, #528]	; (80055dc <STEPPERS_Init+0x268>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053d2:	4b82      	ldr	r3, [pc, #520]	; (80055dc <STEPPERS_Init+0x268>)
 80053d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e034      	b.n	800544a <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80053e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80053e4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80053e8:	487b      	ldr	r0, [pc, #492]	; (80055d8 <STEPPERS_Init+0x264>)
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	440b      	add	r3, r1
 80053f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053f6:	4a7a      	ldr	r2, [pc, #488]	; (80055e0 <STEPPERS_Init+0x26c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d10c      	bne.n	8005416 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fc:	4b77      	ldr	r3, [pc, #476]	; (80055dc <STEPPERS_Init+0x268>)
 80053fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005400:	4a76      	ldr	r2, [pc, #472]	; (80055dc <STEPPERS_Init+0x268>)
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005408:	4b74      	ldr	r3, [pc, #464]	; (80055dc <STEPPERS_Init+0x268>)
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	e019      	b.n	800544a <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8005416:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800541a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800541e:	486e      	ldr	r0, [pc, #440]	; (80055d8 <STEPPERS_Init+0x264>)
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	440b      	add	r3, r1
 8005428:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800542c:	4a6d      	ldr	r2, [pc, #436]	; (80055e4 <STEPPERS_Init+0x270>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10b      	bne.n	800544a <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005432:	4b6a      	ldr	r3, [pc, #424]	; (80055dc <STEPPERS_Init+0x268>)
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	4a69      	ldr	r2, [pc, #420]	; (80055dc <STEPPERS_Init+0x268>)
 8005438:	f043 0304 	orr.w	r3, r3, #4
 800543c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543e:	4b67      	ldr	r3, [pc, #412]	; (80055dc <STEPPERS_Init+0x268>)
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 800544a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800544e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005452:	4861      	ldr	r0, [pc, #388]	; (80055d8 <STEPPERS_Init+0x264>)
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	440b      	add	r3, r1
 800545e:	3308      	adds	r3, #8
 8005460:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005464:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8005472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005476:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800547a:	4857      	ldr	r0, [pc, #348]	; (80055d8 <STEPPERS_Init+0x264>)
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	440b      	add	r3, r1
 8005484:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005488:	f107 0210 	add.w	r2, r7, #16
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fc6c 	bl	8002d6c <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8005494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005498:	3301      	adds	r3, #1
 800549a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800549e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d981      	bls.n	80053aa <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 80054a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054aa:	494f      	ldr	r1, [pc, #316]	; (80055e8 <STEPPERS_Init+0x274>)
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	3311      	adds	r3, #17
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 80054bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054c0:	4949      	ldr	r1, [pc, #292]	; (80055e8 <STEPPERS_Init+0x274>)
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	330f      	adds	r3, #15
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 80054d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054d6:	4944      	ldr	r1, [pc, #272]	; (80055e8 <STEPPERS_Init+0x274>)
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 80054e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054ea:	493f      	ldr	r1, [pc, #252]	; (80055e8 <STEPPERS_Init+0x274>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3304      	adds	r3, #4
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 80054fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005500:	4939      	ldr	r1, [pc, #228]	; (80055e8 <STEPPERS_Init+0x274>)
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3308      	adds	r3, #8
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8005512:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005516:	4934      	ldr	r1, [pc, #208]	; (80055e8 <STEPPERS_Init+0x274>)
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	330e      	adds	r3, #14
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8005528:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800552c:	492a      	ldr	r1, [pc, #168]	; (80055d8 <STEPPERS_Init+0x264>)
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	331b      	adds	r3, #27
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d00b      	beq.n	8005558 <STEPPERS_Init+0x1e4>
 8005540:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005544:	4924      	ldr	r1, [pc, #144]	; (80055d8 <STEPPERS_Init+0x264>)
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	331b      	adds	r3, #27
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8005558:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800555c:	4922      	ldr	r1, [pc, #136]	; (80055e8 <STEPPERS_Init+0x274>)
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3310      	adds	r3, #16
 800556a:	2204      	movs	r2, #4
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e016      	b.n	800559e <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8005570:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005574:	4918      	ldr	r1, [pc, #96]	; (80055d8 <STEPPERS_Init+0x264>)
 8005576:	4613      	mov	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	331b      	adds	r3, #27
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d10a      	bne.n	800559e <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8005588:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800558c:	4916      	ldr	r1, [pc, #88]	; (80055e8 <STEPPERS_Init+0x274>)
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3310      	adds	r3, #16
 800559a:	2208      	movs	r2, #8
 800559c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 800559e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055a2:	3301      	adds	r3, #1
 80055a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f43f aef8 	beq.w	80053a2 <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055b2:	2301      	movs	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c2:	f107 0310 	add.w	r3, r7, #16
 80055c6:	4619      	mov	r1, r3
 80055c8:	4805      	ldr	r0, [pc, #20]	; (80055e0 <STEPPERS_Init+0x26c>)
 80055ca:	f7fd fbcf 	bl	8002d6c <HAL_GPIO_Init>
}
 80055ce:	bf00      	nop
 80055d0:	3728      	adds	r7, #40	; 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08019320 	.word	0x08019320
 80055dc:	40021000 	.word	0x40021000
 80055e0:	48000400 	.word	0x48000400
 80055e4:	48000800 	.word	0x48000800
 80055e8:	20000388 	.word	0x20000388

080055ec <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005602:	f107 0308 	add.w	r3, r7, #8
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8005612:	f7ff feaf 	bl	8005374 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8005616:	f44f 7348 	mov.w	r3, #800	; 0x320
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <STEPPERS_Init_TMR+0x90>)
 8005620:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2263      	movs	r2, #99	; 0x63
 8005626:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fe fe80 	bl	8004348 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800564c:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff f99b 	bl	8004990 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fdff 	bl	800526c <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fe fec2 	bl	80043f8 <HAL_TIM_Base_Start_IT>
    }
}
 8005674:	bf00      	nop
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40014000 	.word	0x40014000

08005680 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	460a      	mov	r2, r1
 800568a:	71fb      	strb	r3, [r7, #7]
 800568c:	4613      	mov	r3, r2
 800568e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8005694:	79fa      	ldrb	r2, [r7, #7]
 8005696:	4928      	ldr	r1, [pc, #160]	; (8005738 <STEPPER_SetSpeed+0xb8>)
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	330c      	adds	r3, #12
 80056a4:	88ba      	ldrh	r2, [r7, #4]
 80056a6:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80056a8:	79fa      	ldrb	r2, [r7, #7]
 80056aa:	4924      	ldr	r1, [pc, #144]	; (800573c <STEPPER_SetSpeed+0xbc>)
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	331b      	adds	r3, #27
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d10b      	bne.n	80056d6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 80056be:	79fa      	ldrb	r2, [r7, #7]
 80056c0:	491e      	ldr	r1, [pc, #120]	; (800573c <STEPPER_SetSpeed+0xbc>)
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3318      	adds	r3, #24
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e009      	b.n	80056ea <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	4918      	ldr	r1, [pc, #96]	; (800573c <STEPPER_SetSpeed+0xbc>)
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3318      	adds	r3, #24
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 80056ea:	88bb      	ldrh	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fa feae 	bl	8000454 <__aeabi_ui2d>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	a10c      	add	r1, pc, #48	; (adr r1, 8005730 <STEPPER_SetSpeed+0xb0>)
 80056fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005702:	f7fb f84b 	bl	800079c <__aeabi_ddiv>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	79fc      	ldrb	r4, [r7, #7]
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	f7fb f92c 	bl	800096c <__aeabi_d2uiz>
 8005714:	4602      	mov	r2, r0
 8005716:	4908      	ldr	r1, [pc, #32]	; (8005738 <STEPPER_SetSpeed+0xb8>)
 8005718:	4623      	mov	r3, r4
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4423      	add	r3, r4
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3308      	adds	r3, #8
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}
 800572e:	bf00      	nop
 8005730:	00000000 	.word	0x00000000
 8005734:	40ed4c00 	.word	0x40ed4c00
 8005738:	20000388 	.word	0x20000388
 800573c:	08019320 	.word	0x08019320

08005740 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 800574a:	79fa      	ldrb	r2, [r7, #7]
 800574c:	4999      	ldr	r1, [pc, #612]	; (80059b4 <STEPPER_One_Step+0x274>)
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	331a      	adds	r3, #26
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 81c4 	bne.w	8005aea <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	4993      	ldr	r1, [pc, #588]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	331b      	adds	r3, #27
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 8088 	bne.w	800588a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800577a:	79fa      	ldrb	r2, [r7, #7]
 800577c:	498d      	ldr	r1, [pc, #564]	; (80059b4 <STEPPER_One_Step+0x274>)
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	79fa      	ldrb	r2, [r7, #7]
 800578c:	4989      	ldr	r1, [pc, #548]	; (80059b4 <STEPPER_One_Step+0x274>)
 800578e:	4613      	mov	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3310      	adds	r3, #16
 800579a:	8819      	ldrh	r1, [r3, #0]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	4c86      	ldr	r4, [pc, #536]	; (80059b8 <STEPPER_One_Step+0x278>)
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4423      	add	r3, r4
 80057aa:	330f      	adds	r3, #15
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b82      	ldr	r3, [pc, #520]	; (80059bc <STEPPER_One_Step+0x27c>)
 80057b2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fd fc42 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80057bc:	79fa      	ldrb	r2, [r7, #7]
 80057be:	497d      	ldr	r1, [pc, #500]	; (80059b4 <STEPPER_One_Step+0x274>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	3304      	adds	r3, #4
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	79fa      	ldrb	r2, [r7, #7]
 80057d0:	4978      	ldr	r1, [pc, #480]	; (80059b4 <STEPPER_One_Step+0x274>)
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	3312      	adds	r3, #18
 80057de:	8819      	ldrh	r1, [r3, #0]
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	4c75      	ldr	r4, [pc, #468]	; (80059b8 <STEPPER_One_Step+0x278>)
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4423      	add	r3, r4
 80057ee:	330f      	adds	r3, #15
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	4a72      	ldr	r2, [pc, #456]	; (80059bc <STEPPER_One_Step+0x27c>)
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f7fd fc20 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8005800:	79fa      	ldrb	r2, [r7, #7]
 8005802:	496c      	ldr	r1, [pc, #432]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3308      	adds	r3, #8
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	79fa      	ldrb	r2, [r7, #7]
 8005814:	4967      	ldr	r1, [pc, #412]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3314      	adds	r3, #20
 8005822:	8819      	ldrh	r1, [r3, #0]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4c64      	ldr	r4, [pc, #400]	; (80059b8 <STEPPER_One_Step+0x278>)
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4423      	add	r3, r4
 8005832:	330f      	adds	r3, #15
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	4a61      	ldr	r2, [pc, #388]	; (80059bc <STEPPER_One_Step+0x27c>)
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	789b      	ldrb	r3, [r3, #2]
 800583e:	461a      	mov	r2, r3
 8005840:	f7fd fbfe 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8005844:	79fa      	ldrb	r2, [r7, #7]
 8005846:	495b      	ldr	r1, [pc, #364]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	330c      	adds	r3, #12
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	79fa      	ldrb	r2, [r7, #7]
 8005858:	4956      	ldr	r1, [pc, #344]	; (80059b4 <STEPPER_One_Step+0x274>)
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	3316      	adds	r3, #22
 8005866:	8819      	ldrh	r1, [r3, #0]
 8005868:	79fa      	ldrb	r2, [r7, #7]
 800586a:	4c53      	ldr	r4, [pc, #332]	; (80059b8 <STEPPER_One_Step+0x278>)
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4423      	add	r3, r4
 8005876:	330f      	adds	r3, #15
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	4a50      	ldr	r2, [pc, #320]	; (80059bc <STEPPER_One_Step+0x27c>)
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fd fbdc 	bl	8003040 <HAL_GPIO_WritePin>
 8005888:	e12f      	b.n	8005aea <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800588a:	79fa      	ldrb	r2, [r7, #7]
 800588c:	4949      	ldr	r1, [pc, #292]	; (80059b4 <STEPPER_One_Step+0x274>)
 800588e:	4613      	mov	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	331b      	adds	r3, #27
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	f040 8091 	bne.w	80059c4 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80058a2:	79fa      	ldrb	r2, [r7, #7]
 80058a4:	4943      	ldr	r1, [pc, #268]	; (80059b4 <STEPPER_One_Step+0x274>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	493f      	ldr	r1, [pc, #252]	; (80059b4 <STEPPER_One_Step+0x274>)
 80058b6:	4613      	mov	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	3310      	adds	r3, #16
 80058c2:	8819      	ldrh	r1, [r3, #0]
 80058c4:	79fa      	ldrb	r2, [r7, #7]
 80058c6:	4c3c      	ldr	r4, [pc, #240]	; (80059b8 <STEPPER_One_Step+0x278>)
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4423      	add	r3, r4
 80058d2:	330f      	adds	r3, #15
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <STEPPER_One_Step+0x280>)
 80058da:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fd fbae 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80058e4:	79fa      	ldrb	r2, [r7, #7]
 80058e6:	4933      	ldr	r1, [pc, #204]	; (80059b4 <STEPPER_One_Step+0x274>)
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	3304      	adds	r3, #4
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	79fa      	ldrb	r2, [r7, #7]
 80058f8:	492e      	ldr	r1, [pc, #184]	; (80059b4 <STEPPER_One_Step+0x274>)
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3312      	adds	r3, #18
 8005906:	8819      	ldrh	r1, [r3, #0]
 8005908:	79fa      	ldrb	r2, [r7, #7]
 800590a:	4c2b      	ldr	r4, [pc, #172]	; (80059b8 <STEPPER_One_Step+0x278>)
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4423      	add	r3, r4
 8005916:	330f      	adds	r3, #15
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <STEPPER_One_Step+0x280>)
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fd fb8c 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8005928:	79fa      	ldrb	r2, [r7, #7]
 800592a:	4922      	ldr	r1, [pc, #136]	; (80059b4 <STEPPER_One_Step+0x274>)
 800592c:	4613      	mov	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	3308      	adds	r3, #8
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	79fa      	ldrb	r2, [r7, #7]
 800593c:	491d      	ldr	r1, [pc, #116]	; (80059b4 <STEPPER_One_Step+0x274>)
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3314      	adds	r3, #20
 800594a:	8819      	ldrh	r1, [r3, #0]
 800594c:	79fa      	ldrb	r2, [r7, #7]
 800594e:	4c1a      	ldr	r4, [pc, #104]	; (80059b8 <STEPPER_One_Step+0x278>)
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4423      	add	r3, r4
 800595a:	330f      	adds	r3, #15
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <STEPPER_One_Step+0x280>)
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	789b      	ldrb	r3, [r3, #2]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fd fb6a 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800596c:	79fa      	ldrb	r2, [r7, #7]
 800596e:	4911      	ldr	r1, [pc, #68]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	330c      	adds	r3, #12
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	79fa      	ldrb	r2, [r7, #7]
 8005980:	490c      	ldr	r1, [pc, #48]	; (80059b4 <STEPPER_One_Step+0x274>)
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3316      	adds	r3, #22
 800598e:	8819      	ldrh	r1, [r3, #0]
 8005990:	79fa      	ldrb	r2, [r7, #7]
 8005992:	4c09      	ldr	r4, [pc, #36]	; (80059b8 <STEPPER_One_Step+0x278>)
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4423      	add	r3, r4
 800599e:	330f      	adds	r3, #15
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	4a07      	ldr	r2, [pc, #28]	; (80059c0 <STEPPER_One_Step+0x280>)
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	78db      	ldrb	r3, [r3, #3]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f7fd fb48 	bl	8003040 <HAL_GPIO_WritePin>
 80059b0:	e09b      	b.n	8005aea <STEPPER_One_Step+0x3aa>
 80059b2:	bf00      	nop
 80059b4:	08019320 	.word	0x08019320
 80059b8:	20000388 	.word	0x20000388
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80059c4:	79fa      	ldrb	r2, [r7, #7]
 80059c6:	4988      	ldr	r1, [pc, #544]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	331b      	adds	r3, #27
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f040 8087 	bne.w	8005aea <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80059dc:	79fa      	ldrb	r2, [r7, #7]
 80059de:	4982      	ldr	r1, [pc, #520]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	79fa      	ldrb	r2, [r7, #7]
 80059ee:	497e      	ldr	r1, [pc, #504]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3310      	adds	r3, #16
 80059fc:	8819      	ldrh	r1, [r3, #0]
 80059fe:	79fa      	ldrb	r2, [r7, #7]
 8005a00:	4c7a      	ldr	r4, [pc, #488]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4423      	add	r3, r4
 8005a0c:	330f      	adds	r3, #15
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b77      	ldr	r3, [pc, #476]	; (8005bf0 <STEPPER_One_Step+0x4b0>)
 8005a14:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f7fd fb11 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8005a1e:	79fa      	ldrb	r2, [r7, #7]
 8005a20:	4971      	ldr	r1, [pc, #452]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	79fa      	ldrb	r2, [r7, #7]
 8005a32:	496d      	ldr	r1, [pc, #436]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3312      	adds	r3, #18
 8005a40:	8819      	ldrh	r1, [r3, #0]
 8005a42:	79fa      	ldrb	r2, [r7, #7]
 8005a44:	4c69      	ldr	r4, [pc, #420]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4423      	add	r3, r4
 8005a50:	330f      	adds	r3, #15
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	4a66      	ldr	r2, [pc, #408]	; (8005bf0 <STEPPER_One_Step+0x4b0>)
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f7fd faef 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8005a62:	79fa      	ldrb	r2, [r7, #7]
 8005a64:	4960      	ldr	r1, [pc, #384]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3308      	adds	r3, #8
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	79fa      	ldrb	r2, [r7, #7]
 8005a76:	495c      	ldr	r1, [pc, #368]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	3314      	adds	r3, #20
 8005a84:	8819      	ldrh	r1, [r3, #0]
 8005a86:	79fa      	ldrb	r2, [r7, #7]
 8005a88:	4c58      	ldr	r4, [pc, #352]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4423      	add	r3, r4
 8005a94:	330f      	adds	r3, #15
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4a55      	ldr	r2, [pc, #340]	; (8005bf0 <STEPPER_One_Step+0x4b0>)
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	789b      	ldrb	r3, [r3, #2]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f7fd facd 	bl	8003040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8005aa6:	79fa      	ldrb	r2, [r7, #7]
 8005aa8:	494f      	ldr	r1, [pc, #316]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	79fa      	ldrb	r2, [r7, #7]
 8005aba:	494b      	ldr	r1, [pc, #300]	; (8005be8 <STEPPER_One_Step+0x4a8>)
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3316      	adds	r3, #22
 8005ac8:	8819      	ldrh	r1, [r3, #0]
 8005aca:	79fa      	ldrb	r2, [r7, #7]
 8005acc:	4c47      	ldr	r4, [pc, #284]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4423      	add	r3, r4
 8005ad8:	330f      	adds	r3, #15
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	4a44      	ldr	r2, [pc, #272]	; (8005bf0 <STEPPER_One_Step+0x4b0>)
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f7fd faab 	bl	8003040 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8005aea:	79fa      	ldrb	r2, [r7, #7]
 8005aec:	493f      	ldr	r1, [pc, #252]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3311      	adds	r3, #17
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d132      	bne.n	8005b66 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8005b00:	79fa      	ldrb	r2, [r7, #7]
 8005b02:	493a      	ldr	r1, [pc, #232]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	330f      	adds	r3, #15
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d112      	bne.n	8005b3c <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8005b16:	79f9      	ldrb	r1, [r7, #7]
 8005b18:	79fa      	ldrb	r2, [r7, #7]
 8005b1a:	4834      	ldr	r0, [pc, #208]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4403      	add	r3, r0
 8005b26:	3310      	adds	r3, #16
 8005b28:	7818      	ldrb	r0, [r3, #0]
 8005b2a:	4930      	ldr	r1, [pc, #192]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	330f      	adds	r3, #15
 8005b38:	4602      	mov	r2, r0
 8005b3a:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	492b      	ldr	r1, [pc, #172]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	330f      	adds	r3, #15
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b2d8      	uxtb	r0, r3
 8005b52:	4926      	ldr	r1, [pc, #152]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	330f      	adds	r3, #15
 8005b60:	4602      	mov	r2, r0
 8005b62:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8005b64:	e03c      	b.n	8005be0 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8005b66:	79fa      	ldrb	r2, [r7, #7]
 8005b68:	4920      	ldr	r1, [pc, #128]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3311      	adds	r3, #17
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d131      	bne.n	8005be0 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8005b7c:	79fa      	ldrb	r2, [r7, #7]
 8005b7e:	491b      	ldr	r1, [pc, #108]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	330f      	adds	r3, #15
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	b2d8      	uxtb	r0, r3
 8005b92:	4916      	ldr	r1, [pc, #88]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	330f      	adds	r3, #15
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8005ba4:	79fa      	ldrb	r2, [r7, #7]
 8005ba6:	4911      	ldr	r1, [pc, #68]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	330f      	adds	r3, #15
 8005bb4:	7819      	ldrb	r1, [r3, #0]
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	480c      	ldr	r0, [pc, #48]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4403      	add	r3, r0
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	d109      	bne.n	8005be0 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8005bcc:	79fa      	ldrb	r2, [r7, #7]
 8005bce:	4907      	ldr	r1, [pc, #28]	; (8005bec <STEPPER_One_Step+0x4ac>)
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	330f      	adds	r3, #15
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	08019320 	.word	0x08019320
 8005bec:	20000388 	.word	0x20000388
 8005bf0:	2000002c 	.word	0x2000002c

08005bf4 <STEPPER_Step_NonBlocking>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
}

void STEPPER_Step_NonBlocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	71fb      	strb	r3, [r7, #7]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71bb      	strb	r3, [r7, #6]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
 8005c04:	79fa      	ldrb	r2, [r7, #7]
 8005c06:	4910      	ldr	r1, [pc, #64]	; (8005c48 <STEPPER_Step_NonBlocking+0x54>)
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	79fa      	ldrb	r2, [r7, #7]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	4419      	add	r1, r3
 8005c1a:	480b      	ldr	r0, [pc, #44]	; (8005c48 <STEPPER_Step_NonBlocking+0x54>)
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4403      	add	r3, r0
 8005c26:	6019      	str	r1, [r3, #0]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	4907      	ldr	r1, [pc, #28]	; (8005c48 <STEPPER_Step_NonBlocking+0x54>)
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3311      	adds	r3, #17
 8005c38:	79ba      	ldrb	r2, [r7, #6]
 8005c3a:	701a      	strb	r2, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	20000388 	.word	0x20000388

08005c4c <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <STEPPER_TMR_OVF_ISR+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d162      	bne.n	8005d28 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	e05c      	b.n	8005d22 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	4932      	ldr	r1, [pc, #200]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	3304      	adds	r3, #4
 8005c78:	6819      	ldr	r1, [r3, #0]
 8005c7a:	7bfa      	ldrb	r2, [r7, #15]
 8005c7c:	482d      	ldr	r0, [pc, #180]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4403      	add	r3, r0
 8005c88:	3308      	adds	r3, #8
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4299      	cmp	r1, r3
 8005c8e:	d333      	bcc.n	8005cf8 <STEPPER_TMR_OVF_ISR+0xac>
 8005c90:	7bfa      	ldrb	r2, [r7, #15]
 8005c92:	4928      	ldr	r1, [pc, #160]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	330e      	adds	r3, #14
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d028      	beq.n	8005cf8 <STEPPER_TMR_OVF_ISR+0xac>
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	4922      	ldr	r1, [pc, #136]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01e      	beq.n	8005cf8 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fd3f 	bl	8005740 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	491b      	ldr	r1, [pc, #108]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1e59      	subs	r1, r3, #1
 8005cd4:	4817      	ldr	r0, [pc, #92]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4403      	add	r3, r0
 8005ce0:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	4913      	ldr	r1, [pc, #76]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e011      	b.n	8005d1c <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	490e      	ldr	r1, [pc, #56]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3304      	adds	r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1c59      	adds	r1, r3, #1
 8005d0c:	4809      	ldr	r0, [pc, #36]	; (8005d34 <STEPPER_TMR_OVF_ISR+0xe8>)
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4403      	add	r3, r0
 8005d18:	3304      	adds	r3, #4
 8005d1a:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d09f      	beq.n	8005c68 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40014000 	.word	0x40014000
 8005d34:	20000388 	.word	0x20000388

08005d38 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <DWT_Delay_Init+0x58>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <DWT_Delay_Init+0x58>)
 8005d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d46:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <DWT_Delay_Init+0x58>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <DWT_Delay_Init+0x58>)
 8005d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d52:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005d72:	bf00      	nop
    __ASM volatile ("NOP");
 8005d74:	bf00      	nop
    __ASM volatile ("NOP");
 8005d76:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <DWT_Delay_Init+0x5c>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8005d84:	2301      	movs	r3, #1
    }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000edf0 	.word	0xe000edf0
 8005d94:	e0001000 	.word	0xe0001000

08005d98 <memset>:
 8005d98:	4402      	add	r2, r0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4d0d      	ldr	r5, [pc, #52]	; (8005de0 <__libc_init_array+0x38>)
 8005dac:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	2600      	movs	r6, #0
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	4d0b      	ldr	r5, [pc, #44]	; (8005de8 <__libc_init_array+0x40>)
 8005dba:	4c0c      	ldr	r4, [pc, #48]	; (8005dec <__libc_init_array+0x44>)
 8005dbc:	f000 f818 	bl	8005df0 <_init>
 8005dc0:	1b64      	subs	r4, r4, r5
 8005dc2:	10a4      	asrs	r4, r4, #2
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd0:	4798      	blx	r3
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dda:	4798      	blx	r3
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	0801933c 	.word	0x0801933c
 8005de4:	0801933c 	.word	0x0801933c
 8005de8:	0801933c 	.word	0x0801933c
 8005dec:	08019340 	.word	0x08019340

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
