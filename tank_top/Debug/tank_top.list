
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013680  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e4d4  0801e4d4  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e4d4  0801e4d4  0002e4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e4dc  0801e4dc  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e4dc  0801e4dc  0002e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e4e0  0801e4e0  0002e4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801e4e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5b4  200000a8  0801e58c  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a65c  0801e58c  0003a65c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b3e7  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a99  00000000  00000000  0004b502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0004efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023963  00000000  00000000  00050638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8f7  00000000  00000000  00073f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0455  00000000  00000000  00092892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000112d  00000000  00000000  00172ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000685c  00000000  00000000  00173e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae3c 	.word	0x0800ae3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800ae3c 	.word	0x0800ae3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b08b      	sub	sp, #44	; 0x2c
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000e78:	e030      	b.n	8000edc <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1d1a      	adds	r2, r3, #4
 8000e7e:	60fa      	str	r2, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1d1a      	adds	r2, r3, #4
 8000e88:	60fa      	str	r2, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000e8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e92:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	60ba      	str	r2, [r7, #8]
 8000ea8:	edc7 7a06 	vstr	s15, [r7, #24]
 8000eac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000eae:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	db07      	blt.n	8000ecc <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec0:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000eca:	e004      	b.n	8000ed6 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000ed4:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1cb      	bne.n	8000e7a <arm_cmplx_mag_f32+0x12>
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	372c      	adds	r7, #44	; 0x2c
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e043      	b.n	8000f8c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	441a      	add	r2, r3
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	440b      	add	r3, r1
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	3301      	adds	r3, #1
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	441a      	add	r2, r3
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	440b      	add	r3, r1
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

    i += 2;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3b7      	bcc.n	8000f04 <arm_bitreversal_32+0x14>
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b0a0      	sub	sp, #128	; 0x80
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fc8:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fe0:	4413      	add	r3, r2
 8000fe2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fea:	e1b6      	b.n	800135a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8001004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800100a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8001010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8001016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800101c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800102e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8001034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800103a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800104c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001050:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	603a      	str	r2, [r7, #0]
 800105a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001062:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001066:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	1d1a      	adds	r2, r3, #4
 800106e:	603a      	str	r2, [r7, #0]
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001078:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800107c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	603a      	str	r2, [r7, #0]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800108e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001092:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	1d1a      	adds	r2, r3, #4
 800109a:	603a      	str	r2, [r7, #0]
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80010a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80010b4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80010c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80010d4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80010d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80010e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ee:	1d1a      	adds	r2, r3, #4
 80010f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80010fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80010fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001104:	1d1a      	adds	r2, r3, #4
 8001106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001110:	ed97 7a08 	vldr	s14, [r7, #32]
 8001114:	edd7 7a04 	vldr	s15, [r7, #16]
 8001118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800111a:	1d1a      	adds	r2, r3, #4
 800111c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800111e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001122:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001126:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800112a:	edd7 7a05 	vldr	s15, [r7, #20]
 800112e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001130:	1d1a      	adds	r2, r3, #4
 8001132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800113c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001140:	edd7 7a06 	vldr	s15, [r7, #24]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800114c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001150:	edd7 7a07 	vldr	s15, [r7, #28]
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800115c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001160:	edd7 7a08 	vldr	s15, [r7, #32]
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800116c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001170:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800117c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800117e:	1d1a      	adds	r2, r3, #4
 8001180:	673a      	str	r2, [r7, #112]	; 0x70
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001188:	1d1a      	adds	r2, r3, #4
 800118a:	673a      	str	r2, [r7, #112]	; 0x70
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001190:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001194:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 80011a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80011b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011b4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80011c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80011d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d2:	1d1a      	adds	r2, r3, #4
 80011d4:	677a      	str	r2, [r7, #116]	; 0x74
 80011d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80011da:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80011e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011e8:	1d1a      	adds	r2, r3, #4
 80011ea:	677a      	str	r2, [r7, #116]	; 0x74
 80011ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80011fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001200:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800121c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001220:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800123c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	67ba      	str	r2, [r7, #120]	; 0x78
 8001242:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001246:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800124a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001254:	1d1a      	adds	r2, r3, #4
 8001256:	67ba      	str	r2, [r7, #120]	; 0x78
 8001258:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800125c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800126a:	1d1a      	adds	r2, r3, #4
 800126c:	673a      	str	r2, [r7, #112]	; 0x70
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	673a      	str	r2, [r7, #112]	; 0x70
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800127c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001280:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800128c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001290:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800129c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 80012ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80012bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	677a      	str	r2, [r7, #116]	; 0x74
 80012c2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80012c6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80012d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012d4:	1d1a      	adds	r2, r3, #4
 80012d6:	677a      	str	r2, [r7, #116]	; 0x74
 80012d8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e4:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80012e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8001308:	edd7 7a05 	vldr	s15, [r7, #20]
 800130c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8001318:	edd7 7a04 	vldr	s15, [r7, #16]
 800131c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800132a:	1d1a      	adds	r2, r3, #4
 800132c:	67ba      	str	r2, [r7, #120]	; 0x78
 800132e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001332:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800133e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001340:	1d1a      	adds	r2, r3, #4
 8001342:	67ba      	str	r2, [r7, #120]	; 0x78
 8001344:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001348:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001356:	3b01      	subs	r3, #1
 8001358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800135a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f ae45 	bne.w	8000fec <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001364:	b299      	uxth	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2302      	movs	r3, #2
 800136c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800136e:	f001 f80f 	bl	8002390 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001374:	b299      	uxth	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2302      	movs	r3, #2
 800137c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800137e:	f001 f807 	bl	8002390 <arm_radix8_butterfly_f32>
}
 8001382:	bf00      	nop
 8001384:	3780      	adds	r7, #128	; 0x80
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b0ac      	sub	sp, #176	; 0xb0
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80013a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80013be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80013c8:	4413      	add	r3, r2
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80013d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80013d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013dc:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80013de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013e2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80013e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013e8:	3b04      	subs	r3, #4
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80013ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013f2:	3b04      	subs	r3, #4
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80013f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013fc:	3b04      	subs	r3, #4
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001402:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800140c:	4413      	add	r3, r2
 800140e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800141a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800141e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800142a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800143c:	2306      	movs	r3, #6
 800143e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3304      	adds	r3, #4
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001478:	3304      	adds	r3, #4
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3304      	adds	r3, #4
 800148a:	ed93 7a00 	vldr	s14, [r3]
 800148e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001492:	3304      	adds	r3, #4
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80014a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014a4:	3304      	adds	r3, #4
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014b6:	3304      	adds	r3, #4
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80014c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80014d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80014e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80014f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001508:	3304      	adds	r3, #4
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800151a:	3304      	adds	r3, #4
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001524:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800152c:	3304      	adds	r3, #4
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800153a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800153e:	3304      	adds	r3, #4
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800154c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800156c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	1d1a      	adds	r2, r3, #4
 8001588:	603a      	str	r2, [r7, #0]
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001596:	3304      	adds	r3, #4
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015a8:	3304      	adds	r3, #4
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	603a      	str	r2, [r7, #0]
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80015bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c0:	1d1a      	adds	r2, r3, #4
 80015c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80015ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ce:	1d1a      	adds	r2, r3, #4
 80015d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80015d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015dc:	1d1a      	adds	r2, r3, #4
 80015de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80015e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ea:	1d1a      	adds	r2, r3, #4
 80015ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015f0:	6a3a      	ldr	r2, [r7, #32]
 80015f2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80015f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001606:	1d1a      	adds	r2, r3, #4
 8001608:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001618:	4413      	add	r3, r2
 800161a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800161e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001626:	4413      	add	r3, r2
 8001628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800162c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001634:	4413      	add	r3, r2
 8001636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800163a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800163e:	3b02      	subs	r3, #2
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001646:	e31c      	b.n	8001c82 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001680:	3304      	adds	r3, #4
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3304      	adds	r3, #4
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800169a:	3304      	adds	r3, #4
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80016a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ac:	3304      	adds	r3, #4
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016be:	3304      	adds	r3, #4
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80016d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80016ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800170c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001710:	3304      	adds	r3, #4
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800171a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001722:	3304      	adds	r3, #4
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001734:	3304      	adds	r3, #4
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800173e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001746:	3304      	adds	r3, #4
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	1d1a      	adds	r2, r3, #4
 8001790:	603a      	str	r2, [r7, #0]
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800179a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800179e:	3304      	adds	r3, #4
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017b0:	3304      	adds	r3, #4
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	1d1a      	adds	r2, r3, #4
 80017ba:	603a      	str	r2, [r7, #0]
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80017c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c8:	3b04      	subs	r3, #4
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d2:	3b04      	subs	r3, #4
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80017e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e4:	3b04      	subs	r3, #4
 80017e6:	ed93 7a00 	vldr	s14, [r3]
 80017ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ee:	3b04      	subs	r3, #4
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80017fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800182c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001840:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800184c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001864:	3b04      	subs	r3, #4
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800186e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001872:	3b04      	subs	r3, #4
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001884:	3b04      	subs	r3, #4
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800188e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001896:	3b04      	subs	r3, #4
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80018a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80018c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80018e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018e8:	3b04      	subs	r3, #4
 80018ea:	ed93 7a00 	vldr	s14, [r3]
 80018ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f2:	3b04      	subs	r3, #4
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8001908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001924:	1f1a      	subs	r2, r3, #4
 8001926:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800192a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001936:	3b04      	subs	r3, #4
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001948:	3b04      	subs	r3, #4
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001952:	1f1a      	subs	r2, r3, #4
 8001954:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001964:	1d1a      	adds	r2, r3, #4
 8001966:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800196e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001972:	1d1a      	adds	r2, r3, #4
 8001974:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800197c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001980:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800198c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001990:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800199c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 80019ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80019bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c0:	1d1a      	adds	r2, r3, #4
 80019c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019c6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80019ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80019d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019da:	1d1a      	adds	r2, r3, #4
 80019dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80019e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80019f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8001a00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8001a10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8001a20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a24:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8001a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a34:	1f1a      	subs	r2, r3, #4
 8001a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4e:	1f1a      	subs	r2, r3, #4
 8001a50:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8001a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a70:	3304      	adds	r3, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8001a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001a84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8001a94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001aa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001ab4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ac8:	1d1a      	adds	r2, r3, #4
 8001aca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ace:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ad2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ae2:	1d1a      	adds	r2, r3, #4
 8001ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ae8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001aec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001af8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001afc:	eef1 7a67 	vneg.f32	s15, s15
 8001b00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8001b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001b1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001b2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b40:	1f1a      	subs	r2, r3, #4
 8001b42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b46:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b5a:	1f1a      	subs	r2, r3, #4
 8001b5c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b60:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b64:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001b70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8001b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8001ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8001bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8001bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8001bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bd4:	1d1a      	adds	r2, r3, #4
 8001bd6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bf4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001bf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001c34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c38:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c48:	1f1a      	subs	r2, r3, #4
 8001c4a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c62:	1f1a      	subs	r2, r3, #4
 8001c64:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f47f acde 	bne.w	8001648 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	ed93 7a00 	vldr	s14, [r3]
 8001ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	ed93 7a00 	vldr	s14, [r3]
 8001cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	ed93 7a00 	vldr	s14, [r3]
 8001cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cde:	3304      	adds	r3, #4
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d02:	3304      	adds	r3, #4
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d54:	3304      	adds	r3, #4
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d66:	3304      	adds	r3, #4
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d70:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d78:	3304      	adds	r3, #4
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	1d1a      	adds	r2, r3, #4
 8001dd4:	603a      	str	r2, [r7, #0]
 8001dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dda:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de2:	3304      	adds	r3, #4
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001df4:	3304      	adds	r3, #4
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	1d1a      	adds	r2, r3, #4
 8001dfe:	603a      	str	r2, [r7, #0]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e14:	3304      	adds	r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001e1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e1e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001e2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001e3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001e4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e5e:	1d1a      	adds	r2, r3, #4
 8001e60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e64:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e78:	1d1a      	adds	r2, r3, #4
 8001e7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e7e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001ea0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001eb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001ec0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001ed0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ed4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ee4:	1d1a      	adds	r2, r3, #4
 8001ee6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001eee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efe:	1d1a      	adds	r2, r3, #4
 8001f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f04:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001f46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f84:	1d1a      	adds	r2, r3, #4
 8001f86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f9e:	b299      	uxth	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001fa8:	f000 f9f2 	bl	8002390 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fba:	f000 f9e9 	bl	8002390 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2304      	movs	r3, #4
 8001fca:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fcc:	f000 f9e0 	bl	8002390 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	2304      	movs	r3, #4
 8001fdc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fde:	f000 f9d7 	bl	8002390 <arm_radix8_butterfly_f32>
}
 8001fe2:	bf00      	nop
 8001fe4:	37b0      	adds	r7, #176	; 0xb0
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b088      	sub	sp, #32
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d117      	bne.n	800203c <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3304      	adds	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e00d      	b.n	8002034 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	eef1 7a67 	vneg.f32	s15, s15
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	3308      	adds	r3, #8
 800202c:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3ed      	bcc.n	8002018 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d040      	beq.n	80020c6 <arm_cfft_f32+0xdc>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	d845      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002052:	d033      	beq.n	80020bc <arm_cfft_f32+0xd2>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800205a:	d83d      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d026      	beq.n	80020b2 <arm_cfft_f32+0xc8>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	d835      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	d028      	beq.n	80020c6 <arm_cfft_f32+0xdc>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207a:	d82d      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d01b      	beq.n	80020bc <arm_cfft_f32+0xd2>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208a:	d825      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d00f      	beq.n	80020b2 <arm_cfft_f32+0xc8>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d81f      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d013      	beq.n	80020c6 <arm_cfft_f32+0xdc>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d819      	bhi.n	80020d8 <arm_cfft_f32+0xee>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d003      	beq.n	80020b2 <arm_cfft_f32+0xc8>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d005      	beq.n	80020bc <arm_cfft_f32+0xd2>
 80020b0:	e012      	b.n	80020d8 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7fe ff74 	bl	8000fa2 <arm_cfft_radix8by2_f32>
    break;
 80020ba:	e00d      	b.n	80020d8 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff f963 	bl	800138a <arm_cfft_radix8by4_f32>
    break;
 80020c4:	e008      	b.n	80020d8 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	b299      	uxth	r1, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	2301      	movs	r3, #1
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f000 f95d 	bl	8002390 <arm_radix8_butterfly_f32>
    break;
 80020d6:	bf00      	nop
  }

  if ( bitReverseFlag )
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8999      	ldrh	r1, [r3, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7fe ff01 	bl	8000ef0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d130      	bne.n	8002156 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002106:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e01c      	b.n	800214e <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	61ba      	str	r2, [r7, #24]
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	eeb1 7a67 	vneg.f32	s14, s15
 8002134:	edd7 7a04 	vldr	s15, [r7, #16]
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	3304      	adds	r3, #4
 8002146:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d3de      	bcc.n	8002114 <arm_cfft_f32+0x12a>
    }
  }
}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002172:	801a      	strh	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <arm_cfft_init_2048_f32+0x44>)
 800217c:	899a      	ldrh	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	819a      	strh	r2, [r3, #12]
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <arm_cfft_init_2048_f32+0x44>)
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <arm_cfft_init_2048_f32+0x44>)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	0801e32c 	.word	0x0801e32c

080021a8 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <arm_cfft_init_1024_f32+0x44>)
 80021c4:	899a      	ldrh	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	819a      	strh	r2, [r3, #12]
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <arm_cfft_init_1024_f32+0x44>)
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <arm_cfft_init_1024_f32+0x44>)
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	0801e31c 	.word	0x0801e31c

080021f0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <arm_cfft_init_512_f32+0x44>)
 800220c:	899a      	ldrh	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	819a      	strh	r2, [r3, #12]
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <arm_cfft_init_512_f32+0x44>)
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <arm_cfft_init_512_f32+0x44>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	0801e30c 	.word	0x0801e30c

08002238 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <arm_cfft_init_256_f32+0x44>)
 8002254:	899a      	ldrh	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	819a      	strh	r2, [r3, #12]
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <arm_cfft_init_256_f32+0x44>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <arm_cfft_init_256_f32+0x44>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	0801e2fc 	.word	0x0801e2fc

08002280 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <arm_cfft_init_128_f32+0x40>)
 800229a:	899a      	ldrh	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	819a      	strh	r2, [r3, #12]
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <arm_cfft_init_128_f32+0x40>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <arm_cfft_init_128_f32+0x40>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	0801e2ec 	.word	0x0801e2ec

080022c4 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <arm_cfft_init_64_f32+0x40>)
 80022de:	899a      	ldrh	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	819a      	strh	r2, [r3, #12]
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <arm_cfft_init_64_f32+0x40>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <arm_cfft_init_64_f32+0x40>)
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	0801e2dc 	.word	0x0801e2dc

08002308 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <arm_cfft_init_32_f32+0x40>)
 8002322:	899a      	ldrh	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	819a      	strh	r2, [r3, #12]
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <arm_cfft_init_32_f32+0x40>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <arm_cfft_init_32_f32+0x40>)
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	0801e2cc 	.word	0x0801e2cc

0800234c <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2210      	movs	r2, #16
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <arm_cfft_init_16_f32+0x40>)
 8002366:	899a      	ldrh	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	819a      	strh	r2, [r3, #12]
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <arm_cfft_init_16_f32+0x40>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <arm_cfft_init_16_f32+0x40>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	0801e2bc 	.word	0x0801e2bc

08002390 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002390:	b480      	push	{r7}
 8002392:	b0bd      	sub	sp, #244	; 0xf4
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
 80023a0:	4613      	mov	r3, r2
 80023a2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <arm_radix8_butterfly_f32+0x3c>)
 80023a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80023b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023c8:	e002      	b.n	80023d0 <arm_radix8_butterfly_f32+0x40>
 80023ca:	bf00      	nop
 80023cc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80023d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80023d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d8:	4413      	add	r3, r2
 80023da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80023de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	4413      	add	r3, r2
 80023e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80023ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f4:	4413      	add	r3, r2
 80023f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80023fa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	4413      	add	r3, r2
 8002404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002408:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800240c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002410:	4413      	add	r3, r2
 8002412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800241a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241e:	4413      	add	r3, r2
 8002420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002424:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242c:	4413      	add	r3, r2
 800242e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002456:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	ed93 7a00 	vldr	s14, [r3]
 8002464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002476:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800247a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	ed93 7a00 	vldr	s14, [r3]
 80024ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024be:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80024c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80024e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002506:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800250a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800252e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	ed93 7a00 	vldr	s14, [r3]
 800253c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002552:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002556:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800255a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002562:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002566:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002572:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002576:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002582:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002586:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800258a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80025a0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80025ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80025ba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80025c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	3304      	adds	r3, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80025ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3304      	adds	r3, #4
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3304      	adds	r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002612:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	ed93 7a00 	vldr	s14, [r3]
 8002626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	3304      	adds	r3, #4
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800263e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3304      	adds	r3, #4
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002662:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002666:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	3304      	adds	r3, #4
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800268e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3304      	adds	r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	ed93 7a00 	vldr	s14, [r3]
 800269e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3304      	adds	r3, #4
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80026b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3304      	adds	r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	3304      	adds	r3, #4
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026da:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80026de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3304      	adds	r3, #4
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3304      	adds	r3, #4
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002706:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800270a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002712:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002716:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800271a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002722:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002726:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800272a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800272e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002732:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002736:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800273a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800273e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002742:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002746:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	3304      	adds	r3, #4
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002756:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3304      	adds	r3, #4
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002772:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800277e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800278c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80027a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80027b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	3304      	adds	r3, #4
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027c2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80027ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	3304      	adds	r3, #4
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027de:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80027ea:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80027ee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002802:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002806:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800281a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800281e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800282a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002832:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002836:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800284a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800284e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002856:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800285a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800285e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800286a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800286e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002876:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800287a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800287e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002886:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800288a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800288e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002896:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800289a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800289e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80028a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80028aa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028ae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80028ba:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028be:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80028ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028d8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80028e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028f2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80028fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800290c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002914:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002926:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3304      	adds	r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002942:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800294e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3304      	adds	r3, #4
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800295e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002966:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800296a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	3304      	adds	r3, #4
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800297a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002986:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	3304      	adds	r3, #4
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002996:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80029a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029aa:	4413      	add	r3, r2
 80029ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029b6:	429a      	cmp	r2, r3
 80029b8:	f4ff ad0a 	bcc.w	80023d0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c0:	2b07      	cmp	r3, #7
 80029c2:	f240 84e3 	bls.w	800338c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029d8:	4413      	add	r3, r2
 80029da:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80029dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80029e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e8:	4413      	add	r3, r2
 80029ea:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80029ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	4413      	add	r3, r2
 80029f2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80029f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	4413      	add	r3, r2
 80029fa:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80029fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a00:	4413      	add	r3, r2
 8002a02:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a08:	4413      	add	r3, r2
 8002a0a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002a0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a10:	4413      	add	r3, r2
 8002a12:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	3304      	adds	r3, #4
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	3304      	adds	r3, #4
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002ad6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ade:	4413      	add	r3, r2
 8002ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002ae4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aec:	4413      	add	r3, r2
 8002aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	4413      	add	r3, r2
 8002afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002b00:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b08:	4413      	add	r3, r2
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002b0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	4413      	add	r3, r2
 8002b18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002b1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b24:	4413      	add	r3, r2
 8002b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002b2a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b32:	4413      	add	r3, r2
 8002b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	ed93 7a00 	vldr	s14, [r3]
 8002b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	ed93 7a00 	vldr	s14, [r3]
 8002b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	ed93 7a00 	vldr	s14, [r3]
 8002bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	ed93 7a00 	vldr	s14, [r3]
 8002bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002bec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	ed93 7a00 	vldr	s14, [r3]
 8002bfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c0c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	ed93 7a00 	vldr	s14, [r3]
 8002c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c54:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002c58:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c64:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002c68:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c74:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002c78:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c84:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002c88:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c8c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ca6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002cb2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002cb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002cc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3304      	adds	r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3304      	adds	r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	ed93 7a00 	vldr	s14, [r3]
 8002cfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3304      	adds	r3, #4
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	ed93 7a00 	vldr	s14, [r3]
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	3304      	adds	r3, #4
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	ed93 7a00 	vldr	s14, [r3]
 8002d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	3304      	adds	r3, #4
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	ed93 7a00 	vldr	s14, [r3]
 8002d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3304      	adds	r3, #4
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002d8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	ed93 7a00 	vldr	s14, [r3]
 8002d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3304      	adds	r3, #4
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3304      	adds	r3, #4
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	ed93 7a00 	vldr	s14, [r3]
 8002dc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3304      	adds	r3, #4
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3304      	adds	r3, #4
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	ed93 7a00 	vldr	s14, [r3]
 8002dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	3304      	adds	r3, #4
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002e02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002e12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e16:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002e22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002e32:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e36:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002e42:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002e52:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e56:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3304      	adds	r3, #4
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002e7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002e8e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002e9e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002ea2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002eae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002eb2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002ebe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ec2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002ece:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ed2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002ede:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ee2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002efc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f04:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	3304      	adds	r3, #4
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f20:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002f24:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002f34:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002f44:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002f54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002f64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f72:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3304      	adds	r3, #4
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002f9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f9e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002faa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002fba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fbe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002fca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	ed97 7a05 	vldr	s14, [r7, #20]
 8003004:	edd7 7a04 	vldr	s15, [r7, #16]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003010:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003014:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003028:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800302c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003040:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003044:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003054:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003058:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800305c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003070:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003074:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003080:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003084:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003090:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003094:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80030a0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80030a4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80030b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030bc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80030c0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80030d0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030dc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80030e0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80030f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003100:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003104:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003110:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003114:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003120:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003124:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003130:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003134:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003140:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003144:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003150:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003154:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003160:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003164:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003170:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003174:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003180:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003184:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003190:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003194:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80031a0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80031a4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80031b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80031be:	edd7 7a06 	vldr	s15, [r7, #24]
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80031ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	3304      	adds	r3, #4
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031da:	edd7 7a04 	vldr	s15, [r7, #16]
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80031e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031ea:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80031f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80031fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003206:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800320a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003216:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800321a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	ed97 7a07 	vldr	s14, [r7, #28]
 8003234:	edd7 7a06 	vldr	s15, [r7, #24]
 8003238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	3304      	adds	r3, #4
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003250:	edd7 7a04 	vldr	s15, [r7, #16]
 8003254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003258:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800325c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003260:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800326c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003270:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800327c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003280:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800328c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003290:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800329c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80032aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80032b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	3304      	adds	r3, #4
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ce:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80032d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032d6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80032e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80032f2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003302:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003306:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003320:	edd7 7a06 	vldr	s15, [r7, #24]
 8003324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003328:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800332c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	3304      	adds	r3, #4
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	ed97 7a05 	vldr	s14, [r7, #20]
 800333c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003344:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003348:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800334c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003350:	4413      	add	r3, r2
 8003352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800335c:	429a      	cmp	r2, r3
 800335e:	f4ff abba 	bcc.w	8002ad6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	3301      	adds	r3, #1
 8003368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800336c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	429a      	cmp	r2, r3
 8003376:	f4ff ab2c 	bcc.w	80029d2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003384:	2b07      	cmp	r3, #7
 8003386:	f63f a813 	bhi.w	80023b0 <arm_radix8_butterfly_f32+0x20>
}
 800338a:	e000      	b.n	800338e <arm_radix8_butterfly_f32+0xffe>
         break;
 800338c:	bf00      	nop
}
 800338e:	bf00      	nop
 8003390:	37f4      	adds	r7, #244	; 0xf4
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800339c:	b480      	push	{r7}
 800339e:	b095      	sub	sp, #84	; 0x54
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80033c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80033d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	64ba      	str	r2, [r7, #72]	; 0x48
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80033e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80033fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003406:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800340a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800340e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	1d1a      	adds	r2, r3, #4
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003424:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003428:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800342c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003442:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8003450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003452:	3308      	adds	r3, #8
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800345c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8003462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800346e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	64ba      	str	r2, [r7, #72]	; 0x48
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8003478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	64ba      	str	r2, [r7, #72]	; 0x48
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8003482:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003486:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800348a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8003492:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003496:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800349a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80034a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80034b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80034c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80034d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80034e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80034f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003510:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003514:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003518:	ee37 7a67 	vsub.f32	s14, s14, s15
 800351c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003524:	edd7 7a05 	vldr	s15, [r7, #20]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	3308      	adds	r3, #8
 8003542:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	3b08      	subs	r3, #8
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354c:	3b01      	subs	r3, #1
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	2b00      	cmp	r3, #0
 8003554:	f73f af7f 	bgt.w	8003456 <stage_rfft_f32+0xba>
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3754      	adds	r7, #84	; 0x54
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8003566:	b480      	push	{r7}
 8003568:	b095      	sub	sp, #84	; 0x54
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	3b01      	subs	r3, #1
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800358e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8003594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003596:	3308      	adds	r3, #8
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800359a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800359e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80035b8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d2:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	3308      	adds	r3, #8
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80035e6:	e07c      	b.n	80036e2 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80035ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80035fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8003600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	64ba      	str	r2, [r7, #72]	; 0x48
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360c:	1d1a      	adds	r2, r3, #4
 800360e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8003614:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003618:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003620:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8003624:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003628:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800362c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003630:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003634:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003638:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8003644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003648:	edd7 7a08 	vldr	s15, [r7, #32]
 800364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003650:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8003654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003658:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8003664:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003668:	edd7 7a08 	vldr	s15, [r7, #32]
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003674:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003678:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800367c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003680:	edd7 7a07 	vldr	s15, [r7, #28]
 8003684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003688:	edd7 7a06 	vldr	s15, [r7, #24]
 800368c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1d1a      	adds	r2, r3, #4
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800369a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369e:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80036a2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80036a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80036aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80036b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80036ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036cc:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	3308      	adds	r3, #8
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	3b08      	subs	r3, #8
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	3b01      	subs	r3, #1
 80036e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80036e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f73f af7f 	bgt.w	80035e8 <merge_rfft_f32+0x82>
   }

}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	3754      	adds	r7, #84	; 0x54
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff ff26 	bl	8003566 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	2301      	movs	r3, #1
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f7fe fc62 	bl	8001fea <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003726:	e00a      	b.n	800373e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	2301      	movs	r3, #1
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7fe fc5b 	bl	8001fea <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fe2f 	bl	800339c <stage_rfft_f32>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <arm_rfft_fast_init_32_f32+0x14>
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	e013      	b.n	8003784 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fdf4 	bl	800234c <arm_cfft_init_16_f32>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003774:	e006      	b.n	8003784 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <arm_rfft_fast_init_32_f32+0x44>)
 8003780:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0801633c 	.word	0x0801633c

08003790 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <arm_rfft_fast_init_64_f32+0x14>
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	e013      	b.n	80037cc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fdae 	bl	8002308 <arm_cfft_init_32_f32>
 80037ac:	4603      	mov	r3, r0
 80037ae:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 80037b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037bc:	e006      	b.n	80037cc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a03      	ldr	r2, [pc, #12]	; (80037d4 <arm_rfft_fast_init_64_f32+0x44>)
 80037c8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	080163bc 	.word	0x080163bc

080037d8 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <arm_rfft_fast_init_128_f32+0x14>
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e013      	b.n	8003814 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fd68 	bl	80022c4 <arm_cfft_init_64_f32>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003804:	e006      	b.n	8003814 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a03      	ldr	r2, [pc, #12]	; (800381c <arm_rfft_fast_init_128_f32+0x44>)
 8003810:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	080164bc 	.word	0x080164bc

08003820 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <arm_rfft_fast_init_256_f32+0x14>
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	e014      	b.n	800385e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd22 	bl	8002280 <arm_cfft_init_128_f32>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	e007      	b.n	800385e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003854:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a03      	ldr	r2, [pc, #12]	; (8003868 <arm_rfft_fast_init_256_f32+0x48>)
 800385a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	080166bc 	.word	0x080166bc

0800386c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <arm_rfft_fast_init_512_f32+0x14>
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	e014      	b.n	80038aa <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fcd8 	bl	8002238 <arm_cfft_init_256_f32>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	e007      	b.n	80038aa <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <arm_rfft_fast_init_512_f32+0x48>)
 80038a6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	08016abc 	.word	0x08016abc

080038b8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <arm_rfft_fast_init_1024_f32+0x14>
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e014      	b.n	80038f6 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fc8e 	bl	80021f0 <arm_cfft_init_512_f32>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80038e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e4:	e007      	b.n	80038f6 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ec:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a03      	ldr	r2, [pc, #12]	; (8003900 <arm_rfft_fast_init_1024_f32+0x48>)
 80038f2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	080172bc 	.word	0x080172bc

08003904 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <arm_rfft_fast_init_2048_f32+0x14>
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e014      	b.n	8003942 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc44 	bl	80021a8 <arm_cfft_init_1024_f32>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800392c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003930:	e007      	b.n	8003942 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003938:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a03      	ldr	r2, [pc, #12]	; (800394c <arm_rfft_fast_init_2048_f32+0x48>)
 800393e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	080182bc 	.word	0x080182bc

08003950 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <arm_rfft_fast_init_4096_f32+0x14>
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	e014      	b.n	800398e <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fbfa 	bl	8002160 <arm_cfft_init_2048_f32>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	e007      	b.n	800398e <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003984:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <arm_rfft_fast_init_4096_f32+0x48>)
 800398a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	0801a2bc 	.word	0x0801a2bc

0800399c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d023      	beq.n	80039f8 <arm_rfft_fast_init_f32+0x5c>
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	dc50      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ba:	d023      	beq.n	8003a04 <arm_rfft_fast_init_f32+0x68>
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c0:	dc4a      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d023      	beq.n	8003a10 <arm_rfft_fast_init_f32+0x74>
 80039c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039cc:	dc44      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d2:	d023      	beq.n	8003a1c <arm_rfft_fast_init_f32+0x80>
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	dc3e      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d023      	beq.n	8003a28 <arm_rfft_fast_init_f32+0x8c>
 80039e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e4:	dc38      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d024      	beq.n	8003a34 <arm_rfft_fast_init_f32+0x98>
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	dc34      	bgt.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d02c      	beq.n	8003a4c <arm_rfft_fast_init_f32+0xb0>
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d024      	beq.n	8003a40 <arm_rfft_fast_init_f32+0xa4>
 80039f6:	e02f      	b.n	8003a58 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffa9 	bl	8003950 <arm_rfft_fast_init_4096_f32>
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]
    break;
 8003a02:	e02c      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff7d 	bl	8003904 <arm_rfft_fast_init_2048_f32>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a0e:	e026      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff51 	bl	80038b8 <arm_rfft_fast_init_1024_f32>
 8003a16:	4603      	mov	r3, r0
 8003a18:	73fb      	strb	r3, [r7, #15]
    break;
 8003a1a:	e020      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff25 	bl	800386c <arm_rfft_fast_init_512_f32>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
    break;
 8003a26:	e01a      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fef9 	bl	8003820 <arm_rfft_fast_init_256_f32>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
    break;
 8003a32:	e014      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fecf 	bl	80037d8 <arm_rfft_fast_init_128_f32>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a3e:	e00e      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fea5 	bl	8003790 <arm_rfft_fast_init_64_f32>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
    break;
 8003a4a:	e008      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe7b 	bl	8003748 <arm_rfft_fast_init_32_f32>
 8003a52:	4603      	mov	r3, r0
 8003a54:	73fb      	strb	r3, [r7, #15]
    break;
 8003a56:	e002      	b.n	8003a5e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e001      	b.n	8003a62 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a70:	f000 feb7 	bl	80047e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a74:	f000 f868 	bl	8003b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a78:	f000 fa26 	bl	8003ec8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003a7c:	f000 f92a 	bl	8003cd4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8003a80:	f000 f99c 	bl	8003dbc <MX_TIM15_Init>
  MX_ADC1_Init();
 8003a84:	f000 f8c2 	bl	8003c0c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003a88:	f000 f9ea 	bl	8003e60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("foo\n");
 8003a8c:	4823      	ldr	r0, [pc, #140]	; (8003b1c <main+0xb0>)
 8003a8e:	f006 f993 	bl	8009db8 <puts>
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8003a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a96:	4822      	ldr	r0, [pc, #136]	; (8003b20 <main+0xb4>)
 8003a98:	f7ff ff80 	bl	800399c <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a9c:	217f      	movs	r1, #127	; 0x7f
 8003a9e:	4821      	ldr	r0, [pc, #132]	; (8003b24 <main+0xb8>)
 8003aa0:	f002 f85a 	bl	8005b58 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 8003aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aa8:	491f      	ldr	r1, [pc, #124]	; (8003b28 <main+0xbc>)
 8003aaa:	481e      	ldr	r0, [pc, #120]	; (8003b24 <main+0xb8>)
 8003aac:	f001 fa3e 	bl	8004f2c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003ab0:	481e      	ldr	r0, [pc, #120]	; (8003b2c <main+0xc0>)
 8003ab2:	f003 fdf5 	bl	80076a0 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init_TMR(&htim15);
 8003ab6:	481e      	ldr	r0, [pc, #120]	; (8003b30 <main+0xc4>)
 8003ab8:	f005 fc1e 	bl	80092f8 <STEPPERS_Init_TMR>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 10);
 8003abc:	210a      	movs	r1, #10
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f005 fc66 	bl	8009390 <STEPPER_SetSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		printf("foo\n");
 8003ac4:	4815      	ldr	r0, [pc, #84]	; (8003b1c <main+0xb0>)
 8003ac6:	f006 f977 	bl	8009db8 <puts>

				updatedFlag = 0;
			}
		}
		*/
		sprintf(msg, "bar\n");
 8003aca:	491a      	ldr	r1, [pc, #104]	; (8003b34 <main+0xc8>)
 8003acc:	481a      	ldr	r0, [pc, #104]	; (8003b38 <main+0xcc>)
 8003ace:	f006 f97b 	bl	8009dc8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003ad2:	4819      	ldr	r0, [pc, #100]	; (8003b38 <main+0xcc>)
 8003ad4:	f7fc fb7c 	bl	80001d0 <strlen>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	4915      	ldr	r1, [pc, #84]	; (8003b38 <main+0xcc>)
 8003ae2:	4816      	ldr	r0, [pc, #88]	; (8003b3c <main+0xd0>)
 8003ae4:	f004 fd9a 	bl	800861c <HAL_UART_Transmit>
		if (halfFlag) {
 8003ae8:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <main+0xd4>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <main+0x94>
			process_data(0, BUFFER_SIZE / 2);
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 fb29 	bl	800414c <process_data>
			halfFlag = 0;
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <main+0xd4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
		}

		if (fullFlag) {
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <main+0xd8>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0dc      	beq.n	8003ac4 <main+0x58>
			process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 8003b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b0e:	2080      	movs	r0, #128	; 0x80
 8003b10:	f000 fb1c 	bl	800414c <process_data>
			fullFlag = 0;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <main+0xd8>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
		printf("foo\n");
 8003b1a:	e7d3      	b.n	8003ac4 <main+0x58>
 8003b1c:	0800ae54 	.word	0x0800ae54
 8003b20:	20000458 	.word	0x20000458
 8003b24:	200000c4 	.word	0x200000c4
 8003b28:	20000254 	.word	0x20000254
 8003b2c:	20000128 	.word	0x20000128
 8003b30:	20000174 	.word	0x20000174
 8003b34:	0800ae58 	.word	0x0800ae58
 8003b38:	20000248 	.word	0x20000248
 8003b3c:	200001c0 	.word	0x200001c0
 8003b40:	20000454 	.word	0x20000454
 8003b44:	20000455 	.word	0x20000455

08003b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b096      	sub	sp, #88	; 0x58
 8003b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	2244      	movs	r2, #68	; 0x44
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f006 fa2e 	bl	8009fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b6e:	f002 fbb9 	bl	80062e4 <HAL_PWREx_ControlVoltageScaling>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003b78:	f000 fbcb 	bl	8004312 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b7c:	f002 fb94 	bl	80062a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b80:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <SystemClock_Config+0xc0>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <SystemClock_Config+0xc0>)
 8003b88:	f023 0318 	bic.w	r3, r3, #24
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003b90:	2314      	movs	r3, #20
 8003b92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ba0:	2360      	movs	r3, #96	; 0x60
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003bb0:	2328      	movs	r3, #40	; 0x28
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f002 fbe3 	bl	8006390 <HAL_RCC_OscConfig>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003bd0:	f000 fb9f 	bl	8004312 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bd4:	230f      	movs	r3, #15
 8003bd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003be8:	463b      	mov	r3, r7
 8003bea:	2104      	movs	r1, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f002 ffe3 	bl	8006bb8 <HAL_RCC_ClockConfig>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003bf8:	f000 fb8b 	bl	8004312 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003bfc:	f003 fbf6 	bl	80073ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8003c00:	bf00      	nop
 8003c02:	3758      	adds	r7, #88	; 0x58
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000

08003c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c12:	463b      	mov	r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
 8003c20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <MX_ADC1_Init+0xc0>)
 8003c26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c42:	2204      	movs	r2, #4
 8003c44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c82:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003c84:	f001 f810 	bl	8004ca8 <HAL_ADC_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003c8e:	f000 fb40 	bl	8004312 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <MX_ADC1_Init+0xc4>)
 8003c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c96:	2306      	movs	r3, #6
 8003c98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c9e:	237f      	movs	r3, #127	; 0x7f
 8003ca0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003caa:	463b      	mov	r3, r7
 8003cac:	4619      	mov	r1, r3
 8003cae:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <MX_ADC1_Init+0xbc>)
 8003cb0:	f001 f9ca 	bl	8005048 <HAL_ADC_ConfigChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003cba:	f000 fb2a 	bl	8004312 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200000c4 	.word	0x200000c4
 8003ccc:	50040000 	.word	0x50040000
 8003cd0:	14f00020 	.word	0x14f00020

08003cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	; 0x38
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	615a      	str	r2, [r3, #20]
 8003d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d06:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d10:	2203      	movs	r2, #3
 8003d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d1c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d2e:	4822      	ldr	r0, [pc, #136]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d30:	f003 fc5e 	bl	80075f0 <HAL_TIM_Base_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003d3a:	f000 faea 	bl	8004312 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d48:	4619      	mov	r1, r3
 8003d4a:	481b      	ldr	r0, [pc, #108]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d4c:	f003 ff74 	bl	8007c38 <HAL_TIM_ConfigClockSource>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003d56:	f000 fadc 	bl	8004312 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d5a:	4817      	ldr	r0, [pc, #92]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d5c:	f003 fcf4 	bl	8007748 <HAL_TIM_PWM_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003d66:	f000 fad4 	bl	8004312 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	480f      	ldr	r0, [pc, #60]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003d7a:	f004 fbcb 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003d84:	f000 fac5 	bl	8004312 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d88:	2360      	movs	r3, #96	; 0x60
 8003d8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4806      	ldr	r0, [pc, #24]	; (8003db8 <MX_TIM2_Init+0xe4>)
 8003da0:	f003 fe36 	bl	8007a10 <HAL_TIM_PWM_ConfigChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003daa:	f000 fab2 	bl	8004312 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003dae:	bf00      	nop
 8003db0:	3738      	adds	r7, #56	; 0x38
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000128 	.word	0x20000128

08003dbc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <MX_TIM15_Init+0xa0>)
 8003dde:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003e06:	4814      	ldr	r0, [pc, #80]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003e08:	f003 fbf2 	bl	80075f0 <HAL_TIM_Base_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003e12:	f000 fa7e 	bl	8004312 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	4619      	mov	r1, r3
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003e24:	f003 ff08 	bl	8007c38 <HAL_TIM_ConfigClockSource>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003e2e:	f000 fa70 	bl	8004312 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4806      	ldr	r0, [pc, #24]	; (8003e58 <MX_TIM15_Init+0x9c>)
 8003e40:	f004 fb68 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8003e4a:	f000 fa62 	bl	8004312 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000174 	.word	0x20000174
 8003e5c:	40014000 	.word	0x40014000

08003e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <MX_USART1_UART_Init+0x64>)
 8003e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e88:	220c      	movs	r2, #12
 8003e8a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <MX_USART1_UART_Init+0x60>)
 8003eac:	f005 f881 	bl	8008fb2 <HAL_RS485Ex_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003eb6:	f000 fa2c 	bl	8004312 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200001c0 	.word	0x200001c0
 8003ec4:	40013800 	.word	0x40013800

08003ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <MX_GPIO_Init+0xbc>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003f26:	2200      	movs	r2, #0
 8003f28:	211e      	movs	r1, #30
 8003f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f2e:	f002 f97f 	bl	8006230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003f32:	231e      	movs	r3, #30
 8003f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f36:	2301      	movs	r3, #1
 8003f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f42:	f107 030c 	add.w	r3, r7, #12
 8003f46:	4619      	mov	r1, r3
 8003f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f4c:	f002 f806 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f50:	2320      	movs	r3, #32
 8003f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f54:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4619      	mov	r1, r3
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <MX_GPIO_Init+0xc0>)
 8003f66:	f001 fff9 	bl	8005f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	2017      	movs	r0, #23
 8003f70:	f001 ff2d 	bl	8005dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f74:	2017      	movs	r0, #23
 8003f76:	f001 ff46 	bl	8005e06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f7a:	bf00      	nop
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	48000400 	.word	0x48000400

08003f8c <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8089 	beq.w	80040b0 <receive_bit+0x124>
		return;
	}
	for (int count = 0; count < floor(amount / 15); count++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e00d      	b.n	8003fc0 <receive_bit+0x34>
		received[receivedIndex] = bit;
 8003fa4:	4b44      	ldr	r3, [pc, #272]	; (80040b8 <receive_bit+0x12c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4944      	ldr	r1, [pc, #272]	; (80040bc <receive_bit+0x130>)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 8003fb0:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <receive_bit+0x12c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <receive_bit+0x12c>)
 8003fb8:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < floor(amount / 15); count++) {
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7fc faaf 	bl	8000524 <__aeabi_i2d>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <receive_bit+0x134>)
 8003fce:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd2:	441a      	add	r2, r3
 8003fd4:	10d2      	asrs	r2, r2, #3
 8003fd6:	17db      	asrs	r3, r3, #31
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc faa2 	bl	8000524 <__aeabi_i2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7fc fd78 	bl	8000adc <__aeabi_dcmplt>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1d8      	bne.n	8003fa4 <receive_bit+0x18>
	}
	if (receivedIndex > 23) {
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <receive_bit+0x12c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b17      	cmp	r3, #23
 8003ff8:	dd5b      	ble.n	80040b2 <receive_bit+0x126>
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 }
		 sprintf(msg, "\r\n");
		 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		 */
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	2308      	movs	r3, #8
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	2310      	movs	r3, #16
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	e033      	b.n	8004070 <receive_bit+0xe4>
				count1++, count2++, count3++) {
			if (received[count1] + received[count2] + received[count3] >= 2) {
 8004008:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <receive_bit+0x130>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004010:	492a      	ldr	r1, [pc, #168]	; (80040bc <receive_bit+0x130>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004018:	441a      	add	r2, r3
 800401a:	4928      	ldr	r1, [pc, #160]	; (80040bc <receive_bit+0x130>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004022:	4413      	add	r3, r2
 8004024:	2b01      	cmp	r3, #1
 8004026:	dd05      	ble.n	8004034 <receive_bit+0xa8>
				message[count1] = '1';
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <receive_bit+0x138>)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	2231      	movs	r2, #49	; 0x31
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e014      	b.n	800405e <receive_bit+0xd2>
			} else if (received[count1] + received[count2] + received[count3]
 8004034:	4a21      	ldr	r2, [pc, #132]	; (80040bc <receive_bit+0x130>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800403c:	491f      	ldr	r1, [pc, #124]	; (80040bc <receive_bit+0x130>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004044:	441a      	add	r2, r3
 8004046:	491d      	ldr	r1, [pc, #116]	; (80040bc <receive_bit+0x130>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800404e:	4413      	add	r3, r2
 8004050:	2b01      	cmp	r3, #1
 8004052:	dc04      	bgt.n	800405e <receive_bit+0xd2>
					<= 1) {
				message[count1] = '0';
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <receive_bit+0x138>)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	2230      	movs	r2, #48	; 0x30
 800405c:	701a      	strb	r2, [r3, #0]
				count1++, count2++, count3++) {
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3301      	adds	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3301      	adds	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
		for (int count1 = 0, count2 = 8, count3 = 16; count1 < 8;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b07      	cmp	r3, #7
 8004074:	ddc8      	ble.n	8004008 <receive_bit+0x7c>
			}
		}

		temp = strtol(message, NULL, 2);
 8004076:	2202      	movs	r2, #2
 8004078:	2100      	movs	r1, #0
 800407a:	4812      	ldr	r0, [pc, #72]	; (80040c4 <receive_bit+0x138>)
 800407c:	f005 fd6a 	bl	8009b54 <strtol>
 8004080:	ee07 0a90 	vmov	s15, r0
 8004084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <receive_bit+0x13c>)
 800408a:	edc3 7a00 	vstr	s15, [r3]
		temp /= 10;
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <receive_bit+0x13c>)
 8004090:	ed93 7a00 	vldr	s14, [r3]
 8004094:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <receive_bit+0x13c>)
 800409e:	edc3 7a00 	vstr	s15, [r3]

		updatedFlag = 1;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <receive_bit+0x140>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
		receivedIndex = 0;
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <receive_bit+0x12c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e000      	b.n	80040b2 <receive_bit+0x126>
		return;
 80040b0:	bf00      	nop

	}
}
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bdb0      	pop	{r4, r5, r7, pc}
 80040b8:	2000a4e4 	.word	0x2000a4e4
 80040bc:	2000a484 	.word	0x2000a484
 80040c0:	88888889 	.word	0x88888889
 80040c4:	2000a47c 	.word	0x2000a47c
 80040c8:	2000a4f0 	.word	0x2000a4f0
 80040cc:	20000456 	.word	0x20000456

080040d0 <bit_detect>:

void bit_detect(int freq) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 100 && freq < ONE_FREQ + 100) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f240 726c 	movw	r2, #1900	; 0x76c
 80040de:	4293      	cmp	r3, r2
 80040e0:	dd0a      	ble.n	80040f8 <bit_detect+0x28>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f640 0233 	movw	r2, #2099	; 0x833
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dc05      	bgt.n	80040f8 <bit_detect+0x28>
		oneCount++;
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <bit_detect+0x74>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <bit_detect+0x74>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e008      	b.n	800410a <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <bit_detect+0x74>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	2001      	movs	r0, #1
 8004100:	f7ff ff44 	bl	8003f8c <receive_bit>
		oneCount = 0;
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <bit_detect+0x74>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 100 && freq < ZERO_FREQ + 100) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004110:	dd0a      	ble.n	8004128 <bit_detect+0x58>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f240 424b 	movw	r2, #1099	; 0x44b
 8004118:	4293      	cmp	r3, r2
 800411a:	dc05      	bgt.n	8004128 <bit_detect+0x58>
		zeroCount++;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <bit_detect+0x78>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <bit_detect+0x78>)
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e009      	b.n	800413c <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <bit_detect+0x78>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	2000      	movs	r0, #0
 8004130:	f7ff ff2c 	bl	8003f8c <receive_bit>
		zeroCount = 0;
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <bit_detect+0x78>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
	}
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	2000a4ec 	.word	0x2000a4ec
 8004148:	2000a4e8 	.word	0x2000a4e8

0800414c <process_data>:

void process_data(int start, int end) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	 }
	 */
	float in;

	for (uint8_t count = start; count < end; count++) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e07c      	b.n	8004256 <process_data+0x10a>
		// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4a43      	ldr	r2, [pc, #268]	; (800426c <process_data+0x120>)
 8004160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004270 <process_data+0x124>
 8004172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004176:	edc7 7a02 	vstr	s15, [r7, #8]

		// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 800417a:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <process_data+0x128>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b21b      	sxth	r3, r3
 8004180:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <process_data+0x12c>)
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	601a      	str	r2, [r3, #0]
		fftIndex++;
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <process_data+0x128>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b21b      	sxth	r3, r3
 8004190:	b29b      	uxth	r3, r3
 8004192:	3301      	adds	r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	b21a      	sxth	r2, r3
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <process_data+0x128>)
 800419a:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <process_data+0x128>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b21b      	sxth	r3, r3
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d153      	bne.n	8004250 <process_data+0x104>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80041a8:	2300      	movs	r3, #0
 80041aa:	4a34      	ldr	r2, [pc, #208]	; (800427c <process_data+0x130>)
 80041ac:	4932      	ldr	r1, [pc, #200]	; (8004278 <process_data+0x12c>)
 80041ae:	4834      	ldr	r0, [pc, #208]	; (8004280 <process_data+0x134>)
 80041b0:	f7ff faa2 	bl	80036f8 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b8:	4932      	ldr	r1, [pc, #200]	; (8004284 <process_data+0x138>)
 80041ba:	4830      	ldr	r0, [pc, #192]	; (800427c <process_data+0x130>)
 80041bc:	f7fc fe54 	bl	8000e68 <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <process_data+0x13c>)
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <process_data+0x140>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 80041ce:	2301      	movs	r3, #1
 80041d0:	81bb      	strh	r3, [r7, #12]
 80041d2:	e02b      	b.n	800422c <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <process_data+0x138>)
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	ed93 7a00 	vldr	s14, [r3]
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <process_data+0x13c>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ee:	dd1a      	ble.n	8004226 <process_data+0xda>
					peakVal = fftMagOut[index];
 80041f0:	89bb      	ldrh	r3, [r7, #12]
 80041f2:	4a24      	ldr	r2, [pc, #144]	; (8004284 <process_data+0x138>)
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a23      	ldr	r2, [pc, #140]	; (8004288 <process_data+0x13c>)
 80041fc:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 80041fe:	89bb      	ldrh	r3, [r7, #12]
 8004200:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004204:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004210:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004290 <process_data+0x144>
 8004214:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 3a90 	vmov	r3, s15
 8004220:	b29a      	uxth	r2, r3
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <process_data+0x140>)
 8004224:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 8004226:	89bb      	ldrh	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	81bb      	strh	r3, [r7, #12]
 800422c:	89bb      	ldrh	r3, [r7, #12]
 800422e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004232:	d3cf      	bcc.n	80041d4 <process_data+0x88>
				}
			}
			printf("%d\n", (int)peakHz);
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <process_data+0x140>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	4816      	ldr	r0, [pc, #88]	; (8004294 <process_data+0x148>)
 800423c:	f005 fd56 	bl	8009cec <iprintf>
			bit_detect(peakHz);
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <process_data+0x140>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff43 	bl	80040d0 <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <process_data+0x128>)
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
	for (uint8_t count = start; count < end; count++) {
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3301      	adds	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	f73f af7e 	bgt.w	800415c <process_data+0x10>
		}
	}

}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000254 	.word	0x20000254
 8004270:	37fffffc 	.word	0x37fffffc
 8004274:	2000a470 	.word	0x2000a470
 8004278:	20000470 	.word	0x20000470
 800427c:	20004470 	.word	0x20004470
 8004280:	20000458 	.word	0x20000458
 8004284:	20008470 	.word	0x20008470
 8004288:	2000a474 	.word	0x2000a474
 800428c:	2000a478 	.word	0x2000a478
 8004290:	45800000 	.word	0x45800000
 8004294:	0800ae60 	.word	0x0800ae60

08004298 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80042a0:	1d39      	adds	r1, r7, #4
 80042a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a6:	2201      	movs	r2, #1
 80042a8:	4803      	ldr	r0, [pc, #12]	; (80042b8 <__io_putchar+0x20>)
 80042aa:	f004 f9b7 	bl	800861c <HAL_UART_Transmit>

  return ch;
 80042ae:	687b      	ldr	r3, [r7, #4]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	200001c0 	.word	0x200001c0

080042bc <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000454 	.word	0x20000454

080042dc <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000455 	.word	0x20000455

080042fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f005 fafd 	bl	8009904 <STEPPER_TMR_OVF_ISR>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004312:	b480      	push	{r7}
 8004314:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004316:	b672      	cpsid	i
}
 8004318:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800431a:	e7fe      	b.n	800431a <Error_Handler+0x8>

0800431c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_MspInit+0x44>)
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_MspInit+0x44>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6613      	str	r3, [r2, #96]	; 0x60
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_MspInit+0x44>)
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_MspInit+0x44>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <HAL_MspInit+0x44>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6593      	str	r3, [r2, #88]	; 0x58
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_MspInit+0x44>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b09e      	sub	sp, #120	; 0x78
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800436c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	2254      	movs	r2, #84	; 0x54
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f005 fe17 	bl	8009fb8 <memset>
  if(hadc->Instance==ADC1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_ADC_MspInit+0xc0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d143      	bne.n	800441c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004394:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004398:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800439a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800439e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80043a8:	2310      	movs	r3, #16
 80043aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80043ac:	2307      	movs	r3, #7
 80043ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80043b0:	2302      	movs	r3, #2
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80043b4:	2302      	movs	r3, #2
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80043b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043be:	f107 0310 	add.w	r3, r7, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f002 fe1c 	bl	8007000 <HAL_RCCEx_PeriphCLKConfig>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80043ce:	f7ff ffa0 	bl	8004312 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_ADC_MspInit+0xc4>)
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004402:	2301      	movs	r3, #1
 8004404:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004406:	230b      	movs	r3, #11
 8004408:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004412:	4619      	mov	r1, r3
 8004414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004418:	f001 fda0 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800441c:	bf00      	nop
 800441e:	3778      	adds	r7, #120	; 0x78
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	50040000 	.word	0x50040000
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443c:	d114      	bne.n	8004468 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	2100      	movs	r1, #0
 800445a:	201c      	movs	r0, #28
 800445c:	f001 fcb7 	bl	8005dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004460:	201c      	movs	r0, #28
 8004462:	f001 fcd0 	bl	8005e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004466:	e018      	b.n	800449a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM15)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_TIM_Base_MspInit+0x7c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d113      	bne.n	800449a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6613      	str	r3, [r2, #96]	; 0x60
 800447e:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <HAL_TIM_Base_MspInit+0x78>)
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	2100      	movs	r1, #0
 800448e:	2018      	movs	r0, #24
 8004490:	f001 fc9d 	bl	8005dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004494:	2018      	movs	r0, #24
 8004496:	f001 fcb6 	bl	8005e06 <HAL_NVIC_EnableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40014000 	.word	0x40014000

080044ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b0a0      	sub	sp, #128	; 0x80
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044c4:	f107 0318 	add.w	r3, r7, #24
 80044c8:	2254      	movs	r2, #84	; 0x54
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f005 fd73 	bl	8009fb8 <memset>
  if(huart->Instance==USART1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2d      	ldr	r2, [pc, #180]	; (800458c <HAL_UART_MspInit+0xe0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d153      	bne.n	8004584 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044dc:	2301      	movs	r3, #1
 80044de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80044e0:	2300      	movs	r3, #0
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f002 fd89 	bl	8007000 <HAL_RCCEx_PeriphCLKConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044f4:	f7ff ff0d 	bl	8004312 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_UART_MspInit+0xe4>)
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	4a24      	ldr	r2, [pc, #144]	; (8004590 <HAL_UART_MspInit+0xe4>)
 80044fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004502:	6613      	str	r3, [r2, #96]	; 0x60
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_UART_MspInit+0xe4>)
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_UART_MspInit+0xe4>)
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <HAL_UART_MspInit+0xe4>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800451c:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <HAL_UART_MspInit+0xe4>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_UART_MspInit+0xe4>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_UART_MspInit+0xe4>)
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_UART_MspInit+0xe4>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	2302      	movs	r3, #2
 8004548:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454e:	2303      	movs	r3, #3
 8004550:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004552:	2307      	movs	r3, #7
 8004554:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004556:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800455a:	4619      	mov	r1, r3
 800455c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004560:	f001 fcfc 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004564:	23c0      	movs	r3, #192	; 0xc0
 8004566:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456c:	2300      	movs	r3, #0
 800456e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004570:	2303      	movs	r3, #3
 8004572:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004574:	2307      	movs	r3, #7
 8004576:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004578:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800457c:	4619      	mov	r1, r3
 800457e:	4805      	ldr	r0, [pc, #20]	; (8004594 <HAL_UART_MspInit+0xe8>)
 8004580:	f001 fcec 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004584:	bf00      	nop
 8004586:	3780      	adds	r7, #128	; 0x80
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40013800 	.word	0x40013800
 8004590:	40021000 	.word	0x40021000
 8004594:	48000400 	.word	0x48000400

08004598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800459c:	e7fe      	b.n	800459c <NMI_Handler+0x4>

0800459e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045a2:	e7fe      	b.n	80045a2 <HardFault_Handler+0x4>

080045a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a8:	e7fe      	b.n	80045a8 <MemManage_Handler+0x4>

080045aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045ae:	e7fe      	b.n	80045ae <BusFault_Handler+0x4>

080045b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045b4:	e7fe      	b.n	80045b4 <UsageFault_Handler+0x4>

080045b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045e4:	f000 f952 	bl	800488c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}

080045ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80045f0:	2020      	movs	r0, #32
 80045f2:	f001 fe35 	bl	8006260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004602:	f003 f902 	bl	800780a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000174 	.word	0x20000174

08004610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <TIM2_IRQHandler+0x10>)
 8004616:	f003 f8f8 	bl	800780a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000128 	.word	0x20000128

08004624 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e00a      	b.n	800464c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004636:	f3af 8000 	nop.w
 800463a:	4601      	mov	r1, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	60ba      	str	r2, [r7, #8]
 8004642:	b2ca      	uxtb	r2, r1
 8004644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3301      	adds	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	dbf0      	blt.n	8004636 <_read+0x12>
  }

  return len;
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e009      	b.n	8004684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	60ba      	str	r2, [r7, #8]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fe0d 	bl	8004298 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3301      	adds	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	dbf1      	blt.n	8004670 <_write+0x12>
  }
  return len;
 800468c:	687b      	ldr	r3, [r7, #4]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_close>:

int _close(int file)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046be:	605a      	str	r2, [r3, #4]
  return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <_isatty>:

int _isatty(int file)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <_sbrk+0x5c>)
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <_sbrk+0x60>)
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <_sbrk+0x64>)
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <_sbrk+0x68>)
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <_sbrk+0x64>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d207      	bcs.n	8004740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004730:	f005 fc90 	bl	800a054 <__errno>
 8004734:	4603      	mov	r3, r0
 8004736:	220c      	movs	r2, #12
 8004738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	e009      	b.n	8004754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <_sbrk+0x64>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <_sbrk+0x64>)
 8004750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20010000 	.word	0x20010000
 8004760:	00000400 	.word	0x00000400
 8004764:	2000a4f4 	.word	0x2000a4f4
 8004768:	2000a660 	.word	0x2000a660

0800476c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <SystemInit+0x20>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <SystemInit+0x20>)
 8004778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800477c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004794:	f7ff ffea 	bl	800476c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004798:	480c      	ldr	r0, [pc, #48]	; (80047cc <LoopForever+0x6>)
  ldr r1, =_edata
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <LoopForever+0xe>)
  movs r3, #0
 800479e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047a0:	e002      	b.n	80047a8 <LoopCopyDataInit>

080047a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047a6:	3304      	adds	r3, #4

080047a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047ac:	d3f9      	bcc.n	80047a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047b0:	4c0a      	ldr	r4, [pc, #40]	; (80047dc <LoopForever+0x16>)
  movs r3, #0
 80047b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047b4:	e001      	b.n	80047ba <LoopFillZerobss>

080047b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b8:	3204      	adds	r2, #4

080047ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047bc:	d3fb      	bcc.n	80047b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047be:	f005 fc4f 	bl	800a060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047c2:	f7ff f953 	bl	8003a6c <main>

080047c6 <LoopForever>:

LoopForever:
    b LoopForever
 80047c6:	e7fe      	b.n	80047c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80047c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80047cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047d0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80047d4:	0801e4e4 	.word	0x0801e4e4
  ldr r2, =_sbss
 80047d8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80047dc:	2000a65c 	.word	0x2000a65c

080047e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047e0:	e7fe      	b.n	80047e0 <ADC1_IRQHandler>

080047e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ec:	2003      	movs	r0, #3
 80047ee:	f001 fae3 	bl	8005db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047f2:	2000      	movs	r0, #0
 80047f4:	f000 f80e 	bl	8004814 <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	71fb      	strb	r3, [r7, #7]
 8004802:	e001      	b.n	8004808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004804:	f7ff fd8a 	bl	800431c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004808:	79fb      	ldrb	r3, [r7, #7]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_InitTick+0x6c>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d023      	beq.n	8004870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_InitTick+0x70>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_InitTick+0x6c>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4619      	mov	r1, r3
 8004832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004836:	fbb3 f3f1 	udiv	r3, r3, r1
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	4618      	mov	r0, r3
 8004840:	f001 faef 	bl	8005e22 <HAL_SYSTICK_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	d809      	bhi.n	8004864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004850:	2200      	movs	r2, #0
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	f001 fab9 	bl	8005dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_InitTick+0x74>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e007      	b.n	8004874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e004      	b.n	8004874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e001      	b.n	8004874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000008 	.word	0x20000008
 8004884:	20000000 	.word	0x20000000
 8004888:	20000004 	.word	0x20000004

0800488c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_IncTick+0x20>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_IncTick+0x24>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4413      	add	r3, r2
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_IncTick+0x24>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000008 	.word	0x20000008
 80048b0:	2000a4f8 	.word	0x2000a4f8

080048b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return uwTick;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_GetTick+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000a4f8 	.word	0x2000a4f8

080048cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b08      	ldr	r3, [pc, #32]	; (8004978 <LL_ADC_SetOffset+0x44>)
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	03fff000 	.word	0x03fff000

0800497c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3360      	adds	r3, #96	; 0x60
 800498a:	461a      	mov	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3360      	adds	r3, #96	; 0x60
 80049b8:	461a      	mov	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3330      	adds	r3, #48	; 0x30
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	4413      	add	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	211f      	movs	r1, #31
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0e9b      	lsrs	r3, r3, #26
 8004a3c:	f003 011f 	and.w	r1, r3, #31
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0e5b      	lsrs	r3, r3, #25
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	4413      	add	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	0d1b      	lsrs	r3, r3, #20
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2107      	movs	r1, #7
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	401a      	ands	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	0d1b      	lsrs	r3, r3, #20
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0318 	and.w	r3, r3, #24
 8004ad6:	4908      	ldr	r1, [pc, #32]	; (8004af8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ad8:	40d9      	lsrs	r1, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	400b      	ands	r3, r1
 8004ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	0007ffff 	.word	0x0007ffff

08004afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6093      	str	r3, [r2, #8]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b84:	d101      	bne.n	8004b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bd4:	f043 0202 	orr.w	r2, r3, #2
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <LL_ADC_IsEnabled+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_ADC_IsEnabled+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d101      	bne.n	8004c26 <LL_ADC_IsDisableOngoing+0x18>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_ADC_IsDisableOngoing+0x1a>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c48:	f043 0204 	orr.w	r2, r3, #4
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d101      	bne.n	8004c74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d101      	bne.n	8004c9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e126      	b.n	8004f10 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fb47 	bl	8004364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff19 	bl	8004b20 <LL_ADC_IsDeepPowerDownEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff feff 	bl	8004afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff34 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d115      	bne.n	8004d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff18 	bl	8004b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d18:	4b7f      	ldr	r3, [pc, #508]	; (8004f18 <HAL_ADC_Init+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	4a7f      	ldr	r2, [pc, #508]	; (8004f1c <HAL_ADC_Init+0x274>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d2c:	e002      	b.n	8004d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f9      	bne.n	8004d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff16 	bl	8004b70 <LL_ADC_IsInternalRegulatorEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f043 0210 	orr.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff76 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 8004d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 80bf 	bne.w	8004efe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f040 80bb 	bne.w	8004efe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff23 	bl	8004be8 <LL_ADC_IsEnabled>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004da8:	485d      	ldr	r0, [pc, #372]	; (8004f20 <HAL_ADC_Init+0x278>)
 8004daa:	f7ff ff1d 	bl	8004be8 <LL_ADC_IsEnabled>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4619      	mov	r1, r3
 8004dba:	485a      	ldr	r0, [pc, #360]	; (8004f24 <HAL_ADC_Init+0x27c>)
 8004dbc:	f7ff fd86 	bl	80048cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7e5b      	ldrb	r3, [r3, #25]
 8004dc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004dca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004dd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004dd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	3b01      	subs	r3, #1
 8004df4:	045b      	lsls	r3, r3, #17
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <HAL_ADC_Init+0x280>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ff26 	bl	8004c82 <LL_ADC_INJ_IsConversionOngoing>
 8004e36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d13d      	bne.n	8004eba <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d13a      	bne.n	8004eba <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e48:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e50:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e60:	f023 0302 	bic.w	r3, r3, #2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d118      	bne.n	8004eaa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e82:	f023 0304 	bic.w	r3, r3, #4
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e8e:	4311      	orrs	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	611a      	str	r2, [r3, #16]
 8004ea8:	e007      	b.n	8004eba <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10c      	bne.n	8004edc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	f023 010f 	bic.w	r1, r3, #15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8004eda:	e007      	b.n	8004eec <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 020f 	bic.w	r2, r2, #15
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
 8004efc:	e007      	b.n	8004f0e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f043 0210 	orr.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	053e2d63 	.word	0x053e2d63
 8004f20:	50040000 	.word	0x50040000
 8004f24:	50040300 	.word	0x50040300
 8004f28:	fff0c007 	.word	0xfff0c007

08004f2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fe8d 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d167      	bne.n	8005018 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_Start_DMA+0x2a>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e063      	b.n	800501e <HAL_ADC_Start_DMA+0xf2>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fc54 	bl	800580c <ADC_Enable>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d14f      	bne.n	800500e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f023 0206 	bic.w	r2, r3, #6
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58
 8004f9a:	e002      	b.n	8004fa2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <HAL_ADC_Start_DMA+0xfc>)
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	4a1f      	ldr	r2, [pc, #124]	; (800502c <HAL_ADC_Start_DMA+0x100>)
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_ADC_Start_DMA+0x104>)
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	221c      	movs	r2, #28
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0210 	orr.w	r2, r2, #16
 8004fd8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3340      	adds	r3, #64	; 0x40
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f000 ff1e 	bl	8005e3a <HAL_DMA_Start_IT>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fe14 	bl	8004c34 <LL_ADC_REG_StartConversion>
 800500c:	e006      	b.n	800501c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005016:	e001      	b.n	800501c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	080059d7 	.word	0x080059d7
 800502c:	08005aaf 	.word	0x08005aaf
 8005030:	08005acb 	.word	0x08005acb

08005034 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b0b6      	sub	sp, #216	; 0xd8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005058:	2300      	movs	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_ADC_ConfigChannel+0x22>
 8005066:	2302      	movs	r3, #2
 8005068:	e3bb      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x79a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fdf0 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 83a0 	bne.w	80057c4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d824      	bhi.n	80050de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	3b02      	subs	r3, #2
 800509a:	2b03      	cmp	r3, #3
 800509c:	d81b      	bhi.n	80050d6 <HAL_ADC_ConfigChannel+0x8e>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_ADC_ConfigChannel+0x5c>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050c5 	.word	0x080050c5
 80050b0:	080050cd 	.word	0x080050cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80050b4:	230c      	movs	r3, #12
 80050b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80050ba:	e010      	b.n	80050de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80050bc:	2312      	movs	r3, #18
 80050be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80050c2:	e00c      	b.n	80050de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80050c4:	2318      	movs	r3, #24
 80050c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80050ca:	e008      	b.n	80050de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80050cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80050d4:	e003      	b.n	80050de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80050d6:	2306      	movs	r3, #6
 80050d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80050dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80050ec:	f7ff fc8a 	bl	8004a04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fdb1 	bl	8004c5c <LL_ADC_REG_IsConversionOngoing>
 80050fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fdbd 	bl	8004c82 <LL_ADC_INJ_IsConversionOngoing>
 8005108:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800510c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 81a4 	bne.w	800545e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 819f 	bne.w	800545e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	461a      	mov	r2, r3
 800512e:	f7ff fc95 	bl	8004a5c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d00a      	beq.n	800516a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6919      	ldr	r1, [r3, #16]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005164:	f7ff fbe6 	bl	8004934 <LL_ADC_SetOffset>
 8005168:	e179      	b.n	800545e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fc03 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x14e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fbf8 	bl	800497c <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	0e9b      	lsrs	r3, r3, #26
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	e01e      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x18c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fbed 	bl	800497c <LL_ADC_GetOffsetChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80051b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80051bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80051c4:	2320      	movs	r3, #32
 80051c6:	e004      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80051c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051cc:	fab3 f383 	clz	r3, r3
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x1a4>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	e018      	b.n	800521e <HAL_ADC_ConfigChannel+0x1d6>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051f8:	fa93 f3a3 	rbit	r3, r3
 80051fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005210:	2320      	movs	r3, #32
 8005212:	e004      	b.n	800521e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800521e:	429a      	cmp	r2, r3
 8005220:	d106      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fbbc 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fba0 	bl	800497c <LL_ADC_GetOffsetChannel>
 800523c:	4603      	mov	r3, r0
 800523e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_ADC_ConfigChannel+0x214>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2101      	movs	r1, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fb95 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005252:	4603      	mov	r3, r0
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	e01e      	b.n	800529a <HAL_ADC_ConfigChannel+0x252>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fb8a 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005268:	4603      	mov	r3, r0
 800526a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800527a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800528a:	2320      	movs	r3, #32
 800528c:	e004      	b.n	8005298 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800528e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x26a>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	e018      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x29c>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052be:	fa93 f3a3 	rbit	r3, r3
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80052c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80052ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80052d6:	2320      	movs	r3, #32
 80052d8:	e004      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80052da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d106      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fb59 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2102      	movs	r1, #2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fb3d 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005302:	4603      	mov	r3, r0
 8005304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x2da>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2102      	movs	r1, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fb32 	bl	800497c <LL_ADC_GetOffsetChannel>
 8005318:	4603      	mov	r3, r0
 800531a:	0e9b      	lsrs	r3, r3, #26
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	e01e      	b.n	8005360 <HAL_ADC_ConfigChannel+0x318>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2102      	movs	r1, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fb27 	bl	800497c <LL_ADC_GetOffsetChannel>
 800532e:	4603      	mov	r3, r0
 8005330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005338:	fa93 f3a3 	rbit	r3, r3
 800533c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005350:	2320      	movs	r3, #32
 8005352:	e004      	b.n	800535e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x330>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0e9b      	lsrs	r3, r3, #26
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	e014      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x35a>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005380:	fa93 f3a3 	rbit	r3, r3
 8005384:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800538c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005394:	2320      	movs	r3, #32
 8005396:	e004      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d106      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fafa 	bl	80049a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2103      	movs	r1, #3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fade 	bl	800497c <LL_ADC_GetOffsetChannel>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x398>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2103      	movs	r1, #3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fad3 	bl	800497c <LL_ADC_GetOffsetChannel>
 80053d6:	4603      	mov	r3, r0
 80053d8:	0e9b      	lsrs	r3, r3, #26
 80053da:	f003 021f 	and.w	r2, r3, #31
 80053de:	e017      	b.n	8005410 <HAL_ADC_ConfigChannel+0x3c8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2103      	movs	r1, #3
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fac8 	bl	800497c <LL_ADC_GetOffsetChannel>
 80053ec:	4603      	mov	r3, r0
 80053ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80053fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005402:	2320      	movs	r3, #32
 8005404:	e003      	b.n	800540e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_ADC_ConfigChannel+0x3e0>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	0e9b      	lsrs	r3, r3, #26
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	e011      	b.n	800544c <HAL_ADC_ConfigChannel+0x404>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005430:	fa93 f3a3 	rbit	r3, r3
 8005434:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005438:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800543a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005440:	2320      	movs	r3, #32
 8005442:	e003      	b.n	800544c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800544c:	429a      	cmp	r2, r3
 800544e:	d106      	bne.n	800545e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	2103      	movs	r1, #3
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff faa5 	bl	80049a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fbc0 	bl	8004be8 <LL_ADC_IsEnabled>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 8140 	bne.w	80056f0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	461a      	mov	r2, r3
 800547e:	f7ff fb19 	bl	8004ab4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4a8f      	ldr	r2, [pc, #572]	; (80056c4 <HAL_ADC_ConfigChannel+0x67c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	f040 8131 	bne.w	80056f0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x46e>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	0e9b      	lsrs	r3, r3, #26
 80054a4:	3301      	adds	r3, #1
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	bf94      	ite	ls
 80054ae:	2301      	movls	r3, #1
 80054b0:	2300      	movhi	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	e019      	b.n	80054ea <HAL_ADC_ConfigChannel+0x4a2>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80054c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80054c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80054ce:	2320      	movs	r3, #32
 80054d0:	e003      	b.n	80054da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80054d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	bf94      	ite	ls
 80054e4:	2301      	movls	r3, #1
 80054e6:	2300      	movhi	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d079      	beq.n	80055e2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <HAL_ADC_ConfigChannel+0x4c2>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	0e9b      	lsrs	r3, r3, #26
 8005500:	3301      	adds	r3, #1
 8005502:	069b      	lsls	r3, r3, #26
 8005504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005508:	e015      	b.n	8005536 <HAL_ADC_ConfigChannel+0x4ee>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	fa93 f3a3 	rbit	r3, r3
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800551c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005522:	2320      	movs	r3, #32
 8005524:	e003      	b.n	800552e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005528:	fab3 f383 	clz	r3, r3
 800552c:	b2db      	uxtb	r3, r3
 800552e:	3301      	adds	r3, #1
 8005530:	069b      	lsls	r3, r3, #26
 8005532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x50e>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	0e9b      	lsrs	r3, r3, #26
 8005548:	3301      	adds	r3, #1
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2101      	movs	r1, #1
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	e017      	b.n	8005586 <HAL_ADC_ConfigChannel+0x53e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	fa93 f3a3 	rbit	r3, r3
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800556e:	2320      	movs	r3, #32
 8005570:	e003      	b.n	800557a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	ea42 0103 	orr.w	r1, r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x564>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	0e9b      	lsrs	r3, r3, #26
 800559c:	3301      	adds	r3, #1
 800559e:	f003 021f 	and.w	r2, r3, #31
 80055a2:	4613      	mov	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4413      	add	r3, r2
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	e018      	b.n	80055de <HAL_ADC_ConfigChannel+0x596>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	fa93 f3a3 	rbit	r3, r3
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80055c4:	2320      	movs	r3, #32
 80055c6:	e003      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	fab3 f383 	clz	r3, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	f003 021f 	and.w	r2, r3, #31
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055de:	430b      	orrs	r3, r1
 80055e0:	e081      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x5b6>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	0e9b      	lsrs	r3, r3, #26
 80055f4:	3301      	adds	r3, #1
 80055f6:	069b      	lsls	r3, r3, #26
 80055f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055fc:	e015      	b.n	800562a <HAL_ADC_ConfigChannel+0x5e2>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	fa93 f3a3 	rbit	r3, r3
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005616:	2320      	movs	r3, #32
 8005618:	e003      	b.n	8005622 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	b2db      	uxtb	r3, r3
 8005622:	3301      	adds	r3, #1
 8005624:	069b      	lsls	r3, r3, #26
 8005626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_ADC_ConfigChannel+0x602>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0e9b      	lsrs	r3, r3, #26
 800563c:	3301      	adds	r3, #1
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	e017      	b.n	800567a <HAL_ADC_ConfigChannel+0x632>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	61bb      	str	r3, [r7, #24]
  return result;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005662:	2320      	movs	r3, #32
 8005664:	e003      	b.n	800566e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	3301      	adds	r3, #1
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	ea42 0103 	orr.w	r1, r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x65e>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	0e9b      	lsrs	r3, r3, #26
 8005690:	3301      	adds	r3, #1
 8005692:	f003 021f 	and.w	r2, r3, #31
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	3b1e      	subs	r3, #30
 800569e:	051b      	lsls	r3, r3, #20
 80056a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056a4:	e01e      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x69c>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	60fb      	str	r3, [r7, #12]
  return result;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e006      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x688>
 80056c2:	bf00      	nop
 80056c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fab3 f383 	clz	r3, r3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	3301      	adds	r3, #1
 80056d2:	f003 021f 	and.w	r2, r3, #31
 80056d6:	4613      	mov	r3, r2
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	4413      	add	r3, r2
 80056dc:	3b1e      	subs	r3, #30
 80056de:	051b      	lsls	r3, r3, #20
 80056e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056ea:	4619      	mov	r1, r3
 80056ec:	f7ff f9b6 	bl	8004a5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <HAL_ADC_ConfigChannel+0x7a4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d06c      	beq.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056fc:	483c      	ldr	r0, [pc, #240]	; (80057f0 <HAL_ADC_ConfigChannel+0x7a8>)
 80056fe:	f7ff f90b 	bl	8004918 <LL_ADC_GetCommonPathInternalCh>
 8005702:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3a      	ldr	r2, [pc, #232]	; (80057f4 <HAL_ADC_ConfigChannel+0x7ac>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d127      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d121      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a35      	ldr	r2, [pc, #212]	; (80057f8 <HAL_ADC_ConfigChannel+0x7b0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d157      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800572a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800572e:	4619      	mov	r1, r3
 8005730:	482f      	ldr	r0, [pc, #188]	; (80057f0 <HAL_ADC_ConfigChannel+0x7a8>)
 8005732:	f7ff f8de 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005736:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_ADC_ConfigChannel+0x7b4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	4a30      	ldr	r2, [pc, #192]	; (8005800 <HAL_ADC_ConfigChannel+0x7b8>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	099b      	lsrs	r3, r3, #6
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005750:	e002      	b.n	8005758 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3b01      	subs	r3, #1
 8005756:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f9      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800575e:	e03a      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_ADC_ConfigChannel+0x7bc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d113      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800576a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800576e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_ADC_ConfigChannel+0x7b0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d12a      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005788:	4619      	mov	r1, r3
 800578a:	4819      	ldr	r0, [pc, #100]	; (80057f0 <HAL_ADC_ConfigChannel+0x7a8>)
 800578c:	f7ff f8b1 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005790:	e021      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_ADC_ConfigChannel+0x7c0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d11c      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800579c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d116      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <HAL_ADC_ConfigChannel+0x7b0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057ba:	4619      	mov	r1, r3
 80057bc:	480c      	ldr	r0, [pc, #48]	; (80057f0 <HAL_ADC_ConfigChannel+0x7a8>)
 80057be:	f7ff f898 	bl	80048f2 <LL_ADC_SetCommonPathInternalCh>
 80057c2:	e008      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f043 0220 	orr.w	r2, r3, #32
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	37d8      	adds	r7, #216	; 0xd8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	80080000 	.word	0x80080000
 80057f0:	50040300 	.word	0x50040300
 80057f4:	c7520000 	.word	0xc7520000
 80057f8:	50040000 	.word	0x50040000
 80057fc:	20000000 	.word	0x20000000
 8005800:	053e2d63 	.word	0x053e2d63
 8005804:	cb840000 	.word	0xcb840000
 8005808:	80000001 	.word	0x80000001

0800580c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005814:	2300      	movs	r3, #0
 8005816:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff f9e3 	bl	8004be8 <LL_ADC_IsEnabled>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d169      	bne.n	80058fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	4b36      	ldr	r3, [pc, #216]	; (8005908 <ADC_Enable+0xfc>)
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f043 0210 	orr.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e055      	b.n	80058fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f99e 	bl	8004b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800585c:	482b      	ldr	r0, [pc, #172]	; (800590c <ADC_Enable+0x100>)
 800585e:	f7ff f85b 	bl	8004918 <LL_ADC_GetCommonPathInternalCh>
 8005862:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <ADC_Enable+0x104>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	4a28      	ldr	r2, [pc, #160]	; (8005914 <ADC_Enable+0x108>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005886:	e002      	b.n	800588e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3b01      	subs	r3, #1
 800588c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f9      	bne.n	8005888 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005894:	f7ff f80e 	bl	80048b4 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800589a:	e028      	b.n	80058ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff f9a1 	bl	8004be8 <LL_ADC_IsEnabled>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff f971 	bl	8004b98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80058b6:	f7fe fffd 	bl	80048b4 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d914      	bls.n	80058ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d00d      	beq.n	80058ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f043 0210 	orr.w	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	f043 0201 	orr.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e007      	b.n	80058fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d1cf      	bne.n	800589c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	8000003f 	.word	0x8000003f
 800590c:	50040300 	.word	0x50040300
 8005910:	20000000 	.word	0x20000000
 8005914:	053e2d63 	.word	0x053e2d63

08005918 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f972 	bl	8004c0e <LL_ADC_IsDisableOngoing>
 800592a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff f959 	bl	8004be8 <LL_ADC_IsEnabled>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d047      	beq.n	80059cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d144      	bne.n	80059cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030d 	and.w	r3, r3, #13
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10c      	bne.n	800596a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f933 	bl	8004bc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2203      	movs	r2, #3
 8005960:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005962:	f7fe ffa7 	bl	80048b4 <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005968:	e029      	b.n	80059be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f043 0210 	orr.w	r2, r3, #16
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e023      	b.n	80059ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005986:	f7fe ff95 	bl	80048b4 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d914      	bls.n	80059be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f043 0210 	orr.w	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	f043 0201 	orr.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1dc      	bne.n	8005986 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d14b      	bne.n	8005a88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d021      	beq.n	8005a4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe ffe5 	bl	80049de <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d032      	beq.n	8005a80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d12b      	bne.n	8005a80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d11f      	bne.n	8005a80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f043 0201 	orr.w	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
 8005a4c:	e018      	b.n	8005a80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f043 0201 	orr.w	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7fe fc2b 	bl	80042dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a86:	e00e      	b.n	8005aa6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff facd 	bl	8005034 <HAL_ADC_ErrorCallback>
}
 8005a9a:	e004      	b.n	8005aa6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7fe fbfd 	bl	80042bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fa9f 	bl	8005034 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <LL_ADC_StartCalibration>:
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_IsCalibrationOnGoing>:
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b44:	d101      	bne.n	8005b4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADCEx_Calibration_Start+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e04d      	b.n	8005c10 <HAL_ADCEx_Calibration_Start+0xb8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fecb 	bl	8005918 <ADC_Disable>
 8005b82:	4603      	mov	r3, r0
 8005b84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d136      	bne.n	8005bfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b94:	f023 0302 	bic.w	r3, r3, #2
 8005b98:	f043 0202 	orr.w	r2, r3, #2
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ffa9 	bl	8005afe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bac:	e014      	b.n	8005bd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005bba:	d30d      	bcc.n	8005bd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	f023 0312 	bic.w	r3, r3, #18
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e01b      	b.n	8005c10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff ffa7 	bl	8005b30 <LL_ADC_IsCalibrationOnGoing>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e2      	bne.n	8005bae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	f023 0303 	bic.w	r3, r3, #3
 8005bf0:	f043 0201 	orr.w	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54
 8005bf8:	e005      	b.n	8005c06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	f043 0210 	orr.w	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c28:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <__NVIC_SetPriorityGrouping+0x44>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c34:	4013      	ands	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c4a:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <__NVIC_SetPriorityGrouping+0x44>)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	60d3      	str	r3, [r2, #12]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <__NVIC_GetPriorityGrouping+0x18>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	f003 0307 	and.w	r3, r3, #7
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db0b      	blt.n	8005ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	4907      	ldr	r1, [pc, #28]	; (8005cb4 <__NVIC_EnableIRQ+0x38>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	e000e100 	.word	0xe000e100

08005cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	6039      	str	r1, [r7, #0]
 8005cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	db0a      	blt.n	8005ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	490c      	ldr	r1, [pc, #48]	; (8005d04 <__NVIC_SetPriority+0x4c>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	0112      	lsls	r2, r2, #4
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ce0:	e00a      	b.n	8005cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	4908      	ldr	r1, [pc, #32]	; (8005d08 <__NVIC_SetPriority+0x50>)
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	3b04      	subs	r3, #4
 8005cf0:	0112      	lsls	r2, r2, #4
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	761a      	strb	r2, [r3, #24]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000e100 	.word	0xe000e100
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b089      	sub	sp, #36	; 0x24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f1c3 0307 	rsb	r3, r3, #7
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	bf28      	it	cs
 8005d2a:	2304      	movcs	r3, #4
 8005d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3304      	adds	r3, #4
 8005d32:	2b06      	cmp	r3, #6
 8005d34:	d902      	bls.n	8005d3c <NVIC_EncodePriority+0x30>
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3b03      	subs	r3, #3
 8005d3a:	e000      	b.n	8005d3e <NVIC_EncodePriority+0x32>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	401a      	ands	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d54:	f04f 31ff 	mov.w	r1, #4294967295
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	43d9      	mvns	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	4313      	orrs	r3, r2
         );
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3724      	adds	r7, #36	; 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d84:	d301      	bcc.n	8005d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d86:	2301      	movs	r3, #1
 8005d88:	e00f      	b.n	8005daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <SysTick_Config+0x40>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d92:	210f      	movs	r1, #15
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	f7ff ff8e 	bl	8005cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <SysTick_Config+0x40>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005da2:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <SysTick_Config+0x40>)
 8005da4:	2207      	movs	r2, #7
 8005da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	e000e010 	.word	0xe000e010

08005db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff29 	bl	8005c18 <__NVIC_SetPriorityGrouping>
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005de0:	f7ff ff3e 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 8005de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	6978      	ldr	r0, [r7, #20]
 8005dec:	f7ff ff8e 	bl	8005d0c <NVIC_EncodePriority>
 8005df0:	4602      	mov	r2, r0
 8005df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff ff5d 	bl	8005cb8 <__NVIC_SetPriority>
}
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ff31 	bl	8005c7c <__NVIC_EnableIRQ>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff ffa2 	bl	8005d74 <SysTick_Config>
 8005e30:	4603      	mov	r3, r0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_DMA_Start_IT+0x20>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e04b      	b.n	8005ef2 <HAL_DMA_Start_IT+0xb8>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d13a      	bne.n	8005ee4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f831 	bl	8005efa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 020e 	orr.w	r2, r2, #14
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e00f      	b.n	8005ed2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0204 	bic.w	r2, r2, #4
 8005ec0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 020a 	orr.w	r2, r2, #10
 8005ed0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e005      	b.n	8005ef0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
 8005eee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
 8005f06:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0c:	f003 021c 	and.w	r2, r3, #28
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d108      	bne.n	8005f3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f3c:	e007      	b.n	8005f4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f6a:	e148      	b.n	80061fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	2101      	movs	r1, #1
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 813a 	beq.w	80061f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d005      	beq.n	8005f9c <HAL_GPIO_Init+0x40>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d130      	bne.n	8005ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	091b      	lsrs	r3, r3, #4
 8005fe8:	f003 0201 	and.w	r2, r3, #1
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b03      	cmp	r3, #3
 8006008:	d017      	beq.n	800603a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	2203      	movs	r2, #3
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d123      	bne.n	800608e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	08da      	lsrs	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3208      	adds	r2, #8
 800604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	220f      	movs	r2, #15
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4013      	ands	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	08da      	lsrs	r2, r3, #3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3208      	adds	r2, #8
 8006088:	6939      	ldr	r1, [r7, #16]
 800608a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2203      	movs	r2, #3
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0203 	and.w	r2, r3, #3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8094 	beq.w	80061f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d0:	4b52      	ldr	r3, [pc, #328]	; (800621c <HAL_GPIO_Init+0x2c0>)
 80060d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d4:	4a51      	ldr	r2, [pc, #324]	; (800621c <HAL_GPIO_Init+0x2c0>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6613      	str	r3, [r2, #96]	; 0x60
 80060dc:	4b4f      	ldr	r3, [pc, #316]	; (800621c <HAL_GPIO_Init+0x2c0>)
 80060de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060e8:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_GPIO_Init+0x2c4>)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	089b      	lsrs	r3, r3, #2
 80060ee:	3302      	adds	r3, #2
 80060f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	220f      	movs	r2, #15
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006112:	d00d      	beq.n	8006130 <HAL_GPIO_Init+0x1d4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a43      	ldr	r2, [pc, #268]	; (8006224 <HAL_GPIO_Init+0x2c8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <HAL_GPIO_Init+0x1d0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a42      	ldr	r2, [pc, #264]	; (8006228 <HAL_GPIO_Init+0x2cc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_GPIO_Init+0x1cc>
 8006124:	2302      	movs	r3, #2
 8006126:	e004      	b.n	8006132 <HAL_GPIO_Init+0x1d6>
 8006128:	2307      	movs	r3, #7
 800612a:	e002      	b.n	8006132 <HAL_GPIO_Init+0x1d6>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <HAL_GPIO_Init+0x1d6>
 8006130:	2300      	movs	r3, #0
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	f002 0203 	and.w	r2, r2, #3
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4093      	lsls	r3, r2
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006142:	4937      	ldr	r1, [pc, #220]	; (8006220 <HAL_GPIO_Init+0x2c4>)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	3302      	adds	r3, #2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006150:	4b36      	ldr	r3, [pc, #216]	; (800622c <HAL_GPIO_Init+0x2d0>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006174:	4a2d      	ldr	r2, [pc, #180]	; (800622c <HAL_GPIO_Init+0x2d0>)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_GPIO_Init+0x2d0>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	43db      	mvns	r3, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800619e:	4a23      	ldr	r2, [pc, #140]	; (800622c <HAL_GPIO_Init+0x2d0>)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80061a4:	4b21      	ldr	r3, [pc, #132]	; (800622c <HAL_GPIO_Init+0x2d0>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061c8:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_GPIO_Init+0x2d0>)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80061ce:	4b17      	ldr	r3, [pc, #92]	; (800622c <HAL_GPIO_Init+0x2d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	43db      	mvns	r3, r3
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061f2:	4a0e      	ldr	r2, [pc, #56]	; (800622c <HAL_GPIO_Init+0x2d0>)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	3301      	adds	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f aeaf 	bne.w	8005f6c <HAL_GPIO_Init+0x10>
  }
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40021000 	.word	0x40021000
 8006220:	40010000 	.word	0x40010000
 8006224:	48000400 	.word	0x48000400
 8006228:	48000800 	.word	0x48000800
 800622c:	40010400 	.word	0x40010400

08006230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	807b      	strh	r3, [r7, #2]
 800623c:	4613      	mov	r3, r2
 800623e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006240:	787b      	ldrb	r3, [r7, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800624c:	e002      	b.n	8006254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800626a:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f806 	bl	8006290 <HAL_GPIO_EXTI_Callback>
  }
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40010400 	.word	0x40010400

08006290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b6:	6013      	str	r3, [r2, #0]
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40007000 	.word	0x40007000

080062c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40007000 	.word	0x40007000

080062e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f2:	d130      	bne.n	8006356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062f4:	4b23      	ldr	r3, [pc, #140]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	d038      	beq.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800630c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006312:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2232      	movs	r2, #50	; 0x32
 8006318:	fb02 f303 	mul.w	r3, r2, r3
 800631c:	4a1b      	ldr	r2, [pc, #108]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	0c9b      	lsrs	r3, r3, #18
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006328:	e002      	b.n	8006330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b01      	subs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006330:	4b14      	ldr	r3, [pc, #80]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d102      	bne.n	8006344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f2      	bne.n	800632a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d110      	bne.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00f      	b.n	8006376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d007      	beq.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800636c:	4a05      	ldr	r2, [pc, #20]	; (8006384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800636e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40007000 	.word	0x40007000
 8006388:	20000000 	.word	0x20000000
 800638c:	431bde83 	.word	0x431bde83

08006390 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f000 bc02 	b.w	8006ba8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063a4:	4b96      	ldr	r3, [pc, #600]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 030c 	and.w	r3, r3, #12
 80063ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063ae:	4b94      	ldr	r3, [pc, #592]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80e4 	beq.w	800658e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_RCC_OscConfig+0x4c>
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	f040 808b 	bne.w	80064ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	f040 8087 	bne.w	80064ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063dc:	4b88      	ldr	r3, [pc, #544]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x64>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e3d9      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	4b81      	ldr	r3, [pc, #516]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <HAL_RCC_OscConfig+0x7e>
 8006404:	4b7e      	ldr	r3, [pc, #504]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640c:	e005      	b.n	800641a <HAL_RCC_OscConfig+0x8a>
 800640e:	4b7c      	ldr	r3, [pc, #496]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800641a:	4293      	cmp	r3, r2
 800641c:	d223      	bcs.n	8006466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd8c 	bl	8006f40 <RCC_SetFlashLatencyFromMSIRange>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e3ba      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006432:	4b73      	ldr	r3, [pc, #460]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a72      	ldr	r2, [pc, #456]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006438:	f043 0308 	orr.w	r3, r3, #8
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b70      	ldr	r3, [pc, #448]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	496d      	ldr	r1, [pc, #436]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006450:	4b6b      	ldr	r3, [pc, #428]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4968      	ldr	r1, [pc, #416]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]
 8006464:	e025      	b.n	80064b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006466:	4b66      	ldr	r3, [pc, #408]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a65      	ldr	r2, [pc, #404]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	4b63      	ldr	r3, [pc, #396]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	4960      	ldr	r1, [pc, #384]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006480:	4313      	orrs	r3, r2
 8006482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006484:	4b5e      	ldr	r3, [pc, #376]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	495b      	ldr	r1, [pc, #364]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006494:	4313      	orrs	r3, r2
 8006496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd4c 	bl	8006f40 <RCC_SetFlashLatencyFromMSIRange>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e37a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064b2:	f000 fc81 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 80064b6:	4602      	mov	r2, r0
 80064b8:	4b51      	ldr	r3, [pc, #324]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	4950      	ldr	r1, [pc, #320]	; (8006604 <HAL_RCC_OscConfig+0x274>)
 80064c4:	5ccb      	ldrb	r3, [r1, r3]
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	4a4e      	ldr	r2, [pc, #312]	; (8006608 <HAL_RCC_OscConfig+0x278>)
 80064d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064d2:	4b4e      	ldr	r3, [pc, #312]	; (800660c <HAL_RCC_OscConfig+0x27c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f99c 	bl	8004814 <HAL_InitTick>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d052      	beq.n	800658c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	e35e      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d032      	beq.n	8006558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064f2:	4b43      	ldr	r3, [pc, #268]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a42      	ldr	r2, [pc, #264]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064fe:	f7fe f9d9 	bl	80048b4 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006506:	f7fe f9d5 	bl	80048b4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e347      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006518:	4b39      	ldr	r3, [pc, #228]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006524:	4b36      	ldr	r3, [pc, #216]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a35      	ldr	r2, [pc, #212]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800652a:	f043 0308 	orr.w	r3, r3, #8
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b33      	ldr	r3, [pc, #204]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	4930      	ldr	r1, [pc, #192]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006542:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	492b      	ldr	r1, [pc, #172]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006552:	4313      	orrs	r3, r2
 8006554:	604b      	str	r3, [r1, #4]
 8006556:	e01a      	b.n	800658e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006558:	4b29      	ldr	r3, [pc, #164]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a28      	ldr	r2, [pc, #160]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006564:	f7fe f9a6 	bl	80048b4 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800656c:	f7fe f9a2 	bl	80048b4 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e314      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x1dc>
 800658a:	e000      	b.n	800658e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800658c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d073      	beq.n	8006682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d005      	beq.n	80065ac <HAL_RCC_OscConfig+0x21c>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b0c      	cmp	r3, #12
 80065a4:	d10e      	bne.n	80065c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d10b      	bne.n	80065c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ac:	4b14      	ldr	r3, [pc, #80]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d063      	beq.n	8006680 <HAL_RCC_OscConfig+0x2f0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d15f      	bne.n	8006680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e2f1      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065cc:	d106      	bne.n	80065dc <HAL_RCC_OscConfig+0x24c>
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a0b      	ldr	r2, [pc, #44]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e025      	b.n	8006628 <HAL_RCC_OscConfig+0x298>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e4:	d114      	bne.n	8006610 <HAL_RCC_OscConfig+0x280>
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a05      	ldr	r2, [pc, #20]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4b03      	ldr	r3, [pc, #12]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a02      	ldr	r2, [pc, #8]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e013      	b.n	8006628 <HAL_RCC_OscConfig+0x298>
 8006600:	40021000 	.word	0x40021000
 8006604:	0801e33c 	.word	0x0801e33c
 8006608:	20000000 	.word	0x20000000
 800660c:	20000004 	.word	0x20000004
 8006610:	4ba0      	ldr	r3, [pc, #640]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a9f      	ldr	r2, [pc, #636]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4b9d      	ldr	r3, [pc, #628]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a9c      	ldr	r2, [pc, #624]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fe f940 	bl	80048b4 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fe f93c 	bl	80048b4 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	; 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e2ae      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800664a:	4b92      	ldr	r3, [pc, #584]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0x2a8>
 8006656:	e014      	b.n	8006682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fe f92c 	bl	80048b4 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fe f928 	bl	80048b4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e29a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006672:	4b88      	ldr	r3, [pc, #544]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x2d0>
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d060      	beq.n	8006750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b04      	cmp	r3, #4
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_OscConfig+0x310>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d119      	bne.n	80066ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d116      	bne.n	80066ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a0:	4b7c      	ldr	r3, [pc, #496]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_OscConfig+0x328>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e277      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b8:	4b76      	ldr	r3, [pc, #472]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	4973      	ldr	r1, [pc, #460]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066cc:	e040      	b.n	8006750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d023      	beq.n	800671e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d6:	4b6f      	ldr	r3, [pc, #444]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a6e      	ldr	r2, [pc, #440]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e2:	f7fe f8e7 	bl	80048b4 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fe f8e3 	bl	80048b4 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e255      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066fc:	4b65      	ldr	r3, [pc, #404]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006708:	4b62      	ldr	r3, [pc, #392]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	495f      	ldr	r1, [pc, #380]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006718:	4313      	orrs	r3, r2
 800671a:	604b      	str	r3, [r1, #4]
 800671c:	e018      	b.n	8006750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800671e:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a5c      	ldr	r2, [pc, #368]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fe f8c3 	bl	80048b4 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006732:	f7fe f8bf 	bl	80048b4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e231      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006744:	4b53      	ldr	r3, [pc, #332]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03c      	beq.n	80067d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01c      	beq.n	800679e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006764:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800676a:	4a4a      	ldr	r2, [pc, #296]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fe f89e 	bl	80048b4 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677c:	f7fe f89a 	bl	80048b4 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e20c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ef      	beq.n	800677c <HAL_RCC_OscConfig+0x3ec>
 800679c:	e01b      	b.n	80067d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679e:	4b3d      	ldr	r3, [pc, #244]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067a4:	4a3b      	ldr	r2, [pc, #236]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ae:	f7fe f881 	bl	80048b4 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b6:	f7fe f87d 	bl	80048b4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e1ef      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067c8:	4b32      	ldr	r3, [pc, #200]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ef      	bne.n	80067b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80a6 	beq.w	8006930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e4:	2300      	movs	r3, #0
 80067e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067e8:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	4a26      	ldr	r2, [pc, #152]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 80067fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006800:	4b24      	ldr	r3, [pc, #144]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680c:	2301      	movs	r3, #1
 800680e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006810:	4b21      	ldr	r3, [pc, #132]	; (8006898 <HAL_RCC_OscConfig+0x508>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d118      	bne.n	800684e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800681c:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <HAL_RCC_OscConfig+0x508>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <HAL_RCC_OscConfig+0x508>)
 8006822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006828:	f7fe f844 	bl	80048b4 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006830:	f7fe f840 	bl	80048b4 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e1b2      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <HAL_RCC_OscConfig+0x508>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d108      	bne.n	8006868 <HAL_RCC_OscConfig+0x4d8>
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	4a0d      	ldr	r2, [pc, #52]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006866:	e029      	b.n	80068bc <HAL_RCC_OscConfig+0x52c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b05      	cmp	r3, #5
 800686e:	d115      	bne.n	800689c <HAL_RCC_OscConfig+0x50c>
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	4a07      	ldr	r2, [pc, #28]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006878:	f043 0304 	orr.w	r3, r3, #4
 800687c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006880:	4b04      	ldr	r3, [pc, #16]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006886:	4a03      	ldr	r2, [pc, #12]	; (8006894 <HAL_RCC_OscConfig+0x504>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006890:	e014      	b.n	80068bc <HAL_RCC_OscConfig+0x52c>
 8006892:	bf00      	nop
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
 800689c:	4b9a      	ldr	r3, [pc, #616]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	4a99      	ldr	r2, [pc, #612]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068ac:	4b96      	ldr	r3, [pc, #600]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	4a95      	ldr	r2, [pc, #596]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80068b4:	f023 0304 	bic.w	r3, r3, #4
 80068b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fd fff6 	bl	80048b4 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fd fff2 	bl	80048b4 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e162      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e2:	4b89      	ldr	r3, [pc, #548]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0ed      	beq.n	80068cc <HAL_RCC_OscConfig+0x53c>
 80068f0:	e015      	b.n	800691e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fd ffdf 	bl	80048b4 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fa:	f7fd ffdb 	bl	80048b4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	; 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e14b      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006910:	4b7d      	ldr	r3, [pc, #500]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ed      	bne.n	80068fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d105      	bne.n	8006930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006924:	4b78      	ldr	r3, [pc, #480]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006928:	4a77      	ldr	r2, [pc, #476]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 800692a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d03c      	beq.n	80069b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01c      	beq.n	800697e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006944:	4b70      	ldr	r3, [pc, #448]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800694a:	4a6f      	ldr	r2, [pc, #444]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fd ffae 	bl	80048b4 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800695c:	f7fd ffaa 	bl	80048b4 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e11c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800696e:	4b66      	ldr	r3, [pc, #408]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ef      	beq.n	800695c <HAL_RCC_OscConfig+0x5cc>
 800697c:	e01b      	b.n	80069b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800697e:	4b62      	ldr	r3, [pc, #392]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006984:	4a60      	ldr	r2, [pc, #384]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698e:	f7fd ff91 	bl	80048b4 <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006996:	f7fd ff8d 	bl	80048b4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e0ff      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069a8:	4b57      	ldr	r3, [pc, #348]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80069aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1ef      	bne.n	8006996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80f3 	beq.w	8006ba6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	f040 80c9 	bne.w	8006b5c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069ca:	4b4f      	ldr	r3, [pc, #316]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f003 0203 	and.w	r2, r3, #3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	429a      	cmp	r2, r3
 80069dc:	d12c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	3b01      	subs	r3, #1
 80069ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d123      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d11b      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d113      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d109      	bne.n	8006a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	3b01      	subs	r3, #1
 8006a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d06b      	beq.n	8006b10 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b0c      	cmp	r3, #12
 8006a3c:	d062      	beq.n	8006b04 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a3e:	4b32      	ldr	r3, [pc, #200]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e0ac      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2d      	ldr	r2, [pc, #180]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a5a:	f7fd ff2b 	bl	80048b4 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a62:	f7fd ff27 	bl	80048b4 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e099      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f0      	bne.n	8006a62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <HAL_RCC_OscConfig+0x77c>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a90:	3a01      	subs	r2, #1
 8006a92:	0112      	lsls	r2, r2, #4
 8006a94:	4311      	orrs	r1, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a9a:	0212      	lsls	r2, r2, #8
 8006a9c:	4311      	orrs	r1, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006aa2:	0852      	lsrs	r2, r2, #1
 8006aa4:	3a01      	subs	r2, #1
 8006aa6:	0552      	lsls	r2, r2, #21
 8006aa8:	4311      	orrs	r1, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006aae:	0852      	lsrs	r2, r2, #1
 8006ab0:	3a01      	subs	r2, #1
 8006ab2:	0652      	lsls	r2, r2, #25
 8006ab4:	4311      	orrs	r1, r2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aba:	06d2      	lsls	r2, r2, #27
 8006abc:	430a      	orrs	r2, r1
 8006abe:	4912      	ldr	r1, [pc, #72]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0f      	ldr	r2, [pc, #60]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006adc:	f7fd feea 	bl	80048b4 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae4:	f7fd fee6 	bl	80048b4 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e058      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <HAL_RCC_OscConfig+0x778>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b02:	e050      	b.n	8006ba6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e04f      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d144      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b1c:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a23      	ldr	r2, [pc, #140]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b34:	f7fd febe 	bl	80048b4 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fd feba 	bl	80048b4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e02c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x7ac>
 8006b5a:	e024      	b.n	8006ba6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b0c      	cmp	r3, #12
 8006b60:	d01f      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a12      	ldr	r2, [pc, #72]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fd fea1 	bl	80048b4 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b76:	f7fd fe9d 	bl	80048b4 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e00f      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b88:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	4905      	ldr	r1, [pc, #20]	; (8006bb0 <HAL_RCC_OscConfig+0x820>)
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <HAL_RCC_OscConfig+0x824>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60cb      	str	r3, [r1, #12]
 8006ba0:	e001      	b.n	8006ba6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	feeefffc 	.word	0xfeeefffc

08006bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0e7      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b75      	ldr	r3, [pc, #468]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d910      	bls.n	8006bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b72      	ldr	r3, [pc, #456]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f023 0207 	bic.w	r2, r3, #7
 8006be2:	4970      	ldr	r1, [pc, #448]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bea:	4b6e      	ldr	r3, [pc, #440]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0cf      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	4b66      	ldr	r3, [pc, #408]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d908      	bls.n	8006c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c18:	4b63      	ldr	r3, [pc, #396]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4960      	ldr	r1, [pc, #384]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d04c      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d107      	bne.n	8006c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3e:	4b5a      	ldr	r3, [pc, #360]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d121      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e0a6      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c56:	4b54      	ldr	r3, [pc, #336]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d115      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e09a      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c6e:	4b4e      	ldr	r3, [pc, #312]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e08e      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c7e:	4b4a      	ldr	r3, [pc, #296]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e086      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c8e:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f023 0203 	bic.w	r2, r3, #3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4943      	ldr	r1, [pc, #268]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca0:	f7fd fe08 	bl	80048b4 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca8:	f7fd fe04 	bl	80048b4 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e06e      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	4b3a      	ldr	r3, [pc, #232]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 020c 	and.w	r2, r3, #12
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d1eb      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d208      	bcs.n	8006cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cec:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	492b      	ldr	r1, [pc, #172]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cfe:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d210      	bcs.n	8006d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0c:	4b25      	ldr	r3, [pc, #148]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 0207 	bic.w	r2, r3, #7
 8006d14:	4923      	ldr	r1, [pc, #140]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1c:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e036      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	4918      	ldr	r1, [pc, #96]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d009      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4910      	ldr	r1, [pc, #64]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d6c:	f000 f824 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	091b      	lsrs	r3, r3, #4
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	490b      	ldr	r1, [pc, #44]	; (8006dac <HAL_RCC_ClockConfig+0x1f4>)
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <HAL_RCC_ClockConfig+0x1fc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd fd3f 	bl	8004814 <HAL_InitTick>
 8006d96:	4603      	mov	r3, r0
 8006d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40022000 	.word	0x40022000
 8006da8:	40021000 	.word	0x40021000
 8006dac:	0801e33c 	.word	0x0801e33c
 8006db0:	20000000 	.word	0x20000000
 8006db4:	20000004 	.word	0x20000004

08006db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	; 0x24
 8006dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_RCC_GetSysClockFreq+0x34>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d121      	bne.n	8006e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d11e      	bne.n	8006e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d107      	bne.n	8006e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006df8:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e005      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e08:	4b2d      	ldr	r3, [pc, #180]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e14:	4a2b      	ldr	r2, [pc, #172]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10d      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e28:	e00a      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d102      	bne.n	8006e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e30:	4b25      	ldr	r3, [pc, #148]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e004      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e3c:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8006e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b0c      	cmp	r3, #12
 8006e44:	d134      	bne.n	8006eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e46:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d003      	beq.n	8006e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0xac>
 8006e5c:	e005      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e60:	617b      	str	r3, [r7, #20]
      break;
 8006e62:	e005      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e64:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8006e66:	617b      	str	r3, [r7, #20]
      break;
 8006e68:	e002      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	617b      	str	r3, [r7, #20]
      break;
 8006e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	fb03 f202 	mul.w	r2, r3, r2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	0e5b      	lsrs	r3, r3, #25
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3724      	adds	r7, #36	; 0x24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	0801e354 	.word	0x0801e354
 8006ec8:	00f42400 	.word	0x00f42400
 8006ecc:	007a1200 	.word	0x007a1200

08006ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ed4:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000000 	.word	0x20000000

08006ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006eec:	f7ff fff0 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	4904      	ldr	r1, [pc, #16]	; (8006f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006efe:	5ccb      	ldrb	r3, [r1, r3]
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	0801e34c 	.word	0x0801e34c

08006f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f18:	f7ff ffda 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	0adb      	lsrs	r3, r3, #11
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	4904      	ldr	r1, [pc, #16]	; (8006f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0801e34c 	.word	0x0801e34c

08006f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f48:	2300      	movs	r3, #0
 8006f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f58:	f7ff f9b6 	bl	80062c8 <HAL_PWREx_GetVoltageRange>
 8006f5c:	6178      	str	r0, [r7, #20]
 8006f5e:	e014      	b.n	8006f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f60:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f6c:	4b22      	ldr	r3, [pc, #136]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f78:	f7ff f9a6 	bl	80062c8 <HAL_PWREx_GetVoltageRange>
 8006f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f90:	d10b      	bne.n	8006faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d919      	bls.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8006f9c:	d902      	bls.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e013      	b.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	e010      	b.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d902      	bls.n	8006fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e00a      	b.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d102      	bne.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e004      	b.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b70      	cmp	r3, #112	; 0x70
 8006fc6:	d101      	bne.n	8006fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fc8:	2301      	movs	r3, #1
 8006fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f023 0207 	bic.w	r2, r3, #7
 8006fd4:	4909      	ldr	r1, [pc, #36]	; (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006fdc:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d001      	beq.n	8006fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	40022000 	.word	0x40022000

08007000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007008:	2300      	movs	r3, #0
 800700a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800700c:	2300      	movs	r3, #0
 800700e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007018:	2b00      	cmp	r3, #0
 800701a:	d031      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007024:	d01a      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800702a:	d814      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007030:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007034:	d10f      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007036:	4b5d      	ldr	r3, [pc, #372]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	4a5c      	ldr	r2, [pc, #368]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007040:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007042:	e00c      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f9de 	bl	800740c <RCCEx_PLLSAI1_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	74fb      	strb	r3, [r7, #19]
      break;
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800705c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705e:	7cfb      	ldrb	r3, [r7, #19]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007064:	4b51      	ldr	r3, [pc, #324]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	494e      	ldr	r1, [pc, #312]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800707a:	e001      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 809e 	beq.w	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007092:	4b46      	ldr	r3, [pc, #280]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b40      	ldr	r3, [pc, #256]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	4a3f      	ldr	r2, [pc, #252]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	6593      	str	r3, [r2, #88]	; 0x58
 80070b4:	4b3d      	ldr	r3, [pc, #244]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d0:	f7fd fbf0 	bl	80048b4 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070d8:	f7fd fbec 	bl	80048b4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d902      	bls.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	74fb      	strb	r3, [r7, #19]
        break;
 80070ea:	e005      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0ef      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d15a      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01e      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	429a      	cmp	r2, r3
 8007118:	d019      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007126:	4b21      	ldr	r3, [pc, #132]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800712e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800713e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d016      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fd fbac 	bl	80048b4 <HAL_GetTick>
 800715c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800715e:	e00b      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fd fba8 	bl	80048b4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	; 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d902      	bls.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	74fb      	strb	r3, [r7, #19]
            break;
 8007176:	e006      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0ec      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718c:	4b07      	ldr	r3, [pc, #28]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719a:	4904      	ldr	r1, [pc, #16]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071a2:	e009      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	74bb      	strb	r3, [r7, #18]
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071b8:	7c7b      	ldrb	r3, [r7, #17]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d105      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071be:	4b8a      	ldr	r3, [pc, #552]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	4a89      	ldr	r2, [pc, #548]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071d6:	4b84      	ldr	r3, [pc, #528]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071dc:	f023 0203 	bic.w	r2, r3, #3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	4980      	ldr	r1, [pc, #512]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071f8:	4b7b      	ldr	r3, [pc, #492]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f023 020c 	bic.w	r2, r3, #12
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	4978      	ldr	r1, [pc, #480]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007220:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	496f      	ldr	r1, [pc, #444]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800723c:	4b6a      	ldr	r3, [pc, #424]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	4967      	ldr	r1, [pc, #412]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800725e:	4b62      	ldr	r3, [pc, #392]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	495e      	ldr	r1, [pc, #376]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007280:	4b59      	ldr	r3, [pc, #356]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4956      	ldr	r1, [pc, #344]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072a2:	4b51      	ldr	r3, [pc, #324]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	494d      	ldr	r1, [pc, #308]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d028      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072c4:	4b48      	ldr	r3, [pc, #288]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	4945      	ldr	r1, [pc, #276]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e2:	d106      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e4:	4b40      	ldr	r3, [pc, #256]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4a3f      	ldr	r2, [pc, #252]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ee:	60d3      	str	r3, [r2, #12]
 80072f0:	e011      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072fa:	d10c      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f882 	bl	800740c <RCCEx_PLLSAI1_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800730c:	7cfb      	ldrb	r3, [r7, #19]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007312:	7cfb      	ldrb	r3, [r7, #19]
 8007314:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d028      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007322:	4b31      	ldr	r3, [pc, #196]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	492d      	ldr	r1, [pc, #180]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007340:	d106      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800734c:	60d3      	str	r3, [r2, #12]
 800734e:	e011      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007358:	d10c      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	2101      	movs	r1, #1
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f853 	bl	800740c <RCCEx_PLLSAI1_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800736a:	7cfb      	ldrb	r3, [r7, #19]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01c      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738e:	4916      	ldr	r1, [pc, #88]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800739e:	d10c      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f830 	bl	800740c <RCCEx_PLLSAI1_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40021000 	.word	0x40021000

080073ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a04      	ldr	r2, [pc, #16]	; (8007408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073f6:	f043 0304 	orr.w	r3, r3, #4
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	bf00      	nop
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40021000 	.word	0x40021000

0800740c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800741a:	4b74      	ldr	r3, [pc, #464]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007426:	4b71      	ldr	r3, [pc, #452]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0203 	and.w	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d10d      	bne.n	8007452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
       ||
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800743e:	4b6b      	ldr	r3, [pc, #428]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	091b      	lsrs	r3, r3, #4
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
       ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d047      	beq.n	80074e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e044      	b.n	80074e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d018      	beq.n	8007492 <RCCEx_PLLSAI1_Config+0x86>
 8007460:	2b03      	cmp	r3, #3
 8007462:	d825      	bhi.n	80074b0 <RCCEx_PLLSAI1_Config+0xa4>
 8007464:	2b01      	cmp	r3, #1
 8007466:	d002      	beq.n	800746e <RCCEx_PLLSAI1_Config+0x62>
 8007468:	2b02      	cmp	r3, #2
 800746a:	d009      	beq.n	8007480 <RCCEx_PLLSAI1_Config+0x74>
 800746c:	e020      	b.n	80074b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800746e:	4b5f      	ldr	r3, [pc, #380]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d11d      	bne.n	80074b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800747e:	e01a      	b.n	80074b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007480:	4b5a      	ldr	r3, [pc, #360]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007488:	2b00      	cmp	r3, #0
 800748a:	d116      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007490:	e013      	b.n	80074ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007492:	4b56      	ldr	r3, [pc, #344]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10f      	bne.n	80074be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800749e:	4b53      	ldr	r3, [pc, #332]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074ae:	e006      	b.n	80074be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e004      	b.n	80074c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074b6:	bf00      	nop
 80074b8:	e002      	b.n	80074c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074ba:	bf00      	nop
 80074bc:	e000      	b.n	80074c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074be:	bf00      	nop
    }

    if(status == HAL_OK)
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074c6:	4b49      	ldr	r3, [pc, #292]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	430b      	orrs	r3, r1
 80074dc:	4943      	ldr	r1, [pc, #268]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d17c      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074e8:	4b40      	ldr	r3, [pc, #256]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a3f      	ldr	r2, [pc, #252]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f4:	f7fd f9de 	bl	80048b4 <HAL_GetTick>
 80074f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074fa:	e009      	b.n	8007510 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074fc:	f7fd f9da 	bl	80048b4 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d902      	bls.n	8007510 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	73fb      	strb	r3, [r7, #15]
        break;
 800750e:	e005      	b.n	800751c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007510:	4b36      	ldr	r3, [pc, #216]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1ef      	bne.n	80074fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d15f      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d110      	bne.n	800754a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007528:	4b30      	ldr	r3, [pc, #192]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007530:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6892      	ldr	r2, [r2, #8]
 8007538:	0211      	lsls	r1, r2, #8
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68d2      	ldr	r2, [r2, #12]
 800753e:	06d2      	lsls	r2, r2, #27
 8007540:	430a      	orrs	r2, r1
 8007542:	492a      	ldr	r1, [pc, #168]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007544:	4313      	orrs	r3, r2
 8007546:	610b      	str	r3, [r1, #16]
 8007548:	e027      	b.n	800759a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d112      	bne.n	8007576 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007550:	4b26      	ldr	r3, [pc, #152]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6892      	ldr	r2, [r2, #8]
 8007560:	0211      	lsls	r1, r2, #8
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6912      	ldr	r2, [r2, #16]
 8007566:	0852      	lsrs	r2, r2, #1
 8007568:	3a01      	subs	r2, #1
 800756a:	0552      	lsls	r2, r2, #21
 800756c:	430a      	orrs	r2, r1
 800756e:	491f      	ldr	r1, [pc, #124]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	610b      	str	r3, [r1, #16]
 8007574:	e011      	b.n	800759a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007576:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800757e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6892      	ldr	r2, [r2, #8]
 8007586:	0211      	lsls	r1, r2, #8
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6952      	ldr	r2, [r2, #20]
 800758c:	0852      	lsrs	r2, r2, #1
 800758e:	3a01      	subs	r2, #1
 8007590:	0652      	lsls	r2, r2, #25
 8007592:	430a      	orrs	r2, r1
 8007594:	4915      	ldr	r1, [pc, #84]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007596:	4313      	orrs	r3, r2
 8007598:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800759a:	4b14      	ldr	r3, [pc, #80]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a13      	ldr	r2, [pc, #76]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a6:	f7fd f985 	bl	80048b4 <HAL_GetTick>
 80075aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ac:	e009      	b.n	80075c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075ae:	f7fd f981 	bl	80048b4 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d902      	bls.n	80075c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	73fb      	strb	r3, [r7, #15]
          break;
 80075c0:	e005      	b.n	80075ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0ef      	beq.n	80075ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	4903      	ldr	r1, [pc, #12]	; (80075ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40021000 	.word	0x40021000

080075f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e049      	b.n	8007696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fc ff08 	bl	800442c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f000 fbf4 	bl	8007e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d001      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e03b      	b.n	8007730 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <HAL_TIM_Base_Start_IT+0x9c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_TIM_Base_Start_IT+0x4e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d004      	beq.n	80076ee <HAL_TIM_Base_Start_IT+0x4e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a15      	ldr	r2, [pc, #84]	; (8007740 <HAL_TIM_Base_Start_IT+0xa0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d115      	bne.n	800771a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	4b13      	ldr	r3, [pc, #76]	; (8007744 <HAL_TIM_Base_Start_IT+0xa4>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b06      	cmp	r3, #6
 80076fe:	d015      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x8c>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007706:	d011      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	e008      	b.n	800772c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e000      	b.n	800772e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40014000 	.word	0x40014000
 8007744:	00010007 	.word	0x00010007

08007748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e049      	b.n	80077ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f841 	bl	80077f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 fb48 	bl	8007e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01b      	beq.n	800786e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f06f 0202 	mvn.w	r2, #2
 800783e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fac2 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 800785a:	e005      	b.n	8007868 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fab4 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fac5 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d020      	beq.n	80078ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01b      	beq.n	80078ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f06f 0204 	mvn.w	r2, #4
 800788a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fa9c 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 80078a6:	e005      	b.n	80078b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa8e 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa9f 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01b      	beq.n	8007906 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0208 	mvn.w	r2, #8
 80078d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa76 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 80078f2:	e005      	b.n	8007900 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa68 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa79 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d020      	beq.n	8007952 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01b      	beq.n	8007952 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f06f 0210 	mvn.w	r2, #16
 8007922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2208      	movs	r2, #8
 8007928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa50 	bl	8007dde <HAL_TIM_IC_CaptureCallback>
 800793e:	e005      	b.n	800794c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa42 	bl	8007dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa53 	bl	8007df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00c      	beq.n	8007976 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f06f 0201 	mvn.w	r2, #1
 800796e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fc fcc3 	bl	80042fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00c      	beq.n	800799a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fe2d 	bl	80085f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fe25 	bl	8008608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00c      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa12 	bl	8007e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00c      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f06f 0220 	mvn.w	r2, #32
 80079fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fded 	bl	80085e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0ff      	b.n	8007c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b14      	cmp	r3, #20
 8007a3a:	f200 80f0 	bhi.w	8007c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	08007c1f 	.word	0x08007c1f
 8007a4c:	08007c1f 	.word	0x08007c1f
 8007a50:	08007c1f 	.word	0x08007c1f
 8007a54:	08007ad9 	.word	0x08007ad9
 8007a58:	08007c1f 	.word	0x08007c1f
 8007a5c:	08007c1f 	.word	0x08007c1f
 8007a60:	08007c1f 	.word	0x08007c1f
 8007a64:	08007b1b 	.word	0x08007b1b
 8007a68:	08007c1f 	.word	0x08007c1f
 8007a6c:	08007c1f 	.word	0x08007c1f
 8007a70:	08007c1f 	.word	0x08007c1f
 8007a74:	08007b5b 	.word	0x08007b5b
 8007a78:	08007c1f 	.word	0x08007c1f
 8007a7c:	08007c1f 	.word	0x08007c1f
 8007a80:	08007c1f 	.word	0x08007c1f
 8007a84:	08007b9d 	.word	0x08007b9d
 8007a88:	08007c1f 	.word	0x08007c1f
 8007a8c:	08007c1f 	.word	0x08007c1f
 8007a90:	08007c1f 	.word	0x08007c1f
 8007a94:	08007bdd 	.word	0x08007bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fa20 	bl	8007ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0208 	orr.w	r2, r2, #8
 8007ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0204 	bic.w	r2, r2, #4
 8007ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6999      	ldr	r1, [r3, #24]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	691a      	ldr	r2, [r3, #16]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	619a      	str	r2, [r3, #24]
      break;
 8007ad6:	e0a5      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fa7c 	bl	8007fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6999      	ldr	r1, [r3, #24]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	021a      	lsls	r2, r3, #8
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	619a      	str	r2, [r3, #24]
      break;
 8007b18:	e084      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fad5 	bl	80080d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69da      	ldr	r2, [r3, #28]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0208 	orr.w	r2, r2, #8
 8007b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0204 	bic.w	r2, r2, #4
 8007b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69d9      	ldr	r1, [r3, #28]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	61da      	str	r2, [r3, #28]
      break;
 8007b58:	e064      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fb2d 	bl	80081c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69d9      	ldr	r1, [r3, #28]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	021a      	lsls	r2, r3, #8
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	61da      	str	r2, [r3, #28]
      break;
 8007b9a:	e043      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb6a 	bl	800827c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0208 	orr.w	r2, r2, #8
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0204 	bic.w	r2, r2, #4
 8007bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bda:	e023      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fba2 	bl	800832c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	021a      	lsls	r2, r3, #8
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c1c:	e002      	b.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
      break;
 8007c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIM_ConfigClockSource+0x1c>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e0b6      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x18a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c90:	d03e      	beq.n	8007d10 <HAL_TIM_ConfigClockSource+0xd8>
 8007c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c96:	f200 8087 	bhi.w	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9e:	f000 8086 	beq.w	8007dae <HAL_TIM_ConfigClockSource+0x176>
 8007ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca6:	d87f      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007ca8:	2b70      	cmp	r3, #112	; 0x70
 8007caa:	d01a      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0xaa>
 8007cac:	2b70      	cmp	r3, #112	; 0x70
 8007cae:	d87b      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cb0:	2b60      	cmp	r3, #96	; 0x60
 8007cb2:	d050      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x11e>
 8007cb4:	2b60      	cmp	r3, #96	; 0x60
 8007cb6:	d877      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cb8:	2b50      	cmp	r3, #80	; 0x50
 8007cba:	d03c      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0xfe>
 8007cbc:	2b50      	cmp	r3, #80	; 0x50
 8007cbe:	d873      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d058      	beq.n	8007d76 <HAL_TIM_ConfigClockSource+0x13e>
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d86f      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d064      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d86b      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d060      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d867      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05c      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d05a      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007ce0:	e062      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cf2:	f000 fbef 	bl	80084d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	609a      	str	r2, [r3, #8]
      break;
 8007d0e:	e04f      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d20:	f000 fbd8 	bl	80084d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d32:	609a      	str	r2, [r3, #8]
      break;
 8007d34:	e03c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d42:	461a      	mov	r2, r3
 8007d44:	f000 fb4c 	bl	80083e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2150      	movs	r1, #80	; 0x50
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fba5 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007d54:	e02c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d62:	461a      	mov	r2, r3
 8007d64:	f000 fb6b 	bl	800843e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2160      	movs	r1, #96	; 0x60
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fb95 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007d74:	e01c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d82:	461a      	mov	r2, r3
 8007d84:	f000 fb2c 	bl	80083e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2140      	movs	r1, #64	; 0x40
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fb85 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007d94:	e00c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f000 fb7c 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8007da6:	e003      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dac:	e000      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
	...

08007e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ed8 <TIM_Base_SetConfig+0xbc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_Base_SetConfig+0x20>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3a:	d108      	bne.n	8007e4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <TIM_Base_SetConfig+0xbc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00b      	beq.n	8007e6e <TIM_Base_SetConfig+0x52>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5c:	d007      	beq.n	8007e6e <TIM_Base_SetConfig+0x52>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <TIM_Base_SetConfig+0xc0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_Base_SetConfig+0x52>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <TIM_Base_SetConfig+0xc4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d108      	bne.n	8007e80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <TIM_Base_SetConfig+0xbc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d007      	beq.n	8007ebc <TIM_Base_SetConfig+0xa0>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <TIM_Base_SetConfig+0xc0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0xa0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a0a      	ldr	r2, [pc, #40]	; (8007ee0 <TIM_Base_SetConfig+0xc4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d103      	bne.n	8007ec4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	615a      	str	r2, [r3, #20]
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	40014400 	.word	0x40014400

08007ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f023 0201 	bic.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f023 0302 	bic.w	r3, r3, #2
 8007f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <TIM_OC1_SetConfig+0xec>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_OC1_SetConfig+0x70>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a23      	ldr	r2, [pc, #140]	; (8007fd4 <TIM_OC1_SetConfig+0xf0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_OC1_SetConfig+0x70>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a22      	ldr	r2, [pc, #136]	; (8007fd8 <TIM_OC1_SetConfig+0xf4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d10c      	bne.n	8007f6e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f023 0308 	bic.w	r3, r3, #8
 8007f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 0304 	bic.w	r3, r3, #4
 8007f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <TIM_OC1_SetConfig+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <TIM_OC1_SetConfig+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <TIM_OC1_SetConfig+0xf0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_OC1_SetConfig+0xa2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <TIM_OC1_SetConfig+0xf4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d111      	bne.n	8007faa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	40014400 	.word	0x40014400

08007fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0320 	bic.w	r3, r3, #32
 800802a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a22      	ldr	r2, [pc, #136]	; (80080c4 <TIM_OC2_SetConfig+0xe8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d10d      	bne.n	800805c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a19      	ldr	r2, [pc, #100]	; (80080c4 <TIM_OC2_SetConfig+0xe8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_OC2_SetConfig+0x98>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a18      	ldr	r2, [pc, #96]	; (80080c8 <TIM_OC2_SetConfig+0xec>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC2_SetConfig+0x98>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a17      	ldr	r2, [pc, #92]	; (80080cc <TIM_OC2_SetConfig+0xf0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d113      	bne.n	800809c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800807a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400

080080d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800811c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a21      	ldr	r2, [pc, #132]	; (80081b4 <TIM_OC3_SetConfig+0xe4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d10d      	bne.n	800814e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800814c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a18      	ldr	r2, [pc, #96]	; (80081b4 <TIM_OC3_SetConfig+0xe4>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_OC3_SetConfig+0x96>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <TIM_OC3_SetConfig+0xe8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC3_SetConfig+0x96>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a16      	ldr	r2, [pc, #88]	; (80081bc <TIM_OC3_SetConfig+0xec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d113      	bne.n	800818e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800816c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	621a      	str	r2, [r3, #32]
}
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	40012c00 	.word	0x40012c00
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400

080081c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800820e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	031b      	lsls	r3, r3, #12
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	4313      	orrs	r3, r2
 800821a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a14      	ldr	r2, [pc, #80]	; (8008270 <TIM_OC4_SetConfig+0xb0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <TIM_OC4_SetConfig+0x74>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <TIM_OC4_SetConfig+0xb4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_OC4_SetConfig+0x74>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a12      	ldr	r2, [pc, #72]	; (8008278 <TIM_OC4_SetConfig+0xb8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d109      	bne.n	8008248 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800823a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	019b      	lsls	r3, r3, #6
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400

0800827c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a13      	ldr	r2, [pc, #76]	; (8008320 <TIM_OC5_SetConfig+0xa4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d007      	beq.n	80082e6 <TIM_OC5_SetConfig+0x6a>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a12      	ldr	r2, [pc, #72]	; (8008324 <TIM_OC5_SetConfig+0xa8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_OC5_SetConfig+0x6a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <TIM_OC5_SetConfig+0xac>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d109      	bne.n	80082fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	621a      	str	r2, [r3, #32]
}
 8008314:	bf00      	nop
 8008316:	371c      	adds	r7, #28
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40014000 	.word	0x40014000
 8008328:	40014400 	.word	0x40014400

0800832c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	051b      	lsls	r3, r3, #20
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a14      	ldr	r2, [pc, #80]	; (80083d4 <TIM_OC6_SetConfig+0xa8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d007      	beq.n	8008398 <TIM_OC6_SetConfig+0x6c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a13      	ldr	r2, [pc, #76]	; (80083d8 <TIM_OC6_SetConfig+0xac>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d003      	beq.n	8008398 <TIM_OC6_SetConfig+0x6c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a12      	ldr	r2, [pc, #72]	; (80083dc <TIM_OC6_SetConfig+0xb0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d109      	bne.n	80083ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800839e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	029b      	lsls	r3, r3, #10
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40012c00 	.word	0x40012c00
 80083d8:	40014000 	.word	0x40014000
 80083dc:	40014400 	.word	0x40014400

080083e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800840a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 030a 	bic.w	r3, r3, #10
 800841c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	621a      	str	r2, [r3, #32]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800843e:	b480      	push	{r7}
 8008440:	b087      	sub	sp, #28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	f023 0210 	bic.w	r2, r3, #16
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	031b      	lsls	r3, r3, #12
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800847a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f043 0307 	orr.w	r3, r3, #7
 80084c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	021a      	lsls	r2, r3, #8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	609a      	str	r2, [r3, #8]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008528:	2302      	movs	r3, #2
 800852a:	e04f      	b.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d108      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800855c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a14      	ldr	r2, [pc, #80]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d009      	beq.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008594:	d004      	beq.n	80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a10      	ldr	r2, [pc, #64]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10c      	bne.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	40012c00 	.word	0x40012c00
 80085dc:	40014000 	.word	0x40014000

080085e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008630:	2b20      	cmp	r3, #32
 8008632:	d178      	bne.n	8008726 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_UART_Transmit+0x24>
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e071      	b.n	8008728 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2221      	movs	r2, #33	; 0x21
 8008650:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008652:	f7fc f92f 	bl	80048b4 <HAL_GetTick>
 8008656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	88fa      	ldrh	r2, [r7, #6]
 800865c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008670:	d108      	bne.n	8008684 <HAL_UART_Transmit+0x68>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e003      	b.n	800868c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800868c:	e030      	b.n	80086f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	2180      	movs	r1, #128	; 0x80
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fbbf 	bl	8008e1c <UART_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e03c      	b.n	8008728 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10b      	bne.n	80086cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c0:	b292      	uxth	r2, r2
 80086c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	3302      	adds	r3, #2
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e008      	b.n	80086de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	b292      	uxth	r2, r2
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1c8      	bne.n	800868e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	2140      	movs	r1, #64	; 0x40
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fb88 	bl	8008e1c <UART_WaitOnFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e005      	b.n	8008728 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	e000      	b.n	8008728 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008726:	2302      	movs	r3, #2
  }
}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008734:	b08a      	sub	sp, #40	; 0x28
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	431a      	orrs	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	431a      	orrs	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	4313      	orrs	r3, r2
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4bb4      	ldr	r3, [pc, #720]	; (8008a30 <UART_SetConfig+0x300>)
 8008760:	4013      	ands	r3, r2
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008768:	430b      	orrs	r3, r1
 800876a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4aa9      	ldr	r2, [pc, #676]	; (8008a34 <UART_SetConfig+0x304>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d004      	beq.n	800879c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	4313      	orrs	r3, r2
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ac:	430a      	orrs	r2, r1
 80087ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4aa0      	ldr	r2, [pc, #640]	; (8008a38 <UART_SetConfig+0x308>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d126      	bne.n	8008808 <UART_SetConfig+0xd8>
 80087ba:	4ba0      	ldr	r3, [pc, #640]	; (8008a3c <UART_SetConfig+0x30c>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d81b      	bhi.n	8008800 <UART_SetConfig+0xd0>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0xa0>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e6:	e080      	b.n	80088ea <UART_SetConfig+0x1ba>
 80087e8:	2302      	movs	r3, #2
 80087ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ee:	e07c      	b.n	80088ea <UART_SetConfig+0x1ba>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f6:	e078      	b.n	80088ea <UART_SetConfig+0x1ba>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fe:	e074      	b.n	80088ea <UART_SetConfig+0x1ba>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e070      	b.n	80088ea <UART_SetConfig+0x1ba>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a8c      	ldr	r2, [pc, #560]	; (8008a40 <UART_SetConfig+0x310>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d138      	bne.n	8008884 <UART_SetConfig+0x154>
 8008812:	4b8a      	ldr	r3, [pc, #552]	; (8008a3c <UART_SetConfig+0x30c>)
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008818:	f003 030c 	and.w	r3, r3, #12
 800881c:	2b0c      	cmp	r3, #12
 800881e:	d82d      	bhi.n	800887c <UART_SetConfig+0x14c>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0xf8>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	0800885d 	.word	0x0800885d
 800882c:	0800887d 	.word	0x0800887d
 8008830:	0800887d 	.word	0x0800887d
 8008834:	0800887d 	.word	0x0800887d
 8008838:	0800886d 	.word	0x0800886d
 800883c:	0800887d 	.word	0x0800887d
 8008840:	0800887d 	.word	0x0800887d
 8008844:	0800887d 	.word	0x0800887d
 8008848:	08008865 	.word	0x08008865
 800884c:	0800887d 	.word	0x0800887d
 8008850:	0800887d 	.word	0x0800887d
 8008854:	0800887d 	.word	0x0800887d
 8008858:	08008875 	.word	0x08008875
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008862:	e042      	b.n	80088ea <UART_SetConfig+0x1ba>
 8008864:	2302      	movs	r3, #2
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886a:	e03e      	b.n	80088ea <UART_SetConfig+0x1ba>
 800886c:	2304      	movs	r3, #4
 800886e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008872:	e03a      	b.n	80088ea <UART_SetConfig+0x1ba>
 8008874:	2308      	movs	r3, #8
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887a:	e036      	b.n	80088ea <UART_SetConfig+0x1ba>
 800887c:	2310      	movs	r3, #16
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008882:	e032      	b.n	80088ea <UART_SetConfig+0x1ba>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a6a      	ldr	r2, [pc, #424]	; (8008a34 <UART_SetConfig+0x304>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d12a      	bne.n	80088e4 <UART_SetConfig+0x1b4>
 800888e:	4b6b      	ldr	r3, [pc, #428]	; (8008a3c <UART_SetConfig+0x30c>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800889c:	d01a      	beq.n	80088d4 <UART_SetConfig+0x1a4>
 800889e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088a2:	d81b      	bhi.n	80088dc <UART_SetConfig+0x1ac>
 80088a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a8:	d00c      	beq.n	80088c4 <UART_SetConfig+0x194>
 80088aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ae:	d815      	bhi.n	80088dc <UART_SetConfig+0x1ac>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <UART_SetConfig+0x18c>
 80088b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b8:	d008      	beq.n	80088cc <UART_SetConfig+0x19c>
 80088ba:	e00f      	b.n	80088dc <UART_SetConfig+0x1ac>
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c2:	e012      	b.n	80088ea <UART_SetConfig+0x1ba>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ca:	e00e      	b.n	80088ea <UART_SetConfig+0x1ba>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d2:	e00a      	b.n	80088ea <UART_SetConfig+0x1ba>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088da:	e006      	b.n	80088ea <UART_SetConfig+0x1ba>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e2:	e002      	b.n	80088ea <UART_SetConfig+0x1ba>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a51      	ldr	r2, [pc, #324]	; (8008a34 <UART_SetConfig+0x304>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d17a      	bne.n	80089ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d824      	bhi.n	8008946 <UART_SetConfig+0x216>
 80088fc:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x1d4>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	08008929 	.word	0x08008929
 8008908:	08008947 	.word	0x08008947
 800890c:	08008931 	.word	0x08008931
 8008910:	08008947 	.word	0x08008947
 8008914:	08008937 	.word	0x08008937
 8008918:	08008947 	.word	0x08008947
 800891c:	08008947 	.word	0x08008947
 8008920:	08008947 	.word	0x08008947
 8008924:	0800893f 	.word	0x0800893f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008928:	f7fe fade 	bl	8006ee8 <HAL_RCC_GetPCLK1Freq>
 800892c:	61f8      	str	r0, [r7, #28]
        break;
 800892e:	e010      	b.n	8008952 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008930:	4b44      	ldr	r3, [pc, #272]	; (8008a44 <UART_SetConfig+0x314>)
 8008932:	61fb      	str	r3, [r7, #28]
        break;
 8008934:	e00d      	b.n	8008952 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008936:	f7fe fa3f 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 800893a:	61f8      	str	r0, [r7, #28]
        break;
 800893c:	e009      	b.n	8008952 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008942:	61fb      	str	r3, [r7, #28]
        break;
 8008944:	e005      	b.n	8008952 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 8107 	beq.w	8008b68 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4413      	add	r3, r2
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	429a      	cmp	r2, r3
 8008968:	d305      	bcc.n	8008976 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	429a      	cmp	r2, r3
 8008974:	d903      	bls.n	800897e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800897c:	e0f4      	b.n	8008b68 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2200      	movs	r2, #0
 8008982:	461c      	mov	r4, r3
 8008984:	4615      	mov	r5, r2
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	022b      	lsls	r3, r5, #8
 8008990:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008994:	0222      	lsls	r2, r4, #8
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6849      	ldr	r1, [r1, #4]
 800899a:	0849      	lsrs	r1, r1, #1
 800899c:	2000      	movs	r0, #0
 800899e:	4688      	mov	r8, r1
 80089a0:	4681      	mov	r9, r0
 80089a2:	eb12 0a08 	adds.w	sl, r2, r8
 80089a6:	eb43 0b09 	adc.w	fp, r3, r9
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	f7f8 f8d6 	bl	8000b6c <__aeabi_uldivmod>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4613      	mov	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ce:	d308      	bcc.n	80089e2 <UART_SetConfig+0x2b2>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d6:	d204      	bcs.n	80089e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e0c2      	b.n	8008b68 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089e8:	e0be      	b.n	8008b68 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d16a      	bne.n	8008aca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80089f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d834      	bhi.n	8008a66 <UART_SetConfig+0x336>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x2d4>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a29 	.word	0x08008a29
 8008a08:	08008a49 	.word	0x08008a49
 8008a0c:	08008a51 	.word	0x08008a51
 8008a10:	08008a67 	.word	0x08008a67
 8008a14:	08008a57 	.word	0x08008a57
 8008a18:	08008a67 	.word	0x08008a67
 8008a1c:	08008a67 	.word	0x08008a67
 8008a20:	08008a67 	.word	0x08008a67
 8008a24:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a28:	f7fe fa5e 	bl	8006ee8 <HAL_RCC_GetPCLK1Freq>
 8008a2c:	61f8      	str	r0, [r7, #28]
        break;
 8008a2e:	e020      	b.n	8008a72 <UART_SetConfig+0x342>
 8008a30:	efff69f3 	.word	0xefff69f3
 8008a34:	40008000 	.word	0x40008000
 8008a38:	40013800 	.word	0x40013800
 8008a3c:	40021000 	.word	0x40021000
 8008a40:	40004400 	.word	0x40004400
 8008a44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fe fa64 	bl	8006f14 <HAL_RCC_GetPCLK2Freq>
 8008a4c:	61f8      	str	r0, [r7, #28]
        break;
 8008a4e:	e010      	b.n	8008a72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a50:	4b4c      	ldr	r3, [pc, #304]	; (8008b84 <UART_SetConfig+0x454>)
 8008a52:	61fb      	str	r3, [r7, #28]
        break;
 8008a54:	e00d      	b.n	8008a72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a56:	f7fe f9af 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8008a5a:	61f8      	str	r0, [r7, #28]
        break;
 8008a5c:	e009      	b.n	8008a72 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a62:	61fb      	str	r3, [r7, #28]
        break;
 8008a64:	e005      	b.n	8008a72 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d077      	beq.n	8008b68 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	005a      	lsls	r2, r3, #1
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	085b      	lsrs	r3, r3, #1
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b0f      	cmp	r3, #15
 8008a92:	d916      	bls.n	8008ac2 <UART_SetConfig+0x392>
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a9a:	d212      	bcs.n	8008ac2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f023 030f 	bic.w	r3, r3, #15
 8008aa4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	8afb      	ldrh	r3, [r7, #22]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	8afa      	ldrh	r2, [r7, #22]
 8008abe:	60da      	str	r2, [r3, #12]
 8008ac0:	e052      	b.n	8008b68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ac8:	e04e      	b.n	8008b68 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d827      	bhi.n	8008b22 <UART_SetConfig+0x3f2>
 8008ad2:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <UART_SetConfig+0x3a8>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b23 	.word	0x08008b23
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b23 	.word	0x08008b23
 8008af8:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008afc:	f7fe f9f4 	bl	8006ee8 <HAL_RCC_GetPCLK1Freq>
 8008b00:	61f8      	str	r0, [r7, #28]
        break;
 8008b02:	e014      	b.n	8008b2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b04:	f7fe fa06 	bl	8006f14 <HAL_RCC_GetPCLK2Freq>
 8008b08:	61f8      	str	r0, [r7, #28]
        break;
 8008b0a:	e010      	b.n	8008b2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	; (8008b84 <UART_SetConfig+0x454>)
 8008b0e:	61fb      	str	r3, [r7, #28]
        break;
 8008b10:	e00d      	b.n	8008b2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fe f951 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8008b16:	61f8      	str	r0, [r7, #28]
        break;
 8008b18:	e009      	b.n	8008b2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	61fb      	str	r3, [r7, #28]
        break;
 8008b20:	e005      	b.n	8008b2e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b2c:	bf00      	nop
    }

    if (pclk != 0U)
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d019      	beq.n	8008b68 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	085a      	lsrs	r2, r3, #1
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b0f      	cmp	r3, #15
 8008b4c:	d909      	bls.n	8008b62 <UART_SetConfig+0x432>
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b54:	d205      	bcs.n	8008b62 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60da      	str	r2, [r3, #12]
 8008b60:	e002      	b.n	8008b68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008b74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	; 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b82:	bf00      	nop
 8008b84:	00f42400 	.word	0x00f42400

08008b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	f003 0310 	and.w	r3, r3, #16
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01a      	beq.n	8008c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c86:	d10a      	bne.n	8008c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	605a      	str	r2, [r3, #4]
  }
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b098      	sub	sp, #96	; 0x60
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cdc:	f7fb fdea 	bl	80048b4 <HAL_GetTick>
 8008ce0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0308 	and.w	r3, r3, #8
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d12e      	bne.n	8008d4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f88c 	bl	8008e1c <UART_WaitOnFlagUntilTimeout>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d021      	beq.n	8008d4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d28:	647b      	str	r3, [r7, #68]	; 0x44
 8008d2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e062      	b.n	8008e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d149      	bne.n	8008df0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d64:	2200      	movs	r2, #0
 8008d66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f856 	bl	8008e1c <UART_WaitOnFlagUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d03c      	beq.n	8008df0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	623b      	str	r3, [r7, #32]
   return(result);
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	633b      	str	r3, [r7, #48]	; 0x30
 8008d96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9c:	e841 2300 	strex	r3, r2, [r1]
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e6      	bne.n	8008d76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3308      	adds	r3, #8
 8008dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	e853 3f00 	ldrex	r3, [r3]
 8008db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc8:	61fa      	str	r2, [r7, #28]
 8008dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	69b9      	ldr	r1, [r7, #24]
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	e841 2300 	strex	r3, r2, [r1]
 8008dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e5      	bne.n	8008da8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e011      	b.n	8008e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3758      	adds	r7, #88	; 0x58
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e2c:	e049      	b.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d045      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e36:	f7fb fd3d 	bl	80048b4 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d302      	bcc.n	8008e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e048      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d031      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d110      	bne.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2208      	movs	r2, #8
 8008e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 f838 	bl	8008eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e029      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e9c:	d111      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f81e 	bl	8008eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e00f      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	bf0c      	ite	eq
 8008ed2:	2301      	moveq	r3, #1
 8008ed4:	2300      	movne	r3, #0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d0a6      	beq.n	8008e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b095      	sub	sp, #84	; 0x54
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40
 8008f12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3308      	adds	r3, #8
 8008f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d118      	bne.n	8008f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f023 0310 	bic.w	r3, r3, #16
 8008f74:	647b      	str	r3, [r7, #68]	; 0x44
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6979      	ldr	r1, [r7, #20]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e6      	bne.n	8008f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fa6:	bf00      	nop
 8008fa8:	3754      	adds	r7, #84	; 0x54
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b086      	sub	sp, #24
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
 8008fbe:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e056      	b.n	8009078 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7fb fa66 	bl	80044ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2224      	movs	r2, #36	; 0x24
 8008fe4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0201 	bic.w	r2, r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fdc2 	bl	8008b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff fb93 	bl	8008730 <UART_SetConfig>
 800900a:	4603      	mov	r3, r0
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e031      	b.n	8009078 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009022:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	430a      	orrs	r2, r1
 8009036:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	055b      	lsls	r3, r3, #21
 800903c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8009052:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	430b      	orrs	r3, r1
 800905e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fe2b 	bl	8008ccc <UART_CheckIdleState>
 8009076:	4603      	mov	r3, r0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009086:	f107 0310 	add.w	r3, r7, #16
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	609a      	str	r2, [r3, #8]
 8009092:	60da      	str	r2, [r3, #12]
 8009094:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800909c:	2300      	movs	r3, #0
 800909e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 80090a2:	f000 fca5 	bl	80099f0 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 80090a6:	2300      	movs	r3, #0
 80090a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ac:	e102      	b.n	80092b4 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090b4:	e079      	b.n	80091aa <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 80090b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090ba:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80090be:	4889      	ldr	r0, [pc, #548]	; (80092e4 <STEPPERS_Init+0x264>)
 80090c0:	4613      	mov	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	440b      	add	r3, r1
 80090c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80090cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80090d0:	d10c      	bne.n	80090ec <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d2:	4b85      	ldr	r3, [pc, #532]	; (80092e8 <STEPPERS_Init+0x268>)
 80090d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d6:	4a84      	ldr	r2, [pc, #528]	; (80092e8 <STEPPERS_Init+0x268>)
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090de:	4b82      	ldr	r3, [pc, #520]	; (80092e8 <STEPPERS_Init+0x268>)
 80090e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	e034      	b.n	8009156 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 80090ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090f0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80090f4:	487b      	ldr	r0, [pc, #492]	; (80092e4 <STEPPERS_Init+0x264>)
 80090f6:	4613      	mov	r3, r2
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	440b      	add	r3, r1
 80090fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009102:	4a7a      	ldr	r2, [pc, #488]	; (80092ec <STEPPERS_Init+0x26c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d10c      	bne.n	8009122 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009108:	4b77      	ldr	r3, [pc, #476]	; (80092e8 <STEPPERS_Init+0x268>)
 800910a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800910c:	4a76      	ldr	r2, [pc, #472]	; (80092e8 <STEPPERS_Init+0x268>)
 800910e:	f043 0302 	orr.w	r3, r3, #2
 8009112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009114:	4b74      	ldr	r3, [pc, #464]	; (80092e8 <STEPPERS_Init+0x268>)
 8009116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	60bb      	str	r3, [r7, #8]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	e019      	b.n	8009156 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8009122:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009126:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800912a:	486e      	ldr	r0, [pc, #440]	; (80092e4 <STEPPERS_Init+0x264>)
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	1a9b      	subs	r3, r3, r2
 8009132:	440b      	add	r3, r1
 8009134:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009138:	4a6d      	ldr	r2, [pc, #436]	; (80092f0 <STEPPERS_Init+0x270>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10b      	bne.n	8009156 <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 800913e:	4b6a      	ldr	r3, [pc, #424]	; (80092e8 <STEPPERS_Init+0x268>)
 8009140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009142:	4a69      	ldr	r2, [pc, #420]	; (80092e8 <STEPPERS_Init+0x268>)
 8009144:	f043 0304 	orr.w	r3, r3, #4
 8009148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800914a:	4b67      	ldr	r3, [pc, #412]	; (80092e8 <STEPPERS_Init+0x268>)
 800914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914e:	f003 0304 	and.w	r3, r3, #4
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8009156:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800915a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800915e:	4861      	ldr	r0, [pc, #388]	; (80092e4 <STEPPERS_Init+0x264>)
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	440b      	add	r3, r1
 800916a:	3308      	adds	r3, #8
 800916c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8009170:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 800917e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009182:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009186:	4857      	ldr	r0, [pc, #348]	; (80092e4 <STEPPERS_Init+0x264>)
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	1a9b      	subs	r3, r3, r2
 800918e:	440b      	add	r3, r1
 8009190:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009194:	f107 0210 	add.w	r2, r7, #16
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7fc fede 	bl	8005f5c <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 80091a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091a4:	3301      	adds	r3, #1
 80091a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d981      	bls.n	80090b6 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 80091b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091b6:	494f      	ldr	r1, [pc, #316]	; (80092f4 <STEPPERS_Init+0x274>)
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	3311      	adds	r3, #17
 80091c4:	2200      	movs	r2, #0
 80091c6:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 80091c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091cc:	4949      	ldr	r1, [pc, #292]	; (80092f4 <STEPPERS_Init+0x274>)
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	330f      	adds	r3, #15
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 80091de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091e2:	4944      	ldr	r1, [pc, #272]	; (80092f4 <STEPPERS_Init+0x274>)
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 80091f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091f6:	493f      	ldr	r1, [pc, #252]	; (80092f4 <STEPPERS_Init+0x274>)
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	3304      	adds	r3, #4
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8009208:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800920c:	4939      	ldr	r1, [pc, #228]	; (80092f4 <STEPPERS_Init+0x274>)
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	3308      	adds	r3, #8
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 800921e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009222:	4934      	ldr	r1, [pc, #208]	; (80092f4 <STEPPERS_Init+0x274>)
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	330e      	adds	r3, #14
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8009234:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009238:	492a      	ldr	r1, [pc, #168]	; (80092e4 <STEPPERS_Init+0x264>)
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	331b      	adds	r3, #27
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d00b      	beq.n	8009264 <STEPPERS_Init+0x1e4>
 800924c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009250:	4924      	ldr	r1, [pc, #144]	; (80092e4 <STEPPERS_Init+0x264>)
 8009252:	4613      	mov	r3, r2
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	331b      	adds	r3, #27
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10b      	bne.n	800927c <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8009264:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009268:	4922      	ldr	r1, [pc, #136]	; (80092f4 <STEPPERS_Init+0x274>)
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	3310      	adds	r3, #16
 8009276:	2204      	movs	r2, #4
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	e016      	b.n	80092aa <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800927c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009280:	4918      	ldr	r1, [pc, #96]	; (80092e4 <STEPPERS_Init+0x264>)
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	331b      	adds	r3, #27
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d10a      	bne.n	80092aa <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8009294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009298:	4916      	ldr	r1, [pc, #88]	; (80092f4 <STEPPERS_Init+0x274>)
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	3310      	adds	r3, #16
 80092a6:	2208      	movs	r2, #8
 80092a8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 80092aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092ae:	3301      	adds	r3, #1
 80092b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f43f aef8 	beq.w	80090ae <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80092be:	2301      	movs	r3, #1
 80092c0:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092c2:	2301      	movs	r3, #1
 80092c4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092ce:	f107 0310 	add.w	r3, r7, #16
 80092d2:	4619      	mov	r1, r3
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <STEPPERS_Init+0x26c>)
 80092d6:	f7fc fe41 	bl	8005f5c <HAL_GPIO_Init>
}
 80092da:	bf00      	nop
 80092dc:	3728      	adds	r7, #40	; 0x28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	0801e384 	.word	0x0801e384
 80092e8:	40021000 	.word	0x40021000
 80092ec:	48000400 	.word	0x48000400
 80092f0:	48000800 	.word	0x48000800
 80092f4:	2000a4fc 	.word	0x2000a4fc

080092f8 <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	; 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009300:	f107 0314 	add.w	r3, r7, #20
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800930e:	f107 0308 	add.w	r3, r7, #8
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	605a      	str	r2, [r3, #4]
 8009318:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 800931e:	f7ff feaf 	bl	8009080 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8009322:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a17      	ldr	r2, [pc, #92]	; (8009388 <STEPPERS_Init_TMR+0x90>)
 800932c:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2263      	movs	r2, #99	; 0x63
 8009332:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	1e5a      	subs	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2280      	movs	r2, #128	; 0x80
 800934c:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7fe f94e 	bl	80075f0 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009358:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7fe fc69 	bl	8007c38 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009366:	2300      	movs	r3, #0
 8009368:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff f8cd 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fe f990 	bl	80076a0 <HAL_TIM_Base_Start_IT>
    }
}
 8009380:	bf00      	nop
 8009382:	3728      	adds	r7, #40	; 0x28
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40014000 	.word	0x40014000
 800938c:	00000000 	.word	0x00000000

08009390 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	460a      	mov	r2, r1
 800939a:	71fb      	strb	r3, [r7, #7]
 800939c:	4613      	mov	r3, r2
 800939e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 80093a4:	79fa      	ldrb	r2, [r7, #7]
 80093a6:	4928      	ldr	r1, [pc, #160]	; (8009448 <STEPPER_SetSpeed+0xb8>)
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	330c      	adds	r3, #12
 80093b4:	88ba      	ldrh	r2, [r7, #4]
 80093b6:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	4924      	ldr	r1, [pc, #144]	; (800944c <STEPPER_SetSpeed+0xbc>)
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	331b      	adds	r3, #27
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d10b      	bne.n	80093e6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 80093ce:	79fa      	ldrb	r2, [r7, #7]
 80093d0:	491e      	ldr	r1, [pc, #120]	; (800944c <STEPPER_SetSpeed+0xbc>)
 80093d2:	4613      	mov	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	3318      	adds	r3, #24
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e009      	b.n	80093fa <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 80093e6:	79fa      	ldrb	r2, [r7, #7]
 80093e8:	4918      	ldr	r1, [pc, #96]	; (800944c <STEPPER_SetSpeed+0xbc>)
 80093ea:	4613      	mov	r3, r2
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	3318      	adds	r3, #24
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 80093fa:	88bb      	ldrh	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	fb02 f303 	mul.w	r3, r2, r3
 8009402:	4618      	mov	r0, r3
 8009404:	f7f7 f87e 	bl	8000504 <__aeabi_ui2d>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	a10c      	add	r1, pc, #48	; (adr r1, 8009440 <STEPPER_SetSpeed+0xb0>)
 800940e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009412:	f7f7 fa1b 	bl	800084c <__aeabi_ddiv>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	79fc      	ldrb	r4, [r7, #7]
 800941c:	4610      	mov	r0, r2
 800941e:	4619      	mov	r1, r3
 8009420:	f7f7 fb84 	bl	8000b2c <__aeabi_d2uiz>
 8009424:	4602      	mov	r2, r0
 8009426:	4908      	ldr	r1, [pc, #32]	; (8009448 <STEPPER_SetSpeed+0xb8>)
 8009428:	4623      	mov	r3, r4
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4423      	add	r3, r4
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	3308      	adds	r3, #8
 8009434:	601a      	str	r2, [r3, #0]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	bd90      	pop	{r4, r7, pc}
 800943e:	bf00      	nop
 8009440:	00000000 	.word	0x00000000
 8009444:	40ed4c00 	.word	0x40ed4c00
 8009448:	2000a4fc 	.word	0x2000a4fc
 800944c:	0801e384 	.word	0x0801e384

08009450 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	4999      	ldr	r1, [pc, #612]	; (80096c4 <STEPPER_One_Step+0x274>)
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	331a      	adds	r3, #26
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 81c4 	bne.w	80097fa <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8009472:	79fa      	ldrb	r2, [r7, #7]
 8009474:	4993      	ldr	r1, [pc, #588]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009476:	4613      	mov	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	331b      	adds	r3, #27
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8088 	bne.w	800959a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800948a:	79fa      	ldrb	r2, [r7, #7]
 800948c:	498d      	ldr	r1, [pc, #564]	; (80096c4 <STEPPER_One_Step+0x274>)
 800948e:	4613      	mov	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	79fa      	ldrb	r2, [r7, #7]
 800949c:	4989      	ldr	r1, [pc, #548]	; (80096c4 <STEPPER_One_Step+0x274>)
 800949e:	4613      	mov	r3, r2
 80094a0:	00db      	lsls	r3, r3, #3
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	3310      	adds	r3, #16
 80094aa:	8819      	ldrh	r1, [r3, #0]
 80094ac:	79fa      	ldrb	r2, [r7, #7]
 80094ae:	4c86      	ldr	r4, [pc, #536]	; (80096c8 <STEPPER_One_Step+0x278>)
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4423      	add	r3, r4
 80094ba:	330f      	adds	r3, #15
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	4b82      	ldr	r3, [pc, #520]	; (80096cc <STEPPER_One_Step+0x27c>)
 80094c2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f7fc feb2 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80094cc:	79fa      	ldrb	r2, [r7, #7]
 80094ce:	497d      	ldr	r1, [pc, #500]	; (80096c4 <STEPPER_One_Step+0x274>)
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	3304      	adds	r3, #4
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	79fa      	ldrb	r2, [r7, #7]
 80094e0:	4978      	ldr	r1, [pc, #480]	; (80096c4 <STEPPER_One_Step+0x274>)
 80094e2:	4613      	mov	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	3312      	adds	r3, #18
 80094ee:	8819      	ldrh	r1, [r3, #0]
 80094f0:	79fa      	ldrb	r2, [r7, #7]
 80094f2:	4c75      	ldr	r4, [pc, #468]	; (80096c8 <STEPPER_One_Step+0x278>)
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4423      	add	r3, r4
 80094fe:	330f      	adds	r3, #15
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	4a72      	ldr	r2, [pc, #456]	; (80096cc <STEPPER_One_Step+0x27c>)
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	461a      	mov	r2, r3
 800950c:	f7fc fe90 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	496c      	ldr	r1, [pc, #432]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009514:	4613      	mov	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	3308      	adds	r3, #8
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	79fa      	ldrb	r2, [r7, #7]
 8009524:	4967      	ldr	r1, [pc, #412]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009526:	4613      	mov	r3, r2
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	3314      	adds	r3, #20
 8009532:	8819      	ldrh	r1, [r3, #0]
 8009534:	79fa      	ldrb	r2, [r7, #7]
 8009536:	4c64      	ldr	r4, [pc, #400]	; (80096c8 <STEPPER_One_Step+0x278>)
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4423      	add	r3, r4
 8009542:	330f      	adds	r3, #15
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4a61      	ldr	r2, [pc, #388]	; (80096cc <STEPPER_One_Step+0x27c>)
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	789b      	ldrb	r3, [r3, #2]
 800954e:	461a      	mov	r2, r3
 8009550:	f7fc fe6e 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8009554:	79fa      	ldrb	r2, [r7, #7]
 8009556:	495b      	ldr	r1, [pc, #364]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009558:	4613      	mov	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	330c      	adds	r3, #12
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	79fa      	ldrb	r2, [r7, #7]
 8009568:	4956      	ldr	r1, [pc, #344]	; (80096c4 <STEPPER_One_Step+0x274>)
 800956a:	4613      	mov	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	3316      	adds	r3, #22
 8009576:	8819      	ldrh	r1, [r3, #0]
 8009578:	79fa      	ldrb	r2, [r7, #7]
 800957a:	4c53      	ldr	r4, [pc, #332]	; (80096c8 <STEPPER_One_Step+0x278>)
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4423      	add	r3, r4
 8009586:	330f      	adds	r3, #15
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	4a50      	ldr	r2, [pc, #320]	; (80096cc <STEPPER_One_Step+0x27c>)
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	78db      	ldrb	r3, [r3, #3]
 8009592:	461a      	mov	r2, r3
 8009594:	f7fc fe4c 	bl	8006230 <HAL_GPIO_WritePin>
 8009598:	e12f      	b.n	80097fa <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800959a:	79fa      	ldrb	r2, [r7, #7]
 800959c:	4949      	ldr	r1, [pc, #292]	; (80096c4 <STEPPER_One_Step+0x274>)
 800959e:	4613      	mov	r3, r2
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	331b      	adds	r3, #27
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	f040 8091 	bne.w	80096d4 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80095b2:	79fa      	ldrb	r2, [r7, #7]
 80095b4:	4943      	ldr	r1, [pc, #268]	; (80096c4 <STEPPER_One_Step+0x274>)
 80095b6:	4613      	mov	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	79fa      	ldrb	r2, [r7, #7]
 80095c4:	493f      	ldr	r1, [pc, #252]	; (80096c4 <STEPPER_One_Step+0x274>)
 80095c6:	4613      	mov	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	3310      	adds	r3, #16
 80095d2:	8819      	ldrh	r1, [r3, #0]
 80095d4:	79fa      	ldrb	r2, [r7, #7]
 80095d6:	4c3c      	ldr	r4, [pc, #240]	; (80096c8 <STEPPER_One_Step+0x278>)
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4423      	add	r3, r4
 80095e2:	330f      	adds	r3, #15
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	4b39      	ldr	r3, [pc, #228]	; (80096d0 <STEPPER_One_Step+0x280>)
 80095ea:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7fc fe1e 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80095f4:	79fa      	ldrb	r2, [r7, #7]
 80095f6:	4933      	ldr	r1, [pc, #204]	; (80096c4 <STEPPER_One_Step+0x274>)
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	3304      	adds	r3, #4
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	79fa      	ldrb	r2, [r7, #7]
 8009608:	492e      	ldr	r1, [pc, #184]	; (80096c4 <STEPPER_One_Step+0x274>)
 800960a:	4613      	mov	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	1a9b      	subs	r3, r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	3312      	adds	r3, #18
 8009616:	8819      	ldrh	r1, [r3, #0]
 8009618:	79fa      	ldrb	r2, [r7, #7]
 800961a:	4c2b      	ldr	r4, [pc, #172]	; (80096c8 <STEPPER_One_Step+0x278>)
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4423      	add	r3, r4
 8009626:	330f      	adds	r3, #15
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	4a29      	ldr	r2, [pc, #164]	; (80096d0 <STEPPER_One_Step+0x280>)
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	461a      	mov	r2, r3
 8009634:	f7fc fdfc 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009638:	79fa      	ldrb	r2, [r7, #7]
 800963a:	4922      	ldr	r1, [pc, #136]	; (80096c4 <STEPPER_One_Step+0x274>)
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	3308      	adds	r3, #8
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	79fa      	ldrb	r2, [r7, #7]
 800964c:	491d      	ldr	r1, [pc, #116]	; (80096c4 <STEPPER_One_Step+0x274>)
 800964e:	4613      	mov	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	1a9b      	subs	r3, r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	3314      	adds	r3, #20
 800965a:	8819      	ldrh	r1, [r3, #0]
 800965c:	79fa      	ldrb	r2, [r7, #7]
 800965e:	4c1a      	ldr	r4, [pc, #104]	; (80096c8 <STEPPER_One_Step+0x278>)
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4423      	add	r3, r4
 800966a:	330f      	adds	r3, #15
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <STEPPER_One_Step+0x280>)
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	789b      	ldrb	r3, [r3, #2]
 8009676:	461a      	mov	r2, r3
 8009678:	f7fc fdda 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800967c:	79fa      	ldrb	r2, [r7, #7]
 800967e:	4911      	ldr	r1, [pc, #68]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009680:	4613      	mov	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	330c      	adds	r3, #12
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	79fa      	ldrb	r2, [r7, #7]
 8009690:	490c      	ldr	r1, [pc, #48]	; (80096c4 <STEPPER_One_Step+0x274>)
 8009692:	4613      	mov	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3316      	adds	r3, #22
 800969e:	8819      	ldrh	r1, [r3, #0]
 80096a0:	79fa      	ldrb	r2, [r7, #7]
 80096a2:	4c09      	ldr	r4, [pc, #36]	; (80096c8 <STEPPER_One_Step+0x278>)
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4423      	add	r3, r4
 80096ae:	330f      	adds	r3, #15
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	4a07      	ldr	r2, [pc, #28]	; (80096d0 <STEPPER_One_Step+0x280>)
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	78db      	ldrb	r3, [r3, #3]
 80096ba:	461a      	mov	r2, r3
 80096bc:	f7fc fdb8 	bl	8006230 <HAL_GPIO_WritePin>
 80096c0:	e09b      	b.n	80097fa <STEPPER_One_Step+0x3aa>
 80096c2:	bf00      	nop
 80096c4:	0801e384 	.word	0x0801e384
 80096c8:	2000a4fc 	.word	0x2000a4fc
 80096cc:	2000000c 	.word	0x2000000c
 80096d0:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80096d4:	79fa      	ldrb	r2, [r7, #7]
 80096d6:	4988      	ldr	r1, [pc, #544]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 80096d8:	4613      	mov	r3, r2
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	1a9b      	subs	r3, r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	331b      	adds	r3, #27
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	f040 8087 	bne.w	80097fa <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80096ec:	79fa      	ldrb	r2, [r7, #7]
 80096ee:	4982      	ldr	r1, [pc, #520]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	79fa      	ldrb	r2, [r7, #7]
 80096fe:	497e      	ldr	r1, [pc, #504]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 8009700:	4613      	mov	r3, r2
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	3310      	adds	r3, #16
 800970c:	8819      	ldrh	r1, [r3, #0]
 800970e:	79fa      	ldrb	r2, [r7, #7]
 8009710:	4c7a      	ldr	r4, [pc, #488]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4423      	add	r3, r4
 800971c:	330f      	adds	r3, #15
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	4b77      	ldr	r3, [pc, #476]	; (8009900 <STEPPER_One_Step+0x4b0>)
 8009724:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8009728:	461a      	mov	r2, r3
 800972a:	f7fc fd81 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800972e:	79fa      	ldrb	r2, [r7, #7]
 8009730:	4971      	ldr	r1, [pc, #452]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 8009732:	4613      	mov	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	3304      	adds	r3, #4
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	79fa      	ldrb	r2, [r7, #7]
 8009742:	496d      	ldr	r1, [pc, #436]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 8009744:	4613      	mov	r3, r2
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	1a9b      	subs	r3, r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	3312      	adds	r3, #18
 8009750:	8819      	ldrh	r1, [r3, #0]
 8009752:	79fa      	ldrb	r2, [r7, #7]
 8009754:	4c69      	ldr	r4, [pc, #420]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4423      	add	r3, r4
 8009760:	330f      	adds	r3, #15
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	4a66      	ldr	r2, [pc, #408]	; (8009900 <STEPPER_One_Step+0x4b0>)
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	461a      	mov	r2, r3
 800976e:	f7fc fd5f 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8009772:	79fa      	ldrb	r2, [r7, #7]
 8009774:	4960      	ldr	r1, [pc, #384]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 8009776:	4613      	mov	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	3308      	adds	r3, #8
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	79fa      	ldrb	r2, [r7, #7]
 8009786:	495c      	ldr	r1, [pc, #368]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 8009788:	4613      	mov	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	3314      	adds	r3, #20
 8009794:	8819      	ldrh	r1, [r3, #0]
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	4c58      	ldr	r4, [pc, #352]	; (80098fc <STEPPER_One_Step+0x4ac>)
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4423      	add	r3, r4
 80097a4:	330f      	adds	r3, #15
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4a55      	ldr	r2, [pc, #340]	; (8009900 <STEPPER_One_Step+0x4b0>)
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	789b      	ldrb	r3, [r3, #2]
 80097b0:	461a      	mov	r2, r3
 80097b2:	f7fc fd3d 	bl	8006230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80097b6:	79fa      	ldrb	r2, [r7, #7]
 80097b8:	494f      	ldr	r1, [pc, #316]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 80097ba:	4613      	mov	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	440b      	add	r3, r1
 80097c4:	330c      	adds	r3, #12
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	79fa      	ldrb	r2, [r7, #7]
 80097ca:	494b      	ldr	r1, [pc, #300]	; (80098f8 <STEPPER_One_Step+0x4a8>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	3316      	adds	r3, #22
 80097d8:	8819      	ldrh	r1, [r3, #0]
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	4c47      	ldr	r4, [pc, #284]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4423      	add	r3, r4
 80097e8:	330f      	adds	r3, #15
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	4a44      	ldr	r2, [pc, #272]	; (8009900 <STEPPER_One_Step+0x4b0>)
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	78db      	ldrb	r3, [r3, #3]
 80097f4:	461a      	mov	r2, r3
 80097f6:	f7fc fd1b 	bl	8006230 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80097fa:	79fa      	ldrb	r2, [r7, #7]
 80097fc:	493f      	ldr	r1, [pc, #252]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	440b      	add	r3, r1
 8009808:	3311      	adds	r3, #17
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d132      	bne.n	8009876 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8009810:	79fa      	ldrb	r2, [r7, #7]
 8009812:	493a      	ldr	r1, [pc, #232]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	440b      	add	r3, r1
 800981e:	330f      	adds	r3, #15
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d112      	bne.n	800984c <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8009826:	79f9      	ldrb	r1, [r7, #7]
 8009828:	79fa      	ldrb	r2, [r7, #7]
 800982a:	4834      	ldr	r0, [pc, #208]	; (80098fc <STEPPER_One_Step+0x4ac>)
 800982c:	460b      	mov	r3, r1
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4403      	add	r3, r0
 8009836:	3310      	adds	r3, #16
 8009838:	7818      	ldrb	r0, [r3, #0]
 800983a:	4930      	ldr	r1, [pc, #192]	; (80098fc <STEPPER_One_Step+0x4ac>)
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	330f      	adds	r3, #15
 8009848:	4602      	mov	r2, r0
 800984a:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 800984c:	79fa      	ldrb	r2, [r7, #7]
 800984e:	492b      	ldr	r1, [pc, #172]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	330f      	adds	r3, #15
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	3b01      	subs	r3, #1
 8009860:	b2d8      	uxtb	r0, r3
 8009862:	4926      	ldr	r1, [pc, #152]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	330f      	adds	r3, #15
 8009870:	4602      	mov	r2, r0
 8009872:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 8009874:	e03c      	b.n	80098f0 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 8009876:	79fa      	ldrb	r2, [r7, #7]
 8009878:	4920      	ldr	r1, [pc, #128]	; (80098fc <STEPPER_One_Step+0x4ac>)
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	3311      	adds	r3, #17
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d131      	bne.n	80098f0 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 800988c:	79fa      	ldrb	r2, [r7, #7]
 800988e:	491b      	ldr	r1, [pc, #108]	; (80098fc <STEPPER_One_Step+0x4ac>)
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	330f      	adds	r3, #15
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	3301      	adds	r3, #1
 80098a0:	b2d8      	uxtb	r0, r3
 80098a2:	4916      	ldr	r1, [pc, #88]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	330f      	adds	r3, #15
 80098b0:	4602      	mov	r2, r0
 80098b2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80098b4:	79fa      	ldrb	r2, [r7, #7]
 80098b6:	4911      	ldr	r1, [pc, #68]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	330f      	adds	r3, #15
 80098c4:	7819      	ldrb	r1, [r3, #0]
 80098c6:	79fa      	ldrb	r2, [r7, #7]
 80098c8:	480c      	ldr	r0, [pc, #48]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4403      	add	r3, r0
 80098d4:	3310      	adds	r3, #16
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4299      	cmp	r1, r3
 80098da:	d109      	bne.n	80098f0 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	4907      	ldr	r1, [pc, #28]	; (80098fc <STEPPER_One_Step+0x4ac>)
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	330f      	adds	r3, #15
 80098ec:	2200      	movs	r2, #0
 80098ee:	701a      	strb	r2, [r3, #0]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}
 80098f8:	0801e384 	.word	0x0801e384
 80098fc:	2000a4fc 	.word	0x2000a4fc
 8009900:	2000002c 	.word	0x2000002c

08009904 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a34      	ldr	r2, [pc, #208]	; (80099e8 <STEPPER_TMR_OVF_ISR+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d162      	bne.n	80099e0 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e05c      	b.n	80099da <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	4932      	ldr	r1, [pc, #200]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	3304      	adds	r3, #4
 8009930:	6819      	ldr	r1, [r3, #0]
 8009932:	7bfa      	ldrb	r2, [r7, #15]
 8009934:	482d      	ldr	r0, [pc, #180]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4403      	add	r3, r0
 8009940:	3308      	adds	r3, #8
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4299      	cmp	r1, r3
 8009946:	d333      	bcc.n	80099b0 <STEPPER_TMR_OVF_ISR+0xac>
 8009948:	7bfa      	ldrb	r2, [r7, #15]
 800994a:	4928      	ldr	r1, [pc, #160]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	330e      	adds	r3, #14
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d028      	beq.n	80099b0 <STEPPER_TMR_OVF_ISR+0xac>
 800995e:	7bfa      	ldrb	r2, [r7, #15]
 8009960:	4922      	ldr	r1, [pc, #136]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01e      	beq.n	80099b0 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fd6b 	bl	8009450 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	491b      	ldr	r1, [pc, #108]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1e59      	subs	r1, r3, #1
 800998c:	4817      	ldr	r0, [pc, #92]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4403      	add	r3, r0
 8009998:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800999a:	7bfa      	ldrb	r2, [r7, #15]
 800999c:	4913      	ldr	r1, [pc, #76]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	440b      	add	r3, r1
 80099a8:	3304      	adds	r3, #4
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e011      	b.n	80099d4 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 80099b0:	7bfa      	ldrb	r2, [r7, #15]
 80099b2:	490e      	ldr	r1, [pc, #56]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	3304      	adds	r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	1c59      	adds	r1, r3, #1
 80099c4:	4809      	ldr	r0, [pc, #36]	; (80099ec <STEPPER_TMR_OVF_ISR+0xe8>)
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4403      	add	r3, r0
 80099d0:	3304      	adds	r3, #4
 80099d2:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	3301      	adds	r3, #1
 80099d8:	73fb      	strb	r3, [r7, #15]
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d09f      	beq.n	8009920 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80099e0:	bf00      	nop
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40014000 	.word	0x40014000
 80099ec:	2000a4fc 	.word	0x2000a4fc

080099f0 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80099f4:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <DWT_Delay_Init+0x58>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	4a13      	ldr	r2, [pc, #76]	; (8009a48 <DWT_Delay_Init+0x58>)
 80099fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099fe:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009a00:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <DWT_Delay_Init+0x58>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a10      	ldr	r2, [pc, #64]	; (8009a48 <DWT_Delay_Init+0x58>)
 8009a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a0a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0e      	ldr	r2, [pc, #56]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009a18:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0b      	ldr	r2, [pc, #44]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8009a24:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8009a2a:	bf00      	nop
    __ASM volatile ("NOP");
 8009a2c:	bf00      	nop
    __ASM volatile ("NOP");
 8009a2e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <DWT_Delay_Init+0x5c>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e000      	b.n	8009a3e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8009a3c:	2301      	movs	r3, #1
    }
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	e000edf0 	.word	0xe000edf0
 8009a4c:	e0001000 	.word	0xe0001000

08009a50 <_strtol_l.constprop.0>:
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a56:	d001      	beq.n	8009a5c <_strtol_l.constprop.0+0xc>
 8009a58:	2b24      	cmp	r3, #36	; 0x24
 8009a5a:	d906      	bls.n	8009a6a <_strtol_l.constprop.0+0x1a>
 8009a5c:	f000 fafa 	bl	800a054 <__errno>
 8009a60:	2316      	movs	r3, #22
 8009a62:	6003      	str	r3, [r0, #0]
 8009a64:	2000      	movs	r0, #0
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b50 <_strtol_l.constprop.0+0x100>
 8009a6e:	460d      	mov	r5, r1
 8009a70:	462e      	mov	r6, r5
 8009a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a76:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009a7a:	f017 0708 	ands.w	r7, r7, #8
 8009a7e:	d1f7      	bne.n	8009a70 <_strtol_l.constprop.0+0x20>
 8009a80:	2c2d      	cmp	r4, #45	; 0x2d
 8009a82:	d132      	bne.n	8009aea <_strtol_l.constprop.0+0x9a>
 8009a84:	782c      	ldrb	r4, [r5, #0]
 8009a86:	2701      	movs	r7, #1
 8009a88:	1cb5      	adds	r5, r6, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d05b      	beq.n	8009b46 <_strtol_l.constprop.0+0xf6>
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d109      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a92:	2c30      	cmp	r4, #48	; 0x30
 8009a94:	d107      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a96:	782c      	ldrb	r4, [r5, #0]
 8009a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a9c:	2c58      	cmp	r4, #88	; 0x58
 8009a9e:	d14d      	bne.n	8009b3c <_strtol_l.constprop.0+0xec>
 8009aa0:	786c      	ldrb	r4, [r5, #1]
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	3502      	adds	r5, #2
 8009aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009aae:	f04f 0e00 	mov.w	lr, #0
 8009ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ab6:	4676      	mov	r6, lr
 8009ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009abc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ac0:	f1bc 0f09 	cmp.w	ip, #9
 8009ac4:	d816      	bhi.n	8009af4 <_strtol_l.constprop.0+0xa4>
 8009ac6:	4664      	mov	r4, ip
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	dd24      	ble.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009acc:	f1be 3fff 	cmp.w	lr, #4294967295
 8009ad0:	d008      	beq.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009ad2:	45b1      	cmp	r9, r6
 8009ad4:	d31c      	bcc.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009ad6:	d101      	bne.n	8009adc <_strtol_l.constprop.0+0x8c>
 8009ad8:	45a2      	cmp	sl, r4
 8009ada:	db19      	blt.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009adc:	fb06 4603 	mla	r6, r6, r3, r4
 8009ae0:	f04f 0e01 	mov.w	lr, #1
 8009ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae8:	e7e8      	b.n	8009abc <_strtol_l.constprop.0+0x6c>
 8009aea:	2c2b      	cmp	r4, #43	; 0x2b
 8009aec:	bf04      	itt	eq
 8009aee:	782c      	ldrbeq	r4, [r5, #0]
 8009af0:	1cb5      	addeq	r5, r6, #2
 8009af2:	e7ca      	b.n	8009a8a <_strtol_l.constprop.0+0x3a>
 8009af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009af8:	f1bc 0f19 	cmp.w	ip, #25
 8009afc:	d801      	bhi.n	8009b02 <_strtol_l.constprop.0+0xb2>
 8009afe:	3c37      	subs	r4, #55	; 0x37
 8009b00:	e7e2      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b06:	f1bc 0f19 	cmp.w	ip, #25
 8009b0a:	d804      	bhi.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009b0c:	3c57      	subs	r4, #87	; 0x57
 8009b0e:	e7db      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b10:	f04f 3eff 	mov.w	lr, #4294967295
 8009b14:	e7e6      	b.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009b16:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b1a:	d105      	bne.n	8009b28 <_strtol_l.constprop.0+0xd8>
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	6003      	str	r3, [r0, #0]
 8009b20:	4646      	mov	r6, r8
 8009b22:	b942      	cbnz	r2, 8009b36 <_strtol_l.constprop.0+0xe6>
 8009b24:	4630      	mov	r0, r6
 8009b26:	e79e      	b.n	8009a66 <_strtol_l.constprop.0+0x16>
 8009b28:	b107      	cbz	r7, 8009b2c <_strtol_l.constprop.0+0xdc>
 8009b2a:	4276      	negs	r6, r6
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d0f9      	beq.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b30:	f1be 0f00 	cmp.w	lr, #0
 8009b34:	d000      	beq.n	8009b38 <_strtol_l.constprop.0+0xe8>
 8009b36:	1e69      	subs	r1, r5, #1
 8009b38:	6011      	str	r1, [r2, #0]
 8009b3a:	e7f3      	b.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b3c:	2430      	movs	r4, #48	; 0x30
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1b1      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b42:	2308      	movs	r3, #8
 8009b44:	e7af      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b46:	2c30      	cmp	r4, #48	; 0x30
 8009b48:	d0a5      	beq.n	8009a96 <_strtol_l.constprop.0+0x46>
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	e7ab      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b4e:	bf00      	nop
 8009b50:	0801e3a1 	.word	0x0801e3a1

08009b54 <strtol>:
 8009b54:	4613      	mov	r3, r2
 8009b56:	460a      	mov	r2, r1
 8009b58:	4601      	mov	r1, r0
 8009b5a:	4802      	ldr	r0, [pc, #8]	; (8009b64 <strtol+0x10>)
 8009b5c:	6800      	ldr	r0, [r0, #0]
 8009b5e:	f7ff bf77 	b.w	8009a50 <_strtol_l.constprop.0>
 8009b62:	bf00      	nop
 8009b64:	200000a4 	.word	0x200000a4

08009b68 <std>:
 8009b68:	2300      	movs	r3, #0
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b76:	6083      	str	r3, [r0, #8]
 8009b78:	8181      	strh	r1, [r0, #12]
 8009b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b7c:	81c2      	strh	r2, [r0, #14]
 8009b7e:	6183      	str	r3, [r0, #24]
 8009b80:	4619      	mov	r1, r3
 8009b82:	2208      	movs	r2, #8
 8009b84:	305c      	adds	r0, #92	; 0x5c
 8009b86:	f000 fa17 	bl	8009fb8 <memset>
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <std+0x58>)
 8009b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <std+0x5c>)
 8009b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b92:	4b0d      	ldr	r3, [pc, #52]	; (8009bc8 <std+0x60>)
 8009b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <std+0x64>)
 8009b98:	6323      	str	r3, [r4, #48]	; 0x30
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <std+0x68>)
 8009b9c:	6224      	str	r4, [r4, #32]
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	d006      	beq.n	8009bb0 <std+0x48>
 8009ba2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009ba6:	4294      	cmp	r4, r2
 8009ba8:	d002      	beq.n	8009bb0 <std+0x48>
 8009baa:	33d0      	adds	r3, #208	; 0xd0
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d105      	bne.n	8009bbc <std+0x54>
 8009bb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f000 ba76 	b.w	800a0a8 <__retarget_lock_init_recursive>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	08009e09 	.word	0x08009e09
 8009bc4:	08009e2b 	.word	0x08009e2b
 8009bc8:	08009e63 	.word	0x08009e63
 8009bcc:	08009e87 	.word	0x08009e87
 8009bd0:	2000a510 	.word	0x2000a510

08009bd4 <stdio_exit_handler>:
 8009bd4:	4a02      	ldr	r2, [pc, #8]	; (8009be0 <stdio_exit_handler+0xc>)
 8009bd6:	4903      	ldr	r1, [pc, #12]	; (8009be4 <stdio_exit_handler+0x10>)
 8009bd8:	4803      	ldr	r0, [pc, #12]	; (8009be8 <stdio_exit_handler+0x14>)
 8009bda:	f000 b869 	b.w	8009cb0 <_fwalk_sglue>
 8009bde:	bf00      	nop
 8009be0:	2000004c 	.word	0x2000004c
 8009be4:	0800ac21 	.word	0x0800ac21
 8009be8:	20000058 	.word	0x20000058

08009bec <cleanup_stdio>:
 8009bec:	6841      	ldr	r1, [r0, #4]
 8009bee:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <cleanup_stdio+0x34>)
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	d001      	beq.n	8009bfc <cleanup_stdio+0x10>
 8009bf8:	f001 f812 	bl	800ac20 <_fflush_r>
 8009bfc:	68a1      	ldr	r1, [r4, #8]
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <cleanup_stdio+0x38>)
 8009c00:	4299      	cmp	r1, r3
 8009c02:	d002      	beq.n	8009c0a <cleanup_stdio+0x1e>
 8009c04:	4620      	mov	r0, r4
 8009c06:	f001 f80b 	bl	800ac20 <_fflush_r>
 8009c0a:	68e1      	ldr	r1, [r4, #12]
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <cleanup_stdio+0x3c>)
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	d004      	beq.n	8009c1c <cleanup_stdio+0x30>
 8009c12:	4620      	mov	r0, r4
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	f001 b802 	b.w	800ac20 <_fflush_r>
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop
 8009c20:	2000a510 	.word	0x2000a510
 8009c24:	2000a578 	.word	0x2000a578
 8009c28:	2000a5e0 	.word	0x2000a5e0

08009c2c <global_stdio_init.part.0>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <global_stdio_init.part.0+0x30>)
 8009c30:	4c0b      	ldr	r4, [pc, #44]	; (8009c60 <global_stdio_init.part.0+0x34>)
 8009c32:	4a0c      	ldr	r2, [pc, #48]	; (8009c64 <global_stdio_init.part.0+0x38>)
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	4620      	mov	r0, r4
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2104      	movs	r1, #4
 8009c3c:	f7ff ff94 	bl	8009b68 <std>
 8009c40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c44:	2201      	movs	r2, #1
 8009c46:	2109      	movs	r1, #9
 8009c48:	f7ff ff8e 	bl	8009b68 <std>
 8009c4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c50:	2202      	movs	r2, #2
 8009c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c56:	2112      	movs	r1, #18
 8009c58:	f7ff bf86 	b.w	8009b68 <std>
 8009c5c:	2000a648 	.word	0x2000a648
 8009c60:	2000a510 	.word	0x2000a510
 8009c64:	08009bd5 	.word	0x08009bd5

08009c68 <__sfp_lock_acquire>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sfp_lock_acquire+0x8>)
 8009c6a:	f000 ba1e 	b.w	800a0aa <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	2000a651 	.word	0x2000a651

08009c74 <__sfp_lock_release>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__sfp_lock_release+0x8>)
 8009c76:	f000 ba19 	b.w	800a0ac <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	2000a651 	.word	0x2000a651

08009c80 <__sinit>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	4604      	mov	r4, r0
 8009c84:	f7ff fff0 	bl	8009c68 <__sfp_lock_acquire>
 8009c88:	6a23      	ldr	r3, [r4, #32]
 8009c8a:	b11b      	cbz	r3, 8009c94 <__sinit+0x14>
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f7ff bff0 	b.w	8009c74 <__sfp_lock_release>
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <__sinit+0x28>)
 8009c96:	6223      	str	r3, [r4, #32]
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <__sinit+0x2c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f5      	bne.n	8009c8c <__sinit+0xc>
 8009ca0:	f7ff ffc4 	bl	8009c2c <global_stdio_init.part.0>
 8009ca4:	e7f2      	b.n	8009c8c <__sinit+0xc>
 8009ca6:	bf00      	nop
 8009ca8:	08009bed 	.word	0x08009bed
 8009cac:	2000a648 	.word	0x2000a648

08009cb0 <_fwalk_sglue>:
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	4688      	mov	r8, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	2600      	movs	r6, #0
 8009cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc4:	d505      	bpl.n	8009cd2 <_fwalk_sglue+0x22>
 8009cc6:	6824      	ldr	r4, [r4, #0]
 8009cc8:	2c00      	cmp	r4, #0
 8009cca:	d1f7      	bne.n	8009cbc <_fwalk_sglue+0xc>
 8009ccc:	4630      	mov	r0, r6
 8009cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d907      	bls.n	8009ce8 <_fwalk_sglue+0x38>
 8009cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	d003      	beq.n	8009ce8 <_fwalk_sglue+0x38>
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	47c0      	blx	r8
 8009ce6:	4306      	orrs	r6, r0
 8009ce8:	3568      	adds	r5, #104	; 0x68
 8009cea:	e7e9      	b.n	8009cc0 <_fwalk_sglue+0x10>

08009cec <iprintf>:
 8009cec:	b40f      	push	{r0, r1, r2, r3}
 8009cee:	b507      	push	{r0, r1, r2, lr}
 8009cf0:	4906      	ldr	r1, [pc, #24]	; (8009d0c <iprintf+0x20>)
 8009cf2:	ab04      	add	r3, sp, #16
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfa:	6881      	ldr	r1, [r0, #8]
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	f000 fc5f 	bl	800a5c0 <_vfiprintf_r>
 8009d02:	b003      	add	sp, #12
 8009d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d08:	b004      	add	sp, #16
 8009d0a:	4770      	bx	lr
 8009d0c:	200000a4 	.word	0x200000a4

08009d10 <_puts_r>:
 8009d10:	6a03      	ldr	r3, [r0, #32]
 8009d12:	b570      	push	{r4, r5, r6, lr}
 8009d14:	6884      	ldr	r4, [r0, #8]
 8009d16:	4605      	mov	r5, r0
 8009d18:	460e      	mov	r6, r1
 8009d1a:	b90b      	cbnz	r3, 8009d20 <_puts_r+0x10>
 8009d1c:	f7ff ffb0 	bl	8009c80 <__sinit>
 8009d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d22:	07db      	lsls	r3, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <_puts_r+0x22>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	0598      	lsls	r0, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_puts_r+0x22>
 8009d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2e:	f000 f9bc 	bl	800a0aa <__retarget_lock_acquire_recursive>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	0719      	lsls	r1, r3, #28
 8009d36:	d513      	bpl.n	8009d60 <_puts_r+0x50>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b18b      	cbz	r3, 8009d60 <_puts_r+0x50>
 8009d3c:	3e01      	subs	r6, #1
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d44:	3b01      	subs	r3, #1
 8009d46:	60a3      	str	r3, [r4, #8]
 8009d48:	b9e9      	cbnz	r1, 8009d86 <_puts_r+0x76>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da2e      	bge.n	8009dac <_puts_r+0x9c>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	210a      	movs	r1, #10
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f89b 	bl	8009e8e <__swbuf_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d007      	beq.n	8009d6c <_puts_r+0x5c>
 8009d5c:	250a      	movs	r5, #10
 8009d5e:	e007      	b.n	8009d70 <_puts_r+0x60>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 f8d0 	bl	8009f08 <__swsetup_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d0e7      	beq.n	8009d3c <_puts_r+0x2c>
 8009d6c:	f04f 35ff 	mov.w	r5, #4294967295
 8009d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d405      	bmi.n	8009d82 <_puts_r+0x72>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	059b      	lsls	r3, r3, #22
 8009d7a:	d402      	bmi.n	8009d82 <_puts_r+0x72>
 8009d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7e:	f000 f995 	bl	800a0ac <__retarget_lock_release_recursive>
 8009d82:	4628      	mov	r0, r5
 8009d84:	bd70      	pop	{r4, r5, r6, pc}
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da04      	bge.n	8009d94 <_puts_r+0x84>
 8009d8a:	69a2      	ldr	r2, [r4, #24]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	dc06      	bgt.n	8009d9e <_puts_r+0x8e>
 8009d90:	290a      	cmp	r1, #10
 8009d92:	d004      	beq.n	8009d9e <_puts_r+0x8e>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	7019      	strb	r1, [r3, #0]
 8009d9c:	e7cf      	b.n	8009d3e <_puts_r+0x2e>
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f874 	bl	8009e8e <__swbuf_r>
 8009da6:	3001      	adds	r0, #1
 8009da8:	d1c9      	bne.n	8009d3e <_puts_r+0x2e>
 8009daa:	e7df      	b.n	8009d6c <_puts_r+0x5c>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	250a      	movs	r5, #10
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	701d      	strb	r5, [r3, #0]
 8009db6:	e7db      	b.n	8009d70 <_puts_r+0x60>

08009db8 <puts>:
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <puts+0xc>)
 8009dba:	4601      	mov	r1, r0
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	f7ff bfa7 	b.w	8009d10 <_puts_r>
 8009dc2:	bf00      	nop
 8009dc4:	200000a4 	.word	0x200000a4

08009dc8 <siprintf>:
 8009dc8:	b40e      	push	{r1, r2, r3}
 8009dca:	b500      	push	{lr}
 8009dcc:	b09c      	sub	sp, #112	; 0x70
 8009dce:	ab1d      	add	r3, sp, #116	; 0x74
 8009dd0:	9002      	str	r0, [sp, #8]
 8009dd2:	9006      	str	r0, [sp, #24]
 8009dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dd8:	4809      	ldr	r0, [pc, #36]	; (8009e00 <siprintf+0x38>)
 8009dda:	9107      	str	r1, [sp, #28]
 8009ddc:	9104      	str	r1, [sp, #16]
 8009dde:	4909      	ldr	r1, [pc, #36]	; (8009e04 <siprintf+0x3c>)
 8009de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de4:	9105      	str	r1, [sp, #20]
 8009de6:	6800      	ldr	r0, [r0, #0]
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	a902      	add	r1, sp, #8
 8009dec:	f000 fac0 	bl	800a370 <_svfiprintf_r>
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	b01c      	add	sp, #112	; 0x70
 8009df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dfc:	b003      	add	sp, #12
 8009dfe:	4770      	bx	lr
 8009e00:	200000a4 	.word	0x200000a4
 8009e04:	ffff0208 	.word	0xffff0208

08009e08 <__sread>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	f000 f8fc 	bl	800a00c <_read_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	bfab      	itete	ge
 8009e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e1c:	181b      	addge	r3, r3, r0
 8009e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e22:	bfac      	ite	ge
 8009e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e26:	81a3      	strhlt	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__swrite>:
 8009e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	461f      	mov	r7, r3
 8009e30:	898b      	ldrh	r3, [r1, #12]
 8009e32:	05db      	lsls	r3, r3, #23
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4616      	mov	r6, r2
 8009e3a:	d505      	bpl.n	8009e48 <__swrite+0x1e>
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2302      	movs	r3, #2
 8009e42:	2200      	movs	r2, #0
 8009e44:	f000 f8d0 	bl	8009fe8 <_lseek_r>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	f000 b8e7 	b.w	800a030 <_write_r>

08009e62 <__sseek>:
 8009e62:	b510      	push	{r4, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 f8bd 	bl	8009fe8 <_lseek_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	bf15      	itete	ne
 8009e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e7e:	81a3      	strheq	r3, [r4, #12]
 8009e80:	bf18      	it	ne
 8009e82:	81a3      	strhne	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__sclose>:
 8009e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8a:	f000 b89d 	b.w	8009fc8 <_close_r>

08009e8e <__swbuf_r>:
 8009e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e90:	460e      	mov	r6, r1
 8009e92:	4614      	mov	r4, r2
 8009e94:	4605      	mov	r5, r0
 8009e96:	b118      	cbz	r0, 8009ea0 <__swbuf_r+0x12>
 8009e98:	6a03      	ldr	r3, [r0, #32]
 8009e9a:	b90b      	cbnz	r3, 8009ea0 <__swbuf_r+0x12>
 8009e9c:	f7ff fef0 	bl	8009c80 <__sinit>
 8009ea0:	69a3      	ldr	r3, [r4, #24]
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	071a      	lsls	r2, r3, #28
 8009ea8:	d525      	bpl.n	8009ef6 <__swbuf_r+0x68>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	b31b      	cbz	r3, 8009ef6 <__swbuf_r+0x68>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	1a98      	subs	r0, r3, r2
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	b2f6      	uxtb	r6, r6
 8009eb8:	4283      	cmp	r3, r0
 8009eba:	4637      	mov	r7, r6
 8009ebc:	dc04      	bgt.n	8009ec8 <__swbuf_r+0x3a>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 fead 	bl	800ac20 <_fflush_r>
 8009ec6:	b9e0      	cbnz	r0, 8009f02 <__swbuf_r+0x74>
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	6022      	str	r2, [r4, #0]
 8009ed4:	701e      	strb	r6, [r3, #0]
 8009ed6:	6962      	ldr	r2, [r4, #20]
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d004      	beq.n	8009ee8 <__swbuf_r+0x5a>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	07db      	lsls	r3, r3, #31
 8009ee2:	d506      	bpl.n	8009ef2 <__swbuf_r+0x64>
 8009ee4:	2e0a      	cmp	r6, #10
 8009ee6:	d104      	bne.n	8009ef2 <__swbuf_r+0x64>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 fe98 	bl	800ac20 <_fflush_r>
 8009ef0:	b938      	cbnz	r0, 8009f02 <__swbuf_r+0x74>
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 f805 	bl	8009f08 <__swsetup_r>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d0d5      	beq.n	8009eae <__swbuf_r+0x20>
 8009f02:	f04f 37ff 	mov.w	r7, #4294967295
 8009f06:	e7f4      	b.n	8009ef2 <__swbuf_r+0x64>

08009f08 <__swsetup_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4b2a      	ldr	r3, [pc, #168]	; (8009fb4 <__swsetup_r+0xac>)
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	460c      	mov	r4, r1
 8009f12:	b118      	cbz	r0, 8009f1c <__swsetup_r+0x14>
 8009f14:	6a03      	ldr	r3, [r0, #32]
 8009f16:	b90b      	cbnz	r3, 8009f1c <__swsetup_r+0x14>
 8009f18:	f7ff feb2 	bl	8009c80 <__sinit>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f22:	0718      	lsls	r0, r3, #28
 8009f24:	d422      	bmi.n	8009f6c <__swsetup_r+0x64>
 8009f26:	06d9      	lsls	r1, r3, #27
 8009f28:	d407      	bmi.n	8009f3a <__swsetup_r+0x32>
 8009f2a:	2309      	movs	r3, #9
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e034      	b.n	8009fa4 <__swsetup_r+0x9c>
 8009f3a:	0758      	lsls	r0, r3, #29
 8009f3c:	d512      	bpl.n	8009f64 <__swsetup_r+0x5c>
 8009f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f40:	b141      	cbz	r1, 8009f54 <__swsetup_r+0x4c>
 8009f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f46:	4299      	cmp	r1, r3
 8009f48:	d002      	beq.n	8009f50 <__swsetup_r+0x48>
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f8be 	bl	800a0cc <_free_r>
 8009f50:	2300      	movs	r3, #0
 8009f52:	6363      	str	r3, [r4, #52]	; 0x34
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f043 0308 	orr.w	r3, r3, #8
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b94b      	cbnz	r3, 8009f84 <__swsetup_r+0x7c>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7a:	d003      	beq.n	8009f84 <__swsetup_r+0x7c>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 fe9c 	bl	800acbc <__smakebuf_r>
 8009f84:	89a0      	ldrh	r0, [r4, #12]
 8009f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8a:	f010 0301 	ands.w	r3, r0, #1
 8009f8e:	d00a      	beq.n	8009fa6 <__swsetup_r+0x9e>
 8009f90:	2300      	movs	r3, #0
 8009f92:	60a3      	str	r3, [r4, #8]
 8009f94:	6963      	ldr	r3, [r4, #20]
 8009f96:	425b      	negs	r3, r3
 8009f98:	61a3      	str	r3, [r4, #24]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b943      	cbnz	r3, 8009fb0 <__swsetup_r+0xa8>
 8009f9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa2:	d1c4      	bne.n	8009f2e <__swsetup_r+0x26>
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	0781      	lsls	r1, r0, #30
 8009fa8:	bf58      	it	pl
 8009faa:	6963      	ldrpl	r3, [r4, #20]
 8009fac:	60a3      	str	r3, [r4, #8]
 8009fae:	e7f4      	b.n	8009f9a <__swsetup_r+0x92>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7f7      	b.n	8009fa4 <__swsetup_r+0x9c>
 8009fb4:	200000a4 	.word	0x200000a4

08009fb8 <memset>:
 8009fb8:	4402      	add	r2, r0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d100      	bne.n	8009fc2 <memset+0xa>
 8009fc0:	4770      	bx	lr
 8009fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc6:	e7f9      	b.n	8009fbc <memset+0x4>

08009fc8 <_close_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	; (8009fe4 <_close_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7fa fb5f 	bl	8004696 <_close>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_close_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_close_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	2000a64c 	.word	0x2000a64c

08009fe8 <_lseek_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d07      	ldr	r5, [pc, #28]	; (800a008 <_lseek_r+0x20>)
 8009fec:	4604      	mov	r4, r0
 8009fee:	4608      	mov	r0, r1
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	602a      	str	r2, [r5, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f7fa fb74 	bl	80046e4 <_lseek>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_lseek_r+0x1e>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_lseek_r+0x1e>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	2000a64c 	.word	0x2000a64c

0800a00c <_read_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_read_r+0x20>)
 800a010:	4604      	mov	r4, r0
 800a012:	4608      	mov	r0, r1
 800a014:	4611      	mov	r1, r2
 800a016:	2200      	movs	r2, #0
 800a018:	602a      	str	r2, [r5, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f7fa fb02 	bl	8004624 <_read>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_read_r+0x1e>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_read_r+0x1e>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	2000a64c 	.word	0x2000a64c

0800a030 <_write_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d07      	ldr	r5, [pc, #28]	; (800a050 <_write_r+0x20>)
 800a034:	4604      	mov	r4, r0
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	602a      	str	r2, [r5, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7fa fb0d 	bl	800465e <_write>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_write_r+0x1e>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_write_r+0x1e>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	2000a64c 	.word	0x2000a64c

0800a054 <__errno>:
 800a054:	4b01      	ldr	r3, [pc, #4]	; (800a05c <__errno+0x8>)
 800a056:	6818      	ldr	r0, [r3, #0]
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	200000a4 	.word	0x200000a4

0800a060 <__libc_init_array>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	4d0d      	ldr	r5, [pc, #52]	; (800a098 <__libc_init_array+0x38>)
 800a064:	4c0d      	ldr	r4, [pc, #52]	; (800a09c <__libc_init_array+0x3c>)
 800a066:	1b64      	subs	r4, r4, r5
 800a068:	10a4      	asrs	r4, r4, #2
 800a06a:	2600      	movs	r6, #0
 800a06c:	42a6      	cmp	r6, r4
 800a06e:	d109      	bne.n	800a084 <__libc_init_array+0x24>
 800a070:	4d0b      	ldr	r5, [pc, #44]	; (800a0a0 <__libc_init_array+0x40>)
 800a072:	4c0c      	ldr	r4, [pc, #48]	; (800a0a4 <__libc_init_array+0x44>)
 800a074:	f000 fee2 	bl	800ae3c <_init>
 800a078:	1b64      	subs	r4, r4, r5
 800a07a:	10a4      	asrs	r4, r4, #2
 800a07c:	2600      	movs	r6, #0
 800a07e:	42a6      	cmp	r6, r4
 800a080:	d105      	bne.n	800a08e <__libc_init_array+0x2e>
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	f855 3b04 	ldr.w	r3, [r5], #4
 800a088:	4798      	blx	r3
 800a08a:	3601      	adds	r6, #1
 800a08c:	e7ee      	b.n	800a06c <__libc_init_array+0xc>
 800a08e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a092:	4798      	blx	r3
 800a094:	3601      	adds	r6, #1
 800a096:	e7f2      	b.n	800a07e <__libc_init_array+0x1e>
 800a098:	0801e4dc 	.word	0x0801e4dc
 800a09c:	0801e4dc 	.word	0x0801e4dc
 800a0a0:	0801e4dc 	.word	0x0801e4dc
 800a0a4:	0801e4e0 	.word	0x0801e4e0

0800a0a8 <__retarget_lock_init_recursive>:
 800a0a8:	4770      	bx	lr

0800a0aa <__retarget_lock_acquire_recursive>:
 800a0aa:	4770      	bx	lr

0800a0ac <__retarget_lock_release_recursive>:
 800a0ac:	4770      	bx	lr

0800a0ae <memcpy>:
 800a0ae:	440a      	add	r2, r1
 800a0b0:	4291      	cmp	r1, r2
 800a0b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0b6:	d100      	bne.n	800a0ba <memcpy+0xc>
 800a0b8:	4770      	bx	lr
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0c4:	4291      	cmp	r1, r2
 800a0c6:	d1f9      	bne.n	800a0bc <memcpy+0xe>
 800a0c8:	bd10      	pop	{r4, pc}
	...

0800a0cc <_free_r>:
 800a0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d044      	beq.n	800a15c <_free_r+0x90>
 800a0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d6:	9001      	str	r0, [sp, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f1a1 0404 	sub.w	r4, r1, #4
 800a0de:	bfb8      	it	lt
 800a0e0:	18e4      	addlt	r4, r4, r3
 800a0e2:	f000 f8df 	bl	800a2a4 <__malloc_lock>
 800a0e6:	4a1e      	ldr	r2, [pc, #120]	; (800a160 <_free_r+0x94>)
 800a0e8:	9801      	ldr	r0, [sp, #4]
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	b933      	cbnz	r3, 800a0fc <_free_r+0x30>
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	6014      	str	r4, [r2, #0]
 800a0f2:	b003      	add	sp, #12
 800a0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0f8:	f000 b8da 	b.w	800a2b0 <__malloc_unlock>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d908      	bls.n	800a112 <_free_r+0x46>
 800a100:	6825      	ldr	r5, [r4, #0]
 800a102:	1961      	adds	r1, r4, r5
 800a104:	428b      	cmp	r3, r1
 800a106:	bf01      	itttt	eq
 800a108:	6819      	ldreq	r1, [r3, #0]
 800a10a:	685b      	ldreq	r3, [r3, #4]
 800a10c:	1949      	addeq	r1, r1, r5
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	e7ed      	b.n	800a0ee <_free_r+0x22>
 800a112:	461a      	mov	r2, r3
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b10b      	cbz	r3, 800a11c <_free_r+0x50>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d9fa      	bls.n	800a112 <_free_r+0x46>
 800a11c:	6811      	ldr	r1, [r2, #0]
 800a11e:	1855      	adds	r5, r2, r1
 800a120:	42a5      	cmp	r5, r4
 800a122:	d10b      	bne.n	800a13c <_free_r+0x70>
 800a124:	6824      	ldr	r4, [r4, #0]
 800a126:	4421      	add	r1, r4
 800a128:	1854      	adds	r4, r2, r1
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	d1e0      	bne.n	800a0f2 <_free_r+0x26>
 800a130:	681c      	ldr	r4, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	440c      	add	r4, r1
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	e7da      	b.n	800a0f2 <_free_r+0x26>
 800a13c:	d902      	bls.n	800a144 <_free_r+0x78>
 800a13e:	230c      	movs	r3, #12
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	e7d6      	b.n	800a0f2 <_free_r+0x26>
 800a144:	6825      	ldr	r5, [r4, #0]
 800a146:	1961      	adds	r1, r4, r5
 800a148:	428b      	cmp	r3, r1
 800a14a:	bf04      	itt	eq
 800a14c:	6819      	ldreq	r1, [r3, #0]
 800a14e:	685b      	ldreq	r3, [r3, #4]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	bf04      	itt	eq
 800a154:	1949      	addeq	r1, r1, r5
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	6054      	str	r4, [r2, #4]
 800a15a:	e7ca      	b.n	800a0f2 <_free_r+0x26>
 800a15c:	b003      	add	sp, #12
 800a15e:	bd30      	pop	{r4, r5, pc}
 800a160:	2000a654 	.word	0x2000a654

0800a164 <sbrk_aligned>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4e0e      	ldr	r6, [pc, #56]	; (800a1a0 <sbrk_aligned+0x3c>)
 800a168:	460c      	mov	r4, r1
 800a16a:	6831      	ldr	r1, [r6, #0]
 800a16c:	4605      	mov	r5, r0
 800a16e:	b911      	cbnz	r1, 800a176 <sbrk_aligned+0x12>
 800a170:	f000 fe1c 	bl	800adac <_sbrk_r>
 800a174:	6030      	str	r0, [r6, #0]
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f000 fe17 	bl	800adac <_sbrk_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d00a      	beq.n	800a198 <sbrk_aligned+0x34>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d007      	beq.n	800a19c <sbrk_aligned+0x38>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 fe0c 	bl	800adac <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d101      	bne.n	800a19c <sbrk_aligned+0x38>
 800a198:	f04f 34ff 	mov.w	r4, #4294967295
 800a19c:	4620      	mov	r0, r4
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	2000a658 	.word	0x2000a658

0800a1a4 <_malloc_r>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	1ccd      	adds	r5, r1, #3
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	db01      	blt.n	800a1c0 <_malloc_r+0x1c>
 800a1bc:	42a9      	cmp	r1, r5
 800a1be:	d905      	bls.n	800a1cc <_malloc_r+0x28>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2a0 <_malloc_r+0xfc>
 800a1d0:	f000 f868 	bl	800a2a4 <__malloc_lock>
 800a1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d8:	461c      	mov	r4, r3
 800a1da:	bb5c      	cbnz	r4, 800a234 <_malloc_r+0x90>
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7ff ffc0 	bl	800a164 <sbrk_aligned>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	d155      	bne.n	800a296 <_malloc_r+0xf2>
 800a1ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ee:	4626      	mov	r6, r4
 800a1f0:	2e00      	cmp	r6, #0
 800a1f2:	d145      	bne.n	800a280 <_malloc_r+0xdc>
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	d048      	beq.n	800a28a <_malloc_r+0xe6>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	eb04 0903 	add.w	r9, r4, r3
 800a202:	f000 fdd3 	bl	800adac <_sbrk_r>
 800a206:	4581      	cmp	r9, r0
 800a208:	d13f      	bne.n	800a28a <_malloc_r+0xe6>
 800a20a:	6821      	ldr	r1, [r4, #0]
 800a20c:	1a6d      	subs	r5, r5, r1
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ffa7 	bl	800a164 <sbrk_aligned>
 800a216:	3001      	adds	r0, #1
 800a218:	d037      	beq.n	800a28a <_malloc_r+0xe6>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	442b      	add	r3, r5
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	f8d8 3000 	ldr.w	r3, [r8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d038      	beq.n	800a29a <_malloc_r+0xf6>
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	42a2      	cmp	r2, r4
 800a22c:	d12b      	bne.n	800a286 <_malloc_r+0xe2>
 800a22e:	2200      	movs	r2, #0
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	e00f      	b.n	800a254 <_malloc_r+0xb0>
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	1b52      	subs	r2, r2, r5
 800a238:	d41f      	bmi.n	800a27a <_malloc_r+0xd6>
 800a23a:	2a0b      	cmp	r2, #11
 800a23c:	d917      	bls.n	800a26e <_malloc_r+0xca>
 800a23e:	1961      	adds	r1, r4, r5
 800a240:	42a3      	cmp	r3, r4
 800a242:	6025      	str	r5, [r4, #0]
 800a244:	bf18      	it	ne
 800a246:	6059      	strne	r1, [r3, #4]
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	bf08      	it	eq
 800a24c:	f8c8 1000 	streq.w	r1, [r8]
 800a250:	5162      	str	r2, [r4, r5]
 800a252:	604b      	str	r3, [r1, #4]
 800a254:	4638      	mov	r0, r7
 800a256:	f104 060b 	add.w	r6, r4, #11
 800a25a:	f000 f829 	bl	800a2b0 <__malloc_unlock>
 800a25e:	f026 0607 	bic.w	r6, r6, #7
 800a262:	1d23      	adds	r3, r4, #4
 800a264:	1af2      	subs	r2, r6, r3
 800a266:	d0ae      	beq.n	800a1c6 <_malloc_r+0x22>
 800a268:	1b9b      	subs	r3, r3, r6
 800a26a:	50a3      	str	r3, [r4, r2]
 800a26c:	e7ab      	b.n	800a1c6 <_malloc_r+0x22>
 800a26e:	42a3      	cmp	r3, r4
 800a270:	6862      	ldr	r2, [r4, #4]
 800a272:	d1dd      	bne.n	800a230 <_malloc_r+0x8c>
 800a274:	f8c8 2000 	str.w	r2, [r8]
 800a278:	e7ec      	b.n	800a254 <_malloc_r+0xb0>
 800a27a:	4623      	mov	r3, r4
 800a27c:	6864      	ldr	r4, [r4, #4]
 800a27e:	e7ac      	b.n	800a1da <_malloc_r+0x36>
 800a280:	4634      	mov	r4, r6
 800a282:	6876      	ldr	r6, [r6, #4]
 800a284:	e7b4      	b.n	800a1f0 <_malloc_r+0x4c>
 800a286:	4613      	mov	r3, r2
 800a288:	e7cc      	b.n	800a224 <_malloc_r+0x80>
 800a28a:	230c      	movs	r3, #12
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	4638      	mov	r0, r7
 800a290:	f000 f80e 	bl	800a2b0 <__malloc_unlock>
 800a294:	e797      	b.n	800a1c6 <_malloc_r+0x22>
 800a296:	6025      	str	r5, [r4, #0]
 800a298:	e7dc      	b.n	800a254 <_malloc_r+0xb0>
 800a29a:	605b      	str	r3, [r3, #4]
 800a29c:	deff      	udf	#255	; 0xff
 800a29e:	bf00      	nop
 800a2a0:	2000a654 	.word	0x2000a654

0800a2a4 <__malloc_lock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__malloc_lock+0x8>)
 800a2a6:	f7ff bf00 	b.w	800a0aa <__retarget_lock_acquire_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	2000a650 	.word	0x2000a650

0800a2b0 <__malloc_unlock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__malloc_unlock+0x8>)
 800a2b2:	f7ff befb 	b.w	800a0ac <__retarget_lock_release_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	2000a650 	.word	0x2000a650

0800a2bc <__ssputs_r>:
 800a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	688e      	ldr	r6, [r1, #8]
 800a2c2:	461f      	mov	r7, r3
 800a2c4:	42be      	cmp	r6, r7
 800a2c6:	680b      	ldr	r3, [r1, #0]
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4690      	mov	r8, r2
 800a2ce:	d82c      	bhi.n	800a32a <__ssputs_r+0x6e>
 800a2d0:	898a      	ldrh	r2, [r1, #12]
 800a2d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2d6:	d026      	beq.n	800a326 <__ssputs_r+0x6a>
 800a2d8:	6965      	ldr	r5, [r4, #20]
 800a2da:	6909      	ldr	r1, [r1, #16]
 800a2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e0:	eba3 0901 	sub.w	r9, r3, r1
 800a2e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2e8:	1c7b      	adds	r3, r7, #1
 800a2ea:	444b      	add	r3, r9
 800a2ec:	106d      	asrs	r5, r5, #1
 800a2ee:	429d      	cmp	r5, r3
 800a2f0:	bf38      	it	cc
 800a2f2:	461d      	movcc	r5, r3
 800a2f4:	0553      	lsls	r3, r2, #21
 800a2f6:	d527      	bpl.n	800a348 <__ssputs_r+0x8c>
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7ff ff53 	bl	800a1a4 <_malloc_r>
 800a2fe:	4606      	mov	r6, r0
 800a300:	b360      	cbz	r0, 800a35c <__ssputs_r+0xa0>
 800a302:	6921      	ldr	r1, [r4, #16]
 800a304:	464a      	mov	r2, r9
 800a306:	f7ff fed2 	bl	800a0ae <memcpy>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	6126      	str	r6, [r4, #16]
 800a318:	6165      	str	r5, [r4, #20]
 800a31a:	444e      	add	r6, r9
 800a31c:	eba5 0509 	sub.w	r5, r5, r9
 800a320:	6026      	str	r6, [r4, #0]
 800a322:	60a5      	str	r5, [r4, #8]
 800a324:	463e      	mov	r6, r7
 800a326:	42be      	cmp	r6, r7
 800a328:	d900      	bls.n	800a32c <__ssputs_r+0x70>
 800a32a:	463e      	mov	r6, r7
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	4632      	mov	r2, r6
 800a330:	4641      	mov	r1, r8
 800a332:	f000 fcff 	bl	800ad34 <memmove>
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	1b9b      	subs	r3, r3, r6
 800a33a:	60a3      	str	r3, [r4, #8]
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	4433      	add	r3, r6
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	2000      	movs	r0, #0
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	462a      	mov	r2, r5
 800a34a:	f000 fd3f 	bl	800adcc <_realloc_r>
 800a34e:	4606      	mov	r6, r0
 800a350:	2800      	cmp	r0, #0
 800a352:	d1e0      	bne.n	800a316 <__ssputs_r+0x5a>
 800a354:	6921      	ldr	r1, [r4, #16]
 800a356:	4650      	mov	r0, sl
 800a358:	f7ff feb8 	bl	800a0cc <_free_r>
 800a35c:	230c      	movs	r3, #12
 800a35e:	f8ca 3000 	str.w	r3, [sl]
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	e7e9      	b.n	800a344 <__ssputs_r+0x88>

0800a370 <_svfiprintf_r>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4698      	mov	r8, r3
 800a376:	898b      	ldrh	r3, [r1, #12]
 800a378:	061b      	lsls	r3, r3, #24
 800a37a:	b09d      	sub	sp, #116	; 0x74
 800a37c:	4607      	mov	r7, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	4614      	mov	r4, r2
 800a382:	d50e      	bpl.n	800a3a2 <_svfiprintf_r+0x32>
 800a384:	690b      	ldr	r3, [r1, #16]
 800a386:	b963      	cbnz	r3, 800a3a2 <_svfiprintf_r+0x32>
 800a388:	2140      	movs	r1, #64	; 0x40
 800a38a:	f7ff ff0b 	bl	800a1a4 <_malloc_r>
 800a38e:	6028      	str	r0, [r5, #0]
 800a390:	6128      	str	r0, [r5, #16]
 800a392:	b920      	cbnz	r0, 800a39e <_svfiprintf_r+0x2e>
 800a394:	230c      	movs	r3, #12
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	e0d0      	b.n	800a540 <_svfiprintf_r+0x1d0>
 800a39e:	2340      	movs	r3, #64	; 0x40
 800a3a0:	616b      	str	r3, [r5, #20]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a6:	2320      	movs	r3, #32
 800a3a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b0:	2330      	movs	r3, #48	; 0x30
 800a3b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a558 <_svfiprintf_r+0x1e8>
 800a3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ba:	f04f 0901 	mov.w	r9, #1
 800a3be:	4623      	mov	r3, r4
 800a3c0:	469a      	mov	sl, r3
 800a3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c6:	b10a      	cbz	r2, 800a3cc <_svfiprintf_r+0x5c>
 800a3c8:	2a25      	cmp	r2, #37	; 0x25
 800a3ca:	d1f9      	bne.n	800a3c0 <_svfiprintf_r+0x50>
 800a3cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d0:	d00b      	beq.n	800a3ea <_svfiprintf_r+0x7a>
 800a3d2:	465b      	mov	r3, fp
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff6f 	bl	800a2bc <__ssputs_r>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f000 80a9 	beq.w	800a536 <_svfiprintf_r+0x1c6>
 800a3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e6:	445a      	add	r2, fp
 800a3e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80a1 	beq.w	800a536 <_svfiprintf_r+0x1c6>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fe:	f10a 0a01 	add.w	sl, sl, #1
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	9307      	str	r3, [sp, #28]
 800a406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a40a:	931a      	str	r3, [sp, #104]	; 0x68
 800a40c:	4654      	mov	r4, sl
 800a40e:	2205      	movs	r2, #5
 800a410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a414:	4850      	ldr	r0, [pc, #320]	; (800a558 <_svfiprintf_r+0x1e8>)
 800a416:	f7f5 fee3 	bl	80001e0 <memchr>
 800a41a:	9a04      	ldr	r2, [sp, #16]
 800a41c:	b9d8      	cbnz	r0, 800a456 <_svfiprintf_r+0xe6>
 800a41e:	06d0      	lsls	r0, r2, #27
 800a420:	bf44      	itt	mi
 800a422:	2320      	movmi	r3, #32
 800a424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a428:	0711      	lsls	r1, r2, #28
 800a42a:	bf44      	itt	mi
 800a42c:	232b      	movmi	r3, #43	; 0x2b
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a432:	f89a 3000 	ldrb.w	r3, [sl]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d015      	beq.n	800a466 <_svfiprintf_r+0xf6>
 800a43a:	9a07      	ldr	r2, [sp, #28]
 800a43c:	4654      	mov	r4, sl
 800a43e:	2000      	movs	r0, #0
 800a440:	f04f 0c0a 	mov.w	ip, #10
 800a444:	4621      	mov	r1, r4
 800a446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a44a:	3b30      	subs	r3, #48	; 0x30
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d94d      	bls.n	800a4ec <_svfiprintf_r+0x17c>
 800a450:	b1b0      	cbz	r0, 800a480 <_svfiprintf_r+0x110>
 800a452:	9207      	str	r2, [sp, #28]
 800a454:	e014      	b.n	800a480 <_svfiprintf_r+0x110>
 800a456:	eba0 0308 	sub.w	r3, r0, r8
 800a45a:	fa09 f303 	lsl.w	r3, r9, r3
 800a45e:	4313      	orrs	r3, r2
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	46a2      	mov	sl, r4
 800a464:	e7d2      	b.n	800a40c <_svfiprintf_r+0x9c>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d19      	adds	r1, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9103      	str	r1, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfbb      	ittet	lt
 800a472:	425b      	neglt	r3, r3
 800a474:	f042 0202 	orrlt.w	r2, r2, #2
 800a478:	9307      	strge	r3, [sp, #28]
 800a47a:	9307      	strlt	r3, [sp, #28]
 800a47c:	bfb8      	it	lt
 800a47e:	9204      	strlt	r2, [sp, #16]
 800a480:	7823      	ldrb	r3, [r4, #0]
 800a482:	2b2e      	cmp	r3, #46	; 0x2e
 800a484:	d10c      	bne.n	800a4a0 <_svfiprintf_r+0x130>
 800a486:	7863      	ldrb	r3, [r4, #1]
 800a488:	2b2a      	cmp	r3, #42	; 0x2a
 800a48a:	d134      	bne.n	800a4f6 <_svfiprintf_r+0x186>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	9203      	str	r2, [sp, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	bfb8      	it	lt
 800a498:	f04f 33ff 	movlt.w	r3, #4294967295
 800a49c:	3402      	adds	r4, #2
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a568 <_svfiprintf_r+0x1f8>
 800a4a4:	7821      	ldrb	r1, [r4, #0]
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	f7f5 fe99 	bl	80001e0 <memchr>
 800a4ae:	b138      	cbz	r0, 800a4c0 <_svfiprintf_r+0x150>
 800a4b0:	9b04      	ldr	r3, [sp, #16]
 800a4b2:	eba0 000a 	sub.w	r0, r0, sl
 800a4b6:	2240      	movs	r2, #64	; 0x40
 800a4b8:	4082      	lsls	r2, r0
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	3401      	adds	r4, #1
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c4:	4825      	ldr	r0, [pc, #148]	; (800a55c <_svfiprintf_r+0x1ec>)
 800a4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ca:	2206      	movs	r2, #6
 800a4cc:	f7f5 fe88 	bl	80001e0 <memchr>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d038      	beq.n	800a546 <_svfiprintf_r+0x1d6>
 800a4d4:	4b22      	ldr	r3, [pc, #136]	; (800a560 <_svfiprintf_r+0x1f0>)
 800a4d6:	bb1b      	cbnz	r3, 800a520 <_svfiprintf_r+0x1b0>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	3307      	adds	r3, #7
 800a4dc:	f023 0307 	bic.w	r3, r3, #7
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	9303      	str	r3, [sp, #12]
 800a4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e6:	4433      	add	r3, r6
 800a4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ea:	e768      	b.n	800a3be <_svfiprintf_r+0x4e>
 800a4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	e7a6      	b.n	800a444 <_svfiprintf_r+0xd4>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f04f 0c0a 	mov.w	ip, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a508:	3a30      	subs	r2, #48	; 0x30
 800a50a:	2a09      	cmp	r2, #9
 800a50c:	d903      	bls.n	800a516 <_svfiprintf_r+0x1a6>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0c6      	beq.n	800a4a0 <_svfiprintf_r+0x130>
 800a512:	9105      	str	r1, [sp, #20]
 800a514:	e7c4      	b.n	800a4a0 <_svfiprintf_r+0x130>
 800a516:	fb0c 2101 	mla	r1, ip, r1, r2
 800a51a:	4604      	mov	r4, r0
 800a51c:	2301      	movs	r3, #1
 800a51e:	e7f0      	b.n	800a502 <_svfiprintf_r+0x192>
 800a520:	ab03      	add	r3, sp, #12
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	462a      	mov	r2, r5
 800a526:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <_svfiprintf_r+0x1f4>)
 800a528:	a904      	add	r1, sp, #16
 800a52a:	4638      	mov	r0, r7
 800a52c:	f3af 8000 	nop.w
 800a530:	1c42      	adds	r2, r0, #1
 800a532:	4606      	mov	r6, r0
 800a534:	d1d6      	bne.n	800a4e4 <_svfiprintf_r+0x174>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	065b      	lsls	r3, r3, #25
 800a53a:	f53f af2d 	bmi.w	800a398 <_svfiprintf_r+0x28>
 800a53e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a540:	b01d      	add	sp, #116	; 0x74
 800a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a546:	ab03      	add	r3, sp, #12
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	462a      	mov	r2, r5
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <_svfiprintf_r+0x1f4>)
 800a54e:	a904      	add	r1, sp, #16
 800a550:	4638      	mov	r0, r7
 800a552:	f000 f9bd 	bl	800a8d0 <_printf_i>
 800a556:	e7eb      	b.n	800a530 <_svfiprintf_r+0x1c0>
 800a558:	0801e4a1 	.word	0x0801e4a1
 800a55c:	0801e4ab 	.word	0x0801e4ab
 800a560:	00000000 	.word	0x00000000
 800a564:	0800a2bd 	.word	0x0800a2bd
 800a568:	0801e4a7 	.word	0x0801e4a7

0800a56c <__sfputc_r>:
 800a56c:	6893      	ldr	r3, [r2, #8]
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	b410      	push	{r4}
 800a574:	6093      	str	r3, [r2, #8]
 800a576:	da08      	bge.n	800a58a <__sfputc_r+0x1e>
 800a578:	6994      	ldr	r4, [r2, #24]
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	db01      	blt.n	800a582 <__sfputc_r+0x16>
 800a57e:	290a      	cmp	r1, #10
 800a580:	d103      	bne.n	800a58a <__sfputc_r+0x1e>
 800a582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a586:	f7ff bc82 	b.w	8009e8e <__swbuf_r>
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	1c58      	adds	r0, r3, #1
 800a58e:	6010      	str	r0, [r2, #0]
 800a590:	7019      	strb	r1, [r3, #0]
 800a592:	4608      	mov	r0, r1
 800a594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <__sfputs_r>:
 800a59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	18d5      	adds	r5, r2, r3
 800a5a4:	42ac      	cmp	r4, r5
 800a5a6:	d101      	bne.n	800a5ac <__sfputs_r+0x12>
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e007      	b.n	800a5bc <__sfputs_r+0x22>
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	463a      	mov	r2, r7
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7ff ffda 	bl	800a56c <__sfputc_r>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d1f3      	bne.n	800a5a4 <__sfputs_r+0xa>
 800a5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5c0 <_vfiprintf_r>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	460d      	mov	r5, r1
 800a5c6:	b09d      	sub	sp, #116	; 0x74
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	4698      	mov	r8, r3
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	b118      	cbz	r0, 800a5d8 <_vfiprintf_r+0x18>
 800a5d0:	6a03      	ldr	r3, [r0, #32]
 800a5d2:	b90b      	cbnz	r3, 800a5d8 <_vfiprintf_r+0x18>
 800a5d4:	f7ff fb54 	bl	8009c80 <__sinit>
 800a5d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5da:	07d9      	lsls	r1, r3, #31
 800a5dc:	d405      	bmi.n	800a5ea <_vfiprintf_r+0x2a>
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	059a      	lsls	r2, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_vfiprintf_r+0x2a>
 800a5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5e6:	f7ff fd60 	bl	800a0aa <__retarget_lock_acquire_recursive>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	071b      	lsls	r3, r3, #28
 800a5ee:	d501      	bpl.n	800a5f4 <_vfiprintf_r+0x34>
 800a5f0:	692b      	ldr	r3, [r5, #16]
 800a5f2:	b99b      	cbnz	r3, 800a61c <_vfiprintf_r+0x5c>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff fc86 	bl	8009f08 <__swsetup_r>
 800a5fc:	b170      	cbz	r0, 800a61c <_vfiprintf_r+0x5c>
 800a5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a600:	07dc      	lsls	r4, r3, #31
 800a602:	d504      	bpl.n	800a60e <_vfiprintf_r+0x4e>
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	b01d      	add	sp, #116	; 0x74
 800a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	0598      	lsls	r0, r3, #22
 800a612:	d4f7      	bmi.n	800a604 <_vfiprintf_r+0x44>
 800a614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a616:	f7ff fd49 	bl	800a0ac <__retarget_lock_release_recursive>
 800a61a:	e7f3      	b.n	800a604 <_vfiprintf_r+0x44>
 800a61c:	2300      	movs	r3, #0
 800a61e:	9309      	str	r3, [sp, #36]	; 0x24
 800a620:	2320      	movs	r3, #32
 800a622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a626:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62a:	2330      	movs	r3, #48	; 0x30
 800a62c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a7e0 <_vfiprintf_r+0x220>
 800a630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a634:	f04f 0901 	mov.w	r9, #1
 800a638:	4623      	mov	r3, r4
 800a63a:	469a      	mov	sl, r3
 800a63c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a640:	b10a      	cbz	r2, 800a646 <_vfiprintf_r+0x86>
 800a642:	2a25      	cmp	r2, #37	; 0x25
 800a644:	d1f9      	bne.n	800a63a <_vfiprintf_r+0x7a>
 800a646:	ebba 0b04 	subs.w	fp, sl, r4
 800a64a:	d00b      	beq.n	800a664 <_vfiprintf_r+0xa4>
 800a64c:	465b      	mov	r3, fp
 800a64e:	4622      	mov	r2, r4
 800a650:	4629      	mov	r1, r5
 800a652:	4630      	mov	r0, r6
 800a654:	f7ff ffa1 	bl	800a59a <__sfputs_r>
 800a658:	3001      	adds	r0, #1
 800a65a:	f000 80a9 	beq.w	800a7b0 <_vfiprintf_r+0x1f0>
 800a65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a660:	445a      	add	r2, fp
 800a662:	9209      	str	r2, [sp, #36]	; 0x24
 800a664:	f89a 3000 	ldrb.w	r3, [sl]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 80a1 	beq.w	800a7b0 <_vfiprintf_r+0x1f0>
 800a66e:	2300      	movs	r3, #0
 800a670:	f04f 32ff 	mov.w	r2, #4294967295
 800a674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a678:	f10a 0a01 	add.w	sl, sl, #1
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	9307      	str	r3, [sp, #28]
 800a680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a684:	931a      	str	r3, [sp, #104]	; 0x68
 800a686:	4654      	mov	r4, sl
 800a688:	2205      	movs	r2, #5
 800a68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68e:	4854      	ldr	r0, [pc, #336]	; (800a7e0 <_vfiprintf_r+0x220>)
 800a690:	f7f5 fda6 	bl	80001e0 <memchr>
 800a694:	9a04      	ldr	r2, [sp, #16]
 800a696:	b9d8      	cbnz	r0, 800a6d0 <_vfiprintf_r+0x110>
 800a698:	06d1      	lsls	r1, r2, #27
 800a69a:	bf44      	itt	mi
 800a69c:	2320      	movmi	r3, #32
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a2:	0713      	lsls	r3, r2, #28
 800a6a4:	bf44      	itt	mi
 800a6a6:	232b      	movmi	r3, #43	; 0x2b
 800a6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b2:	d015      	beq.n	800a6e0 <_vfiprintf_r+0x120>
 800a6b4:	9a07      	ldr	r2, [sp, #28]
 800a6b6:	4654      	mov	r4, sl
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f04f 0c0a 	mov.w	ip, #10
 800a6be:	4621      	mov	r1, r4
 800a6c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c4:	3b30      	subs	r3, #48	; 0x30
 800a6c6:	2b09      	cmp	r3, #9
 800a6c8:	d94d      	bls.n	800a766 <_vfiprintf_r+0x1a6>
 800a6ca:	b1b0      	cbz	r0, 800a6fa <_vfiprintf_r+0x13a>
 800a6cc:	9207      	str	r2, [sp, #28]
 800a6ce:	e014      	b.n	800a6fa <_vfiprintf_r+0x13a>
 800a6d0:	eba0 0308 	sub.w	r3, r0, r8
 800a6d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	46a2      	mov	sl, r4
 800a6de:	e7d2      	b.n	800a686 <_vfiprintf_r+0xc6>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	1d19      	adds	r1, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	9103      	str	r1, [sp, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bfbb      	ittet	lt
 800a6ec:	425b      	neglt	r3, r3
 800a6ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f2:	9307      	strge	r3, [sp, #28]
 800a6f4:	9307      	strlt	r3, [sp, #28]
 800a6f6:	bfb8      	it	lt
 800a6f8:	9204      	strlt	r2, [sp, #16]
 800a6fa:	7823      	ldrb	r3, [r4, #0]
 800a6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6fe:	d10c      	bne.n	800a71a <_vfiprintf_r+0x15a>
 800a700:	7863      	ldrb	r3, [r4, #1]
 800a702:	2b2a      	cmp	r3, #42	; 0x2a
 800a704:	d134      	bne.n	800a770 <_vfiprintf_r+0x1b0>
 800a706:	9b03      	ldr	r3, [sp, #12]
 800a708:	1d1a      	adds	r2, r3, #4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	9203      	str	r2, [sp, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfb8      	it	lt
 800a712:	f04f 33ff 	movlt.w	r3, #4294967295
 800a716:	3402      	adds	r4, #2
 800a718:	9305      	str	r3, [sp, #20]
 800a71a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a7f0 <_vfiprintf_r+0x230>
 800a71e:	7821      	ldrb	r1, [r4, #0]
 800a720:	2203      	movs	r2, #3
 800a722:	4650      	mov	r0, sl
 800a724:	f7f5 fd5c 	bl	80001e0 <memchr>
 800a728:	b138      	cbz	r0, 800a73a <_vfiprintf_r+0x17a>
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	eba0 000a 	sub.w	r0, r0, sl
 800a730:	2240      	movs	r2, #64	; 0x40
 800a732:	4082      	lsls	r2, r0
 800a734:	4313      	orrs	r3, r2
 800a736:	3401      	adds	r4, #1
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73e:	4829      	ldr	r0, [pc, #164]	; (800a7e4 <_vfiprintf_r+0x224>)
 800a740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a744:	2206      	movs	r2, #6
 800a746:	f7f5 fd4b 	bl	80001e0 <memchr>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d03f      	beq.n	800a7ce <_vfiprintf_r+0x20e>
 800a74e:	4b26      	ldr	r3, [pc, #152]	; (800a7e8 <_vfiprintf_r+0x228>)
 800a750:	bb1b      	cbnz	r3, 800a79a <_vfiprintf_r+0x1da>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	3307      	adds	r3, #7
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	3308      	adds	r3, #8
 800a75c:	9303      	str	r3, [sp, #12]
 800a75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a760:	443b      	add	r3, r7
 800a762:	9309      	str	r3, [sp, #36]	; 0x24
 800a764:	e768      	b.n	800a638 <_vfiprintf_r+0x78>
 800a766:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76a:	460c      	mov	r4, r1
 800a76c:	2001      	movs	r0, #1
 800a76e:	e7a6      	b.n	800a6be <_vfiprintf_r+0xfe>
 800a770:	2300      	movs	r3, #0
 800a772:	3401      	adds	r4, #1
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	4619      	mov	r1, r3
 800a778:	f04f 0c0a 	mov.w	ip, #10
 800a77c:	4620      	mov	r0, r4
 800a77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a782:	3a30      	subs	r2, #48	; 0x30
 800a784:	2a09      	cmp	r2, #9
 800a786:	d903      	bls.n	800a790 <_vfiprintf_r+0x1d0>
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0c6      	beq.n	800a71a <_vfiprintf_r+0x15a>
 800a78c:	9105      	str	r1, [sp, #20]
 800a78e:	e7c4      	b.n	800a71a <_vfiprintf_r+0x15a>
 800a790:	fb0c 2101 	mla	r1, ip, r1, r2
 800a794:	4604      	mov	r4, r0
 800a796:	2301      	movs	r3, #1
 800a798:	e7f0      	b.n	800a77c <_vfiprintf_r+0x1bc>
 800a79a:	ab03      	add	r3, sp, #12
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	462a      	mov	r2, r5
 800a7a0:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <_vfiprintf_r+0x22c>)
 800a7a2:	a904      	add	r1, sp, #16
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f3af 8000 	nop.w
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	1c78      	adds	r0, r7, #1
 800a7ae:	d1d6      	bne.n	800a75e <_vfiprintf_r+0x19e>
 800a7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b2:	07d9      	lsls	r1, r3, #31
 800a7b4:	d405      	bmi.n	800a7c2 <_vfiprintf_r+0x202>
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	059a      	lsls	r2, r3, #22
 800a7ba:	d402      	bmi.n	800a7c2 <_vfiprintf_r+0x202>
 800a7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7be:	f7ff fc75 	bl	800a0ac <__retarget_lock_release_recursive>
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	065b      	lsls	r3, r3, #25
 800a7c6:	f53f af1d 	bmi.w	800a604 <_vfiprintf_r+0x44>
 800a7ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7cc:	e71c      	b.n	800a608 <_vfiprintf_r+0x48>
 800a7ce:	ab03      	add	r3, sp, #12
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	462a      	mov	r2, r5
 800a7d4:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <_vfiprintf_r+0x22c>)
 800a7d6:	a904      	add	r1, sp, #16
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f000 f879 	bl	800a8d0 <_printf_i>
 800a7de:	e7e4      	b.n	800a7aa <_vfiprintf_r+0x1ea>
 800a7e0:	0801e4a1 	.word	0x0801e4a1
 800a7e4:	0801e4ab 	.word	0x0801e4ab
 800a7e8:	00000000 	.word	0x00000000
 800a7ec:	0800a59b 	.word	0x0800a59b
 800a7f0:	0801e4a7 	.word	0x0801e4a7

0800a7f4 <_printf_common>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	4699      	mov	r9, r3
 800a7fc:	688a      	ldr	r2, [r1, #8]
 800a7fe:	690b      	ldr	r3, [r1, #16]
 800a800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a804:	4293      	cmp	r3, r2
 800a806:	bfb8      	it	lt
 800a808:	4613      	movlt	r3, r2
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a810:	4607      	mov	r7, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b10a      	cbz	r2, 800a81a <_printf_common+0x26>
 800a816:	3301      	adds	r3, #1
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	0699      	lsls	r1, r3, #26
 800a81e:	bf42      	ittt	mi
 800a820:	6833      	ldrmi	r3, [r6, #0]
 800a822:	3302      	addmi	r3, #2
 800a824:	6033      	strmi	r3, [r6, #0]
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	f015 0506 	ands.w	r5, r5, #6
 800a82c:	d106      	bne.n	800a83c <_printf_common+0x48>
 800a82e:	f104 0a19 	add.w	sl, r4, #25
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	6832      	ldr	r2, [r6, #0]
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc26      	bgt.n	800a88a <_printf_common+0x96>
 800a83c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a840:	1e13      	subs	r3, r2, #0
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	bf18      	it	ne
 800a846:	2301      	movne	r3, #1
 800a848:	0692      	lsls	r2, r2, #26
 800a84a:	d42b      	bmi.n	800a8a4 <_printf_common+0xb0>
 800a84c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d01e      	beq.n	800a898 <_printf_common+0xa4>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	6922      	ldr	r2, [r4, #16]
 800a85e:	f003 0306 	and.w	r3, r3, #6
 800a862:	2b04      	cmp	r3, #4
 800a864:	bf02      	ittt	eq
 800a866:	68e5      	ldreq	r5, [r4, #12]
 800a868:	6833      	ldreq	r3, [r6, #0]
 800a86a:	1aed      	subeq	r5, r5, r3
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	bf0c      	ite	eq
 800a870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a874:	2500      	movne	r5, #0
 800a876:	4293      	cmp	r3, r2
 800a878:	bfc4      	itt	gt
 800a87a:	1a9b      	subgt	r3, r3, r2
 800a87c:	18ed      	addgt	r5, r5, r3
 800a87e:	2600      	movs	r6, #0
 800a880:	341a      	adds	r4, #26
 800a882:	42b5      	cmp	r5, r6
 800a884:	d11a      	bne.n	800a8bc <_printf_common+0xc8>
 800a886:	2000      	movs	r0, #0
 800a888:	e008      	b.n	800a89c <_printf_common+0xa8>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4652      	mov	r2, sl
 800a88e:	4649      	mov	r1, r9
 800a890:	4638      	mov	r0, r7
 800a892:	47c0      	blx	r8
 800a894:	3001      	adds	r0, #1
 800a896:	d103      	bne.n	800a8a0 <_printf_common+0xac>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	e7c6      	b.n	800a832 <_printf_common+0x3e>
 800a8a4:	18e1      	adds	r1, r4, r3
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	2030      	movs	r0, #48	; 0x30
 800a8aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ae:	4422      	add	r2, r4
 800a8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	e7c7      	b.n	800a84c <_printf_common+0x58>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c0      	blx	r8
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0e6      	beq.n	800a898 <_printf_common+0xa4>
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7d9      	b.n	800a882 <_printf_common+0x8e>
	...

0800a8d0 <_printf_i>:
 800a8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	7e0f      	ldrb	r7, [r1, #24]
 800a8d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d8:	2f78      	cmp	r7, #120	; 0x78
 800a8da:	4691      	mov	r9, r2
 800a8dc:	4680      	mov	r8, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8e6:	d807      	bhi.n	800a8f8 <_printf_i+0x28>
 800a8e8:	2f62      	cmp	r7, #98	; 0x62
 800a8ea:	d80a      	bhi.n	800a902 <_printf_i+0x32>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	f000 80d4 	beq.w	800aa9a <_printf_i+0x1ca>
 800a8f2:	2f58      	cmp	r7, #88	; 0x58
 800a8f4:	f000 80c0 	beq.w	800aa78 <_printf_i+0x1a8>
 800a8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a900:	e03a      	b.n	800a978 <_printf_i+0xa8>
 800a902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a906:	2b15      	cmp	r3, #21
 800a908:	d8f6      	bhi.n	800a8f8 <_printf_i+0x28>
 800a90a:	a101      	add	r1, pc, #4	; (adr r1, 800a910 <_printf_i+0x40>)
 800a90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800a8f9 	.word	0x0800a8f9
 800a91c:	0800a8f9 	.word	0x0800a8f9
 800a920:	0800a8f9 	.word	0x0800a8f9
 800a924:	0800a8f9 	.word	0x0800a8f9
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a8f9 	.word	0x0800a8f9
 800a930:	0800a8f9 	.word	0x0800a8f9
 800a934:	0800a8f9 	.word	0x0800a8f9
 800a938:	0800a8f9 	.word	0x0800a8f9
 800a93c:	0800aa81 	.word	0x0800aa81
 800a940:	0800a9a9 	.word	0x0800a9a9
 800a944:	0800aa3b 	.word	0x0800aa3b
 800a948:	0800a8f9 	.word	0x0800a8f9
 800a94c:	0800a8f9 	.word	0x0800a8f9
 800a950:	0800aaa3 	.word	0x0800aaa3
 800a954:	0800a8f9 	.word	0x0800a8f9
 800a958:	0800a9a9 	.word	0x0800a9a9
 800a95c:	0800a8f9 	.word	0x0800a8f9
 800a960:	0800a8f9 	.word	0x0800a8f9
 800a964:	0800aa43 	.word	0x0800aa43
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	602a      	str	r2, [r5, #0]
 800a970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a978:	2301      	movs	r3, #1
 800a97a:	e09f      	b.n	800aabc <_printf_i+0x1ec>
 800a97c:	6820      	ldr	r0, [r4, #0]
 800a97e:	682b      	ldr	r3, [r5, #0]
 800a980:	0607      	lsls	r7, r0, #24
 800a982:	f103 0104 	add.w	r1, r3, #4
 800a986:	6029      	str	r1, [r5, #0]
 800a988:	d501      	bpl.n	800a98e <_printf_i+0xbe>
 800a98a:	681e      	ldr	r6, [r3, #0]
 800a98c:	e003      	b.n	800a996 <_printf_i+0xc6>
 800a98e:	0646      	lsls	r6, r0, #25
 800a990:	d5fb      	bpl.n	800a98a <_printf_i+0xba>
 800a992:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a996:	2e00      	cmp	r6, #0
 800a998:	da03      	bge.n	800a9a2 <_printf_i+0xd2>
 800a99a:	232d      	movs	r3, #45	; 0x2d
 800a99c:	4276      	negs	r6, r6
 800a99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9a2:	485a      	ldr	r0, [pc, #360]	; (800ab0c <_printf_i+0x23c>)
 800a9a4:	230a      	movs	r3, #10
 800a9a6:	e012      	b.n	800a9ce <_printf_i+0xfe>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	6820      	ldr	r0, [r4, #0]
 800a9ac:	1d19      	adds	r1, r3, #4
 800a9ae:	6029      	str	r1, [r5, #0]
 800a9b0:	0605      	lsls	r5, r0, #24
 800a9b2:	d501      	bpl.n	800a9b8 <_printf_i+0xe8>
 800a9b4:	681e      	ldr	r6, [r3, #0]
 800a9b6:	e002      	b.n	800a9be <_printf_i+0xee>
 800a9b8:	0641      	lsls	r1, r0, #25
 800a9ba:	d5fb      	bpl.n	800a9b4 <_printf_i+0xe4>
 800a9bc:	881e      	ldrh	r6, [r3, #0]
 800a9be:	4853      	ldr	r0, [pc, #332]	; (800ab0c <_printf_i+0x23c>)
 800a9c0:	2f6f      	cmp	r7, #111	; 0x6f
 800a9c2:	bf0c      	ite	eq
 800a9c4:	2308      	moveq	r3, #8
 800a9c6:	230a      	movne	r3, #10
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ce:	6865      	ldr	r5, [r4, #4]
 800a9d0:	60a5      	str	r5, [r4, #8]
 800a9d2:	2d00      	cmp	r5, #0
 800a9d4:	bfa2      	ittt	ge
 800a9d6:	6821      	ldrge	r1, [r4, #0]
 800a9d8:	f021 0104 	bicge.w	r1, r1, #4
 800a9dc:	6021      	strge	r1, [r4, #0]
 800a9de:	b90e      	cbnz	r6, 800a9e4 <_printf_i+0x114>
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	d04b      	beq.n	800aa7c <_printf_i+0x1ac>
 800a9e4:	4615      	mov	r5, r2
 800a9e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9ea:	fb03 6711 	mls	r7, r3, r1, r6
 800a9ee:	5dc7      	ldrb	r7, [r0, r7]
 800a9f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9f4:	4637      	mov	r7, r6
 800a9f6:	42bb      	cmp	r3, r7
 800a9f8:	460e      	mov	r6, r1
 800a9fa:	d9f4      	bls.n	800a9e6 <_printf_i+0x116>
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d10b      	bne.n	800aa18 <_printf_i+0x148>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	07de      	lsls	r6, r3, #31
 800aa04:	d508      	bpl.n	800aa18 <_printf_i+0x148>
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	6861      	ldr	r1, [r4, #4]
 800aa0a:	4299      	cmp	r1, r3
 800aa0c:	bfde      	ittt	le
 800aa0e:	2330      	movle	r3, #48	; 0x30
 800aa10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa18:	1b52      	subs	r2, r2, r5
 800aa1a:	6122      	str	r2, [r4, #16]
 800aa1c:	f8cd a000 	str.w	sl, [sp]
 800aa20:	464b      	mov	r3, r9
 800aa22:	aa03      	add	r2, sp, #12
 800aa24:	4621      	mov	r1, r4
 800aa26:	4640      	mov	r0, r8
 800aa28:	f7ff fee4 	bl	800a7f4 <_printf_common>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d14a      	bne.n	800aac6 <_printf_i+0x1f6>
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	b004      	add	sp, #16
 800aa36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f043 0320 	orr.w	r3, r3, #32
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	4833      	ldr	r0, [pc, #204]	; (800ab10 <_printf_i+0x240>)
 800aa44:	2778      	movs	r7, #120	; 0x78
 800aa46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	6829      	ldr	r1, [r5, #0]
 800aa4e:	061f      	lsls	r7, r3, #24
 800aa50:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa54:	d402      	bmi.n	800aa5c <_printf_i+0x18c>
 800aa56:	065f      	lsls	r7, r3, #25
 800aa58:	bf48      	it	mi
 800aa5a:	b2b6      	uxthmi	r6, r6
 800aa5c:	07df      	lsls	r7, r3, #31
 800aa5e:	bf48      	it	mi
 800aa60:	f043 0320 	orrmi.w	r3, r3, #32
 800aa64:	6029      	str	r1, [r5, #0]
 800aa66:	bf48      	it	mi
 800aa68:	6023      	strmi	r3, [r4, #0]
 800aa6a:	b91e      	cbnz	r6, 800aa74 <_printf_i+0x1a4>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	f023 0320 	bic.w	r3, r3, #32
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	2310      	movs	r3, #16
 800aa76:	e7a7      	b.n	800a9c8 <_printf_i+0xf8>
 800aa78:	4824      	ldr	r0, [pc, #144]	; (800ab0c <_printf_i+0x23c>)
 800aa7a:	e7e4      	b.n	800aa46 <_printf_i+0x176>
 800aa7c:	4615      	mov	r5, r2
 800aa7e:	e7bd      	b.n	800a9fc <_printf_i+0x12c>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	6826      	ldr	r6, [r4, #0]
 800aa84:	6961      	ldr	r1, [r4, #20]
 800aa86:	1d18      	adds	r0, r3, #4
 800aa88:	6028      	str	r0, [r5, #0]
 800aa8a:	0635      	lsls	r5, r6, #24
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	d501      	bpl.n	800aa94 <_printf_i+0x1c4>
 800aa90:	6019      	str	r1, [r3, #0]
 800aa92:	e002      	b.n	800aa9a <_printf_i+0x1ca>
 800aa94:	0670      	lsls	r0, r6, #25
 800aa96:	d5fb      	bpl.n	800aa90 <_printf_i+0x1c0>
 800aa98:	8019      	strh	r1, [r3, #0]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	4615      	mov	r5, r2
 800aaa0:	e7bc      	b.n	800aa1c <_printf_i+0x14c>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	681d      	ldr	r5, [r3, #0]
 800aaaa:	6862      	ldr	r2, [r4, #4]
 800aaac:	2100      	movs	r1, #0
 800aaae:	4628      	mov	r0, r5
 800aab0:	f7f5 fb96 	bl	80001e0 <memchr>
 800aab4:	b108      	cbz	r0, 800aaba <_printf_i+0x1ea>
 800aab6:	1b40      	subs	r0, r0, r5
 800aab8:	6060      	str	r0, [r4, #4]
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	6123      	str	r3, [r4, #16]
 800aabe:	2300      	movs	r3, #0
 800aac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aac4:	e7aa      	b.n	800aa1c <_printf_i+0x14c>
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	462a      	mov	r2, r5
 800aaca:	4649      	mov	r1, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	47d0      	blx	sl
 800aad0:	3001      	adds	r0, #1
 800aad2:	d0ad      	beq.n	800aa30 <_printf_i+0x160>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	079b      	lsls	r3, r3, #30
 800aad8:	d413      	bmi.n	800ab02 <_printf_i+0x232>
 800aada:	68e0      	ldr	r0, [r4, #12]
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	4298      	cmp	r0, r3
 800aae0:	bfb8      	it	lt
 800aae2:	4618      	movlt	r0, r3
 800aae4:	e7a6      	b.n	800aa34 <_printf_i+0x164>
 800aae6:	2301      	movs	r3, #1
 800aae8:	4632      	mov	r2, r6
 800aaea:	4649      	mov	r1, r9
 800aaec:	4640      	mov	r0, r8
 800aaee:	47d0      	blx	sl
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d09d      	beq.n	800aa30 <_printf_i+0x160>
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	68e3      	ldr	r3, [r4, #12]
 800aaf8:	9903      	ldr	r1, [sp, #12]
 800aafa:	1a5b      	subs	r3, r3, r1
 800aafc:	42ab      	cmp	r3, r5
 800aafe:	dcf2      	bgt.n	800aae6 <_printf_i+0x216>
 800ab00:	e7eb      	b.n	800aada <_printf_i+0x20a>
 800ab02:	2500      	movs	r5, #0
 800ab04:	f104 0619 	add.w	r6, r4, #25
 800ab08:	e7f5      	b.n	800aaf6 <_printf_i+0x226>
 800ab0a:	bf00      	nop
 800ab0c:	0801e4b2 	.word	0x0801e4b2
 800ab10:	0801e4c3 	.word	0x0801e4c3

0800ab14 <__sflush_r>:
 800ab14:	898a      	ldrh	r2, [r1, #12]
 800ab16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	0710      	lsls	r0, r2, #28
 800ab1e:	460c      	mov	r4, r1
 800ab20:	d458      	bmi.n	800abd4 <__sflush_r+0xc0>
 800ab22:	684b      	ldr	r3, [r1, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dc05      	bgt.n	800ab34 <__sflush_r+0x20>
 800ab28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dc02      	bgt.n	800ab34 <__sflush_r+0x20>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d0f9      	beq.n	800ab2e <__sflush_r+0x1a>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab40:	682f      	ldr	r7, [r5, #0]
 800ab42:	6a21      	ldr	r1, [r4, #32]
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	d032      	beq.n	800abae <__sflush_r+0x9a>
 800ab48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	075a      	lsls	r2, r3, #29
 800ab4e:	d505      	bpl.n	800ab5c <__sflush_r+0x48>
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	1ac0      	subs	r0, r0, r3
 800ab54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab56:	b10b      	cbz	r3, 800ab5c <__sflush_r+0x48>
 800ab58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab5a:	1ac0      	subs	r0, r0, r3
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4602      	mov	r2, r0
 800ab60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab62:	6a21      	ldr	r1, [r4, #32]
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b0      	blx	r6
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	d106      	bne.n	800ab7c <__sflush_r+0x68>
 800ab6e:	6829      	ldr	r1, [r5, #0]
 800ab70:	291d      	cmp	r1, #29
 800ab72:	d82b      	bhi.n	800abcc <__sflush_r+0xb8>
 800ab74:	4a29      	ldr	r2, [pc, #164]	; (800ac1c <__sflush_r+0x108>)
 800ab76:	410a      	asrs	r2, r1
 800ab78:	07d6      	lsls	r6, r2, #31
 800ab7a:	d427      	bmi.n	800abcc <__sflush_r+0xb8>
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	6062      	str	r2, [r4, #4]
 800ab80:	04d9      	lsls	r1, r3, #19
 800ab82:	6922      	ldr	r2, [r4, #16]
 800ab84:	6022      	str	r2, [r4, #0]
 800ab86:	d504      	bpl.n	800ab92 <__sflush_r+0x7e>
 800ab88:	1c42      	adds	r2, r0, #1
 800ab8a:	d101      	bne.n	800ab90 <__sflush_r+0x7c>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b903      	cbnz	r3, 800ab92 <__sflush_r+0x7e>
 800ab90:	6560      	str	r0, [r4, #84]	; 0x54
 800ab92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab94:	602f      	str	r7, [r5, #0]
 800ab96:	2900      	cmp	r1, #0
 800ab98:	d0c9      	beq.n	800ab2e <__sflush_r+0x1a>
 800ab9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab9e:	4299      	cmp	r1, r3
 800aba0:	d002      	beq.n	800aba8 <__sflush_r+0x94>
 800aba2:	4628      	mov	r0, r5
 800aba4:	f7ff fa92 	bl	800a0cc <_free_r>
 800aba8:	2000      	movs	r0, #0
 800abaa:	6360      	str	r0, [r4, #52]	; 0x34
 800abac:	e7c0      	b.n	800ab30 <__sflush_r+0x1c>
 800abae:	2301      	movs	r3, #1
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b0      	blx	r6
 800abb4:	1c41      	adds	r1, r0, #1
 800abb6:	d1c8      	bne.n	800ab4a <__sflush_r+0x36>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0c5      	beq.n	800ab4a <__sflush_r+0x36>
 800abbe:	2b1d      	cmp	r3, #29
 800abc0:	d001      	beq.n	800abc6 <__sflush_r+0xb2>
 800abc2:	2b16      	cmp	r3, #22
 800abc4:	d101      	bne.n	800abca <__sflush_r+0xb6>
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	e7b1      	b.n	800ab2e <__sflush_r+0x1a>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	e7ad      	b.n	800ab30 <__sflush_r+0x1c>
 800abd4:	690f      	ldr	r7, [r1, #16]
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	d0a9      	beq.n	800ab2e <__sflush_r+0x1a>
 800abda:	0793      	lsls	r3, r2, #30
 800abdc:	680e      	ldr	r6, [r1, #0]
 800abde:	bf08      	it	eq
 800abe0:	694b      	ldreq	r3, [r1, #20]
 800abe2:	600f      	str	r7, [r1, #0]
 800abe4:	bf18      	it	ne
 800abe6:	2300      	movne	r3, #0
 800abe8:	eba6 0807 	sub.w	r8, r6, r7
 800abec:	608b      	str	r3, [r1, #8]
 800abee:	f1b8 0f00 	cmp.w	r8, #0
 800abf2:	dd9c      	ble.n	800ab2e <__sflush_r+0x1a>
 800abf4:	6a21      	ldr	r1, [r4, #32]
 800abf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abf8:	4643      	mov	r3, r8
 800abfa:	463a      	mov	r2, r7
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b0      	blx	r6
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dc06      	bgt.n	800ac12 <__sflush_r+0xfe>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e78e      	b.n	800ab30 <__sflush_r+0x1c>
 800ac12:	4407      	add	r7, r0
 800ac14:	eba8 0800 	sub.w	r8, r8, r0
 800ac18:	e7e9      	b.n	800abee <__sflush_r+0xda>
 800ac1a:	bf00      	nop
 800ac1c:	dfbffffe 	.word	0xdfbffffe

0800ac20 <_fflush_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	690b      	ldr	r3, [r1, #16]
 800ac24:	4605      	mov	r5, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	b913      	cbnz	r3, 800ac30 <_fflush_r+0x10>
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	b118      	cbz	r0, 800ac3a <_fflush_r+0x1a>
 800ac32:	6a03      	ldr	r3, [r0, #32]
 800ac34:	b90b      	cbnz	r3, 800ac3a <_fflush_r+0x1a>
 800ac36:	f7ff f823 	bl	8009c80 <__sinit>
 800ac3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0f3      	beq.n	800ac2a <_fflush_r+0xa>
 800ac42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac44:	07d0      	lsls	r0, r2, #31
 800ac46:	d404      	bmi.n	800ac52 <_fflush_r+0x32>
 800ac48:	0599      	lsls	r1, r3, #22
 800ac4a:	d402      	bmi.n	800ac52 <_fflush_r+0x32>
 800ac4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac4e:	f7ff fa2c 	bl	800a0aa <__retarget_lock_acquire_recursive>
 800ac52:	4628      	mov	r0, r5
 800ac54:	4621      	mov	r1, r4
 800ac56:	f7ff ff5d 	bl	800ab14 <__sflush_r>
 800ac5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5c:	07da      	lsls	r2, r3, #31
 800ac5e:	4605      	mov	r5, r0
 800ac60:	d4e4      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	059b      	lsls	r3, r3, #22
 800ac66:	d4e1      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f7ff fa1f 	bl	800a0ac <__retarget_lock_release_recursive>
 800ac6e:	e7dd      	b.n	800ac2c <_fflush_r+0xc>

0800ac70 <__swhatbuf_r>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	460c      	mov	r4, r1
 800ac74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	b096      	sub	sp, #88	; 0x58
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	461e      	mov	r6, r3
 800ac80:	da0d      	bge.n	800ac9e <__swhatbuf_r+0x2e>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ac88:	f04f 0100 	mov.w	r1, #0
 800ac8c:	bf0c      	ite	eq
 800ac8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ac92:	2340      	movne	r3, #64	; 0x40
 800ac94:	2000      	movs	r0, #0
 800ac96:	6031      	str	r1, [r6, #0]
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	b016      	add	sp, #88	; 0x58
 800ac9c:	bd70      	pop	{r4, r5, r6, pc}
 800ac9e:	466a      	mov	r2, sp
 800aca0:	f000 f862 	bl	800ad68 <_fstat_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	dbec      	blt.n	800ac82 <__swhatbuf_r+0x12>
 800aca8:	9901      	ldr	r1, [sp, #4]
 800acaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800acae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acb2:	4259      	negs	r1, r3
 800acb4:	4159      	adcs	r1, r3
 800acb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acba:	e7eb      	b.n	800ac94 <__swhatbuf_r+0x24>

0800acbc <__smakebuf_r>:
 800acbc:	898b      	ldrh	r3, [r1, #12]
 800acbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acc0:	079d      	lsls	r5, r3, #30
 800acc2:	4606      	mov	r6, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	d507      	bpl.n	800acd8 <__smakebuf_r+0x1c>
 800acc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	2301      	movs	r3, #1
 800acd2:	6163      	str	r3, [r4, #20]
 800acd4:	b002      	add	sp, #8
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	ab01      	add	r3, sp, #4
 800acda:	466a      	mov	r2, sp
 800acdc:	f7ff ffc8 	bl	800ac70 <__swhatbuf_r>
 800ace0:	9900      	ldr	r1, [sp, #0]
 800ace2:	4605      	mov	r5, r0
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff fa5d 	bl	800a1a4 <_malloc_r>
 800acea:	b948      	cbnz	r0, 800ad00 <__smakebuf_r+0x44>
 800acec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d4ef      	bmi.n	800acd4 <__smakebuf_r+0x18>
 800acf4:	f023 0303 	bic.w	r3, r3, #3
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	e7e3      	b.n	800acc8 <__smakebuf_r+0xc>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	6020      	str	r0, [r4, #0]
 800ad04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	9b00      	ldr	r3, [sp, #0]
 800ad0c:	6163      	str	r3, [r4, #20]
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	6120      	str	r0, [r4, #16]
 800ad12:	b15b      	cbz	r3, 800ad2c <__smakebuf_r+0x70>
 800ad14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f000 f837 	bl	800ad8c <_isatty_r>
 800ad1e:	b128      	cbz	r0, 800ad2c <__smakebuf_r+0x70>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	f043 0301 	orr.w	r3, r3, #1
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	431d      	orrs	r5, r3
 800ad30:	81a5      	strh	r5, [r4, #12]
 800ad32:	e7cf      	b.n	800acd4 <__smakebuf_r+0x18>

0800ad34 <memmove>:
 800ad34:	4288      	cmp	r0, r1
 800ad36:	b510      	push	{r4, lr}
 800ad38:	eb01 0402 	add.w	r4, r1, r2
 800ad3c:	d902      	bls.n	800ad44 <memmove+0x10>
 800ad3e:	4284      	cmp	r4, r0
 800ad40:	4623      	mov	r3, r4
 800ad42:	d807      	bhi.n	800ad54 <memmove+0x20>
 800ad44:	1e43      	subs	r3, r0, #1
 800ad46:	42a1      	cmp	r1, r4
 800ad48:	d008      	beq.n	800ad5c <memmove+0x28>
 800ad4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad52:	e7f8      	b.n	800ad46 <memmove+0x12>
 800ad54:	4402      	add	r2, r0
 800ad56:	4601      	mov	r1, r0
 800ad58:	428a      	cmp	r2, r1
 800ad5a:	d100      	bne.n	800ad5e <memmove+0x2a>
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad66:	e7f7      	b.n	800ad58 <memmove+0x24>

0800ad68 <_fstat_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d07      	ldr	r5, [pc, #28]	; (800ad88 <_fstat_r+0x20>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	4611      	mov	r1, r2
 800ad74:	602b      	str	r3, [r5, #0]
 800ad76:	f7f9 fc9a 	bl	80046ae <_fstat>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d102      	bne.n	800ad84 <_fstat_r+0x1c>
 800ad7e:	682b      	ldr	r3, [r5, #0]
 800ad80:	b103      	cbz	r3, 800ad84 <_fstat_r+0x1c>
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	bd38      	pop	{r3, r4, r5, pc}
 800ad86:	bf00      	nop
 800ad88:	2000a64c 	.word	0x2000a64c

0800ad8c <_isatty_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d06      	ldr	r5, [pc, #24]	; (800ada8 <_isatty_r+0x1c>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	4604      	mov	r4, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	602b      	str	r3, [r5, #0]
 800ad98:	f7f9 fc99 	bl	80046ce <_isatty>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_isatty_r+0x1a>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_isatty_r+0x1a>
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	2000a64c 	.word	0x2000a64c

0800adac <_sbrk_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d06      	ldr	r5, [pc, #24]	; (800adc8 <_sbrk_r+0x1c>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f9 fca2 	bl	8004700 <_sbrk>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_sbrk_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_sbrk_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	2000a64c 	.word	0x2000a64c

0800adcc <_realloc_r>:
 800adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add0:	4680      	mov	r8, r0
 800add2:	4614      	mov	r4, r2
 800add4:	460e      	mov	r6, r1
 800add6:	b921      	cbnz	r1, 800ade2 <_realloc_r+0x16>
 800add8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800addc:	4611      	mov	r1, r2
 800adde:	f7ff b9e1 	b.w	800a1a4 <_malloc_r>
 800ade2:	b92a      	cbnz	r2, 800adf0 <_realloc_r+0x24>
 800ade4:	f7ff f972 	bl	800a0cc <_free_r>
 800ade8:	4625      	mov	r5, r4
 800adea:	4628      	mov	r0, r5
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	f000 f81b 	bl	800ae2a <_malloc_usable_size_r>
 800adf4:	4284      	cmp	r4, r0
 800adf6:	4607      	mov	r7, r0
 800adf8:	d802      	bhi.n	800ae00 <_realloc_r+0x34>
 800adfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adfe:	d812      	bhi.n	800ae26 <_realloc_r+0x5a>
 800ae00:	4621      	mov	r1, r4
 800ae02:	4640      	mov	r0, r8
 800ae04:	f7ff f9ce 	bl	800a1a4 <_malloc_r>
 800ae08:	4605      	mov	r5, r0
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d0ed      	beq.n	800adea <_realloc_r+0x1e>
 800ae0e:	42bc      	cmp	r4, r7
 800ae10:	4622      	mov	r2, r4
 800ae12:	4631      	mov	r1, r6
 800ae14:	bf28      	it	cs
 800ae16:	463a      	movcs	r2, r7
 800ae18:	f7ff f949 	bl	800a0ae <memcpy>
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f7ff f954 	bl	800a0cc <_free_r>
 800ae24:	e7e1      	b.n	800adea <_realloc_r+0x1e>
 800ae26:	4635      	mov	r5, r6
 800ae28:	e7df      	b.n	800adea <_realloc_r+0x1e>

0800ae2a <_malloc_usable_size_r>:
 800ae2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2e:	1f18      	subs	r0, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bfbc      	itt	lt
 800ae34:	580b      	ldrlt	r3, [r1, r0]
 800ae36:	18c0      	addlt	r0, r0, r3
 800ae38:	4770      	bx	lr
	...

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
