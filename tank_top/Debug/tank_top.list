
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013598  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bae4  0801bae4  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801bae4  0801bae4  0002bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baec  0801baec  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801baec  0801baec  0002baec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801baf0  0801baf0  0002baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801baf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000a8  0801bb9c  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0801bb9c  00030588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ae0  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003413  00000000  00000000  00049bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0004d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d6a  00000000  00000000  0004e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ffc  00000000  00000000  000712a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00a0  00000000  00000000  0008b29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001029  00000000  00000000  0016b33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060f0  00000000  00000000  0016c368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00172458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008534 	.word	0x08008534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008534 	.word	0x08008534

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d64:	899a      	ldrh	r2, [r3, #12]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	819a      	strh	r2, [r3, #12]
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <arm_cfft_init_2048_f32+0x44>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0801ba3c 	.word	0x0801ba3c

08000d90 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dac:	899a      	ldrh	r2, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	819a      	strh	r2, [r3, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <arm_cfft_init_1024_f32+0x44>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	0801ba2c 	.word	0x0801ba2c

08000dd8 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000df4:	899a      	ldrh	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	819a      	strh	r2, [r3, #12]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <arm_cfft_init_512_f32+0x44>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0801ba1c 	.word	0x0801ba1c

08000e20 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e3c:	899a      	ldrh	r2, [r3, #12]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	819a      	strh	r2, [r3, #12]
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <arm_cfft_init_256_f32+0x44>)
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0801ba0c 	.word	0x0801ba0c

08000e68 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e82:	899a      	ldrh	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	819a      	strh	r2, [r3, #12]
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <arm_cfft_init_128_f32+0x40>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	0801b9fc 	.word	0x0801b9fc

08000eac <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ec6:	899a      	ldrh	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	819a      	strh	r2, [r3, #12]
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <arm_cfft_init_64_f32+0x40>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	0801b9ec 	.word	0x0801b9ec

08000ef0 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f0a:	899a      	ldrh	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	819a      	strh	r2, [r3, #12]
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <arm_cfft_init_32_f32+0x40>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	0801b9dc 	.word	0x0801b9dc

08000f34 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2210      	movs	r2, #16
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f4e:	899a      	ldrh	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	819a      	strh	r2, [r3, #12]
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <arm_cfft_init_16_f32+0x40>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	0801b9cc 	.word	0x0801b9cc

08000f78 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <arm_rfft_fast_init_32_f32+0x14>
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e013      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffd0 	bl	8000f34 <arm_cfft_init_16_f32>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	e006      	b.n	8000fb4 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2220      	movs	r2, #32
 8000faa:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <arm_rfft_fast_init_32_f32+0x44>)
 8000fb0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08013a4c 	.word	0x08013a4c

08000fc0 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <arm_rfft_fast_init_64_f32+0x14>
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e013      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff8a 	bl	8000ef0 <arm_cfft_init_32_f32>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	e006      	b.n	8000ffc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <arm_rfft_fast_init_64_f32+0x44>)
 8000ff8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08013acc 	.word	0x08013acc

08001008 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <arm_rfft_fast_init_128_f32+0x14>
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e013      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff44 	bl	8000eac <arm_cfft_init_64_f32>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	e006      	b.n	8001044 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <arm_rfft_fast_init_128_f32+0x44>)
 8001040:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08013bcc 	.word	0x08013bcc

08001050 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <arm_rfft_fast_init_256_f32+0x14>
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e014      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fefe 	bl	8000e68 <arm_cfft_init_128_f32>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	e007      	b.n	800108e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <arm_rfft_fast_init_256_f32+0x48>)
 800108a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08013dcc 	.word	0x08013dcc

0800109c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <arm_rfft_fast_init_512_f32+0x14>
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e014      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb4 	bl	8000e20 <arm_cfft_init_256_f32>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	e007      	b.n	80010da <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <arm_rfft_fast_init_512_f32+0x48>)
 80010d6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	080141cc 	.word	0x080141cc

080010e8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <arm_rfft_fast_init_1024_f32+0x14>
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e014      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe6a 	bl	8000dd8 <arm_cfft_init_512_f32>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	e007      	b.n	8001126 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <arm_rfft_fast_init_1024_f32+0x48>)
 8001122:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	080149cc 	.word	0x080149cc

08001134 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <arm_rfft_fast_init_2048_f32+0x14>
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e014      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe20 	bl	8000d90 <arm_cfft_init_1024_f32>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	e007      	b.n	8001172 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001168:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <arm_rfft_fast_init_2048_f32+0x48>)
 800116e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	080159cc 	.word	0x080159cc

08001180 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <arm_rfft_fast_init_4096_f32+0x14>
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e014      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd6 	bl	8000d48 <arm_cfft_init_2048_f32>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	e007      	b.n	80011be <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <arm_rfft_fast_init_4096_f32+0x48>)
 80011ba:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	080179cc 	.word	0x080179cc

080011cc <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011de:	d023      	beq.n	8001228 <arm_rfft_fast_init_f32+0x5c>
 80011e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e4:	dc50      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ea:	d023      	beq.n	8001234 <arm_rfft_fast_init_f32+0x68>
 80011ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f0:	dc4a      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d023      	beq.n	8001240 <arm_rfft_fast_init_f32+0x74>
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fc:	dc44      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 80011fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001202:	d023      	beq.n	800124c <arm_rfft_fast_init_f32+0x80>
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	dc3e      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800120a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800120e:	d023      	beq.n	8001258 <arm_rfft_fast_init_f32+0x8c>
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	dc38      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 8001216:	2b80      	cmp	r3, #128	; 0x80
 8001218:	d024      	beq.n	8001264 <arm_rfft_fast_init_f32+0x98>
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	dc34      	bgt.n	8001288 <arm_rfft_fast_init_f32+0xbc>
 800121e:	2b20      	cmp	r3, #32
 8001220:	d02c      	beq.n	800127c <arm_rfft_fast_init_f32+0xb0>
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d024      	beq.n	8001270 <arm_rfft_fast_init_f32+0xa4>
 8001226:	e02f      	b.n	8001288 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffa9 	bl	8001180 <arm_rfft_fast_init_4096_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
    break;
 8001232:	e02c      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff7d 	bl	8001134 <arm_rfft_fast_init_2048_f32>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
    break;
 800123e:	e026      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff51 	bl	80010e8 <arm_rfft_fast_init_1024_f32>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
    break;
 800124a:	e020      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff25 	bl	800109c <arm_rfft_fast_init_512_f32>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    break;
 8001256:	e01a      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fef9 	bl	8001050 <arm_rfft_fast_init_256_f32>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
    break;
 8001262:	e014      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fecf 	bl	8001008 <arm_rfft_fast_init_128_f32>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
    break;
 800126e:	e00e      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fea5 	bl	8000fc0 <arm_rfft_fast_init_64_f32>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
    break;
 800127a:	e008      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe7b 	bl	8000f78 <arm_rfft_fast_init_32_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
    break;
 8001286:	e002      	b.n	800128e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e001      	b.n	8001292 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012a0:	f000 fcd7 	bl	8001c52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012a4:	f000 f876 	bl	8001394 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012a8:	f000 f9d0 	bl	800164c <MX_GPIO_Init>
	MX_TIM2_Init();
 80012ac:	f000 f928 	bl	8001500 <MX_TIM2_Init>
	MX_ADC1_Init();
 80012b0:	f000 f8c2 	bl	8001438 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80012b4:	f000 f998 	bl	80015e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <main+0xd0>)
 80012be:	f7ff ff85 	bl	80011cc <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012c2:	217f      	movs	r1, #127	; 0x7f
 80012c4:	482a      	ldr	r0, [pc, #168]	; (8001370 <main+0xd4>)
 80012c6:	f001 fe7f 	bl	8002fc8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	4929      	ldr	r1, [pc, #164]	; (8001374 <main+0xd8>)
 80012d0:	4827      	ldr	r0, [pc, #156]	; (8001370 <main+0xd4>)
 80012d2:	f001 f863 	bl	800239c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80012d6:	4828      	ldr	r0, [pc, #160]	; (8001378 <main+0xdc>)
 80012d8:	f003 fc90 	bl	8004bfc <HAL_TIM_Base_Start_IT>

	STEPPERS_Init();
 80012dc:	f005 fcf8 	bl	8006cd0 <STEPPERS_Init>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 14);
 80012e0:	210e      	movs	r1, #14
 80012e2:	2000      	movs	r0, #0
 80012e4:	f005 fe30 	bl	8006f48 <STEPPER_SetSpeed>
		 STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
		 }
		 }
		 */

		if (limitFlag) {
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <main+0xe0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <main+0x62>
			depth = 0;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <main+0xe4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
			printf("Limit Hit\n\r");
 80012f8:	4822      	ldr	r0, [pc, #136]	; (8001384 <main+0xe8>)
 80012fa:	f006 faa5 	bl	8007848 <iprintf>
		 updatedFlag = 0;
		 }
		 }
		 */

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET
 80012fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f002 fa49 	bl	800379c <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d112      	bne.n	8001336 <main+0x9a>
				&& !limitFlag) {
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <main+0xe0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <main+0x9a>
			printf("Going up\n\r");
 800131a:	481b      	ldr	r0, [pc, #108]	; (8001388 <main+0xec>)
 800131c:	f006 fa94 	bl	8007848 <iprintf>
			Stepper1_Dir = DIR_CW;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0xf0>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
			STEPPER_Step_Blocking(STEPPER_MOTOR1, 10, Stepper1_Dir);
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0xf0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	210a      	movs	r1, #10
 800132e:	2000      	movs	r0, #0
 8001330:	f006 f8c4 	bl	80074bc <STEPPER_Step_Blocking>
 8001334:	e018      	b.n	8001368 <main+0xcc>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f002 fa2d 	bl	800379c <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1cf      	bne.n	80012e8 <main+0x4c>
			printf("Going down\n\r");
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <main+0xf4>)
 800134a:	f006 fa7d 	bl	8007848 <iprintf>
			Stepper1_Dir = DIR_CCW;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <main+0xf0>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
			STEPPER_Step_Blocking(STEPPER_MOTOR1, 10, Stepper1_Dir);
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <main+0xf0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	210a      	movs	r1, #10
 800135c:	2000      	movs	r0, #0
 800135e:	f006 f8ad 	bl	80074bc <STEPPER_Step_Blocking>
			limitFlag = 0;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <main+0xe0>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		if (limitFlag) {
 8001368:	e7be      	b.n	80012e8 <main+0x4c>
 800136a:	bf00      	nop
 800136c:	20000400 	.word	0x20000400
 8001370:	200000c4 	.word	0x200000c4
 8001374:	200001fc 	.word	0x200001fc
 8001378:	20000128 	.word	0x20000128
 800137c:	200003fe 	.word	0x200003fe
 8001380:	20000418 	.word	0x20000418
 8001384:	0800854c 	.word	0x0800854c
 8001388:	08008558 	.word	0x08008558
 800138c:	2000041c 	.word	0x2000041c
 8001390:	08008564 	.word	0x08008564

08001394 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2244      	movs	r2, #68	; 0x44
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 faa5 	bl	80078f2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ba:	f002 fa51 	bl	8003860 <HAL_PWREx_ControlVoltageScaling>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013c4:	f000 f9f8 	bl	80017b8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013c8:	2310      	movs	r3, #16
 80013ca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013dc:	2301      	movs	r3, #1
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013e4:	2328      	movs	r3, #40	; 0x28
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fa87 	bl	800390c <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x74>
		Error_Handler();
 8001404:	f000 f9d8 	bl	80017b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2303      	movs	r3, #3
 800140e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800141c:	463b      	mov	r3, r7
 800141e:	2104      	movs	r1, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fe87 	bl	8004134 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x9c>
		Error_Handler();
 800142c:	f000 f9c4 	bl	80017b8 <Error_Handler>
	}
}
 8001430:	bf00      	nop
 8001432:	3758      	adds	r7, #88	; 0x58
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <MX_ADC1_Init+0xc0>)
 8001452:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <MX_ADC1_Init+0xbc>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_ADC1_Init+0xbc>)
 800146e:	2204      	movs	r2, #4
 8001470:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001474:	2200      	movs	r2, #0
 8001476:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_ADC1_Init+0xbc>)
 800147a:	2200      	movs	r2, #0
 800147c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001480:	2201      	movs	r2, #1
 8001482:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_ADC1_Init+0xbc>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_ADC1_Init+0xbc>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_ADC1_Init+0xbc>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_ADC1_Init+0xbc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_ADC1_Init+0xbc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_ADC1_Init+0xbc>)
 80014b0:	f000 fe32 	bl	8002118 <HAL_ADC_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC1_Init+0x86>
		Error_Handler();
 80014ba:	f000 f97d 	bl	80017b8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_ADC1_Init+0xc4>)
 80014c0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c2:	2306      	movs	r3, #6
 80014c4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ca:	237f      	movs	r3, #127	; 0x7f
 80014cc:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ce:	2304      	movs	r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_ADC1_Init+0xbc>)
 80014dc:	f000 ffec 	bl	80024b8 <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC1_Init+0xb2>
		Error_Handler();
 80014e6:	f000 f967 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000c4 	.word	0x200000c4
 80014f8:	50040000 	.word	0x50040000
 80014fc:	2e300800 	.word	0x2e300800

08001500 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001538:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3;
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <MX_TIM2_Init+0xe4>)
 800153c:	2203      	movs	r2, #3
 800153e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001548:	f240 12f3 	movw	r2, #499	; 0x1f3
 800154c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <MX_TIM2_Init+0xe4>)
 800155c:	f003 faf6 	bl	8004b4c <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001566:	f000 f927 	bl	80017b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001574:	4619      	mov	r1, r3
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001578:	f003 fe0c 	bl	8005194 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001582:	f000 f919 	bl	80017b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <MX_TIM2_Init+0xe4>)
 8001588:	f003 fb8c 	bl	8004ca4 <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001592:	f000 f911 	bl	80017b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_TIM2_Init+0xe4>)
 80015a6:	f004 fa63 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f000 f902 	bl	80017b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <MX_TIM2_Init+0xe4>)
 80015cc:	f003 fcce 	bl	8004f6c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80015d6:	f000 f8ef 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3738      	adds	r7, #56	; 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000128 	.word	0x20000128

080015e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <MX_USART2_UART_Init+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800162a:	2300      	movs	r3, #0
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 8001632:	f005 fab6 	bl	8006ba2 <HAL_RS485Ex_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 800163c:	f000 f8bc 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000174 	.word	0x20000174
 8001648:	40004400 	.word	0x40004400

0800164c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <MX_GPIO_Init+0xe8>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a33      	ldr	r2, [pc, #204]	; (8001734 <MX_GPIO_Init+0xe8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <MX_GPIO_Init+0xe8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <MX_GPIO_Init+0xe8>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <MX_GPIO_Init+0xe8>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <MX_GPIO_Init+0xe8>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, motorcontrol1_Pin | motorcontrol2_Pin,
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f002 f896 	bl	80037cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, motorcontrol4_Pin | motorcontrol3_Pin,
 80016a0:	2200      	movs	r2, #0
 80016a2:	2130      	movs	r1, #48	; 0x30
 80016a4:	4824      	ldr	r0, [pc, #144]	; (8001738 <MX_GPIO_Init+0xec>)
 80016a6:	f002 f891 	bl	80037cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : limit_switch_Pin */
	GPIO_InitStruct.Pin = limit_switch_Pin;
 80016aa:	2302      	movs	r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(limit_switch_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	481e      	ldr	r0, [pc, #120]	; (8001738 <MX_GPIO_Init+0xec>)
 80016c0:	f001 ff02 	bl	80034c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol1_Pin motorcontrol2_Pin */
	GPIO_InitStruct.Pin = motorcontrol1_Pin | motorcontrol2_Pin;
 80016c4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80016c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f001 fef2 	bl	80034c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80016e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f001 fee4 	bl	80034c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol4_Pin motorcontrol3_Pin */
	GPIO_InitStruct.Pin = motorcontrol4_Pin | motorcontrol3_Pin;
 8001700:	2330      	movs	r3, #48	; 0x30
 8001702:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <MX_GPIO_Init+0xec>)
 8001718:	f001 fed6 	bl	80034c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2007      	movs	r0, #7
 8001722:	f001 fd8c 	bl	800323e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001726:	2007      	movs	r0, #7
 8001728:	f001 fda5 	bl	8003276 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400

0800173c <HAL_ADC_ConvHalfCpltCallback>:
	}

}

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	//process_data(0, BUFFER_SIZE/2);
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200003fc 	.word	0x200003fc

0800175c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
	//process_data(BUFFER_SIZE/2, BUFFER_SIZE);
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200003fd 	.word	0x200003fd

0800177c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fef7 	bl	8007578 <STEPPER_TMR_OVF_ISR>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	2201      	movs	r2, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <__io_putchar+0x20>)
 80017a6:	f004 f9e7 	bl	8005b78 <HAL_UART_Transmit>

	return ch;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000174 	.word	0x20000174

080017b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b09e      	sub	sp, #120	; 0x78
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2254      	movs	r2, #84	; 0x54
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f006 f860 	bl	80078f2 <memset>
  if(hadc->Instance==ADC1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_ADC_MspInit+0xc0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d143      	bne.n	80018c4 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800183c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001840:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001848:	2301      	movs	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001850:	2310      	movs	r3, #16
 8001852:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001854:	2307      	movs	r3, #7
 8001856:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fe86 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001876:	f7ff ff9f 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 8001880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_ADC_MspInit+0xc4>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018ae:	230b      	movs	r3, #11
 80018b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f001 fe02 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3778      	adds	r7, #120	; 0x78
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	50040000 	.word	0x50040000
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e4:	d113      	bne.n	800190e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_TIM_Base_MspInit+0x44>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_TIM_Base_MspInit+0x44>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	201c      	movs	r0, #28
 8001904:	f001 fc9b 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001908:	201c      	movs	r0, #28
 800190a:	f001 fcb4 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09e      	sub	sp, #120	; 0x78
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2254      	movs	r2, #84	; 0x54
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f005 ffd8 	bl	80078f2 <memset>
  if(huart->Instance==USART2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0xdc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d150      	bne.n	80019ee <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fe0f 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001964:	f7ff ff28 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_UART_MspInit+0xe0>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_UART_MspInit+0xe0>)
 800196e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001972:	6593      	str	r3, [r2, #88]	; 0x58
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_UART_MspInit+0xe0>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_UART_MspInit+0xe0>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_UART_MspInit+0xe0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_UART_MspInit+0xe0>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001998:	2306      	movs	r3, #6
 800199a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f001 fd87 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80019cc:	2303      	movs	r3, #3
 80019ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f001 fd75 	bl	80034c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2026      	movs	r0, #38	; 0x26
 80019e4:	f001 fc2b 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e8:	2026      	movs	r0, #38	; 0x26
 80019ea:	f001 fc44 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3778      	adds	r7, #120	; 0x78
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40004400 	.word	0x40004400
 80019fc:	40021000 	.word	0x40021000

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 f956 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	limitFlag = 1;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <EXTI1_IRQHandler+0x14>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(limit_switch_Pin);
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f001 fecc 	bl	80037fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200003fe 	.word	0x200003fe

08001a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM2_IRQHandler+0x10>)
 8001a72:	f003 f978 	bl	8004d66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000128 	.word	0x20000128

08001a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART2_IRQHandler+0x10>)
 8001a86:	f004 f901 	bl	8005c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000174 	.word	0x20000174

08001a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe53 	bl	8001794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
  }
  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f005 fef6 	bl	8007990 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20010000 	.word	0x20010000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	20000420 	.word	0x20000420
 8001bd8:	20000588 	.word	0x20000588

08001bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffea 	bl	8001bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	; (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 feb5 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fb33 	bl	800129c <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001c44:	0801baf4 	.word	0x0801baf4
  ldr r2, =_sbss
 8001c48:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001c4c:	20000588 	.word	0x20000588

08001c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f001 fae3 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fda6 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 faef 	bl	8003292 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 fab9 	bl	800323e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000424 	.word	0x20000424

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000424 	.word	0x20000424

08001d3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3360      	adds	r3, #96	; 0x60
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <LL_ADC_SetOffset+0x44>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ddc:	bf00      	nop
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	03fff000 	.word	0x03fff000

08001dec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3360      	adds	r3, #96	; 0x60
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3360      	adds	r3, #96	; 0x60
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3330      	adds	r3, #48	; 0x30
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	211f      	movs	r1, #31
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 011f 	and.w	r1, r3, #31
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3314      	adds	r3, #20
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0e5b      	lsrs	r3, r3, #25
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	0d1b      	lsrs	r3, r3, #20
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2107      	movs	r1, #7
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	401a      	ands	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0318 	and.w	r3, r3, #24
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	431a      	orrs	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	0007ffff 	.word	0x0007ffff

08001f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_ADC_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDisableOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDisableOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d101      	bne.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d101      	bne.n	800210a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e126      	b.n	8002380 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fb63 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff19 	bl	8001f90 <LL_ADC_IsDeepPowerDownEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff feff 	bl	8001f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff34 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff18 	bl	8001fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b7f      	ldr	r3, [pc, #508]	; (8002388 <HAL_ADC_Init+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a7f      	ldr	r2, [pc, #508]	; (800238c <HAL_ADC_Init+0x274>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff16 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff76 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80bf 	bne.w	800236e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80bb 	bne.w	800236e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff23 	bl	8002058 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	485d      	ldr	r0, [pc, #372]	; (8002390 <HAL_ADC_Init+0x278>)
 800221a:	f7ff ff1d 	bl	8002058 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	485a      	ldr	r0, [pc, #360]	; (8002394 <HAL_ADC_Init+0x27c>)
 800222c:	f7ff fd86 	bl	8001d3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e5b      	ldrb	r3, [r3, #25]
 8002234:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002240:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002246:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	045b      	lsls	r3, r3, #17
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_ADC_Init+0x280>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff26 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 80022a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d13d      	bne.n	800232a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13a      	bne.n	800232a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	430b      	orrs	r3, r1
 80022dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d118      	bne.n	800231a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800230a:	430a      	orrs	r2, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10c      	bne.n	800234c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f023 010f 	bic.w	r1, r3, #15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
 800234a:	e007      	b.n	800235c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020f 	bic.w	r2, r2, #15
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000000 	.word	0x20000000
 800238c:	053e2d63 	.word	0x053e2d63
 8002390:	50040000 	.word	0x50040000
 8002394:	50040300 	.word	0x50040300
 8002398:	fff0c007 	.word	0xfff0c007

0800239c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe8d 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d167      	bne.n	8002488 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x2a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e063      	b.n	800248e <HAL_ADC_Start_DMA+0xf2>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fc54 	bl	8002c7c <ADC_Enable>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d14f      	bne.n	800247e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f023 0206 	bic.w	r2, r3, #6
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	659a      	str	r2, [r3, #88]	; 0x58
 800240a:	e002      	b.n	8002412 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_ADC_Start_DMA+0xfc>)
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_ADC_Start_DMA+0x100>)
 8002420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_ADC_Start_DMA+0x104>)
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	221c      	movs	r2, #28
 8002430:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0210 	orr.w	r2, r2, #16
 8002448:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3340      	adds	r3, #64	; 0x40
 8002464:	4619      	mov	r1, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f000 ff1e 	bl	80032aa <HAL_DMA_Start_IT>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe14 	bl	80020a4 <LL_ADC_REG_StartConversion>
 800247c:	e006      	b.n	800248c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002486:	e001      	b.n	800248c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002488:	2302      	movs	r3, #2
 800248a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800248c:	7dfb      	ldrb	r3, [r7, #23]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	08002e47 	.word	0x08002e47
 800249c:	08002f1f 	.word	0x08002f1f
 80024a0:	08002f3b 	.word	0x08002f3b

080024a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0b6      	sub	sp, #216	; 0xd8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x22>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e3bb      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x79a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fdf0 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 83a0 	bne.w	8002c34 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d824      	bhi.n	800254e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	3b02      	subs	r3, #2
 800250a:	2b03      	cmp	r3, #3
 800250c:	d81b      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x8e>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_ADC_ConfigChannel+0x5c>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002525 	.word	0x08002525
 8002518:	0800252d 	.word	0x0800252d
 800251c:	08002535 	.word	0x08002535
 8002520:	0800253d 	.word	0x0800253d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002524:	230c      	movs	r3, #12
 8002526:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800252a:	e010      	b.n	800254e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800252c:	2312      	movs	r3, #18
 800252e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002532:	e00c      	b.n	800254e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002534:	2318      	movs	r3, #24
 8002536:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800253a:	e008      	b.n	800254e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800253c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002546:	2306      	movs	r3, #6
 8002548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800254c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800255c:	f7ff fc8a 	bl	8001e74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fdb1 	bl	80020cc <LL_ADC_REG_IsConversionOngoing>
 800256a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fdbd 	bl	80020f2 <LL_ADC_INJ_IsConversionOngoing>
 8002578:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800257c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 81a4 	bne.w	80028ce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 819f 	bne.w	80028ce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	461a      	mov	r2, r3
 800259e:	f7ff fc95 	bl	8001ecc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d00a      	beq.n	80025da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6919      	ldr	r1, [r3, #16]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d4:	f7ff fbe6 	bl	8001da4 <LL_ADC_SetOffset>
 80025d8:	e179      	b.n	80028ce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc03 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x14e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fbf8 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	e01e      	b.n	8002644 <HAL_ADC_ConfigChannel+0x18c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fbed 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800262c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e004      	b.n	8002642 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1a4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	e018      	b.n	800268e <HAL_ADC_ConfigChannel+0x1d6>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e004      	b.n	800268e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268e:	429a      	cmp	r2, r3
 8002690:	d106      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbbc 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fba0 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x214>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fb95 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	e01e      	b.n	800270a <HAL_ADC_ConfigChannel+0x252>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fb8a 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80026ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x26a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	e018      	b.n	8002754 <HAL_ADC_ConfigChannel+0x29c>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800273a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800273e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e004      	b.n	8002754 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800274a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fb59 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2102      	movs	r1, #2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb3d 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x2da>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fb32 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	e01e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x318>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2102      	movs	r1, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fb27 	bl	8001dec <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80027b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80027c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x330>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	e014      	b.n	8002812 <HAL_ADC_ConfigChannel+0x35a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80027fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002812:	429a      	cmp	r2, r3
 8002814:	d106      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2102      	movs	r1, #2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fafa 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2103      	movs	r1, #3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fade 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x398>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2103      	movs	r1, #3
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fad3 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 021f 	and.w	r2, r3, #31
 800284e:	e017      	b.n	8002880 <HAL_ADC_ConfigChannel+0x3c8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2103      	movs	r1, #3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fac8 	bl	8001dec <LL_ADC_GetOffsetChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800286c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e003      	b.n	800287e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x3e0>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	e011      	b.n	80028bc <HAL_ADC_ConfigChannel+0x404>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028bc:	429a      	cmp	r2, r3
 80028be:	d106      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2103      	movs	r1, #3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff faa5 	bl	8001e18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fbc0 	bl	8002058 <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8140 	bne.w	8002b60 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	461a      	mov	r2, r3
 80028ee:	f7ff fb19 	bl	8001f24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a8f      	ldr	r2, [pc, #572]	; (8002b34 <HAL_ADC_ConfigChannel+0x67c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	f040 8131 	bne.w	8002b60 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10b      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x46e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	3301      	adds	r3, #1
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2b09      	cmp	r3, #9
 800291c:	bf94      	ite	ls
 800291e:	2301      	movls	r3, #1
 8002920:	2300      	movhi	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e019      	b.n	800295a <HAL_ADC_ConfigChannel+0x4a2>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e003      	b.n	800294a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2b09      	cmp	r3, #9
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295a:	2b00      	cmp	r3, #0
 800295c:	d079      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d107      	bne.n	800297a <HAL_ADC_ConfigChannel+0x4c2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	069b      	lsls	r3, r3, #26
 8002974:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002978:	e015      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x4ee>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800298c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e003      	b.n	800299e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x50e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	e017      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x53e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029de:	2320      	movs	r3, #32
 80029e0:	e003      	b.n	80029ea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x564>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	051b      	lsls	r3, r3, #20
 8002a1a:	e018      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x596>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	e081      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x5b6>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6c:	e015      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x5e2>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e003      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	069b      	lsls	r3, r3, #26
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x602>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0e9b      	lsrs	r3, r3, #26
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	e017      	b.n	8002aea <HAL_ADC_ConfigChannel+0x632>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	61bb      	str	r3, [r7, #24]
  return result;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e003      	b.n	8002ade <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	ea42 0103 	orr.w	r1, r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x65e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	3301      	adds	r3, #1
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b14:	e01e      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x69c>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	60fb      	str	r3, [r7, #12]
  return result;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e006      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x688>
 8002b32:	bf00      	nop
 8002b34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 021f 	and.w	r2, r3, #31
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b1e      	subs	r3, #30
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7ff f9b6 	bl	8001ecc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_ADC_ConfigChannel+0x7a4>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d06c      	beq.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b6c:	483c      	ldr	r0, [pc, #240]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b6e:	f7ff f90b 	bl	8001d88 <LL_ADC_GetCommonPathInternalCh>
 8002b72:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3a      	ldr	r2, [pc, #232]	; (8002c64 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d127      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d121      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a35      	ldr	r2, [pc, #212]	; (8002c68 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d157      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	482f      	ldr	r0, [pc, #188]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ba2:	f7ff f8de 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_ADC_ConfigChannel+0x7b4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bce:	e03a      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d113      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_ADC_ConfigChannel+0x7b0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12a      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4819      	ldr	r0, [pc, #100]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bfc:	f7ff f8b1 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c00:	e021      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d11c      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c2e:	f7ff f898 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	37d8      	adds	r7, #216	; 0xd8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	80080000 	.word	0x80080000
 8002c60:	50040300 	.word	0x50040300
 8002c64:	c7520000 	.word	0xc7520000
 8002c68:	50040000 	.word	0x50040000
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	053e2d63 	.word	0x053e2d63
 8002c74:	cb840000 	.word	0xcb840000
 8002c78:	80000001 	.word	0x80000001

08002c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f9e3 	bl	8002058 <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d169      	bne.n	8002d6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <ADC_Enable+0xfc>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e055      	b.n	8002d6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f99e 	bl	8002008 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ccc:	482b      	ldr	r0, [pc, #172]	; (8002d7c <ADC_Enable+0x100>)
 8002cce:	f7ff f85b 	bl	8001d88 <LL_ADC_GetCommonPathInternalCh>
 8002cd2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <ADC_Enable+0x104>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <ADC_Enable+0x108>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cf6:	e002      	b.n	8002cfe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f9      	bne.n	8002cf8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d04:	f7ff f80e 	bl	8001d24 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0a:	e028      	b.n	8002d5e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f9a1 	bl	8002058 <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f971 	bl	8002008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d26:	f7fe fffd 	bl	8001d24 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d914      	bls.n	8002d5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00d      	beq.n	8002d5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e007      	b.n	8002d6e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d1cf      	bne.n	8002d0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	8000003f 	.word	0x8000003f
 8002d7c:	50040300 	.word	0x50040300
 8002d80:	20000000 	.word	0x20000000
 8002d84:	053e2d63 	.word	0x053e2d63

08002d88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f972 	bl	800207e <LL_ADC_IsDisableOngoing>
 8002d9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f959 	bl	8002058 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d047      	beq.n	8002e3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d144      	bne.n	8002e3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030d 	and.w	r3, r3, #13
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10c      	bne.n	8002dda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f933 	bl	8002030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe ffa7 	bl	8001d24 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd8:	e029      	b.n	8002e2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e023      	b.n	8002e3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002df6:	f7fe ff95 	bl	8001d24 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d914      	bls.n	8002e2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1dc      	bne.n	8002df6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d14b      	bne.n	8002ef8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ffe5 	bl	8001e4e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d032      	beq.n	8002ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d12b      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11f      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
 8002ebc:	e018      	b.n	8002ef0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7fe fc33 	bl	800175c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ef6:	e00e      	b.n	8002f16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff facd 	bl	80024a4 <HAL_ADC_ErrorCallback>
}
 8002f0a:	e004      	b.n	8002f16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe fc05 	bl	800173c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fa9f 	bl	80024a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <LL_ADC_StartCalibration>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e04d      	b.n	8003080 <HAL_ADCEx_Calibration_Start+0xb8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fecb 	bl	8002d88 <ADC_Disable>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d136      	bne.n	800306a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003004:	f023 0302 	bic.w	r3, r3, #2
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ffa9 	bl	8002f6e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800301c:	e014      	b.n	8003048 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3301      	adds	r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800302a:	d30d      	bcc.n	8003048 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f023 0312 	bic.w	r3, r3, #18
 8003034:	f043 0210 	orr.w	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01b      	b.n	8003080 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ffa7 	bl	8002fa0 <LL_ADC_IsCalibrationOnGoing>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e2      	bne.n	800301e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f023 0303 	bic.w	r3, r3, #3
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
 8003068:	e005      	b.n	8003076 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	60d3      	str	r3, [r2, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	; (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	; (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	; (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_Start_IT+0x20>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e04b      	b.n	8003362 <HAL_DMA_Start_IT+0xb8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d13a      	bne.n	8003354 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f8b0 	bl	8003468 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 020e 	orr.w	r2, r2, #14
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e00f      	b.n	8003342 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0204 	bic.w	r2, r2, #4
 8003330:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 020a 	orr.w	r2, r2, #10
 8003340:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e005      	b.n	8003360 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800335c:	2302      	movs	r3, #2
 800335e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003360:	7dfb      	ldrb	r3, [r7, #23]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d008      	beq.n	8003394 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e022      	b.n	80033da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 020e 	bic.w	r2, r2, #14
 80033a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	f003 021c 	and.w	r2, r3, #28
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d005      	beq.n	800340a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e029      	b.n	800345e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020e 	bic.w	r2, r2, #14
 8003418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f003 021c 	and.w	r2, r3, #28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
    }
  }
  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 021c 	and.w	r2, r3, #28
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d108      	bne.n	80034ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034aa:	e007      	b.n	80034bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d6:	e148      	b.n	800376a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 813a 	beq.w	8003764 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d005      	beq.n	8003508 <HAL_GPIO_Init+0x40>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d130      	bne.n	800356a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800353e:	2201      	movs	r2, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0201 	and.w	r2, r3, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d017      	beq.n	80035a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d123      	bne.n	80035fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	08da      	lsrs	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3208      	adds	r2, #8
 80035f4:	6939      	ldr	r1, [r7, #16]
 80035f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	2203      	movs	r2, #3
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0203 	and.w	r2, r3, #3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8094 	beq.w	8003764 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363c:	4b52      	ldr	r3, [pc, #328]	; (8003788 <HAL_GPIO_Init+0x2c0>)
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	4a51      	ldr	r2, [pc, #324]	; (8003788 <HAL_GPIO_Init+0x2c0>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6613      	str	r3, [r2, #96]	; 0x60
 8003648:	4b4f      	ldr	r3, [pc, #316]	; (8003788 <HAL_GPIO_Init+0x2c0>)
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003654:	4a4d      	ldr	r2, [pc, #308]	; (800378c <HAL_GPIO_Init+0x2c4>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3302      	adds	r3, #2
 800365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	220f      	movs	r2, #15
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800367e:	d00d      	beq.n	800369c <HAL_GPIO_Init+0x1d4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a43      	ldr	r2, [pc, #268]	; (8003790 <HAL_GPIO_Init+0x2c8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <HAL_GPIO_Init+0x1d0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_GPIO_Init+0x2cc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_GPIO_Init+0x1cc>
 8003690:	2302      	movs	r3, #2
 8003692:	e004      	b.n	800369e <HAL_GPIO_Init+0x1d6>
 8003694:	2307      	movs	r3, #7
 8003696:	e002      	b.n	800369e <HAL_GPIO_Init+0x1d6>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_GPIO_Init+0x1d6>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4093      	lsls	r3, r2
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ae:	4937      	ldr	r1, [pc, #220]	; (800378c <HAL_GPIO_Init+0x2c4>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036e0:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800370a:	4a23      	ldr	r2, [pc, #140]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800375e:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <HAL_GPIO_Init+0x2d0>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f aeaf 	bne.w	80034d8 <HAL_GPIO_Init+0x10>
  }
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40021000 	.word	0x40021000
 800378c:	40010000 	.word	0x40010000
 8003790:	48000400 	.word	0x48000400
 8003794:	48000800 	.word	0x48000800
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e001      	b.n	80037be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037dc:	787b      	ldrb	r3, [r7, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003812:	4a05      	ldr	r2, [pc, #20]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f806 	bl	800382c <HAL_GPIO_EXTI_Callback>
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <HAL_PWREx_GetVoltageRange+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386e:	d130      	bne.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003870:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d038      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2232      	movs	r2, #50	; 0x32
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9b      	lsrs	r3, r3, #18
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a4:	e002      	b.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ac:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d102      	bne.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f2      	bne.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d110      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e00f      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d007      	beq.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83

0800390c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bc02 	b.w	8004124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392a:	4b94      	ldr	r3, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80e4 	beq.w	8003b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_RCC_OscConfig+0x4c>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	f040 808b 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b01      	cmp	r3, #1
 8003954:	f040 8087 	bne.w	8003a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x64>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e3d9      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_RCC_OscConfig+0x7e>
 8003980:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	e005      	b.n	8003996 <HAL_RCC_OscConfig+0x8a>
 800398a:	4b7c      	ldr	r3, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 800398c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003996:	4293      	cmp	r3, r2
 8003998:	d223      	bcs.n	80039e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd8c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e3ba      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b73      	ldr	r3, [pc, #460]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a72      	ldr	r2, [pc, #456]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	496d      	ldr	r1, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	4968      	ldr	r1, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e025      	b.n	8003a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e2:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4960      	ldr	r1, [pc, #384]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	495b      	ldr	r1, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd4c 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e37a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2e:	f000 fc81 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	4950      	ldr	r1, [pc, #320]	; (8003b80 <HAL_RCC_OscConfig+0x274>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a4e:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x27c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f916 	bl	8001c84 <HAL_InitTick>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d052      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	e35e      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a6e:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a42      	ldr	r2, [pc, #264]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7a:	f7fe f953 	bl	8001d24 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a82:	f7fe f94f 	bl	8001d24 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e347      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4930      	ldr	r1, [pc, #192]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	492b      	ldr	r1, [pc, #172]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e01a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe f920 	bl	8001d24 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae8:	f7fe f91c 	bl	8001d24 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e314      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1dc>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d073      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x21c>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d10e      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d063      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d15f      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e2f1      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x24c>
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e025      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d114      	bne.n	8003b8c <HAL_RCC_OscConfig+0x280>
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a02      	ldr	r2, [pc, #8]	; (8003b7c <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e013      	b.n	8003ba4 <HAL_RCC_OscConfig+0x298>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0801ba4c 	.word	0x0801ba4c
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004
 8003b8c:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b9d      	ldr	r3, [pc, #628]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9c      	ldr	r2, [pc, #624]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f8ba 	bl	8001d24 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f8b6 	bl	8001d24 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e2ae      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2a8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f8a6 	bl	8001d24 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe f8a2 	bl	8001d24 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e29a      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bee:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d0>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d060      	beq.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x310>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d116      	bne.n	8003c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_OscConfig+0x328>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e277      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4973      	ldr	r1, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e040      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fe f861 	bl	8001d24 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fe f85d 	bl	8001d24 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e255      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	495f      	ldr	r1, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	e018      	b.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fe f83d 	bl	8001d24 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe f839 	bl	8001d24 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e231      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d03c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	4a4a      	ldr	r2, [pc, #296]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe f818 	bl	8001d24 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f814 	bl	8001d24 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e20c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3ec>
 8003d18:	e01b      	b.n	8003d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fffb 	bl	8001d24 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd fff7 	bl	8001d24 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1ef      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ef      	bne.n	8003d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80a6 	beq.w	8003eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d118      	bne.n	8003dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da4:	f7fd ffbe 	bl	8001d24 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd ffba 	bl	8001d24 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1b2      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCC_OscConfig+0x508>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d108      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4d8>
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de2:	e029      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d115      	bne.n	8003e18 <HAL_RCC_OscConfig+0x50c>
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x52c>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	4b9a      	ldr	r3, [pc, #616]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a99      	ldr	r2, [pc, #612]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e28:	4b96      	ldr	r3, [pc, #600]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a95      	ldr	r2, [pc, #596]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd ff70 	bl	8001d24 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd ff6c 	bl	8001d24 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e162      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4b89      	ldr	r3, [pc, #548]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_RCC_OscConfig+0x53c>
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd ff59 	bl	8001d24 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd ff55 	bl	8001d24 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e14b      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e8c:	4b7d      	ldr	r3, [pc, #500]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ed      	bne.n	8003e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b78      	ldr	r3, [pc, #480]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03c      	beq.n	8003f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec0:	4b70      	ldr	r3, [pc, #448]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec6:	4a6f      	ldr	r2, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd ff28 	bl	8001d24 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed8:	f7fd ff24 	bl	8001d24 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e11c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eea:	4b66      	ldr	r3, [pc, #408]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ef      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x5cc>
 8003ef8:	e01b      	b.n	8003f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0a:	f7fd ff0b 	bl	8001d24 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f12:	f7fd ff07 	bl	8001d24 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0ff      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ef      	bne.n	8003f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80f3 	beq.w	8004122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f040 80c9 	bne.w	80040d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f46:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0203 	and.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d12c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d123      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d113      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d06b      	beq.n	800408c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d062      	beq.n	8004080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fba:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0ac      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd6:	f7fd fea5 	bl	8001d24 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fea1 	bl	8001d24 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e099      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_OscConfig+0x77c>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800400c:	3a01      	subs	r2, #1
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004016:	0212      	lsls	r2, r2, #8
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800401e:	0852      	lsrs	r2, r2, #1
 8004020:	3a01      	subs	r2, #1
 8004022:	0552      	lsls	r2, r2, #21
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800402a:	0852      	lsrs	r2, r2, #1
 800402c:	3a01      	subs	r2, #1
 800402e:	0652      	lsls	r2, r2, #25
 8004030:	4311      	orrs	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004036:	06d2      	lsls	r2, r2, #27
 8004038:	430a      	orrs	r2, r1
 800403a:	4912      	ldr	r1, [pc, #72]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004058:	f7fd fe64 	bl	8001d24 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd fe60 	bl	8001d24 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e058      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_RCC_OscConfig+0x778>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	e050      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e04f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
 8004084:	40021000 	.word	0x40021000
 8004088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d144      	bne.n	8004122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <HAL_RCC_OscConfig+0x820>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b0:	f7fd fe38 	bl	8001d24 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fe34 	bl	8001d24 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e02c      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x7ac>
 80040d6:	e024      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d01f      	beq.n	800411e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_RCC_OscConfig+0x820>)
 80040e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd fe1b 	bl	8001d24 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fd fe17 	bl	8001d24 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4905      	ldr	r1, [pc, #20]	; (800412c <HAL_RCC_OscConfig+0x820>)
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x824>)
 8004118:	4013      	ands	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
 800411c:	e001      	b.n	8004122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	feeefffc 	.word	0xfeeefffc

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0e7      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b75      	ldr	r3, [pc, #468]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b72      	ldr	r3, [pc, #456]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4970      	ldr	r1, [pc, #448]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b6e      	ldr	r3, [pc, #440]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cf      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d010      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	4b66      	ldr	r3, [pc, #408]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004190:	429a      	cmp	r2, r3
 8004192:	d908      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004194:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4960      	ldr	r1, [pc, #384]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04c      	beq.n	800424c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d121      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0a6      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d2:	4b54      	ldr	r3, [pc, #336]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e09a      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e08e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fa:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e086      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4943      	ldr	r1, [pc, #268]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd fd82 	bl	8001d24 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd fd7e 	bl	8001d24 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e06e      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004264:	429a      	cmp	r2, r3
 8004266:	d208      	bcs.n	800427a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	492b      	ldr	r1, [pc, #172]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d210      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 0207 	bic.w	r2, r3, #7
 8004290:	4923      	ldr	r1, [pc, #140]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b21      	ldr	r3, [pc, #132]	; (8004320 <HAL_RCC_ClockConfig+0x1ec>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e036      	b.n	8004318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4918      	ldr	r1, [pc, #96]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4910      	ldr	r1, [pc, #64]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e8:	f000 f824 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	490b      	ldr	r1, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1f4>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1f8>)
 8004306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1fc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fcb9 	bl	8001c84 <HAL_InitTick>
 8004312:	4603      	mov	r3, r0
 8004314:	72fb      	strb	r3, [r7, #11]

  return status;
 8004316:	7afb      	ldrb	r3, [r7, #11]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
 8004328:	0801ba4c 	.word	0x0801ba4c
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11e      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004368:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e005      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e004      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d134      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0xa6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xac>
 80043d8:	e005      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0e5b      	lsrs	r3, r3, #25
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	3301      	adds	r3, #1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800442c:	69bb      	ldr	r3, [r7, #24]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	0801ba64 	.word	0x0801ba64
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCC_GetPCLK1Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	0801ba5c 	.word	0x0801ba5c

08004490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004494:	f7ff ffda 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0adb      	lsrs	r3, r3, #11
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	0801ba5c 	.word	0x0801ba5c

080044bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d4:	f7ff f9b6 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 80044d8:	6178      	str	r0, [r7, #20]
 80044da:	e014      	b.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	; 0x58
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044f4:	f7ff f9a6 	bl	8003844 <HAL_PWREx_GetVoltageRange>
 80044f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d10b      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d919      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2ba0      	cmp	r3, #160	; 0xa0
 8004518:	d902      	bls.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e013      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e010      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d902      	bls.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800452c:	2303      	movs	r3, #3
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e00a      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d102      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004538:	2302      	movs	r3, #2
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e004      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b70      	cmp	r3, #112	; 0x70
 8004542:	d101      	bne.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 0207 	bic.w	r2, r3, #7
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40022000 	.word	0x40022000

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004584:	2300      	movs	r3, #0
 8004586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004588:	2300      	movs	r3, #0
 800458a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a0:	d01a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a6:	d814      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4a5c      	ldr	r2, [pc, #368]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045be:	e00c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9ce 	bl	8004968 <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
      break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e0:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	494e      	ldr	r1, [pc, #312]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045f6:	e001      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809e 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800460e:	4b46      	ldr	r3, [pc, #280]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463c:	2301      	movs	r3, #1
 800463e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004640:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800464c:	f7fd fb6a 	bl	8001d24 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fd fb66 	bl	8001d24 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	74fb      	strb	r3, [r7, #19]
        break;
 8004666:	e005      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d15a      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01e      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d019      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fb26 	bl	8001d24 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fd fb22 	bl	8001d24 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	74fb      	strb	r3, [r7, #19]
            break;
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ec      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	4904      	ldr	r1, [pc, #16]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	74bb      	strb	r3, [r7, #18]
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004734:	7c7b      	ldrb	r3, [r7, #17]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473a:	4b8a      	ldr	r3, [pc, #552]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	4a89      	ldr	r2, [pc, #548]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004752:	4b84      	ldr	r3, [pc, #528]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f023 0203 	bic.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	4980      	ldr	r1, [pc, #512]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004774:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 020c 	bic.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	4978      	ldr	r1, [pc, #480]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004796:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	496f      	ldr	r1, [pc, #444]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	4967      	ldr	r1, [pc, #412]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047da:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	495e      	ldr	r1, [pc, #376]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	4956      	ldr	r1, [pc, #344]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d028      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004840:	4b48      	ldr	r3, [pc, #288]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4945      	ldr	r1, [pc, #276]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485e:	d106      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486a:	60d3      	str	r3, [r2, #12]
 800486c:	e011      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004876:	d10c      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2101      	movs	r1, #1
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f872 	bl	8004968 <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d028      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	492d      	ldr	r1, [pc, #180]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4a28      	ldr	r2, [pc, #160]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c8:	60d3      	str	r3, [r2, #12]
 80048ca:	e011      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f843 	bl	8004968 <RCCEx_PLLSAI1_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01c      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f820 	bl	8004968 <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4904      	ldr	r1, [pc, #16]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004958:	7cbb      	ldrb	r3, [r7, #18]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000

08004968 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004976:	4b74      	ldr	r3, [pc, #464]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004982:	4b71      	ldr	r3, [pc, #452]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0203 	and.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d10d      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
       ||
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800499a:	4b6b      	ldr	r3, [pc, #428]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
       ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d047      	beq.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	e044      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d018      	beq.n	80049ee <RCCEx_PLLSAI1_Config+0x86>
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d825      	bhi.n	8004a0c <RCCEx_PLLSAI1_Config+0xa4>
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d002      	beq.n	80049ca <RCCEx_PLLSAI1_Config+0x62>
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d009      	beq.n	80049dc <RCCEx_PLLSAI1_Config+0x74>
 80049c8:	e020      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ca:	4b5f      	ldr	r3, [pc, #380]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11d      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049da:	e01a      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049dc:	4b5a      	ldr	r3, [pc, #360]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d116      	bne.n	8004a16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ec:	e013      	b.n	8004a16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ee:	4b56      	ldr	r3, [pc, #344]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049fa:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a0a:	e006      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a10:	e004      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a12:	bf00      	nop
 8004a14:	e002      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a16:	bf00      	nop
 8004a18:	e000      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10d      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a22:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	430b      	orrs	r3, r1
 8004a38:	4943      	ldr	r1, [pc, #268]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d17c      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a44:	4b40      	ldr	r3, [pc, #256]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3f      	ldr	r2, [pc, #252]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fd f968 	bl	8001d24 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a58:	f7fd f964 	bl	8001d24 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ef      	bne.n	8004a58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d15f      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6892      	ldr	r2, [r2, #8]
 8004a94:	0211      	lsls	r1, r2, #8
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	06d2      	lsls	r2, r2, #27
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	492a      	ldr	r1, [pc, #168]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	610b      	str	r3, [r1, #16]
 8004aa4:	e027      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d112      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	0211      	lsls	r1, r2, #8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6912      	ldr	r2, [r2, #16]
 8004ac2:	0852      	lsrs	r2, r2, #1
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	0552      	lsls	r2, r2, #21
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	491f      	ldr	r1, [pc, #124]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	610b      	str	r3, [r1, #16]
 8004ad0:	e011      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	0211      	lsls	r1, r2, #8
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6952      	ldr	r2, [r2, #20]
 8004ae8:	0852      	lsrs	r2, r2, #1
 8004aea:	3a01      	subs	r2, #1
 8004aec:	0652      	lsls	r2, r2, #25
 8004aee:	430a      	orrs	r2, r1
 8004af0:	4915      	ldr	r1, [pc, #84]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fd f90f 	bl	8001d24 <HAL_GetTick>
 8004b06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b08:	e009      	b.n	8004b1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0a:	f7fd f90b 	bl	8001d24 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d902      	bls.n	8004b1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1c:	e005      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000

08004b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e049      	b.n	8004bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc feae 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f000 fbf4 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d001      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e03b      	b.n	8004c8c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_TIM_Base_Start_IT+0x4e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIM_Base_Start_IT+0x4e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_TIM_Base_Start_IT+0xa0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d115      	bne.n	8004c76 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b06      	cmp	r3, #6
 8004c5a:	d015      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x8c>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d011      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	e008      	b.n	8004c88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e000      	b.n	8004c8a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	00010007 	.word	0x00010007

08004ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e049      	b.n	8004d4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f841 	bl	8004d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f000 fb48 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01b      	beq.n	8004dca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0202 	mvn.w	r2, #2
 8004d9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fac2 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004db6:	e005      	b.n	8004dc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fab4 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fac5 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01b      	beq.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0204 	mvn.w	r2, #4
 8004de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fa9c 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004e02:	e005      	b.n	8004e10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fa8e 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa9f 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d020      	beq.n	8004e62 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01b      	beq.n	8004e62 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0208 	mvn.w	r2, #8
 8004e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2204      	movs	r2, #4
 8004e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa76 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004e4e:	e005      	b.n	8004e5c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fa68 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa79 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01b      	beq.n	8004eae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0210 	mvn.w	r2, #16
 8004e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2208      	movs	r2, #8
 8004e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa50 	bl	800533a <HAL_TIM_IC_CaptureCallback>
 8004e9a:	e005      	b.n	8004ea8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fa42 	bl	8005326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa53 	bl	800534e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0201 	mvn.w	r2, #1
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fc fc55 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fe2d 	bl	8005b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fe25 	bl	8005b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa12 	bl	8005362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0220 	mvn.w	r2, #32
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fded 	bl	8005b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e0ff      	b.n	800518a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b14      	cmp	r3, #20
 8004f96:	f200 80f0 	bhi.w	800517a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	0800517b 	.word	0x0800517b
 8004fa8:	0800517b 	.word	0x0800517b
 8004fac:	0800517b 	.word	0x0800517b
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	0800517b 	.word	0x0800517b
 8004fb8:	0800517b 	.word	0x0800517b
 8004fbc:	0800517b 	.word	0x0800517b
 8004fc0:	08005077 	.word	0x08005077
 8004fc4:	0800517b 	.word	0x0800517b
 8004fc8:	0800517b 	.word	0x0800517b
 8004fcc:	0800517b 	.word	0x0800517b
 8004fd0:	080050b7 	.word	0x080050b7
 8004fd4:	0800517b 	.word	0x0800517b
 8004fd8:	0800517b 	.word	0x0800517b
 8004fdc:	0800517b 	.word	0x0800517b
 8004fe0:	080050f9 	.word	0x080050f9
 8004fe4:	0800517b 	.word	0x0800517b
 8004fe8:	0800517b 	.word	0x0800517b
 8004fec:	0800517b 	.word	0x0800517b
 8004ff0:	08005139 	.word	0x08005139
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fa20 	bl	8005440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0208 	orr.w	r2, r2, #8
 800500e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6999      	ldr	r1, [r3, #24]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	619a      	str	r2, [r3, #24]
      break;
 8005032:	e0a5      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fa7c 	bl	8005538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	619a      	str	r2, [r3, #24]
      break;
 8005074:	e084      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fad5 	bl	800562c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0208 	orr.w	r2, r2, #8
 8005090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0204 	bic.w	r2, r2, #4
 80050a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69d9      	ldr	r1, [r3, #28]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	61da      	str	r2, [r3, #28]
      break;
 80050b4:	e064      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fb2d 	bl	800571c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69d9      	ldr	r1, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	021a      	lsls	r2, r3, #8
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	61da      	str	r2, [r3, #28]
      break;
 80050f6:	e043      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fb6a 	bl	80057d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0208 	orr.w	r2, r2, #8
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005136:	e023      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fba2 	bl	8005888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005178:	e002      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
      break;
 800517e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop

08005194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIM_ConfigClockSource+0x1c>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e0b6      	b.n	800531e <HAL_TIM_ConfigClockSource+0x18a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d03e      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xd8>
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f2:	f200 8087 	bhi.w	8005304 <HAL_TIM_ConfigClockSource+0x170>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	f000 8086 	beq.w	800530a <HAL_TIM_ConfigClockSource+0x176>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	d87f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 8005204:	2b70      	cmp	r3, #112	; 0x70
 8005206:	d01a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0xaa>
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d87b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 800520c:	2b60      	cmp	r3, #96	; 0x60
 800520e:	d050      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x11e>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d877      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 8005214:	2b50      	cmp	r3, #80	; 0x50
 8005216:	d03c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xfe>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d873      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d058      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x13e>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d86f      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 8005224:	2b30      	cmp	r3, #48	; 0x30
 8005226:	d064      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15e>
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d86b      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 800522c:	2b20      	cmp	r3, #32
 800522e:	d060      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15e>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d867      	bhi.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15e>
 8005238:	2b10      	cmp	r3, #16
 800523a:	d05a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x15e>
 800523c:	e062      	b.n	8005304 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	f000 fbef 	bl	8005a30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04f      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	f000 fbd8 	bl	8005a30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e03c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fb4c 	bl	800593c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	; 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fba5 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80052b0:	e02c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 fb6b 	bl	800599a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	; 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fb95 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80052d0:	e01c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fb2c 	bl	800593c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fb85 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 80052f0:	e00c      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 fb7c 	bl	80059fa <TIM_ITRx_SetConfig>
      break;
 8005302:	e003      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      break;
 8005308:	e000      	b.n	800530c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800530a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <TIM_Base_SetConfig+0xbc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x20>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a21      	ldr	r2, [pc, #132]	; (8005434 <TIM_Base_SetConfig+0xbc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x52>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x52>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <TIM_Base_SetConfig+0xc0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x52>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <TIM_Base_SetConfig+0xc4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <TIM_Base_SetConfig+0xbc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <TIM_Base_SetConfig+0xa0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <TIM_Base_SetConfig+0xc0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0xa0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <TIM_Base_SetConfig+0xc4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400

08005440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f023 0201 	bic.w	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0302 	bic.w	r3, r3, #2
 800548c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a24      	ldr	r2, [pc, #144]	; (800552c <TIM_OC1_SetConfig+0xec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_OC1_SetConfig+0x70>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a23      	ldr	r2, [pc, #140]	; (8005530 <TIM_OC1_SetConfig+0xf0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC1_SetConfig+0x70>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a22      	ldr	r2, [pc, #136]	; (8005534 <TIM_OC1_SetConfig+0xf4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10c      	bne.n	80054ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0308 	bic.w	r3, r3, #8
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0304 	bic.w	r3, r3, #4
 80054c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <TIM_OC1_SetConfig+0xec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_OC1_SetConfig+0xa2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a16      	ldr	r2, [pc, #88]	; (8005530 <TIM_OC1_SetConfig+0xf0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_OC1_SetConfig+0xa2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <TIM_OC1_SetConfig+0xf4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d111      	bne.n	8005506 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400

08005538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f023 0210 	bic.w	r2, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <TIM_OC2_SetConfig+0xe8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d10d      	bne.n	80055b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a19      	ldr	r2, [pc, #100]	; (8005620 <TIM_OC2_SetConfig+0xe8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_OC2_SetConfig+0x98>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a18      	ldr	r2, [pc, #96]	; (8005624 <TIM_OC2_SetConfig+0xec>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC2_SetConfig+0x98>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <TIM_OC2_SetConfig+0xf0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d113      	bne.n	80055f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a21      	ldr	r2, [pc, #132]	; (8005710 <TIM_OC3_SetConfig+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10d      	bne.n	80056aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a18      	ldr	r2, [pc, #96]	; (8005710 <TIM_OC3_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_OC3_SetConfig+0x96>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a17      	ldr	r2, [pc, #92]	; (8005714 <TIM_OC3_SetConfig+0xe8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC3_SetConfig+0x96>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a16      	ldr	r2, [pc, #88]	; (8005718 <TIM_OC3_SetConfig+0xec>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d113      	bne.n	80056ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400

0800571c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a14      	ldr	r2, [pc, #80]	; (80057cc <TIM_OC4_SetConfig+0xb0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_OC4_SetConfig+0x74>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <TIM_OC4_SetConfig+0xb4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_OC4_SetConfig+0x74>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <TIM_OC4_SetConfig+0xb8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d109      	bne.n	80057a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	019b      	lsls	r3, r3, #6
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400

080057d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800581c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a13      	ldr	r2, [pc, #76]	; (800587c <TIM_OC5_SetConfig+0xa4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_OC5_SetConfig+0x6a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a12      	ldr	r2, [pc, #72]	; (8005880 <TIM_OC5_SetConfig+0xa8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_OC5_SetConfig+0x6a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a11      	ldr	r2, [pc, #68]	; (8005884 <TIM_OC5_SetConfig+0xac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d109      	bne.n	8005856 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	021b      	lsls	r3, r3, #8
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400

08005888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	051b      	lsls	r3, r3, #20
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a14      	ldr	r2, [pc, #80]	; (8005930 <TIM_OC6_SetConfig+0xa8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_OC6_SetConfig+0x6c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a13      	ldr	r2, [pc, #76]	; (8005934 <TIM_OC6_SetConfig+0xac>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC6_SetConfig+0x6c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a12      	ldr	r2, [pc, #72]	; (8005938 <TIM_OC6_SetConfig+0xb0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d109      	bne.n	8005908 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	029b      	lsls	r3, r3, #10
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400

0800593c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0201 	bic.w	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 030a 	bic.w	r3, r3, #10
 8005978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599a:	b480      	push	{r7}
 800599c:	b087      	sub	sp, #28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f023 0210 	bic.w	r2, r3, #16
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f043 0307 	orr.w	r3, r3, #7
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	609a      	str	r2, [r3, #8]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	021a      	lsls	r2, r3, #8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e04f      	b.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d108      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d004      	beq.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10c      	bne.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40014000 	.word	0x40014000

08005b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d178      	bne.n	8005c82 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UART_Transmit+0x24>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e071      	b.n	8005c84 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2221      	movs	r2, #33	; 0x21
 8005bac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bae:	f7fc f8b9 	bl	8001d24 <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d108      	bne.n	8005be0 <HAL_UART_Transmit+0x68>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e003      	b.n	8005be8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005be8:	e030      	b.n	8005c4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2180      	movs	r1, #128	; 0x80
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fec9 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e03c      	b.n	8005c84 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	3302      	adds	r3, #2
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e008      	b.n	8005c3a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	b292      	uxth	r2, r2
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1c8      	bne.n	8005bea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2140      	movs	r1, #64	; 0x40
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fe92 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e005      	b.n	8005c84 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b0ba      	sub	sp, #232	; 0xe8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cba:	4013      	ands	r3, r2
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d115      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00f      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 82ae 	beq.w	8006246 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
      }
      return;
 8005cf2:	e2a8      	b.n	8006246 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8117 	beq.w	8005f2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d0e:	4b85      	ldr	r3, [pc, #532]	; (8005f24 <HAL_UART_IRQHandler+0x298>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 810a 	beq.w	8005f2c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d011      	beq.n	8005d48 <HAL_UART_IRQHandler+0xbc>
 8005d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2201      	movs	r2, #1
 8005d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3e:	f043 0201 	orr.w	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d011      	beq.n	8005d78 <HAL_UART_IRQHandler+0xec>
 8005d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2202      	movs	r2, #2
 8005d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d6e:	f043 0204 	orr.w	r2, r3, #4
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_UART_IRQHandler+0x11c>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2204      	movs	r2, #4
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9e:	f043 0202 	orr.w	r2, r3, #2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d017      	beq.n	8005de4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dda:	f043 0208 	orr.w	r2, r3, #8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d012      	beq.n	8005e16 <HAL_UART_IRQHandler+0x18a>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8214 	beq.w	800624a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d005      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d04f      	beq.n	8005f0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fdf3 	bl	8006a5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d141      	bne.n	8005f06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3308      	adds	r3, #8
 8005e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1d9      	bne.n	8005e82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d013      	beq.n	8005efe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_UART_IRQHandler+0x29c>)
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fd fa7f 	bl	80033e6 <HAL_DMA_Abort_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d017      	beq.n	8005f1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efc:	e00f      	b.n	8005f1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f9b8 	bl	8006274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	e00b      	b.n	8005f1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f9b4 	bl	8006274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0c:	e007      	b.n	8005f1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9b0 	bl	8006274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005f1c:	e195      	b.n	800624a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	bf00      	nop
    return;
 8005f20:	e193      	b.n	800624a <HAL_UART_IRQHandler+0x5be>
 8005f22:	bf00      	nop
 8005f24:	04000120 	.word	0x04000120
 8005f28:	08006b23 	.word	0x08006b23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 814e 	bne.w	80061d2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8147 	beq.w	80061d2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8140 	beq.w	80061d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2210      	movs	r2, #16
 8005f58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	f040 80b8 	bne.w	80060da <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8167 	beq.w	800624e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	f080 815f 	bcs.w	800624e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 8086 	bne.w	80060b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1da      	bne.n	8005fac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800601a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800601e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800602c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e1      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800605c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e3      	bne.n	8006032 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800609a:	65bb      	str	r3, [r7, #88]	; 0x58
 800609c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e4      	bne.n	8006078 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd f959 	bl	800336a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8d8 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060d8:	e0b9      	b.n	800624e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80ab 	beq.w	8006252 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80060fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a6 	beq.w	8006252 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800611a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006128:	647b      	str	r3, [r7, #68]	; 0x44
 800612a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800612e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e4      	bne.n	8006106 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	623b      	str	r3, [r7, #32]
   return(result);
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006160:	633a      	str	r2, [r7, #48]	; 0x30
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	60fb      	str	r3, [r7, #12]
   return(result);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0310 	bic.w	r3, r3, #16
 800619c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	69b9      	ldr	r1, [r7, #24]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	617b      	str	r3, [r7, #20]
   return(result);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e4      	bne.n	8006188 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f85c 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061d0:	e03f      	b.n	8006252 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <HAL_UART_IRQHandler+0x570>
 80061de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd3b 	bl	8006c70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061fa:	e02d      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01c      	beq.n	8006256 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
    }
    return;
 8006224:	e017      	b.n	8006256 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d012      	beq.n	8006258 <HAL_UART_IRQHandler+0x5cc>
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fc85 	bl	8006b4e <UART_EndTransmit_IT>
    return;
 8006244:	e008      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006246:	bf00      	nop
 8006248:	e006      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
    return;
 800624a:	bf00      	nop
 800624c:	e004      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
      return;
 800624e:	bf00      	nop
 8006250:	e002      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006256:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006258:	37e8      	adds	r7, #232	; 0xe8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a4:	b08a      	sub	sp, #40	; 0x28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4bb4      	ldr	r3, [pc, #720]	; (80065a0 <UART_SetConfig+0x300>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062d8:	430b      	orrs	r3, r1
 80062da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4aa9      	ldr	r2, [pc, #676]	; (80065a4 <UART_SetConfig+0x304>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006308:	4313      	orrs	r3, r2
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4aa0      	ldr	r2, [pc, #640]	; (80065a8 <UART_SetConfig+0x308>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d126      	bne.n	8006378 <UART_SetConfig+0xd8>
 800632a:	4ba0      	ldr	r3, [pc, #640]	; (80065ac <UART_SetConfig+0x30c>)
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b03      	cmp	r3, #3
 8006336:	d81b      	bhi.n	8006370 <UART_SetConfig+0xd0>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0xa0>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006351 	.word	0x08006351
 8006344:	08006361 	.word	0x08006361
 8006348:	08006359 	.word	0x08006359
 800634c:	08006369 	.word	0x08006369
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006356:	e080      	b.n	800645a <UART_SetConfig+0x1ba>
 8006358:	2302      	movs	r3, #2
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635e:	e07c      	b.n	800645a <UART_SetConfig+0x1ba>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006366:	e078      	b.n	800645a <UART_SetConfig+0x1ba>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e074      	b.n	800645a <UART_SetConfig+0x1ba>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006376:	e070      	b.n	800645a <UART_SetConfig+0x1ba>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a8c      	ldr	r2, [pc, #560]	; (80065b0 <UART_SetConfig+0x310>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d138      	bne.n	80063f4 <UART_SetConfig+0x154>
 8006382:	4b8a      	ldr	r3, [pc, #552]	; (80065ac <UART_SetConfig+0x30c>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d82d      	bhi.n	80063ec <UART_SetConfig+0x14c>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0xf8>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063cd 	.word	0x080063cd
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	080063ed 	.word	0x080063ed
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d2:	e042      	b.n	800645a <UART_SetConfig+0x1ba>
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063da:	e03e      	b.n	800645a <UART_SetConfig+0x1ba>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e2:	e03a      	b.n	800645a <UART_SetConfig+0x1ba>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ea:	e036      	b.n	800645a <UART_SetConfig+0x1ba>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f2:	e032      	b.n	800645a <UART_SetConfig+0x1ba>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6a      	ldr	r2, [pc, #424]	; (80065a4 <UART_SetConfig+0x304>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d12a      	bne.n	8006454 <UART_SetConfig+0x1b4>
 80063fe:	4b6b      	ldr	r3, [pc, #428]	; (80065ac <UART_SetConfig+0x30c>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640c:	d01a      	beq.n	8006444 <UART_SetConfig+0x1a4>
 800640e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006412:	d81b      	bhi.n	800644c <UART_SetConfig+0x1ac>
 8006414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006418:	d00c      	beq.n	8006434 <UART_SetConfig+0x194>
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d815      	bhi.n	800644c <UART_SetConfig+0x1ac>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <UART_SetConfig+0x18c>
 8006424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006428:	d008      	beq.n	800643c <UART_SetConfig+0x19c>
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x1ac>
 800642c:	2300      	movs	r3, #0
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006432:	e012      	b.n	800645a <UART_SetConfig+0x1ba>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643a:	e00e      	b.n	800645a <UART_SetConfig+0x1ba>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e00a      	b.n	800645a <UART_SetConfig+0x1ba>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e006      	b.n	800645a <UART_SetConfig+0x1ba>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e002      	b.n	800645a <UART_SetConfig+0x1ba>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a51      	ldr	r2, [pc, #324]	; (80065a4 <UART_SetConfig+0x304>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d17a      	bne.n	800655a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006468:	2b08      	cmp	r3, #8
 800646a:	d824      	bhi.n	80064b6 <UART_SetConfig+0x216>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x1d4>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006499 	.word	0x08006499
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064a7 	.word	0x080064a7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064b7 	.word	0x080064b7
 8006494:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fd ffe4 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800649c:	61f8      	str	r0, [r7, #28]
        break;
 800649e:	e010      	b.n	80064c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b44      	ldr	r3, [pc, #272]	; (80065b4 <UART_SetConfig+0x314>)
 80064a2:	61fb      	str	r3, [r7, #28]
        break;
 80064a4:	e00d      	b.n	80064c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fd ff45 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80064aa:	61f8      	str	r0, [r7, #28]
        break;
 80064ac:	e009      	b.n	80064c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	61fb      	str	r3, [r7, #28]
        break;
 80064b4:	e005      	b.n	80064c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8107 	beq.w	80066d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d305      	bcc.n	80064e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d903      	bls.n	80064ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064ec:	e0f4      	b.n	80066d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2200      	movs	r2, #0
 80064f2:	461c      	mov	r4, r3
 80064f4:	4615      	mov	r5, r2
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	022b      	lsls	r3, r5, #8
 8006500:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006504:	0222      	lsls	r2, r4, #8
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	6849      	ldr	r1, [r1, #4]
 800650a:	0849      	lsrs	r1, r1, #1
 800650c:	2000      	movs	r0, #0
 800650e:	4688      	mov	r8, r1
 8006510:	4681      	mov	r9, r0
 8006512:	eb12 0a08 	adds.w	sl, r2, r8
 8006516:	eb43 0b09 	adc.w	fp, r3, r9
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	4650      	mov	r0, sl
 800652a:	4659      	mov	r1, fp
 800652c:	f7fa fa8e 	bl	8000a4c <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653e:	d308      	bcc.n	8006552 <UART_SetConfig+0x2b2>
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006546:	d204      	bcs.n	8006552 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e0c2      	b.n	80066d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006558:	e0be      	b.n	80066d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006562:	d16a      	bne.n	800663a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006568:	2b08      	cmp	r3, #8
 800656a:	d834      	bhi.n	80065d6 <UART_SetConfig+0x336>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x2d4>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	08006599 	.word	0x08006599
 8006578:	080065b9 	.word	0x080065b9
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065d7 	.word	0x080065d7
 8006584:	080065c7 	.word	0x080065c7
 8006588:	080065d7 	.word	0x080065d7
 800658c:	080065d7 	.word	0x080065d7
 8006590:	080065d7 	.word	0x080065d7
 8006594:	080065cf 	.word	0x080065cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fd ff64 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800659c:	61f8      	str	r0, [r7, #28]
        break;
 800659e:	e020      	b.n	80065e2 <UART_SetConfig+0x342>
 80065a0:	efff69f3 	.word	0xefff69f3
 80065a4:	40008000 	.word	0x40008000
 80065a8:	40013800 	.word	0x40013800
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40004400 	.word	0x40004400
 80065b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b8:	f7fd ff6a 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 80065bc:	61f8      	str	r0, [r7, #28]
        break;
 80065be:	e010      	b.n	80065e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c0:	4b4c      	ldr	r3, [pc, #304]	; (80066f4 <UART_SetConfig+0x454>)
 80065c2:	61fb      	str	r3, [r7, #28]
        break;
 80065c4:	e00d      	b.n	80065e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fd feb5 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80065ca:	61f8      	str	r0, [r7, #28]
        break;
 80065cc:	e009      	b.n	80065e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	61fb      	str	r3, [r7, #28]
        break;
 80065d4:	e005      	b.n	80065e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d077      	beq.n	80066d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	005a      	lsls	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	441a      	add	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b0f      	cmp	r3, #15
 8006602:	d916      	bls.n	8006632 <UART_SetConfig+0x392>
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660a:	d212      	bcs.n	8006632 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f023 030f 	bic.w	r3, r3, #15
 8006614:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	b29a      	uxth	r2, r3
 8006622:	8afb      	ldrh	r3, [r7, #22]
 8006624:	4313      	orrs	r3, r2
 8006626:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	8afa      	ldrh	r2, [r7, #22]
 800662e:	60da      	str	r2, [r3, #12]
 8006630:	e052      	b.n	80066d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006638:	e04e      	b.n	80066d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800663e:	2b08      	cmp	r3, #8
 8006640:	d827      	bhi.n	8006692 <UART_SetConfig+0x3f2>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x3a8>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	0800666d 	.word	0x0800666d
 800664c:	08006675 	.word	0x08006675
 8006650:	0800667d 	.word	0x0800667d
 8006654:	08006693 	.word	0x08006693
 8006658:	08006683 	.word	0x08006683
 800665c:	08006693 	.word	0x08006693
 8006660:	08006693 	.word	0x08006693
 8006664:	08006693 	.word	0x08006693
 8006668:	0800668b 	.word	0x0800668b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800666c:	f7fd fefa 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8006670:	61f8      	str	r0, [r7, #28]
        break;
 8006672:	e014      	b.n	800669e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fd ff0c 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 8006678:	61f8      	str	r0, [r7, #28]
        break;
 800667a:	e010      	b.n	800669e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667c:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <UART_SetConfig+0x454>)
 800667e:	61fb      	str	r3, [r7, #28]
        break;
 8006680:	e00d      	b.n	800669e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006682:	f7fd fe57 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8006686:	61f8      	str	r0, [r7, #28]
        break;
 8006688:	e009      	b.n	800669e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668e:	61fb      	str	r3, [r7, #28]
        break;
 8006690:	e005      	b.n	800669e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800669c:	bf00      	nop
    }

    if (pclk != 0U)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d019      	beq.n	80066d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	085a      	lsrs	r2, r3, #1
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	d909      	bls.n	80066d2 <UART_SetConfig+0x432>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c4:	d205      	bcs.n	80066d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	e002      	b.n	80066d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3728      	adds	r7, #40	; 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f2:	bf00      	nop
 80066f4:	00f42400 	.word	0x00f42400

080066f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01a      	beq.n	800680e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f6:	d10a      	bne.n	800680e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b098      	sub	sp, #96	; 0x60
 8006840:	af02      	add	r7, sp, #8
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800684c:	f7fb fa6a 	bl	8001d24 <HAL_GetTick>
 8006850:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d12e      	bne.n	80068be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f88c 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d021      	beq.n	80068be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800688e:	653b      	str	r3, [r7, #80]	; 0x50
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006898:	647b      	str	r3, [r7, #68]	; 0x44
 800689a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e6      	bne.n	800687a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e062      	b.n	8006984 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d149      	bne.n	8006960 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d4:	2200      	movs	r2, #0
 80068d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f856 	bl	800698c <UART_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d03c      	beq.n	8006960 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	623b      	str	r3, [r7, #32]
   return(result);
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
 8006906:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800690a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e6      	bne.n	80068e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60fb      	str	r3, [r7, #12]
   return(result);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006938:	61fa      	str	r2, [r7, #28]
 800693a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	69b9      	ldr	r1, [r7, #24]
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	617b      	str	r3, [r7, #20]
   return(result);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e011      	b.n	8006984 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3758      	adds	r7, #88	; 0x58
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699c:	e049      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d045      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a6:	f7fb f9bd 	bl	8001d24 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <UART_WaitOnFlagUntilTimeout+0x30>
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e048      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d031      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d110      	bne.n	80069fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2208      	movs	r2, #8
 80069e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f838 	bl	8006a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2208      	movs	r2, #8
 80069ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e029      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0c:	d111      	bne.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f81e 	bl	8006a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d0a6      	beq.n	800699e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b095      	sub	sp, #84	; 0x54
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	643b      	str	r3, [r7, #64]	; 0x40
 8006a82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d118      	bne.n	8006b02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0310 	bic.w	r3, r3, #16
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b16:	bf00      	nop
 8006b18:	3754      	adds	r7, #84	; 0x54
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fb97 	bl	8006274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b088      	sub	sp, #32
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6979      	ldr	r1, [r7, #20]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	613b      	str	r3, [r7, #16]
   return(result);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e6      	bne.n	8006b56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fb63 	bl	8006260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9a:	bf00      	nop
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b086      	sub	sp, #24
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e056      	b.n	8006c68 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7fa fea6 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2224      	movs	r2, #36	; 0x24
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0201 	bic.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fd82 	bl	80066f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fb53 	bl	80062a0 <UART_SetConfig>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e031      	b.n	8006c68 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c12:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	055b      	lsls	r3, r3, #21
 8006c2c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006c42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fdeb 	bl	800683c <UART_CheckIdleState>
 8006c66:	4603      	mov	r3, r0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8006c8c:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <DWT_Delay_ms+0x44>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8006c92:	f7fd fbdb 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4a0c      	ldr	r2, [pc, #48]	; (8006ccc <DWT_Delay_ms+0x48>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	099b      	lsrs	r3, r3, #6
 8006ca0:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8006cac:	bf00      	nop
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <DWT_Delay_ms+0x44>)
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d3f8      	bcc.n	8006cae <DWT_Delay_ms+0x2a>
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	e0001000 	.word	0xe0001000
 8006ccc:	10624dd3 	.word	0x10624dd3

08006cd0 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd6:	f107 0310 	add.w	r3, r7, #16
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	605a      	str	r2, [r3, #4]
 8006ce0:	609a      	str	r2, [r3, #8]
 8006ce2:	60da      	str	r2, [r3, #12]
 8006ce4:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8006cf2:	f000 fcb7 	bl	8007664 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cfc:	e102      	b.n	8006f04 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d04:	e079      	b.n	8006dfa <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8006d06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d0a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d0e:	4889      	ldr	r0, [pc, #548]	; (8006f34 <STEPPERS_Init+0x264>)
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	440b      	add	r3, r1
 8006d18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d20:	d10c      	bne.n	8006d3c <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d22:	4b85      	ldr	r3, [pc, #532]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	4a84      	ldr	r2, [pc, #528]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d2e:	4b82      	ldr	r3, [pc, #520]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	e034      	b.n	8006da6 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8006d3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d40:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d44:	487b      	ldr	r0, [pc, #492]	; (8006f34 <STEPPERS_Init+0x264>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d52:	4a7a      	ldr	r2, [pc, #488]	; (8006f3c <STEPPERS_Init+0x26c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d10c      	bne.n	8006d72 <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d58:	4b77      	ldr	r3, [pc, #476]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5c:	4a76      	ldr	r2, [pc, #472]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d64:	4b74      	ldr	r3, [pc, #464]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	e019      	b.n	8006da6 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8006d72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d76:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006d7a:	486e      	ldr	r0, [pc, #440]	; (8006f34 <STEPPERS_Init+0x264>)
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	440b      	add	r3, r1
 8006d84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d88:	4a6d      	ldr	r2, [pc, #436]	; (8006f40 <STEPPERS_Init+0x270>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d10b      	bne.n	8006da6 <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	4a69      	ldr	r2, [pc, #420]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d9a:	4b67      	ldr	r3, [pc, #412]	; (8006f38 <STEPPERS_Init+0x268>)
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8006da6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006daa:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006dae:	4861      	ldr	r0, [pc, #388]	; (8006f34 <STEPPERS_Init+0x264>)
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	440b      	add	r3, r1
 8006dba:	3308      	adds	r3, #8
 8006dbc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006dc0:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8006dce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006dd2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8006dd6:	4857      	ldr	r0, [pc, #348]	; (8006f34 <STEPPERS_Init+0x264>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	440b      	add	r3, r1
 8006de0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006de4:	f107 0210 	add.w	r2, r7, #16
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fc fb6c 	bl	80034c8 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8006df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006df4:	3301      	adds	r3, #1
 8006df6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d981      	bls.n	8006d06 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CCW;
 8006e02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e06:	494f      	ldr	r1, [pc, #316]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	3311      	adds	r3, #17
 8006e14:	2201      	movs	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8006e18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e1c:	4949      	ldr	r1, [pc, #292]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	330f      	adds	r3, #15
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8006e2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e32:	4944      	ldr	r1, [pc, #272]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8006e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e46:	493f      	ldr	r1, [pc, #252]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	3304      	adds	r3, #4
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8006e58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e5c:	4939      	ldr	r1, [pc, #228]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3308      	adds	r3, #8
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8006e6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e72:	4934      	ldr	r1, [pc, #208]	; (8006f44 <STEPPERS_Init+0x274>)
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	330e      	adds	r3, #14
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8006e84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e88:	492a      	ldr	r1, [pc, #168]	; (8006f34 <STEPPERS_Init+0x264>)
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	331b      	adds	r3, #27
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d00b      	beq.n	8006eb4 <STEPPERS_Init+0x1e4>
 8006e9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ea0:	4924      	ldr	r1, [pc, #144]	; (8006f34 <STEPPERS_Init+0x264>)
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	331b      	adds	r3, #27
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8006eb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006eb8:	4922      	ldr	r1, [pc, #136]	; (8006f44 <STEPPERS_Init+0x274>)
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3310      	adds	r3, #16
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	e016      	b.n	8006efa <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8006ecc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ed0:	4918      	ldr	r1, [pc, #96]	; (8006f34 <STEPPERS_Init+0x264>)
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	331b      	adds	r3, #27
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d10a      	bne.n	8006efa <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8006ee4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006ee8:	4916      	ldr	r1, [pc, #88]	; (8006f44 <STEPPERS_Init+0x274>)
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8006efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efe:	3301      	adds	r3, #1
 8006f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f43f aef8 	beq.w	8006cfe <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f12:	2301      	movs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4619      	mov	r1, r3
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <STEPPERS_Init+0x26c>)
 8006f26:	f7fc facf 	bl	80034c8 <HAL_GPIO_Init>
}
 8006f2a:	bf00      	nop
 8006f2c:	3728      	adds	r7, #40	; 0x28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	0801ba94 	.word	0x0801ba94
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	48000400 	.word	0x48000400
 8006f40:	48000800 	.word	0x48000800
 8006f44:	20000428 	.word	0x20000428

08006f48 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460a      	mov	r2, r1
 8006f52:	71fb      	strb	r3, [r7, #7]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8006f5c:	79fa      	ldrb	r2, [r7, #7]
 8006f5e:	4928      	ldr	r1, [pc, #160]	; (8007000 <STEPPER_SetSpeed+0xb8>)
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	88ba      	ldrh	r2, [r7, #4]
 8006f6e:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	4924      	ldr	r1, [pc, #144]	; (8007004 <STEPPER_SetSpeed+0xbc>)
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	331b      	adds	r3, #27
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d10b      	bne.n	8006f9e <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8006f86:	79fa      	ldrb	r2, [r7, #7]
 8006f88:	491e      	ldr	r1, [pc, #120]	; (8007004 <STEPPER_SetSpeed+0xbc>)
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	3318      	adds	r3, #24
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e009      	b.n	8006fb2 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8006f9e:	79fa      	ldrb	r2, [r7, #7]
 8006fa0:	4918      	ldr	r1, [pc, #96]	; (8007004 <STEPPER_SetSpeed+0xbc>)
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	3318      	adds	r3, #24
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8006fb2:	88bb      	ldrh	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 fa9a 	bl	80004f4 <__aeabi_ui2d>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	a10c      	add	r1, pc, #48	; (adr r1, 8006ff8 <STEPPER_SetSpeed+0xb0>)
 8006fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fca:	f7f9 fc37 	bl	800083c <__aeabi_ddiv>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	79fc      	ldrb	r4, [r7, #7]
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f7f9 fd18 	bl	8000a0c <__aeabi_d2uiz>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	4908      	ldr	r1, [pc, #32]	; (8007000 <STEPPER_SetSpeed+0xb8>)
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4423      	add	r3, r4
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	3308      	adds	r3, #8
 8006fec:	601a      	str	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	40ed4c00 	.word	0x40ed4c00
 8007000:	20000428 	.word	0x20000428
 8007004:	0801ba94 	.word	0x0801ba94

08007008 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8007012:	79fa      	ldrb	r2, [r7, #7]
 8007014:	4999      	ldr	r1, [pc, #612]	; (800727c <STEPPER_One_Step+0x274>)
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	331a      	adds	r3, #26
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 81c4 	bne.w	80073b2 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800702a:	79fa      	ldrb	r2, [r7, #7]
 800702c:	4993      	ldr	r1, [pc, #588]	; (800727c <STEPPER_One_Step+0x274>)
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	331b      	adds	r3, #27
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 8088 	bne.w	8007152 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007042:	79fa      	ldrb	r2, [r7, #7]
 8007044:	498d      	ldr	r1, [pc, #564]	; (800727c <STEPPER_One_Step+0x274>)
 8007046:	4613      	mov	r3, r2
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	79fa      	ldrb	r2, [r7, #7]
 8007054:	4989      	ldr	r1, [pc, #548]	; (800727c <STEPPER_One_Step+0x274>)
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3310      	adds	r3, #16
 8007062:	8819      	ldrh	r1, [r3, #0]
 8007064:	79fa      	ldrb	r2, [r7, #7]
 8007066:	4c86      	ldr	r4, [pc, #536]	; (8007280 <STEPPER_One_Step+0x278>)
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4423      	add	r3, r4
 8007072:	330f      	adds	r3, #15
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	4b82      	ldr	r3, [pc, #520]	; (8007284 <STEPPER_One_Step+0x27c>)
 800707a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fc fba4 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007084:	79fa      	ldrb	r2, [r7, #7]
 8007086:	497d      	ldr	r1, [pc, #500]	; (800727c <STEPPER_One_Step+0x274>)
 8007088:	4613      	mov	r3, r2
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	3304      	adds	r3, #4
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	79fa      	ldrb	r2, [r7, #7]
 8007098:	4978      	ldr	r1, [pc, #480]	; (800727c <STEPPER_One_Step+0x274>)
 800709a:	4613      	mov	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3312      	adds	r3, #18
 80070a6:	8819      	ldrh	r1, [r3, #0]
 80070a8:	79fa      	ldrb	r2, [r7, #7]
 80070aa:	4c75      	ldr	r4, [pc, #468]	; (8007280 <STEPPER_One_Step+0x278>)
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4423      	add	r3, r4
 80070b6:	330f      	adds	r3, #15
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	4a72      	ldr	r2, [pc, #456]	; (8007284 <STEPPER_One_Step+0x27c>)
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f7fc fb82 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80070c8:	79fa      	ldrb	r2, [r7, #7]
 80070ca:	496c      	ldr	r1, [pc, #432]	; (800727c <STEPPER_One_Step+0x274>)
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	3308      	adds	r3, #8
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	79fa      	ldrb	r2, [r7, #7]
 80070dc:	4967      	ldr	r1, [pc, #412]	; (800727c <STEPPER_One_Step+0x274>)
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3314      	adds	r3, #20
 80070ea:	8819      	ldrh	r1, [r3, #0]
 80070ec:	79fa      	ldrb	r2, [r7, #7]
 80070ee:	4c64      	ldr	r4, [pc, #400]	; (8007280 <STEPPER_One_Step+0x278>)
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4423      	add	r3, r4
 80070fa:	330f      	adds	r3, #15
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	4a61      	ldr	r2, [pc, #388]	; (8007284 <STEPPER_One_Step+0x27c>)
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	789b      	ldrb	r3, [r3, #2]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fc fb60 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800710c:	79fa      	ldrb	r2, [r7, #7]
 800710e:	495b      	ldr	r1, [pc, #364]	; (800727c <STEPPER_One_Step+0x274>)
 8007110:	4613      	mov	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	330c      	adds	r3, #12
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	79fa      	ldrb	r2, [r7, #7]
 8007120:	4956      	ldr	r1, [pc, #344]	; (800727c <STEPPER_One_Step+0x274>)
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3316      	adds	r3, #22
 800712e:	8819      	ldrh	r1, [r3, #0]
 8007130:	79fa      	ldrb	r2, [r7, #7]
 8007132:	4c53      	ldr	r4, [pc, #332]	; (8007280 <STEPPER_One_Step+0x278>)
 8007134:	4613      	mov	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4423      	add	r3, r4
 800713e:	330f      	adds	r3, #15
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	4a50      	ldr	r2, [pc, #320]	; (8007284 <STEPPER_One_Step+0x27c>)
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	78db      	ldrb	r3, [r3, #3]
 800714a:	461a      	mov	r2, r3
 800714c:	f7fc fb3e 	bl	80037cc <HAL_GPIO_WritePin>
 8007150:	e12f      	b.n	80073b2 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8007152:	79fa      	ldrb	r2, [r7, #7]
 8007154:	4949      	ldr	r1, [pc, #292]	; (800727c <STEPPER_One_Step+0x274>)
 8007156:	4613      	mov	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	331b      	adds	r3, #27
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 8091 	bne.w	800728c <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800716a:	79fa      	ldrb	r2, [r7, #7]
 800716c:	4943      	ldr	r1, [pc, #268]	; (800727c <STEPPER_One_Step+0x274>)
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	79fa      	ldrb	r2, [r7, #7]
 800717c:	493f      	ldr	r1, [pc, #252]	; (800727c <STEPPER_One_Step+0x274>)
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3310      	adds	r3, #16
 800718a:	8819      	ldrh	r1, [r3, #0]
 800718c:	79fa      	ldrb	r2, [r7, #7]
 800718e:	4c3c      	ldr	r4, [pc, #240]	; (8007280 <STEPPER_One_Step+0x278>)
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4423      	add	r3, r4
 800719a:	330f      	adds	r3, #15
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	4b39      	ldr	r3, [pc, #228]	; (8007288 <STEPPER_One_Step+0x280>)
 80071a2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fc fb10 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80071ac:	79fa      	ldrb	r2, [r7, #7]
 80071ae:	4933      	ldr	r1, [pc, #204]	; (800727c <STEPPER_One_Step+0x274>)
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	3304      	adds	r3, #4
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	79fa      	ldrb	r2, [r7, #7]
 80071c0:	492e      	ldr	r1, [pc, #184]	; (800727c <STEPPER_One_Step+0x274>)
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	3312      	adds	r3, #18
 80071ce:	8819      	ldrh	r1, [r3, #0]
 80071d0:	79fa      	ldrb	r2, [r7, #7]
 80071d2:	4c2b      	ldr	r4, [pc, #172]	; (8007280 <STEPPER_One_Step+0x278>)
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4423      	add	r3, r4
 80071de:	330f      	adds	r3, #15
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	4a29      	ldr	r2, [pc, #164]	; (8007288 <STEPPER_One_Step+0x280>)
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7fc faee 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80071f0:	79fa      	ldrb	r2, [r7, #7]
 80071f2:	4922      	ldr	r1, [pc, #136]	; (800727c <STEPPER_One_Step+0x274>)
 80071f4:	4613      	mov	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	3308      	adds	r3, #8
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	79fa      	ldrb	r2, [r7, #7]
 8007204:	491d      	ldr	r1, [pc, #116]	; (800727c <STEPPER_One_Step+0x274>)
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3314      	adds	r3, #20
 8007212:	8819      	ldrh	r1, [r3, #0]
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	4c1a      	ldr	r4, [pc, #104]	; (8007280 <STEPPER_One_Step+0x278>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4423      	add	r3, r4
 8007222:	330f      	adds	r3, #15
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	4a18      	ldr	r2, [pc, #96]	; (8007288 <STEPPER_One_Step+0x280>)
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	789b      	ldrb	r3, [r3, #2]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fc facc 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007234:	79fa      	ldrb	r2, [r7, #7]
 8007236:	4911      	ldr	r1, [pc, #68]	; (800727c <STEPPER_One_Step+0x274>)
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	330c      	adds	r3, #12
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	79fa      	ldrb	r2, [r7, #7]
 8007248:	490c      	ldr	r1, [pc, #48]	; (800727c <STEPPER_One_Step+0x274>)
 800724a:	4613      	mov	r3, r2
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3316      	adds	r3, #22
 8007256:	8819      	ldrh	r1, [r3, #0]
 8007258:	79fa      	ldrb	r2, [r7, #7]
 800725a:	4c09      	ldr	r4, [pc, #36]	; (8007280 <STEPPER_One_Step+0x278>)
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4423      	add	r3, r4
 8007266:	330f      	adds	r3, #15
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	4a07      	ldr	r2, [pc, #28]	; (8007288 <STEPPER_One_Step+0x280>)
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	78db      	ldrb	r3, [r3, #3]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fc faaa 	bl	80037cc <HAL_GPIO_WritePin>
 8007278:	e09b      	b.n	80073b2 <STEPPER_One_Step+0x3aa>
 800727a:	bf00      	nop
 800727c:	0801ba94 	.word	0x0801ba94
 8007280:	20000428 	.word	0x20000428
 8007284:	2000000c 	.word	0x2000000c
 8007288:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800728c:	79fa      	ldrb	r2, [r7, #7]
 800728e:	4988      	ldr	r1, [pc, #544]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	331b      	adds	r3, #27
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	f040 8087 	bne.w	80073b2 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	4982      	ldr	r1, [pc, #520]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	79fa      	ldrb	r2, [r7, #7]
 80072b6:	497e      	ldr	r1, [pc, #504]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 80072b8:	4613      	mov	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3310      	adds	r3, #16
 80072c4:	8819      	ldrh	r1, [r3, #0]
 80072c6:	79fa      	ldrb	r2, [r7, #7]
 80072c8:	4c7a      	ldr	r4, [pc, #488]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4423      	add	r3, r4
 80072d4:	330f      	adds	r3, #15
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	4b77      	ldr	r3, [pc, #476]	; (80074b8 <STEPPER_One_Step+0x4b0>)
 80072dc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f7fc fa73 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80072e6:	79fa      	ldrb	r2, [r7, #7]
 80072e8:	4971      	ldr	r1, [pc, #452]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3304      	adds	r3, #4
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	496d      	ldr	r1, [pc, #436]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3312      	adds	r3, #18
 8007308:	8819      	ldrh	r1, [r3, #0]
 800730a:	79fa      	ldrb	r2, [r7, #7]
 800730c:	4c69      	ldr	r4, [pc, #420]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4423      	add	r3, r4
 8007318:	330f      	adds	r3, #15
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	4a66      	ldr	r2, [pc, #408]	; (80074b8 <STEPPER_One_Step+0x4b0>)
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	461a      	mov	r2, r3
 8007326:	f7fc fa51 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800732a:	79fa      	ldrb	r2, [r7, #7]
 800732c:	4960      	ldr	r1, [pc, #384]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 800732e:	4613      	mov	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3308      	adds	r3, #8
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	79fa      	ldrb	r2, [r7, #7]
 800733e:	495c      	ldr	r1, [pc, #368]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 8007340:	4613      	mov	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	3314      	adds	r3, #20
 800734c:	8819      	ldrh	r1, [r3, #0]
 800734e:	79fa      	ldrb	r2, [r7, #7]
 8007350:	4c58      	ldr	r4, [pc, #352]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4423      	add	r3, r4
 800735c:	330f      	adds	r3, #15
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	4a55      	ldr	r2, [pc, #340]	; (80074b8 <STEPPER_One_Step+0x4b0>)
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	461a      	mov	r2, r3
 800736a:	f7fc fa2f 	bl	80037cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800736e:	79fa      	ldrb	r2, [r7, #7]
 8007370:	494f      	ldr	r1, [pc, #316]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 8007372:	4613      	mov	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	330c      	adds	r3, #12
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	79fa      	ldrb	r2, [r7, #7]
 8007382:	494b      	ldr	r1, [pc, #300]	; (80074b0 <STEPPER_One_Step+0x4a8>)
 8007384:	4613      	mov	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	3316      	adds	r3, #22
 8007390:	8819      	ldrh	r1, [r3, #0]
 8007392:	79fa      	ldrb	r2, [r7, #7]
 8007394:	4c47      	ldr	r4, [pc, #284]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4423      	add	r3, r4
 80073a0:	330f      	adds	r3, #15
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	4a44      	ldr	r2, [pc, #272]	; (80074b8 <STEPPER_One_Step+0x4b0>)
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	78db      	ldrb	r3, [r3, #3]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f7fc fa0d 	bl	80037cc <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80073b2:	79fa      	ldrb	r2, [r7, #7]
 80073b4:	493f      	ldr	r1, [pc, #252]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3311      	adds	r3, #17
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d132      	bne.n	800742e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 80073c8:	79fa      	ldrb	r2, [r7, #7]
 80073ca:	493a      	ldr	r1, [pc, #232]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	330f      	adds	r3, #15
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d112      	bne.n	8007404 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 80073de:	79f9      	ldrb	r1, [r7, #7]
 80073e0:	79fa      	ldrb	r2, [r7, #7]
 80073e2:	4834      	ldr	r0, [pc, #208]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 80073e4:	460b      	mov	r3, r1
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4403      	add	r3, r0
 80073ee:	3310      	adds	r3, #16
 80073f0:	7818      	ldrb	r0, [r3, #0]
 80073f2:	4930      	ldr	r1, [pc, #192]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	330f      	adds	r3, #15
 8007400:	4602      	mov	r2, r0
 8007402:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8007404:	79fa      	ldrb	r2, [r7, #7]
 8007406:	492b      	ldr	r1, [pc, #172]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	330f      	adds	r3, #15
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	3b01      	subs	r3, #1
 8007418:	b2d8      	uxtb	r0, r3
 800741a:	4926      	ldr	r1, [pc, #152]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	330f      	adds	r3, #15
 8007428:	4602      	mov	r2, r0
 800742a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800742c:	e03c      	b.n	80074a8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800742e:	79fa      	ldrb	r2, [r7, #7]
 8007430:	4920      	ldr	r1, [pc, #128]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	3311      	adds	r3, #17
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d131      	bne.n	80074a8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8007444:	79fa      	ldrb	r2, [r7, #7]
 8007446:	491b      	ldr	r1, [pc, #108]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	330f      	adds	r3, #15
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	b2d8      	uxtb	r0, r3
 800745a:	4916      	ldr	r1, [pc, #88]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	330f      	adds	r3, #15
 8007468:	4602      	mov	r2, r0
 800746a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 800746c:	79fa      	ldrb	r2, [r7, #7]
 800746e:	4911      	ldr	r1, [pc, #68]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	330f      	adds	r3, #15
 800747c:	7819      	ldrb	r1, [r3, #0]
 800747e:	79fa      	ldrb	r2, [r7, #7]
 8007480:	480c      	ldr	r0, [pc, #48]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4403      	add	r3, r0
 800748c:	3310      	adds	r3, #16
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4299      	cmp	r1, r3
 8007492:	d109      	bne.n	80074a8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8007494:	79fa      	ldrb	r2, [r7, #7]
 8007496:	4907      	ldr	r1, [pc, #28]	; (80074b4 <STEPPER_One_Step+0x4ac>)
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	330f      	adds	r3, #15
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd90      	pop	{r4, r7, pc}
 80074b0:	0801ba94 	.word	0x0801ba94
 80074b4:	20000428 	.word	0x20000428
 80074b8:	2000002c 	.word	0x2000002c

080074bc <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	71fb      	strb	r3, [r7, #7]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 80074d4:	79fa      	ldrb	r2, [r7, #7]
 80074d6:	4926      	ldr	r1, [pc, #152]	; (8007570 <STEPPER_Step_Blocking+0xb4>)
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3311      	adds	r3, #17
 80074e4:	79ba      	ldrb	r2, [r7, #6]
 80074e6:	701a      	strb	r2, [r3, #0]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	4921      	ldr	r1, [pc, #132]	; (8007570 <STEPPER_Step_Blocking+0xb4>)
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	330e      	adds	r3, #14
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 80074fc:	79fa      	ldrb	r2, [r7, #7]
 80074fe:	491c      	ldr	r1, [pc, #112]	; (8007570 <STEPPER_Step_Blocking+0xb4>)
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	330c      	adds	r3, #12
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	4918      	ldr	r1, [pc, #96]	; (8007574 <STEPPER_Step_Blocking+0xb8>)
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	3318      	adds	r3, #24
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	fb00 f303 	mul.w	r3, r0, r3
 8007526:	f64e 2260 	movw	r2, #60000	; 0xea60
 800752a:	fb92 f3f3 	sdiv	r3, r2, r3
 800752e:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e009      	b.n	800754a <STEPPER_Step_Blocking+0x8e>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fd65 	bl	8007008 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 800753e:	68b8      	ldr	r0, [r7, #8]
 8007540:	f7ff fba0 	bl	8006c84 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3f1      	bcc.n	8007536 <STEPPER_Step_Blocking+0x7a>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 8007552:	79fa      	ldrb	r2, [r7, #7]
 8007554:	4906      	ldr	r1, [pc, #24]	; (8007570 <STEPPER_Step_Blocking+0xb4>)
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	330e      	adds	r3, #14
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000428 	.word	0x20000428
 8007574:	0801ba94 	.word	0x0801ba94

08007578 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a34      	ldr	r2, [pc, #208]	; (800765c <STEPPER_TMR_OVF_ISR+0xe4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d162      	bne.n	8007654 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
 8007592:	e05c      	b.n	800764e <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8007594:	7bfa      	ldrb	r2, [r7, #15]
 8007596:	4932      	ldr	r1, [pc, #200]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3304      	adds	r3, #4
 80075a4:	6819      	ldr	r1, [r3, #0]
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	482d      	ldr	r0, [pc, #180]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4403      	add	r3, r0
 80075b4:	3308      	adds	r3, #8
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4299      	cmp	r1, r3
 80075ba:	d333      	bcc.n	8007624 <STEPPER_TMR_OVF_ISR+0xac>
 80075bc:	7bfa      	ldrb	r2, [r7, #15]
 80075be:	4928      	ldr	r1, [pc, #160]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	330e      	adds	r3, #14
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d028      	beq.n	8007624 <STEPPER_TMR_OVF_ISR+0xac>
 80075d2:	7bfa      	ldrb	r2, [r7, #15]
 80075d4:	4922      	ldr	r1, [pc, #136]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01e      	beq.n	8007624 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fd0d 	bl	8007008 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 80075ee:	7bfa      	ldrb	r2, [r7, #15]
 80075f0:	491b      	ldr	r1, [pc, #108]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	1e59      	subs	r1, r3, #1
 8007600:	4817      	ldr	r0, [pc, #92]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4403      	add	r3, r0
 800760c:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800760e:	7bfa      	ldrb	r2, [r7, #15]
 8007610:	4913      	ldr	r1, [pc, #76]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	3304      	adds	r3, #4
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	e011      	b.n	8007648 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8007624:	7bfa      	ldrb	r2, [r7, #15]
 8007626:	490e      	ldr	r1, [pc, #56]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	3304      	adds	r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	1c59      	adds	r1, r3, #1
 8007638:	4809      	ldr	r0, [pc, #36]	; (8007660 <STEPPER_TMR_OVF_ISR+0xe8>)
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4403      	add	r3, r0
 8007644:	3304      	adds	r3, #4
 8007646:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	3301      	adds	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d09f      	beq.n	8007594 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40014000 	.word	0x40014000
 8007660:	20000428 	.word	0x20000428

08007664 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8007668:	4b14      	ldr	r3, [pc, #80]	; (80076bc <DWT_Delay_Init+0x58>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a13      	ldr	r2, [pc, #76]	; (80076bc <DWT_Delay_Init+0x58>)
 800766e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007672:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8007674:	4b11      	ldr	r3, [pc, #68]	; (80076bc <DWT_Delay_Init+0x58>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4a10      	ldr	r2, [pc, #64]	; (80076bc <DWT_Delay_Init+0x58>)
 800767a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800767e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <DWT_Delay_Init+0x5c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <DWT_Delay_Init+0x5c>)
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800768c:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <DWT_Delay_Init+0x5c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0b      	ldr	r2, [pc, #44]	; (80076c0 <DWT_Delay_Init+0x5c>)
 8007692:	f043 0301 	orr.w	r3, r3, #1
 8007696:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8007698:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <DWT_Delay_Init+0x5c>)
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800769e:	bf00      	nop
    __ASM volatile ("NOP");
 80076a0:	bf00      	nop
    __ASM volatile ("NOP");
 80076a2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <DWT_Delay_Init+0x5c>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80076ac:	2300      	movs	r3, #0
 80076ae:	e000      	b.n	80076b2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80076b0:	2301      	movs	r3, #1
    }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	e000edf0 	.word	0xe000edf0
 80076c0:	e0001000 	.word	0xe0001000

080076c4 <std>:
 80076c4:	2300      	movs	r3, #0
 80076c6:	b510      	push	{r4, lr}
 80076c8:	4604      	mov	r4, r0
 80076ca:	e9c0 3300 	strd	r3, r3, [r0]
 80076ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076d2:	6083      	str	r3, [r0, #8]
 80076d4:	8181      	strh	r1, [r0, #12]
 80076d6:	6643      	str	r3, [r0, #100]	; 0x64
 80076d8:	81c2      	strh	r2, [r0, #14]
 80076da:	6183      	str	r3, [r0, #24]
 80076dc:	4619      	mov	r1, r3
 80076de:	2208      	movs	r2, #8
 80076e0:	305c      	adds	r0, #92	; 0x5c
 80076e2:	f000 f906 	bl	80078f2 <memset>
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <std+0x58>)
 80076e8:	6263      	str	r3, [r4, #36]	; 0x24
 80076ea:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <std+0x5c>)
 80076ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <std+0x60>)
 80076f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <std+0x64>)
 80076f4:	6323      	str	r3, [r4, #48]	; 0x30
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <std+0x68>)
 80076f8:	6224      	str	r4, [r4, #32]
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d006      	beq.n	800770c <std+0x48>
 80076fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007702:	4294      	cmp	r4, r2
 8007704:	d002      	beq.n	800770c <std+0x48>
 8007706:	33d0      	adds	r3, #208	; 0xd0
 8007708:	429c      	cmp	r4, r3
 800770a:	d105      	bne.n	8007718 <std+0x54>
 800770c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007714:	f000 b966 	b.w	80079e4 <__retarget_lock_init_recursive>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	0800786d 	.word	0x0800786d
 8007720:	0800788f 	.word	0x0800788f
 8007724:	080078c7 	.word	0x080078c7
 8007728:	080078eb 	.word	0x080078eb
 800772c:	2000043c 	.word	0x2000043c

08007730 <stdio_exit_handler>:
 8007730:	4a02      	ldr	r2, [pc, #8]	; (800773c <stdio_exit_handler+0xc>)
 8007732:	4903      	ldr	r1, [pc, #12]	; (8007740 <stdio_exit_handler+0x10>)
 8007734:	4803      	ldr	r0, [pc, #12]	; (8007744 <stdio_exit_handler+0x14>)
 8007736:	f000 b869 	b.w	800780c <_fwalk_sglue>
 800773a:	bf00      	nop
 800773c:	2000004c 	.word	0x2000004c
 8007740:	08008291 	.word	0x08008291
 8007744:	20000058 	.word	0x20000058

08007748 <cleanup_stdio>:
 8007748:	6841      	ldr	r1, [r0, #4]
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <cleanup_stdio+0x34>)
 800774c:	4299      	cmp	r1, r3
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	d001      	beq.n	8007758 <cleanup_stdio+0x10>
 8007754:	f000 fd9c 	bl	8008290 <_fflush_r>
 8007758:	68a1      	ldr	r1, [r4, #8]
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <cleanup_stdio+0x38>)
 800775c:	4299      	cmp	r1, r3
 800775e:	d002      	beq.n	8007766 <cleanup_stdio+0x1e>
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fd95 	bl	8008290 <_fflush_r>
 8007766:	68e1      	ldr	r1, [r4, #12]
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <cleanup_stdio+0x3c>)
 800776a:	4299      	cmp	r1, r3
 800776c:	d004      	beq.n	8007778 <cleanup_stdio+0x30>
 800776e:	4620      	mov	r0, r4
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007774:	f000 bd8c 	b.w	8008290 <_fflush_r>
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	2000043c 	.word	0x2000043c
 8007780:	200004a4 	.word	0x200004a4
 8007784:	2000050c 	.word	0x2000050c

08007788 <global_stdio_init.part.0>:
 8007788:	b510      	push	{r4, lr}
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <global_stdio_init.part.0+0x30>)
 800778c:	4c0b      	ldr	r4, [pc, #44]	; (80077bc <global_stdio_init.part.0+0x34>)
 800778e:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <global_stdio_init.part.0+0x38>)
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	2200      	movs	r2, #0
 8007796:	2104      	movs	r1, #4
 8007798:	f7ff ff94 	bl	80076c4 <std>
 800779c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077a0:	2201      	movs	r2, #1
 80077a2:	2109      	movs	r1, #9
 80077a4:	f7ff ff8e 	bl	80076c4 <std>
 80077a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077ac:	2202      	movs	r2, #2
 80077ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b2:	2112      	movs	r1, #18
 80077b4:	f7ff bf86 	b.w	80076c4 <std>
 80077b8:	20000574 	.word	0x20000574
 80077bc:	2000043c 	.word	0x2000043c
 80077c0:	08007731 	.word	0x08007731

080077c4 <__sfp_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__sfp_lock_acquire+0x8>)
 80077c6:	f000 b90e 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	2000057d 	.word	0x2000057d

080077d0 <__sfp_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_release+0x8>)
 80077d2:	f000 b909 	b.w	80079e8 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	2000057d 	.word	0x2000057d

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sfp_lock_acquire>
 80077e4:	6a23      	ldr	r3, [r4, #32]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sfp_lock_release>
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <__sinit+0x28>)
 80077f2:	6223      	str	r3, [r4, #32]
 80077f4:	4b04      	ldr	r3, [pc, #16]	; (8007808 <__sinit+0x2c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f5      	bne.n	80077e8 <__sinit+0xc>
 80077fc:	f7ff ffc4 	bl	8007788 <global_stdio_init.part.0>
 8007800:	e7f2      	b.n	80077e8 <__sinit+0xc>
 8007802:	bf00      	nop
 8007804:	08007749 	.word	0x08007749
 8007808:	20000574 	.word	0x20000574

0800780c <_fwalk_sglue>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	4607      	mov	r7, r0
 8007812:	4688      	mov	r8, r1
 8007814:	4614      	mov	r4, r2
 8007816:	2600      	movs	r6, #0
 8007818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800781c:	f1b9 0901 	subs.w	r9, r9, #1
 8007820:	d505      	bpl.n	800782e <_fwalk_sglue+0x22>
 8007822:	6824      	ldr	r4, [r4, #0]
 8007824:	2c00      	cmp	r4, #0
 8007826:	d1f7      	bne.n	8007818 <_fwalk_sglue+0xc>
 8007828:	4630      	mov	r0, r6
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d907      	bls.n	8007844 <_fwalk_sglue+0x38>
 8007834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007838:	3301      	adds	r3, #1
 800783a:	d003      	beq.n	8007844 <_fwalk_sglue+0x38>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	47c0      	blx	r8
 8007842:	4306      	orrs	r6, r0
 8007844:	3568      	adds	r5, #104	; 0x68
 8007846:	e7e9      	b.n	800781c <_fwalk_sglue+0x10>

08007848 <iprintf>:
 8007848:	b40f      	push	{r0, r1, r2, r3}
 800784a:	b507      	push	{r0, r1, r2, lr}
 800784c:	4906      	ldr	r1, [pc, #24]	; (8007868 <iprintf+0x20>)
 800784e:	ab04      	add	r3, sp, #16
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	f853 2b04 	ldr.w	r2, [r3], #4
 8007856:	6881      	ldr	r1, [r0, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f000 f9e9 	bl	8007c30 <_vfiprintf_r>
 800785e:	b003      	add	sp, #12
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b004      	add	sp, #16
 8007866:	4770      	bx	lr
 8007868:	200000a4 	.word	0x200000a4

0800786c <__sread>:
 800786c:	b510      	push	{r4, lr}
 800786e:	460c      	mov	r4, r1
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	f000 f868 	bl	8007948 <_read_r>
 8007878:	2800      	cmp	r0, #0
 800787a:	bfab      	itete	ge
 800787c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800787e:	89a3      	ldrhlt	r3, [r4, #12]
 8007880:	181b      	addge	r3, r3, r0
 8007882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007886:	bfac      	ite	ge
 8007888:	6563      	strge	r3, [r4, #84]	; 0x54
 800788a:	81a3      	strhlt	r3, [r4, #12]
 800788c:	bd10      	pop	{r4, pc}

0800788e <__swrite>:
 800788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	461f      	mov	r7, r3
 8007894:	898b      	ldrh	r3, [r1, #12]
 8007896:	05db      	lsls	r3, r3, #23
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	4616      	mov	r6, r2
 800789e:	d505      	bpl.n	80078ac <__swrite+0x1e>
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	2302      	movs	r3, #2
 80078a6:	2200      	movs	r2, #0
 80078a8:	f000 f83c 	bl	8007924 <_lseek_r>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	4632      	mov	r2, r6
 80078ba:	463b      	mov	r3, r7
 80078bc:	4628      	mov	r0, r5
 80078be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	f000 b853 	b.w	800796c <_write_r>

080078c6 <__sseek>:
 80078c6:	b510      	push	{r4, lr}
 80078c8:	460c      	mov	r4, r1
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 f829 	bl	8007924 <_lseek_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	bf15      	itete	ne
 80078d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078e2:	81a3      	strheq	r3, [r4, #12]
 80078e4:	bf18      	it	ne
 80078e6:	81a3      	strhne	r3, [r4, #12]
 80078e8:	bd10      	pop	{r4, pc}

080078ea <__sclose>:
 80078ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ee:	f000 b809 	b.w	8007904 <_close_r>

080078f2 <memset>:
 80078f2:	4402      	add	r2, r0
 80078f4:	4603      	mov	r3, r0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d100      	bne.n	80078fc <memset+0xa>
 80078fa:	4770      	bx	lr
 80078fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007900:	e7f9      	b.n	80078f6 <memset+0x4>
	...

08007904 <_close_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_close_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7fa f8f9 	bl	8001b06 <_close>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_close_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_close_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000578 	.word	0x20000578

08007924 <_lseek_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	; (8007944 <_lseek_r+0x20>)
 8007928:	4604      	mov	r4, r0
 800792a:	4608      	mov	r0, r1
 800792c:	4611      	mov	r1, r2
 800792e:	2200      	movs	r2, #0
 8007930:	602a      	str	r2, [r5, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	f7fa f90e 	bl	8001b54 <_lseek>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_lseek_r+0x1e>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_lseek_r+0x1e>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000578 	.word	0x20000578

08007948 <_read_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_read_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7fa f89c 	bl	8001a94 <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_read_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_read_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000578 	.word	0x20000578

0800796c <_write_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	; (800798c <_write_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fa f8a7 	bl	8001ace <_write>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_write_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_write_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20000578 	.word	0x20000578

08007990 <__errno>:
 8007990:	4b01      	ldr	r3, [pc, #4]	; (8007998 <__errno+0x8>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	200000a4 	.word	0x200000a4

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4d0d      	ldr	r5, [pc, #52]	; (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	; (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2600      	movs	r6, #0
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4d0b      	ldr	r5, [pc, #44]	; (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	; (80079e0 <__libc_init_array+0x44>)
 80079b0:	f000 fdc0 	bl	8008534 <_init>
 80079b4:	1b64      	subs	r4, r4, r5
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2600      	movs	r6, #0
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	0801baec 	.word	0x0801baec
 80079d8:	0801baec 	.word	0x0801baec
 80079dc:	0801baec 	.word	0x0801baec
 80079e0:	0801baf0 	.word	0x0801baf0

080079e4 <__retarget_lock_init_recursive>:
 80079e4:	4770      	bx	lr

080079e6 <__retarget_lock_acquire_recursive>:
 80079e6:	4770      	bx	lr

080079e8 <__retarget_lock_release_recursive>:
 80079e8:	4770      	bx	lr
	...

080079ec <_free_r>:
 80079ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ee:	2900      	cmp	r1, #0
 80079f0:	d044      	beq.n	8007a7c <_free_r+0x90>
 80079f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f6:	9001      	str	r0, [sp, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f1a1 0404 	sub.w	r4, r1, #4
 80079fe:	bfb8      	it	lt
 8007a00:	18e4      	addlt	r4, r4, r3
 8007a02:	f000 f8df 	bl	8007bc4 <__malloc_lock>
 8007a06:	4a1e      	ldr	r2, [pc, #120]	; (8007a80 <_free_r+0x94>)
 8007a08:	9801      	ldr	r0, [sp, #4]
 8007a0a:	6813      	ldr	r3, [r2, #0]
 8007a0c:	b933      	cbnz	r3, 8007a1c <_free_r+0x30>
 8007a0e:	6063      	str	r3, [r4, #4]
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	b003      	add	sp, #12
 8007a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a18:	f000 b8da 	b.w	8007bd0 <__malloc_unlock>
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	d908      	bls.n	8007a32 <_free_r+0x46>
 8007a20:	6825      	ldr	r5, [r4, #0]
 8007a22:	1961      	adds	r1, r4, r5
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf01      	itttt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	1949      	addeq	r1, r1, r5
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	e7ed      	b.n	8007a0e <_free_r+0x22>
 8007a32:	461a      	mov	r2, r3
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b10b      	cbz	r3, 8007a3c <_free_r+0x50>
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d9fa      	bls.n	8007a32 <_free_r+0x46>
 8007a3c:	6811      	ldr	r1, [r2, #0]
 8007a3e:	1855      	adds	r5, r2, r1
 8007a40:	42a5      	cmp	r5, r4
 8007a42:	d10b      	bne.n	8007a5c <_free_r+0x70>
 8007a44:	6824      	ldr	r4, [r4, #0]
 8007a46:	4421      	add	r1, r4
 8007a48:	1854      	adds	r4, r2, r1
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	d1e0      	bne.n	8007a12 <_free_r+0x26>
 8007a50:	681c      	ldr	r4, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	6053      	str	r3, [r2, #4]
 8007a56:	440c      	add	r4, r1
 8007a58:	6014      	str	r4, [r2, #0]
 8007a5a:	e7da      	b.n	8007a12 <_free_r+0x26>
 8007a5c:	d902      	bls.n	8007a64 <_free_r+0x78>
 8007a5e:	230c      	movs	r3, #12
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	e7d6      	b.n	8007a12 <_free_r+0x26>
 8007a64:	6825      	ldr	r5, [r4, #0]
 8007a66:	1961      	adds	r1, r4, r5
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf04      	itt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	6063      	str	r3, [r4, #4]
 8007a72:	bf04      	itt	eq
 8007a74:	1949      	addeq	r1, r1, r5
 8007a76:	6021      	streq	r1, [r4, #0]
 8007a78:	6054      	str	r4, [r2, #4]
 8007a7a:	e7ca      	b.n	8007a12 <_free_r+0x26>
 8007a7c:	b003      	add	sp, #12
 8007a7e:	bd30      	pop	{r4, r5, pc}
 8007a80:	20000580 	.word	0x20000580

08007a84 <sbrk_aligned>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4e0e      	ldr	r6, [pc, #56]	; (8007ac0 <sbrk_aligned+0x3c>)
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6831      	ldr	r1, [r6, #0]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b911      	cbnz	r1, 8007a96 <sbrk_aligned+0x12>
 8007a90:	f000 fcbc 	bl	800840c <_sbrk_r>
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 fcb7 	bl	800840c <_sbrk_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d00a      	beq.n	8007ab8 <sbrk_aligned+0x34>
 8007aa2:	1cc4      	adds	r4, r0, #3
 8007aa4:	f024 0403 	bic.w	r4, r4, #3
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d007      	beq.n	8007abc <sbrk_aligned+0x38>
 8007aac:	1a21      	subs	r1, r4, r0
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f000 fcac 	bl	800840c <_sbrk_r>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d101      	bne.n	8007abc <sbrk_aligned+0x38>
 8007ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8007abc:	4620      	mov	r0, r4
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	20000584 	.word	0x20000584

08007ac4 <_malloc_r>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	1ccd      	adds	r5, r1, #3
 8007aca:	f025 0503 	bic.w	r5, r5, #3
 8007ace:	3508      	adds	r5, #8
 8007ad0:	2d0c      	cmp	r5, #12
 8007ad2:	bf38      	it	cc
 8007ad4:	250c      	movcc	r5, #12
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	4607      	mov	r7, r0
 8007ada:	db01      	blt.n	8007ae0 <_malloc_r+0x1c>
 8007adc:	42a9      	cmp	r1, r5
 8007ade:	d905      	bls.n	8007aec <_malloc_r+0x28>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bc0 <_malloc_r+0xfc>
 8007af0:	f000 f868 	bl	8007bc4 <__malloc_lock>
 8007af4:	f8d8 3000 	ldr.w	r3, [r8]
 8007af8:	461c      	mov	r4, r3
 8007afa:	bb5c      	cbnz	r4, 8007b54 <_malloc_r+0x90>
 8007afc:	4629      	mov	r1, r5
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7ff ffc0 	bl	8007a84 <sbrk_aligned>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	4604      	mov	r4, r0
 8007b08:	d155      	bne.n	8007bb6 <_malloc_r+0xf2>
 8007b0a:	f8d8 4000 	ldr.w	r4, [r8]
 8007b0e:	4626      	mov	r6, r4
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	d145      	bne.n	8007ba0 <_malloc_r+0xdc>
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	d048      	beq.n	8007baa <_malloc_r+0xe6>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	eb04 0903 	add.w	r9, r4, r3
 8007b22:	f000 fc73 	bl	800840c <_sbrk_r>
 8007b26:	4581      	cmp	r9, r0
 8007b28:	d13f      	bne.n	8007baa <_malloc_r+0xe6>
 8007b2a:	6821      	ldr	r1, [r4, #0]
 8007b2c:	1a6d      	subs	r5, r5, r1
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ffa7 	bl	8007a84 <sbrk_aligned>
 8007b36:	3001      	adds	r0, #1
 8007b38:	d037      	beq.n	8007baa <_malloc_r+0xe6>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	442b      	add	r3, r5
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	f8d8 3000 	ldr.w	r3, [r8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d038      	beq.n	8007bba <_malloc_r+0xf6>
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	42a2      	cmp	r2, r4
 8007b4c:	d12b      	bne.n	8007ba6 <_malloc_r+0xe2>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	e00f      	b.n	8007b74 <_malloc_r+0xb0>
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	1b52      	subs	r2, r2, r5
 8007b58:	d41f      	bmi.n	8007b9a <_malloc_r+0xd6>
 8007b5a:	2a0b      	cmp	r2, #11
 8007b5c:	d917      	bls.n	8007b8e <_malloc_r+0xca>
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	6025      	str	r5, [r4, #0]
 8007b64:	bf18      	it	ne
 8007b66:	6059      	strne	r1, [r3, #4]
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	bf08      	it	eq
 8007b6c:	f8c8 1000 	streq.w	r1, [r8]
 8007b70:	5162      	str	r2, [r4, r5]
 8007b72:	604b      	str	r3, [r1, #4]
 8007b74:	4638      	mov	r0, r7
 8007b76:	f104 060b 	add.w	r6, r4, #11
 8007b7a:	f000 f829 	bl	8007bd0 <__malloc_unlock>
 8007b7e:	f026 0607 	bic.w	r6, r6, #7
 8007b82:	1d23      	adds	r3, r4, #4
 8007b84:	1af2      	subs	r2, r6, r3
 8007b86:	d0ae      	beq.n	8007ae6 <_malloc_r+0x22>
 8007b88:	1b9b      	subs	r3, r3, r6
 8007b8a:	50a3      	str	r3, [r4, r2]
 8007b8c:	e7ab      	b.n	8007ae6 <_malloc_r+0x22>
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	6862      	ldr	r2, [r4, #4]
 8007b92:	d1dd      	bne.n	8007b50 <_malloc_r+0x8c>
 8007b94:	f8c8 2000 	str.w	r2, [r8]
 8007b98:	e7ec      	b.n	8007b74 <_malloc_r+0xb0>
 8007b9a:	4623      	mov	r3, r4
 8007b9c:	6864      	ldr	r4, [r4, #4]
 8007b9e:	e7ac      	b.n	8007afa <_malloc_r+0x36>
 8007ba0:	4634      	mov	r4, r6
 8007ba2:	6876      	ldr	r6, [r6, #4]
 8007ba4:	e7b4      	b.n	8007b10 <_malloc_r+0x4c>
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	e7cc      	b.n	8007b44 <_malloc_r+0x80>
 8007baa:	230c      	movs	r3, #12
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f000 f80e 	bl	8007bd0 <__malloc_unlock>
 8007bb4:	e797      	b.n	8007ae6 <_malloc_r+0x22>
 8007bb6:	6025      	str	r5, [r4, #0]
 8007bb8:	e7dc      	b.n	8007b74 <_malloc_r+0xb0>
 8007bba:	605b      	str	r3, [r3, #4]
 8007bbc:	deff      	udf	#255	; 0xff
 8007bbe:	bf00      	nop
 8007bc0:	20000580 	.word	0x20000580

08007bc4 <__malloc_lock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__malloc_lock+0x8>)
 8007bc6:	f7ff bf0e 	b.w	80079e6 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	2000057c 	.word	0x2000057c

08007bd0 <__malloc_unlock>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__malloc_unlock+0x8>)
 8007bd2:	f7ff bf09 	b.w	80079e8 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	2000057c 	.word	0x2000057c

08007bdc <__sfputc_r>:
 8007bdc:	6893      	ldr	r3, [r2, #8]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	b410      	push	{r4}
 8007be4:	6093      	str	r3, [r2, #8]
 8007be6:	da08      	bge.n	8007bfa <__sfputc_r+0x1e>
 8007be8:	6994      	ldr	r4, [r2, #24]
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	db01      	blt.n	8007bf2 <__sfputc_r+0x16>
 8007bee:	290a      	cmp	r1, #10
 8007bf0:	d103      	bne.n	8007bfa <__sfputc_r+0x1e>
 8007bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf6:	f000 bb73 	b.w	80082e0 <__swbuf_r>
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	1c58      	adds	r0, r3, #1
 8007bfe:	6010      	str	r0, [r2, #0]
 8007c00:	7019      	strb	r1, [r3, #0]
 8007c02:	4608      	mov	r0, r1
 8007c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <__sfputs_r>:
 8007c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	460f      	mov	r7, r1
 8007c10:	4614      	mov	r4, r2
 8007c12:	18d5      	adds	r5, r2, r3
 8007c14:	42ac      	cmp	r4, r5
 8007c16:	d101      	bne.n	8007c1c <__sfputs_r+0x12>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e007      	b.n	8007c2c <__sfputs_r+0x22>
 8007c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c20:	463a      	mov	r2, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffda 	bl	8007bdc <__sfputc_r>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d1f3      	bne.n	8007c14 <__sfputs_r+0xa>
 8007c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c30 <_vfiprintf_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	460d      	mov	r5, r1
 8007c36:	b09d      	sub	sp, #116	; 0x74
 8007c38:	4614      	mov	r4, r2
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <_vfiprintf_r+0x18>
 8007c40:	6a03      	ldr	r3, [r0, #32]
 8007c42:	b90b      	cbnz	r3, 8007c48 <_vfiprintf_r+0x18>
 8007c44:	f7ff fdca 	bl	80077dc <__sinit>
 8007c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_vfiprintf_r+0x2a>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_vfiprintf_r+0x2a>
 8007c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c56:	f7ff fec6 	bl	80079e6 <__retarget_lock_acquire_recursive>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	071b      	lsls	r3, r3, #28
 8007c5e:	d501      	bpl.n	8007c64 <_vfiprintf_r+0x34>
 8007c60:	692b      	ldr	r3, [r5, #16]
 8007c62:	b99b      	cbnz	r3, 8007c8c <_vfiprintf_r+0x5c>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 fb78 	bl	800835c <__swsetup_r>
 8007c6c:	b170      	cbz	r0, 8007c8c <_vfiprintf_r+0x5c>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07dc      	lsls	r4, r3, #31
 8007c72:	d504      	bpl.n	8007c7e <_vfiprintf_r+0x4e>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b01d      	add	sp, #116	; 0x74
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	89ab      	ldrh	r3, [r5, #12]
 8007c80:	0598      	lsls	r0, r3, #22
 8007c82:	d4f7      	bmi.n	8007c74 <_vfiprintf_r+0x44>
 8007c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c86:	f7ff feaf 	bl	80079e8 <__retarget_lock_release_recursive>
 8007c8a:	e7f3      	b.n	8007c74 <_vfiprintf_r+0x44>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	2320      	movs	r3, #32
 8007c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c9a:	2330      	movs	r3, #48	; 0x30
 8007c9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e50 <_vfiprintf_r+0x220>
 8007ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ca4:	f04f 0901 	mov.w	r9, #1
 8007ca8:	4623      	mov	r3, r4
 8007caa:	469a      	mov	sl, r3
 8007cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb0:	b10a      	cbz	r2, 8007cb6 <_vfiprintf_r+0x86>
 8007cb2:	2a25      	cmp	r2, #37	; 0x25
 8007cb4:	d1f9      	bne.n	8007caa <_vfiprintf_r+0x7a>
 8007cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cba:	d00b      	beq.n	8007cd4 <_vfiprintf_r+0xa4>
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ffa1 	bl	8007c0a <__sfputs_r>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f000 80a9 	beq.w	8007e20 <_vfiprintf_r+0x1f0>
 8007cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd0:	445a      	add	r2, fp
 8007cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80a1 	beq.w	8007e20 <_vfiprintf_r+0x1f0>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce8:	f10a 0a01 	add.w	sl, sl, #1
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	9307      	str	r3, [sp, #28]
 8007cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8007cf6:	4654      	mov	r4, sl
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfe:	4854      	ldr	r0, [pc, #336]	; (8007e50 <_vfiprintf_r+0x220>)
 8007d00:	f7f8 fa66 	bl	80001d0 <memchr>
 8007d04:	9a04      	ldr	r2, [sp, #16]
 8007d06:	b9d8      	cbnz	r0, 8007d40 <_vfiprintf_r+0x110>
 8007d08:	06d1      	lsls	r1, r2, #27
 8007d0a:	bf44      	itt	mi
 8007d0c:	2320      	movmi	r3, #32
 8007d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d12:	0713      	lsls	r3, r2, #28
 8007d14:	bf44      	itt	mi
 8007d16:	232b      	movmi	r3, #43	; 0x2b
 8007d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d20:	2b2a      	cmp	r3, #42	; 0x2a
 8007d22:	d015      	beq.n	8007d50 <_vfiprintf_r+0x120>
 8007d24:	9a07      	ldr	r2, [sp, #28]
 8007d26:	4654      	mov	r4, sl
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f04f 0c0a 	mov.w	ip, #10
 8007d2e:	4621      	mov	r1, r4
 8007d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d34:	3b30      	subs	r3, #48	; 0x30
 8007d36:	2b09      	cmp	r3, #9
 8007d38:	d94d      	bls.n	8007dd6 <_vfiprintf_r+0x1a6>
 8007d3a:	b1b0      	cbz	r0, 8007d6a <_vfiprintf_r+0x13a>
 8007d3c:	9207      	str	r2, [sp, #28]
 8007d3e:	e014      	b.n	8007d6a <_vfiprintf_r+0x13a>
 8007d40:	eba0 0308 	sub.w	r3, r0, r8
 8007d44:	fa09 f303 	lsl.w	r3, r9, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	46a2      	mov	sl, r4
 8007d4e:	e7d2      	b.n	8007cf6 <_vfiprintf_r+0xc6>
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	1d19      	adds	r1, r3, #4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	9103      	str	r1, [sp, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfbb      	ittet	lt
 8007d5c:	425b      	neglt	r3, r3
 8007d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d62:	9307      	strge	r3, [sp, #28]
 8007d64:	9307      	strlt	r3, [sp, #28]
 8007d66:	bfb8      	it	lt
 8007d68:	9204      	strlt	r2, [sp, #16]
 8007d6a:	7823      	ldrb	r3, [r4, #0]
 8007d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d6e:	d10c      	bne.n	8007d8a <_vfiprintf_r+0x15a>
 8007d70:	7863      	ldrb	r3, [r4, #1]
 8007d72:	2b2a      	cmp	r3, #42	; 0x2a
 8007d74:	d134      	bne.n	8007de0 <_vfiprintf_r+0x1b0>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	1d1a      	adds	r2, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9203      	str	r2, [sp, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfb8      	it	lt
 8007d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d86:	3402      	adds	r4, #2
 8007d88:	9305      	str	r3, [sp, #20]
 8007d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e60 <_vfiprintf_r+0x230>
 8007d8e:	7821      	ldrb	r1, [r4, #0]
 8007d90:	2203      	movs	r2, #3
 8007d92:	4650      	mov	r0, sl
 8007d94:	f7f8 fa1c 	bl	80001d0 <memchr>
 8007d98:	b138      	cbz	r0, 8007daa <_vfiprintf_r+0x17a>
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	eba0 000a 	sub.w	r0, r0, sl
 8007da0:	2240      	movs	r2, #64	; 0x40
 8007da2:	4082      	lsls	r2, r0
 8007da4:	4313      	orrs	r3, r2
 8007da6:	3401      	adds	r4, #1
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dae:	4829      	ldr	r0, [pc, #164]	; (8007e54 <_vfiprintf_r+0x224>)
 8007db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007db4:	2206      	movs	r2, #6
 8007db6:	f7f8 fa0b 	bl	80001d0 <memchr>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d03f      	beq.n	8007e3e <_vfiprintf_r+0x20e>
 8007dbe:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <_vfiprintf_r+0x228>)
 8007dc0:	bb1b      	cbnz	r3, 8007e0a <_vfiprintf_r+0x1da>
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	3307      	adds	r3, #7
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	3308      	adds	r3, #8
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	443b      	add	r3, r7
 8007dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd4:	e768      	b.n	8007ca8 <_vfiprintf_r+0x78>
 8007dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dda:	460c      	mov	r4, r1
 8007ddc:	2001      	movs	r0, #1
 8007dde:	e7a6      	b.n	8007d2e <_vfiprintf_r+0xfe>
 8007de0:	2300      	movs	r3, #0
 8007de2:	3401      	adds	r4, #1
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	4619      	mov	r1, r3
 8007de8:	f04f 0c0a 	mov.w	ip, #10
 8007dec:	4620      	mov	r0, r4
 8007dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df2:	3a30      	subs	r2, #48	; 0x30
 8007df4:	2a09      	cmp	r2, #9
 8007df6:	d903      	bls.n	8007e00 <_vfiprintf_r+0x1d0>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0c6      	beq.n	8007d8a <_vfiprintf_r+0x15a>
 8007dfc:	9105      	str	r1, [sp, #20]
 8007dfe:	e7c4      	b.n	8007d8a <_vfiprintf_r+0x15a>
 8007e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e04:	4604      	mov	r4, r0
 8007e06:	2301      	movs	r3, #1
 8007e08:	e7f0      	b.n	8007dec <_vfiprintf_r+0x1bc>
 8007e0a:	ab03      	add	r3, sp, #12
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <_vfiprintf_r+0x22c>)
 8007e12:	a904      	add	r1, sp, #16
 8007e14:	4630      	mov	r0, r6
 8007e16:	f3af 8000 	nop.w
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	1c78      	adds	r0, r7, #1
 8007e1e:	d1d6      	bne.n	8007dce <_vfiprintf_r+0x19e>
 8007e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d405      	bmi.n	8007e32 <_vfiprintf_r+0x202>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	059a      	lsls	r2, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_vfiprintf_r+0x202>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e2e:	f7ff fddb 	bl	80079e8 <__retarget_lock_release_recursive>
 8007e32:	89ab      	ldrh	r3, [r5, #12]
 8007e34:	065b      	lsls	r3, r3, #25
 8007e36:	f53f af1d 	bmi.w	8007c74 <_vfiprintf_r+0x44>
 8007e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e3c:	e71c      	b.n	8007c78 <_vfiprintf_r+0x48>
 8007e3e:	ab03      	add	r3, sp, #12
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	462a      	mov	r2, r5
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <_vfiprintf_r+0x22c>)
 8007e46:	a904      	add	r1, sp, #16
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f879 	bl	8007f40 <_printf_i>
 8007e4e:	e7e4      	b.n	8007e1a <_vfiprintf_r+0x1ea>
 8007e50:	0801bab0 	.word	0x0801bab0
 8007e54:	0801baba 	.word	0x0801baba
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007c0b 	.word	0x08007c0b
 8007e60:	0801bab6 	.word	0x0801bab6

08007e64 <_printf_common>:
 8007e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	4616      	mov	r6, r2
 8007e6a:	4699      	mov	r9, r3
 8007e6c:	688a      	ldr	r2, [r1, #8]
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bfb8      	it	lt
 8007e78:	4613      	movlt	r3, r2
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e80:	4607      	mov	r7, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b10a      	cbz	r2, 8007e8a <_printf_common+0x26>
 8007e86:	3301      	adds	r3, #1
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	0699      	lsls	r1, r3, #26
 8007e8e:	bf42      	ittt	mi
 8007e90:	6833      	ldrmi	r3, [r6, #0]
 8007e92:	3302      	addmi	r3, #2
 8007e94:	6033      	strmi	r3, [r6, #0]
 8007e96:	6825      	ldr	r5, [r4, #0]
 8007e98:	f015 0506 	ands.w	r5, r5, #6
 8007e9c:	d106      	bne.n	8007eac <_printf_common+0x48>
 8007e9e:	f104 0a19 	add.w	sl, r4, #25
 8007ea2:	68e3      	ldr	r3, [r4, #12]
 8007ea4:	6832      	ldr	r2, [r6, #0]
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	dc26      	bgt.n	8007efa <_printf_common+0x96>
 8007eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb0:	1e13      	subs	r3, r2, #0
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	0692      	lsls	r2, r2, #26
 8007eba:	d42b      	bmi.n	8007f14 <_printf_common+0xb0>
 8007ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d01e      	beq.n	8007f08 <_printf_common+0xa4>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	6922      	ldr	r2, [r4, #16]
 8007ece:	f003 0306 	and.w	r3, r3, #6
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	bf02      	ittt	eq
 8007ed6:	68e5      	ldreq	r5, [r4, #12]
 8007ed8:	6833      	ldreq	r3, [r6, #0]
 8007eda:	1aed      	subeq	r5, r5, r3
 8007edc:	68a3      	ldr	r3, [r4, #8]
 8007ede:	bf0c      	ite	eq
 8007ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee4:	2500      	movne	r5, #0
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	bfc4      	itt	gt
 8007eea:	1a9b      	subgt	r3, r3, r2
 8007eec:	18ed      	addgt	r5, r5, r3
 8007eee:	2600      	movs	r6, #0
 8007ef0:	341a      	adds	r4, #26
 8007ef2:	42b5      	cmp	r5, r6
 8007ef4:	d11a      	bne.n	8007f2c <_printf_common+0xc8>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e008      	b.n	8007f0c <_printf_common+0xa8>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4649      	mov	r1, r9
 8007f00:	4638      	mov	r0, r7
 8007f02:	47c0      	blx	r8
 8007f04:	3001      	adds	r0, #1
 8007f06:	d103      	bne.n	8007f10 <_printf_common+0xac>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7c6      	b.n	8007ea2 <_printf_common+0x3e>
 8007f14:	18e1      	adds	r1, r4, r3
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	2030      	movs	r0, #48	; 0x30
 8007f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1e:	4422      	add	r2, r4
 8007f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f28:	3302      	adds	r3, #2
 8007f2a:	e7c7      	b.n	8007ebc <_printf_common+0x58>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4649      	mov	r1, r9
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d0e6      	beq.n	8007f08 <_printf_common+0xa4>
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7d9      	b.n	8007ef2 <_printf_common+0x8e>
	...

08007f40 <_printf_i>:
 8007f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	7e0f      	ldrb	r7, [r1, #24]
 8007f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f48:	2f78      	cmp	r7, #120	; 0x78
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	469a      	mov	sl, r3
 8007f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f56:	d807      	bhi.n	8007f68 <_printf_i+0x28>
 8007f58:	2f62      	cmp	r7, #98	; 0x62
 8007f5a:	d80a      	bhi.n	8007f72 <_printf_i+0x32>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	f000 80d4 	beq.w	800810a <_printf_i+0x1ca>
 8007f62:	2f58      	cmp	r7, #88	; 0x58
 8007f64:	f000 80c0 	beq.w	80080e8 <_printf_i+0x1a8>
 8007f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f70:	e03a      	b.n	8007fe8 <_printf_i+0xa8>
 8007f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f76:	2b15      	cmp	r3, #21
 8007f78:	d8f6      	bhi.n	8007f68 <_printf_i+0x28>
 8007f7a:	a101      	add	r1, pc, #4	; (adr r1, 8007f80 <_printf_i+0x40>)
 8007f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08007f69 	.word	0x08007f69
 8007f8c:	08007f69 	.word	0x08007f69
 8007f90:	08007f69 	.word	0x08007f69
 8007f94:	08007f69 	.word	0x08007f69
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08007f69 	.word	0x08007f69
 8007fa0:	08007f69 	.word	0x08007f69
 8007fa4:	08007f69 	.word	0x08007f69
 8007fa8:	08007f69 	.word	0x08007f69
 8007fac:	080080f1 	.word	0x080080f1
 8007fb0:	08008019 	.word	0x08008019
 8007fb4:	080080ab 	.word	0x080080ab
 8007fb8:	08007f69 	.word	0x08007f69
 8007fbc:	08007f69 	.word	0x08007f69
 8007fc0:	08008113 	.word	0x08008113
 8007fc4:	08007f69 	.word	0x08007f69
 8007fc8:	08008019 	.word	0x08008019
 8007fcc:	08007f69 	.word	0x08007f69
 8007fd0:	08007f69 	.word	0x08007f69
 8007fd4:	080080b3 	.word	0x080080b3
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e09f      	b.n	800812c <_printf_i+0x1ec>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	0607      	lsls	r7, r0, #24
 8007ff2:	f103 0104 	add.w	r1, r3, #4
 8007ff6:	6029      	str	r1, [r5, #0]
 8007ff8:	d501      	bpl.n	8007ffe <_printf_i+0xbe>
 8007ffa:	681e      	ldr	r6, [r3, #0]
 8007ffc:	e003      	b.n	8008006 <_printf_i+0xc6>
 8007ffe:	0646      	lsls	r6, r0, #25
 8008000:	d5fb      	bpl.n	8007ffa <_printf_i+0xba>
 8008002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008006:	2e00      	cmp	r6, #0
 8008008:	da03      	bge.n	8008012 <_printf_i+0xd2>
 800800a:	232d      	movs	r3, #45	; 0x2d
 800800c:	4276      	negs	r6, r6
 800800e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008012:	485a      	ldr	r0, [pc, #360]	; (800817c <_printf_i+0x23c>)
 8008014:	230a      	movs	r3, #10
 8008016:	e012      	b.n	800803e <_printf_i+0xfe>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	6820      	ldr	r0, [r4, #0]
 800801c:	1d19      	adds	r1, r3, #4
 800801e:	6029      	str	r1, [r5, #0]
 8008020:	0605      	lsls	r5, r0, #24
 8008022:	d501      	bpl.n	8008028 <_printf_i+0xe8>
 8008024:	681e      	ldr	r6, [r3, #0]
 8008026:	e002      	b.n	800802e <_printf_i+0xee>
 8008028:	0641      	lsls	r1, r0, #25
 800802a:	d5fb      	bpl.n	8008024 <_printf_i+0xe4>
 800802c:	881e      	ldrh	r6, [r3, #0]
 800802e:	4853      	ldr	r0, [pc, #332]	; (800817c <_printf_i+0x23c>)
 8008030:	2f6f      	cmp	r7, #111	; 0x6f
 8008032:	bf0c      	ite	eq
 8008034:	2308      	moveq	r3, #8
 8008036:	230a      	movne	r3, #10
 8008038:	2100      	movs	r1, #0
 800803a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800803e:	6865      	ldr	r5, [r4, #4]
 8008040:	60a5      	str	r5, [r4, #8]
 8008042:	2d00      	cmp	r5, #0
 8008044:	bfa2      	ittt	ge
 8008046:	6821      	ldrge	r1, [r4, #0]
 8008048:	f021 0104 	bicge.w	r1, r1, #4
 800804c:	6021      	strge	r1, [r4, #0]
 800804e:	b90e      	cbnz	r6, 8008054 <_printf_i+0x114>
 8008050:	2d00      	cmp	r5, #0
 8008052:	d04b      	beq.n	80080ec <_printf_i+0x1ac>
 8008054:	4615      	mov	r5, r2
 8008056:	fbb6 f1f3 	udiv	r1, r6, r3
 800805a:	fb03 6711 	mls	r7, r3, r1, r6
 800805e:	5dc7      	ldrb	r7, [r0, r7]
 8008060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008064:	4637      	mov	r7, r6
 8008066:	42bb      	cmp	r3, r7
 8008068:	460e      	mov	r6, r1
 800806a:	d9f4      	bls.n	8008056 <_printf_i+0x116>
 800806c:	2b08      	cmp	r3, #8
 800806e:	d10b      	bne.n	8008088 <_printf_i+0x148>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	07de      	lsls	r6, r3, #31
 8008074:	d508      	bpl.n	8008088 <_printf_i+0x148>
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	4299      	cmp	r1, r3
 800807c:	bfde      	ittt	le
 800807e:	2330      	movle	r3, #48	; 0x30
 8008080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008088:	1b52      	subs	r2, r2, r5
 800808a:	6122      	str	r2, [r4, #16]
 800808c:	f8cd a000 	str.w	sl, [sp]
 8008090:	464b      	mov	r3, r9
 8008092:	aa03      	add	r2, sp, #12
 8008094:	4621      	mov	r1, r4
 8008096:	4640      	mov	r0, r8
 8008098:	f7ff fee4 	bl	8007e64 <_printf_common>
 800809c:	3001      	adds	r0, #1
 800809e:	d14a      	bne.n	8008136 <_printf_i+0x1f6>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b004      	add	sp, #16
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	f043 0320 	orr.w	r3, r3, #32
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	4833      	ldr	r0, [pc, #204]	; (8008180 <_printf_i+0x240>)
 80080b4:	2778      	movs	r7, #120	; 0x78
 80080b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	6829      	ldr	r1, [r5, #0]
 80080be:	061f      	lsls	r7, r3, #24
 80080c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080c4:	d402      	bmi.n	80080cc <_printf_i+0x18c>
 80080c6:	065f      	lsls	r7, r3, #25
 80080c8:	bf48      	it	mi
 80080ca:	b2b6      	uxthmi	r6, r6
 80080cc:	07df      	lsls	r7, r3, #31
 80080ce:	bf48      	it	mi
 80080d0:	f043 0320 	orrmi.w	r3, r3, #32
 80080d4:	6029      	str	r1, [r5, #0]
 80080d6:	bf48      	it	mi
 80080d8:	6023      	strmi	r3, [r4, #0]
 80080da:	b91e      	cbnz	r6, 80080e4 <_printf_i+0x1a4>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	f023 0320 	bic.w	r3, r3, #32
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	2310      	movs	r3, #16
 80080e6:	e7a7      	b.n	8008038 <_printf_i+0xf8>
 80080e8:	4824      	ldr	r0, [pc, #144]	; (800817c <_printf_i+0x23c>)
 80080ea:	e7e4      	b.n	80080b6 <_printf_i+0x176>
 80080ec:	4615      	mov	r5, r2
 80080ee:	e7bd      	b.n	800806c <_printf_i+0x12c>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	6826      	ldr	r6, [r4, #0]
 80080f4:	6961      	ldr	r1, [r4, #20]
 80080f6:	1d18      	adds	r0, r3, #4
 80080f8:	6028      	str	r0, [r5, #0]
 80080fa:	0635      	lsls	r5, r6, #24
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	d501      	bpl.n	8008104 <_printf_i+0x1c4>
 8008100:	6019      	str	r1, [r3, #0]
 8008102:	e002      	b.n	800810a <_printf_i+0x1ca>
 8008104:	0670      	lsls	r0, r6, #25
 8008106:	d5fb      	bpl.n	8008100 <_printf_i+0x1c0>
 8008108:	8019      	strh	r1, [r3, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	4615      	mov	r5, r2
 8008110:	e7bc      	b.n	800808c <_printf_i+0x14c>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	1d1a      	adds	r2, r3, #4
 8008116:	602a      	str	r2, [r5, #0]
 8008118:	681d      	ldr	r5, [r3, #0]
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	2100      	movs	r1, #0
 800811e:	4628      	mov	r0, r5
 8008120:	f7f8 f856 	bl	80001d0 <memchr>
 8008124:	b108      	cbz	r0, 800812a <_printf_i+0x1ea>
 8008126:	1b40      	subs	r0, r0, r5
 8008128:	6060      	str	r0, [r4, #4]
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	2300      	movs	r3, #0
 8008130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008134:	e7aa      	b.n	800808c <_printf_i+0x14c>
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	462a      	mov	r2, r5
 800813a:	4649      	mov	r1, r9
 800813c:	4640      	mov	r0, r8
 800813e:	47d0      	blx	sl
 8008140:	3001      	adds	r0, #1
 8008142:	d0ad      	beq.n	80080a0 <_printf_i+0x160>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	079b      	lsls	r3, r3, #30
 8008148:	d413      	bmi.n	8008172 <_printf_i+0x232>
 800814a:	68e0      	ldr	r0, [r4, #12]
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	4298      	cmp	r0, r3
 8008150:	bfb8      	it	lt
 8008152:	4618      	movlt	r0, r3
 8008154:	e7a6      	b.n	80080a4 <_printf_i+0x164>
 8008156:	2301      	movs	r3, #1
 8008158:	4632      	mov	r2, r6
 800815a:	4649      	mov	r1, r9
 800815c:	4640      	mov	r0, r8
 800815e:	47d0      	blx	sl
 8008160:	3001      	adds	r0, #1
 8008162:	d09d      	beq.n	80080a0 <_printf_i+0x160>
 8008164:	3501      	adds	r5, #1
 8008166:	68e3      	ldr	r3, [r4, #12]
 8008168:	9903      	ldr	r1, [sp, #12]
 800816a:	1a5b      	subs	r3, r3, r1
 800816c:	42ab      	cmp	r3, r5
 800816e:	dcf2      	bgt.n	8008156 <_printf_i+0x216>
 8008170:	e7eb      	b.n	800814a <_printf_i+0x20a>
 8008172:	2500      	movs	r5, #0
 8008174:	f104 0619 	add.w	r6, r4, #25
 8008178:	e7f5      	b.n	8008166 <_printf_i+0x226>
 800817a:	bf00      	nop
 800817c:	0801bac1 	.word	0x0801bac1
 8008180:	0801bad2 	.word	0x0801bad2

08008184 <__sflush_r>:
 8008184:	898a      	ldrh	r2, [r1, #12]
 8008186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	4605      	mov	r5, r0
 800818c:	0710      	lsls	r0, r2, #28
 800818e:	460c      	mov	r4, r1
 8008190:	d458      	bmi.n	8008244 <__sflush_r+0xc0>
 8008192:	684b      	ldr	r3, [r1, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc05      	bgt.n	80081a4 <__sflush_r+0x20>
 8008198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc02      	bgt.n	80081a4 <__sflush_r+0x20>
 800819e:	2000      	movs	r0, #0
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	d0f9      	beq.n	800819e <__sflush_r+0x1a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b0:	682f      	ldr	r7, [r5, #0]
 80081b2:	6a21      	ldr	r1, [r4, #32]
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	d032      	beq.n	800821e <__sflush_r+0x9a>
 80081b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	075a      	lsls	r2, r3, #29
 80081be:	d505      	bpl.n	80081cc <__sflush_r+0x48>
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081c6:	b10b      	cbz	r3, 80081cc <__sflush_r+0x48>
 80081c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ca:	1ac0      	subs	r0, r0, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	4602      	mov	r2, r0
 80081d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d2:	6a21      	ldr	r1, [r4, #32]
 80081d4:	4628      	mov	r0, r5
 80081d6:	47b0      	blx	r6
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	d106      	bne.n	80081ec <__sflush_r+0x68>
 80081de:	6829      	ldr	r1, [r5, #0]
 80081e0:	291d      	cmp	r1, #29
 80081e2:	d82b      	bhi.n	800823c <__sflush_r+0xb8>
 80081e4:	4a29      	ldr	r2, [pc, #164]	; (800828c <__sflush_r+0x108>)
 80081e6:	410a      	asrs	r2, r1
 80081e8:	07d6      	lsls	r6, r2, #31
 80081ea:	d427      	bmi.n	800823c <__sflush_r+0xb8>
 80081ec:	2200      	movs	r2, #0
 80081ee:	6062      	str	r2, [r4, #4]
 80081f0:	04d9      	lsls	r1, r3, #19
 80081f2:	6922      	ldr	r2, [r4, #16]
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	d504      	bpl.n	8008202 <__sflush_r+0x7e>
 80081f8:	1c42      	adds	r2, r0, #1
 80081fa:	d101      	bne.n	8008200 <__sflush_r+0x7c>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b903      	cbnz	r3, 8008202 <__sflush_r+0x7e>
 8008200:	6560      	str	r0, [r4, #84]	; 0x54
 8008202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008204:	602f      	str	r7, [r5, #0]
 8008206:	2900      	cmp	r1, #0
 8008208:	d0c9      	beq.n	800819e <__sflush_r+0x1a>
 800820a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820e:	4299      	cmp	r1, r3
 8008210:	d002      	beq.n	8008218 <__sflush_r+0x94>
 8008212:	4628      	mov	r0, r5
 8008214:	f7ff fbea 	bl	80079ec <_free_r>
 8008218:	2000      	movs	r0, #0
 800821a:	6360      	str	r0, [r4, #52]	; 0x34
 800821c:	e7c0      	b.n	80081a0 <__sflush_r+0x1c>
 800821e:	2301      	movs	r3, #1
 8008220:	4628      	mov	r0, r5
 8008222:	47b0      	blx	r6
 8008224:	1c41      	adds	r1, r0, #1
 8008226:	d1c8      	bne.n	80081ba <__sflush_r+0x36>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0c5      	beq.n	80081ba <__sflush_r+0x36>
 800822e:	2b1d      	cmp	r3, #29
 8008230:	d001      	beq.n	8008236 <__sflush_r+0xb2>
 8008232:	2b16      	cmp	r3, #22
 8008234:	d101      	bne.n	800823a <__sflush_r+0xb6>
 8008236:	602f      	str	r7, [r5, #0]
 8008238:	e7b1      	b.n	800819e <__sflush_r+0x1a>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e7ad      	b.n	80081a0 <__sflush_r+0x1c>
 8008244:	690f      	ldr	r7, [r1, #16]
 8008246:	2f00      	cmp	r7, #0
 8008248:	d0a9      	beq.n	800819e <__sflush_r+0x1a>
 800824a:	0793      	lsls	r3, r2, #30
 800824c:	680e      	ldr	r6, [r1, #0]
 800824e:	bf08      	it	eq
 8008250:	694b      	ldreq	r3, [r1, #20]
 8008252:	600f      	str	r7, [r1, #0]
 8008254:	bf18      	it	ne
 8008256:	2300      	movne	r3, #0
 8008258:	eba6 0807 	sub.w	r8, r6, r7
 800825c:	608b      	str	r3, [r1, #8]
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	dd9c      	ble.n	800819e <__sflush_r+0x1a>
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008268:	4643      	mov	r3, r8
 800826a:	463a      	mov	r2, r7
 800826c:	4628      	mov	r0, r5
 800826e:	47b0      	blx	r6
 8008270:	2800      	cmp	r0, #0
 8008272:	dc06      	bgt.n	8008282 <__sflush_r+0xfe>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	e78e      	b.n	80081a0 <__sflush_r+0x1c>
 8008282:	4407      	add	r7, r0
 8008284:	eba8 0800 	sub.w	r8, r8, r0
 8008288:	e7e9      	b.n	800825e <__sflush_r+0xda>
 800828a:	bf00      	nop
 800828c:	dfbffffe 	.word	0xdfbffffe

08008290 <_fflush_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b913      	cbnz	r3, 80082a0 <_fflush_r+0x10>
 800829a:	2500      	movs	r5, #0
 800829c:	4628      	mov	r0, r5
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	b118      	cbz	r0, 80082aa <_fflush_r+0x1a>
 80082a2:	6a03      	ldr	r3, [r0, #32]
 80082a4:	b90b      	cbnz	r3, 80082aa <_fflush_r+0x1a>
 80082a6:	f7ff fa99 	bl	80077dc <__sinit>
 80082aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f3      	beq.n	800829a <_fflush_r+0xa>
 80082b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082b4:	07d0      	lsls	r0, r2, #31
 80082b6:	d404      	bmi.n	80082c2 <_fflush_r+0x32>
 80082b8:	0599      	lsls	r1, r3, #22
 80082ba:	d402      	bmi.n	80082c2 <_fflush_r+0x32>
 80082bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082be:	f7ff fb92 	bl	80079e6 <__retarget_lock_acquire_recursive>
 80082c2:	4628      	mov	r0, r5
 80082c4:	4621      	mov	r1, r4
 80082c6:	f7ff ff5d 	bl	8008184 <__sflush_r>
 80082ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082cc:	07da      	lsls	r2, r3, #31
 80082ce:	4605      	mov	r5, r0
 80082d0:	d4e4      	bmi.n	800829c <_fflush_r+0xc>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	059b      	lsls	r3, r3, #22
 80082d6:	d4e1      	bmi.n	800829c <_fflush_r+0xc>
 80082d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082da:	f7ff fb85 	bl	80079e8 <__retarget_lock_release_recursive>
 80082de:	e7dd      	b.n	800829c <_fflush_r+0xc>

080082e0 <__swbuf_r>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	460e      	mov	r6, r1
 80082e4:	4614      	mov	r4, r2
 80082e6:	4605      	mov	r5, r0
 80082e8:	b118      	cbz	r0, 80082f2 <__swbuf_r+0x12>
 80082ea:	6a03      	ldr	r3, [r0, #32]
 80082ec:	b90b      	cbnz	r3, 80082f2 <__swbuf_r+0x12>
 80082ee:	f7ff fa75 	bl	80077dc <__sinit>
 80082f2:	69a3      	ldr	r3, [r4, #24]
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	071a      	lsls	r2, r3, #28
 80082fa:	d525      	bpl.n	8008348 <__swbuf_r+0x68>
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	b31b      	cbz	r3, 8008348 <__swbuf_r+0x68>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	1a98      	subs	r0, r3, r2
 8008306:	6963      	ldr	r3, [r4, #20]
 8008308:	b2f6      	uxtb	r6, r6
 800830a:	4283      	cmp	r3, r0
 800830c:	4637      	mov	r7, r6
 800830e:	dc04      	bgt.n	800831a <__swbuf_r+0x3a>
 8008310:	4621      	mov	r1, r4
 8008312:	4628      	mov	r0, r5
 8008314:	f7ff ffbc 	bl	8008290 <_fflush_r>
 8008318:	b9e0      	cbnz	r0, 8008354 <__swbuf_r+0x74>
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	3b01      	subs	r3, #1
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	701e      	strb	r6, [r3, #0]
 8008328:	6962      	ldr	r2, [r4, #20]
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	429a      	cmp	r2, r3
 800832e:	d004      	beq.n	800833a <__swbuf_r+0x5a>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	07db      	lsls	r3, r3, #31
 8008334:	d506      	bpl.n	8008344 <__swbuf_r+0x64>
 8008336:	2e0a      	cmp	r6, #10
 8008338:	d104      	bne.n	8008344 <__swbuf_r+0x64>
 800833a:	4621      	mov	r1, r4
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff ffa7 	bl	8008290 <_fflush_r>
 8008342:	b938      	cbnz	r0, 8008354 <__swbuf_r+0x74>
 8008344:	4638      	mov	r0, r7
 8008346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008348:	4621      	mov	r1, r4
 800834a:	4628      	mov	r0, r5
 800834c:	f000 f806 	bl	800835c <__swsetup_r>
 8008350:	2800      	cmp	r0, #0
 8008352:	d0d5      	beq.n	8008300 <__swbuf_r+0x20>
 8008354:	f04f 37ff 	mov.w	r7, #4294967295
 8008358:	e7f4      	b.n	8008344 <__swbuf_r+0x64>
	...

0800835c <__swsetup_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4b2a      	ldr	r3, [pc, #168]	; (8008408 <__swsetup_r+0xac>)
 8008360:	4605      	mov	r5, r0
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	460c      	mov	r4, r1
 8008366:	b118      	cbz	r0, 8008370 <__swsetup_r+0x14>
 8008368:	6a03      	ldr	r3, [r0, #32]
 800836a:	b90b      	cbnz	r3, 8008370 <__swsetup_r+0x14>
 800836c:	f7ff fa36 	bl	80077dc <__sinit>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008376:	0718      	lsls	r0, r3, #28
 8008378:	d422      	bmi.n	80083c0 <__swsetup_r+0x64>
 800837a:	06d9      	lsls	r1, r3, #27
 800837c:	d407      	bmi.n	800838e <__swsetup_r+0x32>
 800837e:	2309      	movs	r3, #9
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	e034      	b.n	80083f8 <__swsetup_r+0x9c>
 800838e:	0758      	lsls	r0, r3, #29
 8008390:	d512      	bpl.n	80083b8 <__swsetup_r+0x5c>
 8008392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008394:	b141      	cbz	r1, 80083a8 <__swsetup_r+0x4c>
 8008396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839a:	4299      	cmp	r1, r3
 800839c:	d002      	beq.n	80083a4 <__swsetup_r+0x48>
 800839e:	4628      	mov	r0, r5
 80083a0:	f7ff fb24 	bl	80079ec <_free_r>
 80083a4:	2300      	movs	r3, #0
 80083a6:	6363      	str	r3, [r4, #52]	; 0x34
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	2300      	movs	r3, #0
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f043 0308 	orr.w	r3, r3, #8
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	b94b      	cbnz	r3, 80083d8 <__swsetup_r+0x7c>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ce:	d003      	beq.n	80083d8 <__swsetup_r+0x7c>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 f850 	bl	8008478 <__smakebuf_r>
 80083d8:	89a0      	ldrh	r0, [r4, #12]
 80083da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083de:	f010 0301 	ands.w	r3, r0, #1
 80083e2:	d00a      	beq.n	80083fa <__swsetup_r+0x9e>
 80083e4:	2300      	movs	r3, #0
 80083e6:	60a3      	str	r3, [r4, #8]
 80083e8:	6963      	ldr	r3, [r4, #20]
 80083ea:	425b      	negs	r3, r3
 80083ec:	61a3      	str	r3, [r4, #24]
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	b943      	cbnz	r3, 8008404 <__swsetup_r+0xa8>
 80083f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083f6:	d1c4      	bne.n	8008382 <__swsetup_r+0x26>
 80083f8:	bd38      	pop	{r3, r4, r5, pc}
 80083fa:	0781      	lsls	r1, r0, #30
 80083fc:	bf58      	it	pl
 80083fe:	6963      	ldrpl	r3, [r4, #20]
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	e7f4      	b.n	80083ee <__swsetup_r+0x92>
 8008404:	2000      	movs	r0, #0
 8008406:	e7f7      	b.n	80083f8 <__swsetup_r+0x9c>
 8008408:	200000a4 	.word	0x200000a4

0800840c <_sbrk_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	; (8008428 <_sbrk_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7f9 fbaa 	bl	8001b70 <_sbrk>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_sbrk_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_sbrk_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20000578 	.word	0x20000578

0800842c <__swhatbuf_r>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	460c      	mov	r4, r1
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	2900      	cmp	r1, #0
 8008436:	b096      	sub	sp, #88	; 0x58
 8008438:	4615      	mov	r5, r2
 800843a:	461e      	mov	r6, r3
 800843c:	da0d      	bge.n	800845a <__swhatbuf_r+0x2e>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008444:	f04f 0100 	mov.w	r1, #0
 8008448:	bf0c      	ite	eq
 800844a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800844e:	2340      	movne	r3, #64	; 0x40
 8008450:	2000      	movs	r0, #0
 8008452:	6031      	str	r1, [r6, #0]
 8008454:	602b      	str	r3, [r5, #0]
 8008456:	b016      	add	sp, #88	; 0x58
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	466a      	mov	r2, sp
 800845c:	f000 f848 	bl	80084f0 <_fstat_r>
 8008460:	2800      	cmp	r0, #0
 8008462:	dbec      	blt.n	800843e <__swhatbuf_r+0x12>
 8008464:	9901      	ldr	r1, [sp, #4]
 8008466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800846a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800846e:	4259      	negs	r1, r3
 8008470:	4159      	adcs	r1, r3
 8008472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008476:	e7eb      	b.n	8008450 <__swhatbuf_r+0x24>

08008478 <__smakebuf_r>:
 8008478:	898b      	ldrh	r3, [r1, #12]
 800847a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800847c:	079d      	lsls	r5, r3, #30
 800847e:	4606      	mov	r6, r0
 8008480:	460c      	mov	r4, r1
 8008482:	d507      	bpl.n	8008494 <__smakebuf_r+0x1c>
 8008484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	2301      	movs	r3, #1
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	b002      	add	sp, #8
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	ab01      	add	r3, sp, #4
 8008496:	466a      	mov	r2, sp
 8008498:	f7ff ffc8 	bl	800842c <__swhatbuf_r>
 800849c:	9900      	ldr	r1, [sp, #0]
 800849e:	4605      	mov	r5, r0
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff fb0f 	bl	8007ac4 <_malloc_r>
 80084a6:	b948      	cbnz	r0, 80084bc <__smakebuf_r+0x44>
 80084a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ac:	059a      	lsls	r2, r3, #22
 80084ae:	d4ef      	bmi.n	8008490 <__smakebuf_r+0x18>
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	81a3      	strh	r3, [r4, #12]
 80084ba:	e7e3      	b.n	8008484 <__smakebuf_r+0xc>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	6020      	str	r0, [r4, #0]
 80084c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	9b00      	ldr	r3, [sp, #0]
 80084c8:	6163      	str	r3, [r4, #20]
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	6120      	str	r0, [r4, #16]
 80084ce:	b15b      	cbz	r3, 80084e8 <__smakebuf_r+0x70>
 80084d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d4:	4630      	mov	r0, r6
 80084d6:	f000 f81d 	bl	8008514 <_isatty_r>
 80084da:	b128      	cbz	r0, 80084e8 <__smakebuf_r+0x70>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	431d      	orrs	r5, r3
 80084ec:	81a5      	strh	r5, [r4, #12]
 80084ee:	e7cf      	b.n	8008490 <__smakebuf_r+0x18>

080084f0 <_fstat_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	; (8008510 <_fstat_r+0x20>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	f7f9 fb0e 	bl	8001b1e <_fstat>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d102      	bne.n	800850c <_fstat_r+0x1c>
 8008506:	682b      	ldr	r3, [r5, #0]
 8008508:	b103      	cbz	r3, 800850c <_fstat_r+0x1c>
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	bd38      	pop	{r3, r4, r5, pc}
 800850e:	bf00      	nop
 8008510:	20000578 	.word	0x20000578

08008514 <_isatty_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d06      	ldr	r5, [pc, #24]	; (8008530 <_isatty_r+0x1c>)
 8008518:	2300      	movs	r3, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	602b      	str	r3, [r5, #0]
 8008520:	f7f9 fb0d 	bl	8001b3e <_isatty>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_isatty_r+0x1a>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_isatty_r+0x1a>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20000578 	.word	0x20000578

08008534 <_init>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr

08008540 <_fini>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr
