
tank_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000136ac  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f18c  0801f18c  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801f18c  0801f18c  0002f18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f194  0801f194  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f194  0801f194  0002f194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f198  0801f198  0002f198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801f19c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dcc  200000a8  0801f244  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e74  0801f244  00032e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b30e  00000000  00000000  0003011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f9  00000000  00000000  0004b429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0004ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237bc  00000000  00000000  00050340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e04a  00000000  00000000  00073afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e03da  00000000  00000000  00091b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000010cf  00000000  00000000  00171f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000649c  00000000  00000000  00172ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017948c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bac8 	.word	0x0800bac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800bac8 	.word	0x0800bac8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <arm_cmplx_mag_f32>:
#else
void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8000e68:	e030      	b.n	8000ecc <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1d1a      	adds	r2, r3, #4
 8000e6e:	60fa      	str	r2, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	60fa      	str	r2, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8000e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e86:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	60ba      	str	r2, [r7, #8]
 8000e98:	edc7 7a06 	vstr	s15, [r7, #24]
 8000e9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000e9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	db07      	blt.n	8000ebc <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8000eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eb0:	eef1 7ae7 	vsqrt.f32	s15, s15
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000eba:	e004      	b.n	8000ec6 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000ec4:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1cb      	bne.n	8000e6a <arm_cmplx_mag_f32+0x12>
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	372c      	adds	r7, #44	; 0x2c
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e043      	b.n	8000f7c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	441a      	add	r2, r3
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	68f9      	ldr	r1, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	3301      	adds	r3, #1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	441a      	add	r2, r3
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

    i += 2;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3b7      	bcc.n	8000ef4 <arm_bitreversal_32+0x14>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b0a0      	sub	sp, #128	; 0x80
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8000fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8000fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8000fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8000fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8000fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd0:	4413      	add	r3, r2
 8000fd2:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fda:	e1b6      	b.n	800134a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8000ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8000ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8001000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8001006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800100c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800101e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8001024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800102a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800103c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001040:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	1d1a      	adds	r2, r3, #4
 8001048:	603a      	str	r2, [r7, #0]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001052:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001056:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	1d1a      	adds	r2, r3, #4
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001068:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800106c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	1d1a      	adds	r2, r3, #4
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800107e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001082:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	1d1a      	adds	r2, r3, #4
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001094:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001098:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80010a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80010b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80010c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80010c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80010d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80010ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f4:	1d1a      	adds	r2, r3, #4
 80010f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001100:	ed97 7a08 	vldr	s14, [r7, #32]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110a:	1d1a      	adds	r2, r3, #4
 800110c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001116:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800111a:	edd7 7a05 	vldr	s15, [r7, #20]
 800111e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800112c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001130:	edd7 7a06 	vldr	s15, [r7, #24]
 8001134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001138:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800113c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001140:	edd7 7a07 	vldr	s15, [r7, #28]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800114c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001150:	edd7 7a08 	vldr	s15, [r7, #32]
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800115c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001160:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800116c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800116e:	1d1a      	adds	r2, r3, #4
 8001170:	673a      	str	r2, [r7, #112]	; 0x70
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001178:	1d1a      	adds	r2, r3, #4
 800117a:	673a      	str	r2, [r7, #112]	; 0x70
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001180:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001184:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8001190:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001194:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80011a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80011b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80011c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c2:	1d1a      	adds	r2, r3, #4
 80011c4:	677a      	str	r2, [r7, #116]	; 0x74
 80011c6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80011ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80011d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d8:	1d1a      	adds	r2, r3, #4
 80011da:	677a      	str	r2, [r7, #116]	; 0x74
 80011dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80011ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80011fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001200:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800122c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800122e:	1d1a      	adds	r2, r3, #4
 8001230:	67ba      	str	r2, [r7, #120]	; 0x78
 8001232:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001236:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001244:	1d1a      	adds	r2, r3, #4
 8001246:	67ba      	str	r2, [r7, #120]	; 0x78
 8001248:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800124c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	673a      	str	r2, [r7, #112]	; 0x70
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8001262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	673a      	str	r2, [r7, #112]	; 0x70
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800126c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001270:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800127c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001280:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800128c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001290:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800129c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80012ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ae:	1d1a      	adds	r2, r3, #4
 80012b0:	677a      	str	r2, [r7, #116]	; 0x74
 80012b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80012b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80012c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	677a      	str	r2, [r7, #116]	; 0x74
 80012c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80012e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8001308:	edd7 7a04 	vldr	s15, [r7, #16]
 800130c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8001318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	67ba      	str	r2, [r7, #120]	; 0x78
 800131e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001322:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800132e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001330:	1d1a      	adds	r2, r3, #4
 8001332:	67ba      	str	r2, [r7, #120]	; 0x78
 8001334:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001338:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800133c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001340:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001346:	3b01      	subs	r3, #1
 8001348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800134a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800134c:	2b00      	cmp	r3, #0
 800134e:	f47f ae45 	bne.w	8000fdc <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001354:	b299      	uxth	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2302      	movs	r3, #2
 800135c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800135e:	f001 f80f 	bl	8002380 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001364:	b299      	uxth	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2302      	movs	r3, #2
 800136c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800136e:	f001 f807 	bl	8002380 <arm_radix8_butterfly_f32>
}
 8001372:	bf00      	nop
 8001374:	3780      	adds	r7, #128	; 0x80
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b0ac      	sub	sp, #176	; 0xb0
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800139e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013a8:	4413      	add	r3, r2
 80013aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80013c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013c6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80013c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013cc:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80013ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013d2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80013d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d8:	3b04      	subs	r3, #4
 80013da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80013de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013e2:	3b04      	subs	r3, #4
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80013e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ec:	3b04      	subs	r3, #4
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80013f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013fc:	4413      	add	r3, r2
 80013fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800140a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800140e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800141a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800142c:	2306      	movs	r3, #6
 800142e:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3304      	adds	r3, #4
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001468:	3304      	adds	r3, #4
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001482:	3304      	adds	r3, #4
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001494:	3304      	adds	r3, #4
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014a6:	3304      	adds	r3, #4
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80014b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80014c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80014d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80014e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80014f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014f8:	3304      	adds	r3, #4
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800150a:	3304      	adds	r3, #4
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800151c:	3304      	adds	r3, #4
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800152e:	3304      	adds	r3, #4
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800153c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800155c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	603a      	str	r2, [r7, #0]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001586:	3304      	adds	r3, #4
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001598:	3304      	adds	r3, #4
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	1d1a      	adds	r2, r3, #4
 80015a2:	603a      	str	r2, [r7, #0]
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80015ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80015ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80015c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80015c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015cc:	1d1a      	adds	r2, r3, #4
 80015ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80015d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015da:	1d1a      	adds	r2, r3, #4
 80015dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015e0:	6a3a      	ldr	r2, [r7, #32]
 80015e2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80015e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80015f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015f6:	1d1a      	adds	r2, r3, #4
 80015f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001608:	4413      	add	r3, r2
 800160a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001616:	4413      	add	r3, r2
 8001618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800161c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800162a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800162e:	3b02      	subs	r3, #2
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001636:	e31c      	b.n	8001c72 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001670:	3304      	adds	r3, #4
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168a:	3304      	adds	r3, #4
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001694:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169c:	3304      	adds	r3, #4
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ae:	3304      	adds	r3, #4
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80016c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80016dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80016e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80016fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001700:	3304      	adds	r3, #4
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001712:	3304      	adds	r3, #4
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001724:	3304      	adds	r3, #4
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800172e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001736:	3304      	adds	r3, #4
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	1d1a      	adds	r2, r3, #4
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800178a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800178e:	3304      	adds	r3, #4
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a0:	3304      	adds	r3, #4
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	1d1a      	adds	r2, r3, #4
 80017aa:	603a      	str	r2, [r7, #0]
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80017b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b8:	3b04      	subs	r3, #4
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017c2:	3b04      	subs	r3, #4
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80017d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d4:	3b04      	subs	r3, #4
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017de:	3b04      	subs	r3, #4
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80017ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001818:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800181c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001830:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800183c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001854:	3b04      	subs	r3, #4
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001862:	3b04      	subs	r3, #4
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001874:	3b04      	subs	r3, #4
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800187e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001886:	3b04      	subs	r3, #4
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001890:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8001894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80018b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80018d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018d8:	3b04      	subs	r3, #4
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e2:	3b04      	subs	r3, #4
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001914:	1f1a      	subs	r2, r3, #4
 8001916:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001926:	3b04      	subs	r3, #4
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001938:	3b04      	subs	r3, #4
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001942:	1f1a      	subs	r2, r3, #4
 8001944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8001950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001954:	1d1a      	adds	r2, r3, #4
 8001956:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800195e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800196c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001970:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001978:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800197c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001980:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800198c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001990:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800199c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80019ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b0:	1d1a      	adds	r2, r3, #4
 80019b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019b6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80019ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80019c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ca:	1d1a      	adds	r2, r3, #4
 80019cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80019d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80019e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80019e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80019f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8001a00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8001a10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8001a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a24:	1f1a      	subs	r2, r3, #4
 8001a26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3e:	1f1a      	subs	r2, r3, #4
 8001a40:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001a48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8001a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8001a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a6e:	4413      	add	r3, r2
 8001a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001a74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8001a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8001a94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8001aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab8:	1d1a      	adds	r2, r3, #4
 8001aba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001abe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ac2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ad2:	1d1a      	adds	r2, r3, #4
 8001ad4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ad8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001adc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8001afc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b00:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8001b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8001b1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b20:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8001b2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b30:	1f1a      	subs	r2, r3, #4
 8001b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b36:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b42:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b4a:	1f1a      	subs	r2, r3, #4
 8001b4c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001b60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8001b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8001b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8001b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8001ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8001bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8001bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bc4:	1d1a      	adds	r2, r3, #4
 8001bc6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001bca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001be4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001be8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001bf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8001c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8001c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8001c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8001c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c38:	1f1a      	subs	r2, r3, #4
 8001c3a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c52:	1f1a      	subs	r2, r3, #4
 8001c54:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001c58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f acde 	bne.w	8001638 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	3304      	adds	r3, #4
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d44:	3304      	adds	r3, #4
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d56:	3304      	adds	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	3304      	adds	r3, #4
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d84:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	603a      	str	r2, [r7, #0]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de4:	3304      	adds	r3, #4
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	603a      	str	r2, [r7, #0]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e04:	3304      	adds	r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001e0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e0e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001e2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e4e:	1d1a      	adds	r2, r3, #4
 8001e50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e54:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e68:	1d1a      	adds	r2, r3, #4
 8001e6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e6e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001e7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001e90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001ea0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001eb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001ec0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ede:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eee:	1d1a      	adds	r2, r3, #4
 8001ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001f0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f10:	3304      	adds	r3, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001f26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f2a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001f36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f5a:	1d1a      	adds	r2, r3, #4
 8001f5c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f60:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001f64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001f7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f86:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8001f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	2304      	movs	r3, #4
 8001f96:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001f98:	f000 f9f2 	bl	8002380 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8001f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001faa:	f000 f9e9 	bl	8002380 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8001fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	2304      	movs	r3, #4
 8001fba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fbc:	f000 f9e0 	bl	8002380 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8001fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	2304      	movs	r3, #4
 8001fcc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fce:	f000 f9d7 	bl	8002380 <arm_radix8_butterfly_f32>
}
 8001fd2:	bf00      	nop
 8001fd4:	37b0      	adds	r7, #176	; 0xb0
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	4613      	mov	r3, r2
 8001fee:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d117      	bne.n	800202c <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3304      	adds	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e00d      	b.n	8002024 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eef1 7a67 	vneg.f32	s15, s15
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3308      	adds	r3, #8
 800201c:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3ed      	bcc.n	8002008 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d040      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	d845      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002042:	d033      	beq.n	80020ac <arm_cfft_f32+0xd2>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800204a:	d83d      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d026      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d835      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d028      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d82d      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002072:	d01b      	beq.n	80020ac <arm_cfft_f32+0xd2>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207a:	d825      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d00f      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d81f      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d013      	beq.n	80020b6 <arm_cfft_f32+0xdc>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d819      	bhi.n	80020c8 <arm_cfft_f32+0xee>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d003      	beq.n	80020a2 <arm_cfft_f32+0xc8>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b20      	cmp	r3, #32
 800209e:	d005      	beq.n	80020ac <arm_cfft_f32+0xd2>
 80020a0:	e012      	b.n	80020c8 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7fe ff74 	bl	8000f92 <arm_cfft_radix8by2_f32>
    break;
 80020aa:	e00d      	b.n	80020c8 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff f963 	bl	800137a <arm_cfft_radix8by4_f32>
    break;
 80020b4:	e008      	b.n	80020c8 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	2301      	movs	r3, #1
 80020c0:	68b8      	ldr	r0, [r7, #8]
 80020c2:	f000 f95d 	bl	8002380 <arm_radix8_butterfly_f32>
    break;
 80020c6:	bf00      	nop
  }

  if ( bitReverseFlag )
 80020c8:	79bb      	ldrb	r3, [r7, #6]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8999      	ldrh	r1, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68b8      	ldr	r0, [r7, #8]
 80020da:	f7fe ff01 	bl	8000ee0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d130      	bne.n	8002146 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f6:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e01c      	b.n	800213e <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	61ba      	str	r2, [r7, #24]
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eeb1 7a67 	vneg.f32	s14, s15
 8002124:	edd7 7a04 	vldr	s15, [r7, #16]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3304      	adds	r3, #4
 8002136:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3de      	bcc.n	8002104 <arm_cfft_f32+0x12a>
    }
  }
}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 800216c:	899a      	ldrh	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	819a      	strh	r2, [r3, #12]
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <arm_cfft_init_2048_f32+0x44>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0801efe4 	.word	0x0801efe4

08002198 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021b4:	899a      	ldrh	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	819a      	strh	r2, [r3, #12]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <arm_cfft_init_1024_f32+0x44>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	0801efd4 	.word	0x0801efd4

080021e0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 80021fc:	899a      	ldrh	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	819a      	strh	r2, [r3, #12]
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <arm_cfft_init_512_f32+0x44>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0801efc4 	.word	0x0801efc4

08002228 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <arm_cfft_init_256_f32+0x44>)
 8002244:	899a      	ldrh	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	819a      	strh	r2, [r3, #12]
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <arm_cfft_init_256_f32+0x44>)
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <arm_cfft_init_256_f32+0x44>)
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	0801efb4 	.word	0x0801efb4

08002270 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 800228a:	899a      	ldrh	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	819a      	strh	r2, [r3, #12]
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <arm_cfft_init_128_f32+0x40>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	0801efa4 	.word	0x0801efa4

080022b4 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022ce:	899a      	ldrh	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	819a      	strh	r2, [r3, #12]
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <arm_cfft_init_64_f32+0x40>)
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	0801ef94 	.word	0x0801ef94

080022f8 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 8002312:	899a      	ldrh	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	819a      	strh	r2, [r3, #12]
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <arm_cfft_init_32_f32+0x40>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	0801ef84 	.word	0x0801ef84

0800233c <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2210      	movs	r2, #16
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <arm_cfft_init_16_f32+0x40>)
 8002356:	899a      	ldrh	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	819a      	strh	r2, [r3, #12]
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <arm_cfft_init_16_f32+0x40>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <arm_cfft_init_16_f32+0x40>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	0801ef74 	.word	0x0801ef74

08002380 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002380:	b480      	push	{r7}
 8002382:	b0bd      	sub	sp, #244	; 0xf4
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <arm_radix8_butterfly_f32+0x3c>)
 8002396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80023a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80023a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023b8:	e002      	b.n	80023c0 <arm_radix8_butterfly_f32+0x40>
 80023ba:	bf00      	nop
 80023bc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80023c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80023c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c8:	4413      	add	r3, r2
 80023ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80023ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d6:	4413      	add	r3, r2
 80023d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80023dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	4413      	add	r3, r2
 80023e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80023ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	4413      	add	r3, r2
 80023f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80023f8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002400:	4413      	add	r3, r2
 8002402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	4413      	add	r3, r2
 8002410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241c:	4413      	add	r3, r2
 800241e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002466:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800246a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800248e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	ed93 7a00 	vldr	s14, [r3]
 800249c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80024b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80024d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80024fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800251e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002542:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002546:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002552:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002556:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800255a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002562:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002566:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800256a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8002572:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002576:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8002582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002590:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800259c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80025aa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80025b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	3304      	adds	r3, #4
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3304      	adds	r3, #4
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80025de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	3304      	adds	r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3304      	adds	r3, #4
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002602:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3304      	adds	r3, #4
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	3304      	adds	r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800262e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3304      	adds	r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002656:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3304      	adds	r3, #4
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	ed93 7a00 	vldr	s14, [r3]
 8002666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800267e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3304      	adds	r3, #4
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3304      	adds	r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80026a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3304      	adds	r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ca:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80026ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	3304      	adds	r3, #4
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3304      	adds	r3, #4
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80026f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80026fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002706:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800270a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002716:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800271a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002726:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800272a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3304      	adds	r3, #4
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002746:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3304      	adds	r3, #4
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002762:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800276e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800277c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002784:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002796:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80027a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3304      	adds	r3, #4
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80027be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3304      	adds	r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80027ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80027da:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80027de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80027f2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80027f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002806:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800280a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800280e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002822:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002826:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800283a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800283e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800284a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800284e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800285a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800285e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800286a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800286e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800287a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800287e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800288a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800288e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800289a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800289e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80028aa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80028ae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80028ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028c8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80028e2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80028e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80028fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002916:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	3304      	adds	r3, #4
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002932:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800293e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3304      	adds	r3, #4
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800294e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3304      	adds	r3, #4
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800296a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3304      	adds	r3, #4
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002986:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002992:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	4413      	add	r3, r2
 800299c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f4ff ad0a 	bcc.w	80023c0 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80029ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	f240 84e3 	bls.w	800337c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80029c2:	893b      	ldrh	r3, [r7, #8]
 80029c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029c8:	4413      	add	r3, r2
 80029ca:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80029cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80029d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d8:	4413      	add	r3, r2
 80029da:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80029dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e0:	4413      	add	r3, r2
 80029e2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80029e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e8:	4413      	add	r3, r2
 80029ea:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80029ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	4413      	add	r3, r2
 80029f2:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80029f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	4413      	add	r3, r2
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80029fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a00:	4413      	add	r3, r2
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8002a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3304      	adds	r3, #4
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	3304      	adds	r3, #4
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	3304      	adds	r3, #4
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002ac6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	4413      	add	r3, r2
 8002ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002ad4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002adc:	4413      	add	r3, r2
 8002ade:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	4413      	add	r3, r2
 8002aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002af0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	4413      	add	r3, r2
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002afe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	4413      	add	r3, r2
 8002b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002b0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b14:	4413      	add	r3, r2
 8002b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002b1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	4413      	add	r3, r2
 8002b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002b28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	ed93 7a00 	vldr	s14, [r3]
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002bb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	ed93 7a00 	vldr	s14, [r3]
 8002c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c20:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c44:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002c48:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c54:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002c58:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002c68:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002c78:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002c7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002ca2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ca6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002cb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3304      	adds	r3, #4
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3304      	adds	r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	3304      	adds	r3, #4
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	ed93 7a00 	vldr	s14, [r3]
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3304      	adds	r3, #4
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3304      	adds	r3, #4
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	ed93 7a00 	vldr	s14, [r3]
 8002d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002d7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3304      	adds	r3, #4
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	ed93 7a00 	vldr	s14, [r3]
 8002d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3304      	adds	r3, #4
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	ed93 7a00 	vldr	s14, [r3]
 8002db2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3304      	adds	r3, #4
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	ed93 7a00 	vldr	s14, [r3]
 8002dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3304      	adds	r3, #4
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002df2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002df6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002e02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002e12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e16:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002e22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002e32:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002e42:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002e46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002e52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3304      	adds	r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002e6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002e7e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e82:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002e8e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002e9e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ea2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002eae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002eb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002ebe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ec2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002ece:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ed2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	3304      	adds	r3, #4
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f10:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002f14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f18:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f20:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002f24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002f34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002f38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002f44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3304      	adds	r3, #4
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002f8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002f8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002f9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002faa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002fba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fbe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	3304      	adds	r3, #4
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003000:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003004:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003018:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800301c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003024:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003030:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003034:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003044:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003048:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800304c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003060:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003064:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003070:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003074:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003080:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003084:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003090:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003094:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80030a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80030b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80030b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80030c0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030cc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80030d0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80030d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80030e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030e4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80030f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80030f4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80030f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003100:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003104:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003110:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003114:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003120:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003124:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003130:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003134:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003140:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003144:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003150:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003154:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003160:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003164:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003170:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003180:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003184:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003190:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003194:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80031a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80031ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80031ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3304      	adds	r3, #4
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80031d6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031da:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80031e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80031ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80031f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80031fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003206:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800320a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	ed97 7a07 	vldr	s14, [r7, #28]
 8003224:	edd7 7a06 	vldr	s15, [r7, #24]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	3304      	adds	r3, #4
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003240:	edd7 7a04 	vldr	s15, [r7, #16]
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800324c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003250:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800325c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003260:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800326c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003270:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800327c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003280:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800328c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	ed97 7a07 	vldr	s14, [r7, #28]
 800329a:	edd7 7a06 	vldr	s15, [r7, #24]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80032a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3304      	adds	r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80032c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032c6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80032d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80032e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80032e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80032f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003310:	edd7 7a06 	vldr	s15, [r7, #24]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800331c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	3304      	adds	r3, #4
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	ed97 7a05 	vldr	s14, [r7, #20]
 800332c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003338:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800333c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003340:	4413      	add	r3, r2
 8003342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800334c:	429a      	cmp	r2, r3
 800334e:	f4ff abba 	bcc.w	8002ac6 <arm_radix8_butterfly_f32+0x746>

         j++;
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003356:	3301      	adds	r3, #1
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800335c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003364:	429a      	cmp	r2, r3
 8003366:	f4ff ab2c 	bcc.w	80029c2 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	2b07      	cmp	r3, #7
 8003376:	f63f a813 	bhi.w	80023a0 <arm_radix8_butterfly_f32+0x20>
}
 800337a:	e000      	b.n	800337e <arm_radix8_butterfly_f32+0xffe>
         break;
 800337c:	bf00      	nop
}
 800337e:	bf00      	nop
 8003380:	37f4      	adds	r7, #244	; 0xf4
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800338c:	b480      	push	{r7}
 800338e:	b095      	sub	sp, #84	; 0x54
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80033ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	1d1a      	adds	r2, r3, #4
 80033ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	1d1a      	adds	r2, r3, #4
 80033d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80033ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80033fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003414:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003418:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800341c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1d1a      	adds	r2, r3, #4
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	3308      	adds	r3, #8
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	64ba      	str	r2, [r7, #72]	; 0x48
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	64ba      	str	r2, [r7, #72]	; 0x48
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8003472:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003476:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8003482:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003486:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003492:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003496:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80034a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80034b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80034b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80034c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80034d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034de:	edd7 7a07 	vldr	s15, [r7, #28]
 80034e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fc:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003500:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003504:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800350c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003514:	edd7 7a05 	vldr	s15, [r7, #20]
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003530:	3308      	adds	r3, #8
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	3b08      	subs	r3, #8
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800353a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353c:	3b01      	subs	r3, #1
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8003540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003542:	2b00      	cmp	r3, #0
 8003544:	f73f af7f 	bgt.w	8003446 <stage_rfft_f32+0xba>
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3754      	adds	r7, #84	; 0x54
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8003556:	b480      	push	{r7}
 8003558:	b095      	sub	sp, #84	; 0x54
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	3308      	adds	r3, #8
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800358a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800358e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1d1a      	adds	r2, r3, #4
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80035a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c2:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80035c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	3308      	adds	r3, #8
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80035d6:	e07c      	b.n	80036d2 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80035ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fc:	1d1a      	adds	r2, r3, #4
 80035fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8003604:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003608:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800360c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8003614:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003618:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8003624:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8003634:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003638:	edd7 7a08 	vldr	s15, [r7, #32]
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8003644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003648:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003650:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8003654:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003658:	edd7 7a08 	vldr	s15, [r7, #32]
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8003664:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003668:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800366c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003670:	edd7 7a07 	vldr	s15, [r7, #28]
 8003674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003678:	edd7 7a06 	vldr	s15, [r7, #24]
 800367c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1d1a      	adds	r2, r3, #4
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800368a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368e:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003692:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003696:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800369a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800369e:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036bc:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	3308      	adds	r3, #8
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	3b08      	subs	r3, #8
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	3b01      	subs	r3, #1
 80036d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f73f af7f 	bgt.w	80035d8 <merge_rfft_f32+0x82>
   }

}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	3754      	adds	r7, #84	; 0x54
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ff26 	bl	8003556 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	2301      	movs	r3, #1
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f7fe fc62 	bl	8001fda <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003716:	e00a      	b.n	800372e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	2301      	movs	r3, #1
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7fe fc5b 	bl	8001fda <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fe2f 	bl	800338c <stage_rfft_f32>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <arm_rfft_fast_init_32_f32+0x14>
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e013      	b.n	8003774 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fdf4 	bl	800233c <arm_cfft_init_16_f32>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003764:	e006      	b.n	8003774 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a03      	ldr	r2, [pc, #12]	; (800377c <arm_rfft_fast_init_32_f32+0x44>)
 8003770:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08016ff4 	.word	0x08016ff4

08003780 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <arm_rfft_fast_init_64_f32+0x14>
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e013      	b.n	80037bc <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fdae 	bl	80022f8 <arm_cfft_init_32_f32>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 80037a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ac:	e006      	b.n	80037bc <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a03      	ldr	r2, [pc, #12]	; (80037c4 <arm_rfft_fast_init_64_f32+0x44>)
 80037b8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	08017074 	.word	0x08017074

080037c8 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <arm_rfft_fast_init_128_f32+0x14>
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	e013      	b.n	8003804 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fd68 	bl	80022b4 <arm_cfft_init_64_f32>
 80037e4:	4603      	mov	r3, r0
 80037e6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80037e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f4:	e006      	b.n	8003804 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	; 0x80
 80037fa:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <arm_rfft_fast_init_128_f32+0x44>)
 8003800:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	08017174 	.word	0x08017174

08003810 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <arm_rfft_fast_init_256_f32+0x14>
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e014      	b.n	800384e <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fd22 	bl	8002270 <arm_cfft_init_128_f32>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	e007      	b.n	800384e <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003844:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a03      	ldr	r2, [pc, #12]	; (8003858 <arm_rfft_fast_init_256_f32+0x48>)
 800384a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	08017374 	.word	0x08017374

0800385c <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <arm_rfft_fast_init_512_f32+0x14>
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e014      	b.n	800389a <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fcd8 	bl	8002228 <arm_cfft_init_256_f32>
 8003878:	4603      	mov	r3, r0
 800387a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800387c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003888:	e007      	b.n	800389a <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003890:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <arm_rfft_fast_init_512_f32+0x48>)
 8003896:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08017774 	.word	0x08017774

080038a8 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <arm_rfft_fast_init_1024_f32+0x14>
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e014      	b.n	80038e6 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc8e 	bl	80021e0 <arm_cfft_init_512_f32>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80038c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	e007      	b.n	80038e6 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038dc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <arm_rfft_fast_init_1024_f32+0x48>)
 80038e2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08017f74 	.word	0x08017f74

080038f4 <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <arm_rfft_fast_init_2048_f32+0x14>
 8003902:	f04f 33ff 	mov.w	r3, #4294967295
 8003906:	e014      	b.n	8003932 <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fc44 	bl	8002198 <arm_cfft_init_1024_f32>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800391c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003920:	e007      	b.n	8003932 <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003928:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a03      	ldr	r2, [pc, #12]	; (800393c <arm_rfft_fast_init_2048_f32+0x48>)
 800392e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	08018f74 	.word	0x08018f74

08003940 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <arm_rfft_fast_init_4096_f32+0x14>
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e014      	b.n	800397e <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fbfa 	bl	8002150 <arm_cfft_init_2048_f32>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396c:	e007      	b.n	800397e <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003974:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <arm_rfft_fast_init_4096_f32+0x48>)
 800397a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0801af74 	.word	0x0801af74

0800398c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d023      	beq.n	80039e8 <arm_rfft_fast_init_f32+0x5c>
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	dc50      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039aa:	d023      	beq.n	80039f4 <arm_rfft_fast_init_f32+0x68>
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b0:	dc4a      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d023      	beq.n	8003a00 <arm_rfft_fast_init_f32+0x74>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	dc44      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d023      	beq.n	8003a0c <arm_rfft_fast_init_f32+0x80>
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c8:	dc3e      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d023      	beq.n	8003a18 <arm_rfft_fast_init_f32+0x8c>
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	dc38      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d024      	beq.n	8003a24 <arm_rfft_fast_init_f32+0x98>
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	dc34      	bgt.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d02c      	beq.n	8003a3c <arm_rfft_fast_init_f32+0xb0>
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d024      	beq.n	8003a30 <arm_rfft_fast_init_f32+0xa4>
 80039e6:	e02f      	b.n	8003a48 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffa9 	bl	8003940 <arm_rfft_fast_init_4096_f32>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
    break;
 80039f2:	e02c      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff7d 	bl	80038f4 <arm_rfft_fast_init_2048_f32>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
    break;
 80039fe:	e026      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff51 	bl	80038a8 <arm_rfft_fast_init_1024_f32>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
    break;
 8003a0a:	e020      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff25 	bl	800385c <arm_rfft_fast_init_512_f32>
 8003a12:	4603      	mov	r3, r0
 8003a14:	73fb      	strb	r3, [r7, #15]
    break;
 8003a16:	e01a      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fef9 	bl	8003810 <arm_rfft_fast_init_256_f32>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]
    break;
 8003a22:	e014      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fecf 	bl	80037c8 <arm_rfft_fast_init_128_f32>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8003a2e:	e00e      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fea5 	bl	8003780 <arm_rfft_fast_init_64_f32>
 8003a36:	4603      	mov	r3, r0
 8003a38:	73fb      	strb	r3, [r7, #15]
    break;
 8003a3a:	e008      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fe7b 	bl	8003738 <arm_rfft_fast_init_32_f32>
 8003a42:	4603      	mov	r3, r0
 8003a44:	73fb      	strb	r3, [r7, #15]
    break;
 8003a46:	e002      	b.n	8003a4e <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e001      	b.n	8003a52 <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a60:	f000 ff8f 	bl	8004982 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a64:	f000 f8e2 	bl	8003c2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a68:	f000 fa5a 	bl	8003f20 <MX_GPIO_Init>
	MX_DMA_Init();
 8003a6c:	f000 fa3a 	bl	8003ee4 <MX_DMA_Init>
	MX_TIM2_Init();
 8003a70:	f000 f994 	bl	8003d9c <MX_TIM2_Init>
	MX_ADC1_Init();
 8003a74:	f000 f92c 	bl	8003cd0 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8003a78:	f000 fa02 	bl	8003e80 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8003a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a80:	485b      	ldr	r0, [pc, #364]	; (8003bf0 <main+0x194>)
 8003a82:	f7ff ff83 	bl	800398c <arm_rfft_fast_init_f32>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a86:	217f      	movs	r1, #127	; 0x7f
 8003a88:	485a      	ldr	r0, [pc, #360]	; (8003bf4 <main+0x198>)
 8003a8a:	f002 fb29 	bl	80060e0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
 8003a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a92:	4959      	ldr	r1, [pc, #356]	; (8003bf8 <main+0x19c>)
 8003a94:	4857      	ldr	r0, [pc, #348]	; (8003bf4 <main+0x198>)
 8003a96:	f001 fb4f 	bl	8005138 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003a9a:	4858      	ldr	r0, [pc, #352]	; (8003bfc <main+0x1a0>)
 8003a9c:	f004 fad4 	bl	8008048 <HAL_TIM_Base_Start_IT>

	STEPPERS_Init();
 8003aa0:	f006 fb3c 	bl	800a11c <STEPPERS_Init>
	STEPPER_SetSpeed(STEPPER_MOTOR1, 14);
 8003aa4:	210e      	movs	r1, #14
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f006 fc76 	bl	800a398 <STEPPER_SetSpeed>

	// Reset platform to top
	Stepper1_Dir = DIR_CCW;
 8003aac:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <main+0x1a4>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8003ab2:	e006      	b.n	8003ac2 <main+0x66>
		STEPPER_Step_Blocking(STEPPER_MOTOR1, 10, Stepper1_Dir);
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <main+0x1a4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	210a      	movs	r1, #10
 8003abc:	2000      	movs	r0, #0
 8003abe:	f006 ff25 	bl	800a90c <STEPPER_Step_Blocking>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	484f      	ldr	r0, [pc, #316]	; (8003c04 <main+0x1a8>)
 8003ac6:	f003 f88f 	bl	8006be8 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f1      	beq.n	8003ab4 <main+0x58>
	}
	STEPPER_Stop(STEPPER_MOTOR1);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f006 ff79 	bl	800a9c8 <STEPPER_Stop>
		 HAL_Delay(100);
		 }
		 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer, BUFFER_SIZE);
		 }
		 */
		if (limitFlag) {
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <main+0x1ac>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <main+0x96>
			depth = 0;
 8003ae0:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <main+0x1b0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
			printf("Limit Hit\n\r");
 8003ae6:	484a      	ldr	r0, [pc, #296]	; (8003c10 <main+0x1b4>)
 8003ae8:	f007 f978 	bl	800addc <iprintf>
			Stepper1_Dir = DIR_CW;
 8003aec:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <main+0x1a4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
		}
		if (updatedFlag) {
 8003af2:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <main+0x1b8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05e      	beq.n	8003bba <main+0x15e>
			if (temp < minTemp + 3 && !limitFlag) {
 8003afc:	2306      	movs	r3, #6
 8003afe:	3303      	adds	r3, #3
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b08:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <main+0x1bc>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	dd1f      	ble.n	8003b58 <main+0xfc>
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <main+0x1ac>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11a      	bne.n	8003b58 <main+0xfc>
				printf("Going up\n\r");
 8003b22:	483e      	ldr	r0, [pc, #248]	; (8003c1c <main+0x1c0>)
 8003b24:	f007 f95a 	bl	800addc <iprintf>
				depth -= 5;
 8003b28:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <main+0x1b0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3b05      	subs	r3, #5
 8003b2e:	4a37      	ldr	r2, [pc, #220]	; (8003c0c <main+0x1b0>)
 8003b30:	6013      	str	r3, [r2, #0]
				Stepper1_Dir = DIR_CCW;
 8003b32:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <main+0x1a4>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
				STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <main+0x1a4>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b42:	2000      	movs	r0, #0
 8003b44:	f006 fee2 	bl	800a90c <STEPPER_Step_Blocking>
				if (depth < 0)
 8003b48:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <main+0x1b0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da30      	bge.n	8003bb2 <main+0x156>
					depth = 0;
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <main+0x1b0>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
				if (depth < 0)
 8003b56:	e02c      	b.n	8003bb2 <main+0x156>
			} else if (temp > maxTemp - 3) {
 8003b58:	230e      	movs	r3, #14
 8003b5a:	3b03      	subs	r3, #3
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <main+0x1bc>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	d51a      	bpl.n	8003baa <main+0x14e>
				printf("Going down \n\r");
 8003b74:	482a      	ldr	r0, [pc, #168]	; (8003c20 <main+0x1c4>)
 8003b76:	f007 f931 	bl	800addc <iprintf>
				depth += 5;
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <main+0x1b0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3305      	adds	r3, #5
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <main+0x1b0>)
 8003b82:	6013      	str	r3, [r2, #0]
				Stepper1_Dir = DIR_CW;
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <main+0x1a4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
				STEPPER_Step_Blocking(STEPPER_MOTOR1, 2000, Stepper1_Dir);
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <main+0x1a4>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003b94:	2000      	movs	r0, #0
 8003b96:	f006 feb9 	bl	800a90c <STEPPER_Step_Blocking>
				if (depth > 200)
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <main+0x1b0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2bc8      	cmp	r3, #200	; 0xc8
 8003ba0:	dd07      	ble.n	8003bb2 <main+0x156>
					depth = 200;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <main+0x1b0>)
 8003ba4:	22c8      	movs	r2, #200	; 0xc8
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e003      	b.n	8003bb2 <main+0x156>
			} else {
				HAL_Delay(20000);
 8003baa:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003bae:	f000 ff5d 	bl	8004a6c <HAL_Delay>
			}

			updatedFlag = 0;
 8003bb2:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <main+0x1b8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e78d      	b.n	8003ad6 <main+0x7a>
		} else {
			// DSP Stuff
			if (halfFlag) {
 8003bba:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <main+0x1c8>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <main+0x176>
				process_data(0, BUFFER_SIZE / 2);
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f000 fac8 	bl	800415c <process_data>
				halfFlag = 0;
 8003bcc:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <main+0x1c8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
			}
			if (fullFlag) {
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <main+0x1cc>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f43f af7c 	beq.w	8003ad6 <main+0x7a>
				process_data(BUFFER_SIZE / 2, BUFFER_SIZE);
 8003bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be2:	2080      	movs	r0, #128	; 0x80
 8003be4:	f000 faba 	bl	800415c <process_data>
				fullFlag = 0;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <main+0x1cc>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
		if (limitFlag) {
 8003bee:	e772      	b.n	8003ad6 <main+0x7a>
 8003bf0:	2000044c 	.word	0x2000044c
 8003bf4:	200000c4 	.word	0x200000c4
 8003bf8:	20000244 	.word	0x20000244
 8003bfc:	20000170 	.word	0x20000170
 8003c00:	20002d08 	.word	0x20002d08
 8003c04:	48000400 	.word	0x48000400
 8003c08:	20000447 	.word	0x20000447
 8003c0c:	20002d04 	.word	0x20002d04
 8003c10:	0800bae0 	.word	0x0800bae0
 8003c14:	20000446 	.word	0x20000446
 8003c18:	20002d00 	.word	0x20002d00
 8003c1c:	0800baec 	.word	0x0800baec
 8003c20:	0800baf8 	.word	0x0800baf8
 8003c24:	20000444 	.word	0x20000444
 8003c28:	20000445 	.word	0x20000445

08003c2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b096      	sub	sp, #88	; 0x58
 8003c30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	2244      	movs	r2, #68	; 0x44
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f007 f923 	bl	800ae86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003c40:	463b      	mov	r3, r7
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c52:	f003 f82b 	bl	8006cac <HAL_PWREx_ControlVoltageScaling>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8003c5c:	f000 fbd2 	bl	8004404 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003c60:	2310      	movs	r3, #16
 8003c62:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003c6c:	2360      	movs	r3, #96	; 0x60
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c70:	2302      	movs	r3, #2
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003c74:	2301      	movs	r3, #1
 8003c76:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003c7c:	2328      	movs	r3, #40	; 0x28
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003c80:	2307      	movs	r3, #7
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c84:	2302      	movs	r3, #2
 8003c86:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 f861 	bl	8006d58 <HAL_RCC_OscConfig>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SystemClock_Config+0x74>
		Error_Handler();
 8003c9c:	f000 fbb2 	bl	8004404 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003ca0:	230f      	movs	r3, #15
 8003ca2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fc61 	bl	8007580 <HAL_RCC_ClockConfig>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <SystemClock_Config+0x9c>
		Error_Handler();
 8003cc4:	f000 fb9e 	bl	8004404 <Error_Handler>
	}
}
 8003cc8:	bf00      	nop
 8003cca:	3758      	adds	r7, #88	; 0x58
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <MX_ADC1_Init+0xc4>)
 8003cea:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d06:	2204      	movs	r2, #4
 8003d08:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d26:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d3c:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003d4a:	4811      	ldr	r0, [pc, #68]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d4c:	f001 f8b2 	bl	8004eb4 <HAL_ADC_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_ADC1_Init+0x8a>
		Error_Handler();
 8003d56:	f000 fb55 	bl	8004404 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <MX_ADC1_Init+0xc8>)
 8003d5c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d5e:	2306      	movs	r3, #6
 8003d60:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003d62:	2306      	movs	r3, #6
 8003d64:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d66:	237f      	movs	r3, #127	; 0x7f
 8003d68:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003d72:	463b      	mov	r3, r7
 8003d74:	4619      	mov	r1, r3
 8003d76:	4806      	ldr	r0, [pc, #24]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d78:	f001 fc2a 	bl	80055d0 <HAL_ADC_ConfigChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_ADC1_Init+0xb6>
		Error_Handler();
 8003d82:	f000 fb3f 	bl	8004404 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200000c4 	.word	0x200000c4
 8003d94:	50040000 	.word	0x50040000
 8003d98:	14f00020 	.word	0x14f00020

08003d9c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	615a      	str	r2, [r3, #20]
 8003dcc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003dce:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dd4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 40 - 1;
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003dd8:	2227      	movs	r2, #39	; 0x27
 8003dda:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 50 - 1;
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003de4:	2231      	movs	r2, #49	; 0x31
 8003de6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003df4:	4821      	ldr	r0, [pc, #132]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003df6:	f004 f8cf 	bl	8007f98 <HAL_TIM_Base_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM2_Init+0x68>
		Error_Handler();
 8003e00:	f000 fb00 	bl	8004404 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e0e:	4619      	mov	r1, r3
 8003e10:	481a      	ldr	r0, [pc, #104]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003e12:	f004 fbe5 	bl	80085e0 <HAL_TIM_ConfigClockSource>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM2_Init+0x84>
		Error_Handler();
 8003e1c:	f000 faf2 	bl	8004404 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003e20:	4816      	ldr	r0, [pc, #88]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003e22:	f004 f965 	bl	80080f0 <HAL_TIM_PWM_Init>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_TIM2_Init+0x94>
		Error_Handler();
 8003e2c:	f000 faea 	bl	8004404 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e30:	2320      	movs	r3, #32
 8003e32:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	480f      	ldr	r0, [pc, #60]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003e40:	f005 f83c 	bl	8008ebc <HAL_TIMEx_MasterConfigSynchronization>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8003e4a:	f000 fadb 	bl	8004404 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e4e:	2360      	movs	r3, #96	; 0x60
 8003e50:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003e5e:	463b      	mov	r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	4619      	mov	r1, r3
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <MX_TIM2_Init+0xe0>)
 8003e66:	f004 faa7 	bl	80083b8 <HAL_TIM_PWM_ConfigChannel>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8003e70:	f000 fac8 	bl	8004404 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003e74:	bf00      	nop
 8003e76:	3738      	adds	r7, #56	; 0x38
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000170 	.word	0x20000170

08003e80 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <MX_USART2_UART_Init+0x60>)
 8003e88:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e90:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <MX_USART2_UART_Init+0x5c>)
 8003eca:	f006 f890 	bl	8009fee <HAL_RS485Ex_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8003ed4:	f000 fa96 	bl	8004404 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200001bc 	.word	0x200001bc
 8003ee0:	40004400 	.word	0x40004400

08003ee4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <MX_DMA_Init+0x38>)
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <MX_DMA_Init+0x38>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6493      	str	r3, [r2, #72]	; 0x48
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MX_DMA_Init+0x38>)
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	200b      	movs	r0, #11
 8003f08:	f002 fa57 	bl	80063ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003f0c:	200b      	movs	r0, #11
 8003f0e:	f002 fa70 	bl	80063f2 <HAL_NVIC_EnableIRQ>

}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000

08003f20 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f42:	4b3c      	ldr	r3, [pc, #240]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4a38      	ldr	r2, [pc, #224]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5a:	4b36      	ldr	r3, [pc, #216]	; (8004034 <MX_GPIO_Init+0x114>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, motorcontrol1_Pin | motorcontrol2_Pin,
 8003f66:	2200      	movs	r2, #0
 8003f68:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f70:	f002 fe52 	bl	8006c18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, motorcontrol4_Pin | motorcontrol3_Pin,
 8003f74:	2200      	movs	r2, #0
 8003f76:	2130      	movs	r1, #48	; 0x30
 8003f78:	482f      	ldr	r0, [pc, #188]	; (8004038 <MX_GPIO_Init+0x118>)
 8003f7a:	f002 fe4d 	bl	8006c18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : kill_switch_Pin */
	GPIO_InitStruct.Pin = kill_switch_Pin;
 8003f7e:	2310      	movs	r3, #16
 8003f80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f82:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(kill_switch_GPIO_Port, &GPIO_InitStruct);
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	4619      	mov	r1, r3
 8003f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f96:	f002 fcbd 	bl	8006914 <HAL_GPIO_Init>

	/*Configure GPIO pin : limit_switch_Pin */
	GPIO_InitStruct.Pin = limit_switch_Pin;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003fa2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(limit_switch_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	4619      	mov	r1, r3
 8003fae:	4822      	ldr	r0, [pc, #136]	; (8004038 <MX_GPIO_Init+0x118>)
 8003fb0:	f002 fcb0 	bl	8006914 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol1_Pin motorcontrol2_Pin */
	GPIO_InitStruct.Pin = motorcontrol1_Pin | motorcontrol2_Pin;
 8003fb4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003fb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc6:	f107 030c 	add.w	r3, r7, #12
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd0:	f002 fca0 	bl	8006914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8003fd4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fd8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fec:	f002 fc92 	bl	8006914 <HAL_GPIO_Init>

	/*Configure GPIO pins : motorcontrol4_Pin motorcontrol3_Pin */
	GPIO_InitStruct.Pin = motorcontrol4_Pin | motorcontrol3_Pin;
 8003ff0:	2330      	movs	r3, #48	; 0x30
 8003ff2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4619      	mov	r1, r3
 8004006:	480c      	ldr	r0, [pc, #48]	; (8004038 <MX_GPIO_Init+0x118>)
 8004008:	f002 fc84 	bl	8006914 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800400c:	2200      	movs	r2, #0
 800400e:	2100      	movs	r1, #0
 8004010:	2007      	movs	r0, #7
 8004012:	f002 f9d2 	bl	80063ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004016:	2007      	movs	r0, #7
 8004018:	f002 f9eb 	bl	80063f2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800401c:	2200      	movs	r2, #0
 800401e:	2100      	movs	r1, #0
 8004020:	200a      	movs	r0, #10
 8004022:	f002 f9ca 	bl	80063ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004026:	200a      	movs	r0, #10
 8004028:	f002 f9e3 	bl	80063f2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	48000400 	.word	0x48000400

0800403c <receive_bit>:

/* USER CODE BEGIN 4 */
void receive_bit(int bit, int amount) {
 800403c:	b5b0      	push	{r4, r5, r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
	if (amount == 0) {
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d031      	beq.n	80040b0 <receive_bit+0x74>
		return;
	}
	for (int count = 0; count < round(amount / 28); count++) {
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e00d      	b.n	800406e <receive_bit+0x32>
		received[receivedIndex] = bit;
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <receive_bit+0x80>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	491a      	ldr	r1, [pc, #104]	; (80040c0 <receive_bit+0x84>)
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		receivedIndex++;
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <receive_bit+0x80>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <receive_bit+0x80>)
 8004066:	6013      	str	r3, [r2, #0]
	for (int count = 0; count < round(amount / 28); count++) {
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3301      	adds	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7fc fa50 	bl	8000514 <__aeabi_i2d>
 8004074:	4604      	mov	r4, r0
 8004076:	460d      	mov	r5, r1
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <receive_bit+0x88>)
 800407c:	fb82 1203 	smull	r1, r2, r2, r3
 8004080:	441a      	add	r2, r3
 8004082:	1112      	asrs	r2, r2, #4
 8004084:	17db      	asrs	r3, r3, #31
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fa43 	bl	8000514 <__aeabi_i2d>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc fd19 	bl	8000acc <__aeabi_dcmplt>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1d8      	bne.n	8004052 <receive_bit+0x16>
	}
	if (receivedIndex > 29) {
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <receive_bit+0x80>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b1d      	cmp	r3, #29
 80040a6:	dd05      	ble.n	80040b4 <receive_bit+0x78>
		messageFull = 1;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <receive_bit+0x8c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
	}
	return;
 80040ae:	e001      	b.n	80040b4 <receive_bit+0x78>
		return;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <receive_bit+0x7a>
	return;
 80040b4:	bf00      	nop
}
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bdb0      	pop	{r4, r5, r7, pc}
 80040bc:	20002cf4 	.word	0x20002cf4
 80040c0:	20002c7c 	.word	0x20002c7c
 80040c4:	92492493 	.word	0x92492493
 80040c8:	20000449 	.word	0x20000449

080040cc <bit_detect>:

void bit_detect(int freq) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	if (freq > ONE_FREQ - 50 && freq < ONE_FREQ + 50) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f640 1292 	movw	r2, #2450	; 0x992
 80040da:	4293      	cmp	r3, r2
 80040dc:	dd0a      	ble.n	80040f4 <bit_detect+0x28>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f640 12f5 	movw	r2, #2549	; 0x9f5
 80040e4:	4293      	cmp	r3, r2
 80040e6:	dc05      	bgt.n	80040f4 <bit_detect+0x28>
		oneCount++;
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <bit_detect+0x84>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <bit_detect+0x84>)
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e008      	b.n	8004106 <bit_detect+0x3a>
	} else {
		receive_bit(1, oneCount);
 80040f4:	4b16      	ldr	r3, [pc, #88]	; (8004150 <bit_detect+0x84>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	2001      	movs	r0, #1
 80040fc:	f7ff ff9e 	bl	800403c <receive_bit>
		oneCount = 0;
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <bit_detect+0x84>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
	}
	if (freq > ZERO_FREQ - 50 && freq < ZERO_FREQ + 50) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f640 3266 	movw	r2, #2918	; 0xb66
 800410c:	4293      	cmp	r3, r2
 800410e:	dd0a      	ble.n	8004126 <bit_detect+0x5a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f640 32c9 	movw	r2, #3017	; 0xbc9
 8004116:	4293      	cmp	r3, r2
 8004118:	dc05      	bgt.n	8004126 <bit_detect+0x5a>
		zeroCount++;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <bit_detect+0x88>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <bit_detect+0x88>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e008      	b.n	8004138 <bit_detect+0x6c>
	} else {
		receive_bit(0, zeroCount);
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <bit_detect+0x88>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4619      	mov	r1, r3
 800412c:	2000      	movs	r0, #0
 800412e:	f7ff ff85 	bl	800403c <receive_bit>
		zeroCount = 0;
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <bit_detect+0x88>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
	}
	if (freq == 156) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b9c      	cmp	r3, #156	; 0x9c
 800413c:	d103      	bne.n	8004146 <bit_detect+0x7a>
		receivedIndex = 0;
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <bit_detect+0x8c>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
	}
	return;
 8004144:	bf00      	nop
 8004146:	bf00      	nop
}
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20002cfc 	.word	0x20002cfc
 8004154:	20002cf8 	.word	0x20002cf8
 8004158:	20002cf4 	.word	0x20002cf4

0800415c <process_data>:

void process_data(int start, int end) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	float in;

	for (uint8_t count = start; count < end; count++) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e0e2      	b.n	8004332 <process_data+0x1d6>
// Convert to float
		in = INT16_TO_FLOAT * ((float) buffer[count]);
 800416c:	7ffb      	ldrb	r3, [r7, #31]
 800416e:	4a75      	ldr	r2, [pc, #468]	; (8004344 <process_data+0x1e8>)
 8004170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004174:	b29b      	uxth	r3, r3
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004348 <process_data+0x1ec>
 8004182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004186:	edc7 7a03 	vstr	s15, [r7, #12]

// Fill FFT Buffer
		fftBufIn[fftIndex] = in;
 800418a:	4b70      	ldr	r3, [pc, #448]	; (800434c <process_data+0x1f0>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b21b      	sxth	r3, r3
 8004190:	4a6f      	ldr	r2, [pc, #444]	; (8004350 <process_data+0x1f4>)
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]
		fftIndex++;
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <process_data+0x1f0>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b21b      	sxth	r3, r3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <process_data+0x1f0>)
 80041aa:	801a      	strh	r2, [r3, #0]

		if (fftIndex == FFT_BUFFER_SIZE) {
 80041ac:	4b67      	ldr	r3, [pc, #412]	; (800434c <process_data+0x1f0>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b21b      	sxth	r3, r3
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d14c      	bne.n	8004252 <process_data+0xf6>
			// Perform FFT
			arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBufOut, 0);
 80041b8:	2300      	movs	r3, #0
 80041ba:	4a66      	ldr	r2, [pc, #408]	; (8004354 <process_data+0x1f8>)
 80041bc:	4964      	ldr	r1, [pc, #400]	; (8004350 <process_data+0x1f4>)
 80041be:	4866      	ldr	r0, [pc, #408]	; (8004358 <process_data+0x1fc>)
 80041c0:	f7ff fa92 	bl	80036e8 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBufOut, fftMagOut, FFT_BUFFER_SIZE / 2);
 80041c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c8:	4964      	ldr	r1, [pc, #400]	; (800435c <process_data+0x200>)
 80041ca:	4862      	ldr	r0, [pc, #392]	; (8004354 <process_data+0x1f8>)
 80041cc:	f7fc fe44 	bl	8000e58 <arm_cmplx_mag_f32>

			peakVal = 0.0f;
 80041d0:	4b63      	ldr	r3, [pc, #396]	; (8004360 <process_data+0x204>)
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
			peakHz = 0.0f;
 80041d8:	4b62      	ldr	r3, [pc, #392]	; (8004364 <process_data+0x208>)
 80041da:	2200      	movs	r2, #0
 80041dc:	801a      	strh	r2, [r3, #0]

			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 80041de:	2301      	movs	r3, #1
 80041e0:	83bb      	strh	r3, [r7, #28]
 80041e2:	e02b      	b.n	800423c <process_data+0xe0>

				if (fftMagOut[index] > peakVal) {
 80041e4:	8bbb      	ldrh	r3, [r7, #28]
 80041e6:	4a5d      	ldr	r2, [pc, #372]	; (800435c <process_data+0x200>)
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	ed93 7a00 	vldr	s14, [r3]
 80041f0:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <process_data+0x204>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	dd1a      	ble.n	8004236 <process_data+0xda>
					peakVal = fftMagOut[index];
 8004200:	8bbb      	ldrh	r3, [r7, #28]
 8004202:	4a56      	ldr	r2, [pc, #344]	; (800435c <process_data+0x200>)
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a55      	ldr	r2, [pc, #340]	; (8004360 <process_data+0x204>)
 800420c:	6013      	str	r3, [r2, #0]
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 800420e:	8bbb      	ldrh	r3, [r7, #28]
 8004210:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004214:	fb02 f303 	mul.w	r3, r2, r3
							/ ((float) FFT_BUFFER_SIZE));
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004220:	eddf 6a51 	vldr	s13, [pc, #324]	; 8004368 <process_data+0x20c>
 8004224:	eec7 7a26 	vdiv.f32	s15, s14, s13
					peakHz = (uint16_t) (index * SAMPLE_RATE_HZ
 8004228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800422c:	ee17 3a90 	vmov	r3, s15
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b4c      	ldr	r3, [pc, #304]	; (8004364 <process_data+0x208>)
 8004234:	801a      	strh	r2, [r3, #0]
			for (uint16_t index = 1; index < FFT_BUFFER_SIZE / 8; index++) {
 8004236:	8bbb      	ldrh	r3, [r7, #28]
 8004238:	3301      	adds	r3, #1
 800423a:	83bb      	strh	r3, [r7, #28]
 800423c:	8bbb      	ldrh	r3, [r7, #28]
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d9d0      	bls.n	80041e4 <process_data+0x88>
				}
			}
			//printf("%d\n\r", (int) peakHz);
			bit_detect(peakHz);
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <process_data+0x208>)
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ff40 	bl	80040cc <bit_detect>

			// Reset FFT array index;
			fftIndex = 0;
 800424c:	4b3f      	ldr	r3, [pc, #252]	; (800434c <process_data+0x1f0>)
 800424e:	2200      	movs	r2, #0
 8004250:	801a      	strh	r2, [r3, #0]
		}

		if (messageFull) {
 8004252:	4b46      	ldr	r3, [pc, #280]	; (800436c <process_data+0x210>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d067      	beq.n	800432c <process_data+0x1d0>
			for (int count1 = 0, count2 = 10, count3 = 20; count1 < 10;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	230a      	movs	r3, #10
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	2314      	movs	r3, #20
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e033      	b.n	80042d2 <process_data+0x176>
					count1++, count2++, count3++) {
				if (received[count1] + received[count2] + received[count3]
 800426a:	4a41      	ldr	r2, [pc, #260]	; (8004370 <process_data+0x214>)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004272:	493f      	ldr	r1, [pc, #252]	; (8004370 <process_data+0x214>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800427a:	441a      	add	r2, r3
 800427c:	493c      	ldr	r1, [pc, #240]	; (8004370 <process_data+0x214>)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004284:	4413      	add	r3, r2
 8004286:	2b01      	cmp	r3, #1
 8004288:	dd05      	ble.n	8004296 <process_data+0x13a>
						>= 2) {
					message[count1] = '0';
 800428a:	4a3a      	ldr	r2, [pc, #232]	; (8004374 <process_data+0x218>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	2230      	movs	r2, #48	; 0x30
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e014      	b.n	80042c0 <process_data+0x164>
				} else if (received[count1] + received[count2]
 8004296:	4a36      	ldr	r2, [pc, #216]	; (8004370 <process_data+0x214>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800429e:	4934      	ldr	r1, [pc, #208]	; (8004370 <process_data+0x214>)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042a6:	441a      	add	r2, r3
						+ received[count3] <= 1) {
 80042a8:	4931      	ldr	r1, [pc, #196]	; (8004370 <process_data+0x214>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042b0:	4413      	add	r3, r2
				} else if (received[count1] + received[count2]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	dc04      	bgt.n	80042c0 <process_data+0x164>
					message[count1] = '1';
 80042b6:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <process_data+0x218>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4413      	add	r3, r2
 80042bc:	2231      	movs	r2, #49	; 0x31
 80042be:	701a      	strb	r2, [r3, #0]
					count1++, count2++, count3++) {
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	3301      	adds	r3, #1
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3301      	adds	r3, #1
 80042d0:	613b      	str	r3, [r7, #16]
			for (int count1 = 0, count2 = 10, count3 = 20; count1 < 10;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	ddc8      	ble.n	800426a <process_data+0x10e>
				}
			}

			temp = strtol(message, NULL, 2);
 80042d8:	2202      	movs	r2, #2
 80042da:	2100      	movs	r1, #0
 80042dc:	4825      	ldr	r0, [pc, #148]	; (8004374 <process_data+0x218>)
 80042de:	f006 fcb1 	bl	800ac44 <strtol>
 80042e2:	ee07 0a90 	vmov	s15, r0
 80042e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <process_data+0x21c>)
 80042ec:	edc3 7a00 	vstr	s15, [r3]
			temp /= 10.0;
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <process_data+0x21c>)
 80042f2:	ed93 7a00 	vldr	s14, [r3]
 80042f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80042fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042fe:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <process_data+0x21c>)
 8004300:	edc3 7a00 	vstr	s15, [r3]

			printf("Received Temp: %d\n\r", (int) temp);
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <process_data+0x21c>)
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800430e:	ee17 1a90 	vmov	r1, s15
 8004312:	481a      	ldr	r0, [pc, #104]	; (800437c <process_data+0x220>)
 8004314:	f006 fd62 	bl	800addc <iprintf>

			updatedFlag = 1;
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <process_data+0x224>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
			receivedIndex = 0;
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <process_data+0x228>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
			messageFull = 0;
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <process_data+0x210>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]

			return;
 800432a:	e008      	b.n	800433e <process_data+0x1e2>
	for (uint8_t count = start; count < end; count++) {
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	3301      	adds	r3, #1
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	f73f af18 	bgt.w	800416c <process_data+0x10>
		}
	}
	return;
 800433c:	bf00      	nop
}
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000244 	.word	0x20000244
 8004348:	37fffffc 	.word	0x37fffffc
 800434c:	20002c64 	.word	0x20002c64
 8004350:	20000464 	.word	0x20000464
 8004354:	20001464 	.word	0x20001464
 8004358:	2000044c 	.word	0x2000044c
 800435c:	20002464 	.word	0x20002464
 8004360:	20002c68 	.word	0x20002c68
 8004364:	20002c6c 	.word	0x20002c6c
 8004368:	44800000 	.word	0x44800000
 800436c:	20000449 	.word	0x20000449
 8004370:	20002c7c 	.word	0x20002c7c
 8004374:	20002c70 	.word	0x20002c70
 8004378:	20002d00 	.word	0x20002d00
 800437c:	0800bb08 	.word	0x0800bb08
 8004380:	20000446 	.word	0x20000446
 8004384:	20002cf4 	.word	0x20002cf4

08004388 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	halfFlag = 1;
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000444 	.word	0x20000444

080043a8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	fullFlag = 1;
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000445 	.word	0x20000445

080043c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	STEPPER_TMR_OVF_ISR(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f006 fb0f 	bl	800a9f4 <STEPPER_TMR_OVF_ISR>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80043e8:	1d39      	adds	r1, r7, #4
 80043ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ee:	2201      	movs	r2, #1
 80043f0:	4803      	ldr	r0, [pc, #12]	; (8004400 <__io_putchar+0x20>)
 80043f2:	f004 fde7 	bl	8008fc4 <HAL_UART_Transmit>

	return ch;
 80043f6:	687b      	ldr	r3, [r7, #4]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200001bc 	.word	0x200001bc

08004404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004408:	b672      	cpsid	i
}
 800440a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800440c:	e7fe      	b.n	800440c <Error_Handler+0x8>
	...

08004410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_MspInit+0x44>)
 8004418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_MspInit+0x44>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6613      	str	r3, [r2, #96]	; 0x60
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_MspInit+0x44>)
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_MspInit+0x44>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_MspInit+0x44>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_MspInit+0x44>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000

08004458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b09e      	sub	sp, #120	; 0x78
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004470:	f107 0310 	add.w	r3, r7, #16
 8004474:	2254      	movs	r2, #84	; 0x54
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f006 fd04 	bl	800ae86 <memset>
  if(hadc->Instance==ADC1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <HAL_ADC_MspInit+0x128>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d176      	bne.n	8004576 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800448c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800448e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004492:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004498:	2301      	movs	r3, #1
 800449a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800449c:	2310      	movs	r3, #16
 800449e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80044a0:	2307      	movs	r3, #7
 80044a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80044a4:	2302      	movs	r3, #2
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80044ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 fa86 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80044c2:	f7ff ff9f 	bl	8004404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	4a28      	ldr	r2, [pc, #160]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_ADC_MspInit+0x12c>)
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044f6:	2301      	movs	r3, #1
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80044fa:	230b      	movs	r3, #11
 80044fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450c:	f002 fa02 	bl	8006914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004510:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004512:	4a1e      	ldr	r2, [pc, #120]	; (800458c <HAL_ADC_MspInit+0x134>)
 8004514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_ADC_MspInit+0x130>)
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004524:	2200      	movs	r2, #0
 8004526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_ADC_MspInit+0x130>)
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004534:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004540:	2220      	movs	r2, #32
 8004542:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004546:	2200      	movs	r2, #0
 8004548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800454a:	480f      	ldr	r0, [pc, #60]	; (8004588 <HAL_ADC_MspInit+0x130>)
 800454c:	f001 ff6c 	bl	8006428 <HAL_DMA_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8004556:	f7ff ff55 	bl	8004404 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <HAL_ADC_MspInit+0x130>)
 800455e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_ADC_MspInit+0x130>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004566:	2200      	movs	r2, #0
 8004568:	2100      	movs	r1, #0
 800456a:	2012      	movs	r0, #18
 800456c:	f001 ff25 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004570:	2012      	movs	r0, #18
 8004572:	f001 ff3e 	bl	80063f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004576:	bf00      	nop
 8004578:	3778      	adds	r7, #120	; 0x78
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	50040000 	.word	0x50040000
 8004584:	40021000 	.word	0x40021000
 8004588:	20000128 	.word	0x20000128
 800458c:	40020008 	.word	0x40020008

08004590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a0:	d113      	bne.n	80045ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_TIM_Base_MspInit+0x44>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <HAL_TIM_Base_MspInit+0x44>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6593      	str	r3, [r2, #88]	; 0x58
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <HAL_TIM_Base_MspInit+0x44>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	201c      	movs	r0, #28
 80045c0:	f001 fefb 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045c4:	201c      	movs	r0, #28
 80045c6:	f001 ff14 	bl	80063f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000

080045d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b09e      	sub	sp, #120	; 0x78
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	2254      	movs	r2, #84	; 0x54
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f006 fc44 	bl	800ae86 <memset>
  if(huart->Instance==USART2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <HAL_UART_MspInit+0xdc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d150      	bne.n	80046aa <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004608:	2302      	movs	r3, #2
 800460a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800460c:	2300      	movs	r3, #0
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f003 f9d7 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004620:	f7ff fef0 	bl	8004404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 800463e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_UART_MspInit+0xe0>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004654:	2306      	movs	r3, #6
 8004656:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004660:	2303      	movs	r3, #3
 8004662:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004664:	2307      	movs	r3, #7
 8004666:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800466c:	4619      	mov	r1, r3
 800466e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004672:	f002 f94f 	bl	8006914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004688:	2303      	movs	r3, #3
 800468a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004690:	4619      	mov	r1, r3
 8004692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004696:	f002 f93d 	bl	8006914 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	2100      	movs	r1, #0
 800469e:	2026      	movs	r0, #38	; 0x26
 80046a0:	f001 fe8b 	bl	80063ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046a4:	2026      	movs	r0, #38	; 0x26
 80046a6:	f001 fea4 	bl	80063f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046aa:	bf00      	nop
 80046ac:	3778      	adds	r7, #120	; 0x78
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40004400 	.word	0x40004400
 80046b8:	40021000 	.word	0x40021000

080046bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80046c0:	e7fe      	b.n	80046c0 <NMI_Handler+0x4>

080046c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046c6:	e7fe      	b.n	80046c6 <HardFault_Handler+0x4>

080046c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046cc:	e7fe      	b.n	80046cc <MemManage_Handler+0x4>

080046ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046d2:	e7fe      	b.n	80046d2 <BusFault_Handler+0x4>

080046d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <UsageFault_Handler+0x4>

080046da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046f6:	b480      	push	{r7}
 80046f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046fa:	bf00      	nop
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004708:	f000 f990 	bl	8004a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800470c:	bf00      	nop
 800470e:	bd80      	pop	{r7, pc}

08004710 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	limitFlag = 1;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <EXTI1_IRQHandler+0x14>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(limit_switch_Pin);
 800471a:	2002      	movs	r0, #2
 800471c:	f002 fa94 	bl	8006c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000447 	.word	0x20000447

08004728 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){
 800472c:	2110      	movs	r1, #16
 800472e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004732:	f002 fa59 	bl	8006be8 <HAL_GPIO_ReadPin>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d106      	bne.n	800474a <EXTI4_IRQHandler+0x22>
		killFlag = 1;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <EXTI4_IRQHandler+0x48>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 8004742:	2032      	movs	r0, #50	; 0x32
 8004744:	f000 f992 	bl	8004a6c <HAL_Delay>
 8004748:	e00d      	b.n	8004766 <EXTI4_IRQHandler+0x3e>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 800474a:	2110      	movs	r1, #16
 800474c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004750:	f002 fa4a 	bl	8006be8 <HAL_GPIO_ReadPin>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <EXTI4_IRQHandler+0x3e>
		killFlag = 0;
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <EXTI4_IRQHandler+0x48>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 8004760:	2032      	movs	r0, #50	; 0x32
 8004762:	f000 f983 	bl	8004a6c <HAL_Delay>
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(kill_switch_Pin);
 8004766:	2010      	movs	r0, #16
 8004768:	f002 fa6e 	bl	8006c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000448 	.word	0x20000448

08004774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <DMA1_Channel1_IRQHandler+0x10>)
 800477a:	f001 ffec 	bl	8006756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000128 	.word	0x20000128

08004788 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800478c:	4802      	ldr	r0, [pc, #8]	; (8004798 <ADC1_IRQHandler+0x10>)
 800478e:	f000 fd57 	bl	8005240 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200000c4 	.word	0x200000c4

0800479c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <TIM2_IRQHandler+0x10>)
 80047a2:	f003 fd06 	bl	80081b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000170 	.word	0x20000170

080047b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <USART2_IRQHandler+0x10>)
 80047b6:	f004 fc8f 	bl	80090d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200001bc 	.word	0x200001bc

080047c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00a      	b.n	80047ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047d6:	f3af 8000 	nop.w
 80047da:	4601      	mov	r1, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	60ba      	str	r2, [r7, #8]
 80047e2:	b2ca      	uxtb	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dbf0      	blt.n	80047d6 <_read+0x12>
  }

  return len;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	e009      	b.n	8004824 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60ba      	str	r2, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fde1 	bl	80043e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3301      	adds	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	dbf1      	blt.n	8004810 <_write+0x12>
  }
  return len;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_close>:

int _close(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800485e:	605a      	str	r2, [r3, #4]
  return 0;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <_isatty>:

int _isatty(int file)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <_sbrk+0x5c>)
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <_sbrk+0x60>)
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <_sbrk+0x64>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048bc:	4b11      	ldr	r3, [pc, #68]	; (8004904 <_sbrk+0x64>)
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <_sbrk+0x68>)
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <_sbrk+0x64>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d207      	bcs.n	80048e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048d0:	f006 fb28 	bl	800af24 <__errno>
 80048d4:	4603      	mov	r3, r0
 80048d6:	220c      	movs	r2, #12
 80048d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	e009      	b.n	80048f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <_sbrk+0x64>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <_sbrk+0x64>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	4a05      	ldr	r2, [pc, #20]	; (8004904 <_sbrk+0x64>)
 80048f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20010000 	.word	0x20010000
 8004900:	00000400 	.word	0x00000400
 8004904:	20002d0c 	.word	0x20002d0c
 8004908:	20002e78 	.word	0x20002e78

0800490c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <SystemInit+0x20>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	4a05      	ldr	r2, [pc, #20]	; (800492c <SystemInit+0x20>)
 8004918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800491c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004934:	f7ff ffea 	bl	800490c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004938:	480c      	ldr	r0, [pc, #48]	; (800496c <LoopForever+0x6>)
  ldr r1, =_edata
 800493a:	490d      	ldr	r1, [pc, #52]	; (8004970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800493c:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <LoopForever+0xe>)
  movs r3, #0
 800493e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004940:	e002      	b.n	8004948 <LoopCopyDataInit>

08004942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004946:	3304      	adds	r3, #4

08004948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800494a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800494c:	d3f9      	bcc.n	8004942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004950:	4c0a      	ldr	r4, [pc, #40]	; (800497c <LoopForever+0x16>)
  movs r3, #0
 8004952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004954:	e001      	b.n	800495a <LoopFillZerobss>

08004956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004958:	3204      	adds	r2, #4

0800495a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800495a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800495c:	d3fb      	bcc.n	8004956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800495e:	f006 fae7 	bl	800af30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004962:	f7ff f87b 	bl	8003a5c <main>

08004966 <LoopForever>:

LoopForever:
    b LoopForever
 8004966:	e7fe      	b.n	8004966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004968:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800496c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004970:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004974:	0801f19c 	.word	0x0801f19c
  ldr r2, =_sbss
 8004978:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800497c:	20002e74 	.word	0x20002e74

08004980 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004980:	e7fe      	b.n	8004980 <CAN1_RX0_IRQHandler>

08004982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800498c:	2003      	movs	r0, #3
 800498e:	f001 fd09 	bl	80063a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004992:	2000      	movs	r0, #0
 8004994:	f000 f80e 	bl	80049b4 <HAL_InitTick>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	71fb      	strb	r3, [r7, #7]
 80049a2:	e001      	b.n	80049a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049a4:	f7ff fd34 	bl	8004410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049a8:	79fb      	ldrb	r3, [r7, #7]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <HAL_InitTick+0x6c>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d023      	beq.n	8004a10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_InitTick+0x70>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <HAL_InitTick+0x6c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fd15 	bl	800640e <HAL_SYSTICK_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d809      	bhi.n	8004a04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f0:	2200      	movs	r2, #0
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f001 fcdf 	bl	80063ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_InitTick+0x74>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e004      	b.n	8004a14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e001      	b.n	8004a14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000008 	.word	0x20000008
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_IncTick+0x20>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_IncTick+0x24>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <HAL_IncTick+0x24>)
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000008 	.word	0x20000008
 8004a50:	20002d10 	.word	0x20002d10

08004a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return uwTick;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_GetTick+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20002d10 	.word	0x20002d10

08004a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7ff ffee 	bl	8004a54 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d005      	beq.n	8004a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_Delay+0x44>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a92:	bf00      	nop
 8004a94:	f7ff ffde 	bl	8004a54 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d8f7      	bhi.n	8004a94 <HAL_Delay+0x28>
  {
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000008 	.word	0x20000008

08004ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3360      	adds	r3, #96	; 0x60
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <LL_ADC_SetOffset+0x44>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	03fff000 	.word	0x03fff000

08004b64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3360      	adds	r3, #96	; 0x60
 8004b72:	461a      	mov	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3360      	adds	r3, #96	; 0x60
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3330      	adds	r3, #48	; 0x30
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	211f      	movs	r1, #31
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0e9b      	lsrs	r3, r3, #26
 8004c24:	f003 011f 	and.w	r1, r3, #31
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	431a      	orrs	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b087      	sub	sp, #28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	0e5b      	lsrs	r3, r3, #25
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	4413      	add	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0d1b      	lsrs	r3, r3, #20
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2107      	movs	r1, #7
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	0d1b      	lsrs	r3, r3, #20
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	401a      	ands	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f003 0318 	and.w	r3, r3, #24
 8004ce2:	4908      	ldr	r1, [pc, #32]	; (8004d04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ce4:	40d9      	lsrs	r1, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	400b      	ands	r3, r1
 8004cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	0007ffff 	.word	0x0007ffff

08004d08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6093      	str	r3, [r2, #8]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d101      	bne.n	8004d46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d101      	bne.n	8004d96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004de0:	f043 0202 	orr.w	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <LL_ADC_IsEnabled+0x18>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <LL_ADC_IsEnabled+0x1a>
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d101      	bne.n	8004e32 <LL_ADC_IsDisableOngoing+0x18>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_ADC_IsDisableOngoing+0x1a>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e54:	f043 0204 	orr.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d101      	bne.n	8004e80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d101      	bne.n	8004ea6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e126      	b.n	800511c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fabb 	bl	8004458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff19 	bl	8004d2c <LL_ADC_IsDeepPowerDownEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff feff 	bl	8004d08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ff34 	bl	8004d7c <LL_ADC_IsInternalRegulatorEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff ff18 	bl	8004d54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f24:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <HAL_ADC_Init+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	4a7f      	ldr	r2, [pc, #508]	; (8005128 <HAL_ADC_Init+0x274>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	099b      	lsrs	r3, r3, #6
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f38:	e002      	b.n	8004f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f9      	bne.n	8004f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff16 	bl	8004d7c <LL_ADC_IsInternalRegulatorEnabled>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10d      	bne.n	8004f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ff76 	bl	8004e68 <LL_ADC_REG_IsConversionOngoing>
 8004f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 80bf 	bne.w	800510a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 80bb 	bne.w	800510a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f9c:	f043 0202 	orr.w	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff23 	bl	8004df4 <LL_ADC_IsEnabled>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fb4:	485d      	ldr	r0, [pc, #372]	; (800512c <HAL_ADC_Init+0x278>)
 8004fb6:	f7ff ff1d 	bl	8004df4 <LL_ADC_IsEnabled>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	485a      	ldr	r0, [pc, #360]	; (8005130 <HAL_ADC_Init+0x27c>)
 8004fc8:	f7ff fd74 	bl	8004ab4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7e5b      	ldrb	r3, [r3, #25]
 8004fd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004fdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004fe2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	3b01      	subs	r3, #1
 8005000:	045b      	lsls	r3, r3, #17
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	4b42      	ldr	r3, [pc, #264]	; (8005134 <HAL_ADC_Init+0x280>)
 800502c:	4013      	ands	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	430b      	orrs	r3, r1
 8005036:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff26 	bl	8004e8e <LL_ADC_INJ_IsConversionOngoing>
 8005042:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d13d      	bne.n	80050c6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13a      	bne.n	80050c6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005054:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800505c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	f023 0302 	bic.w	r3, r3, #2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d118      	bne.n	80050b6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800508e:	f023 0304 	bic.w	r3, r3, #4
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800509a:	4311      	orrs	r1, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050a6:	430a      	orrs	r2, r1
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	611a      	str	r2, [r3, #16]
 80050b4:	e007      	b.n	80050c6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d10c      	bne.n	80050e8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f023 010f 	bic.w	r1, r3, #15
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
 80050e6:	e007      	b.n	80050f8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 020f 	bic.w	r2, r2, #15
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fc:	f023 0303 	bic.w	r3, r3, #3
 8005100:	f043 0201 	orr.w	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
 8005108:	e007      	b.n	800511a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f043 0210 	orr.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800511a:	7ffb      	ldrb	r3, [r7, #31]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000000 	.word	0x20000000
 8005128:	053e2d63 	.word	0x053e2d63
 800512c:	50040000 	.word	0x50040000
 8005130:	50040300 	.word	0x50040300
 8005134:	fff0c007 	.word	0xfff0c007

08005138 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fe8d 	bl	8004e68 <LL_ADC_REG_IsConversionOngoing>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d167      	bne.n	8005224 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_ADC_Start_DMA+0x2a>
 800515e:	2302      	movs	r3, #2
 8005160:	e063      	b.n	800522a <HAL_ADC_Start_DMA+0xf2>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fe12 	bl	8005d94 <ADC_Enable>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d14f      	bne.n	800521a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f023 0206 	bic.w	r2, r3, #6
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	659a      	str	r2, [r3, #88]	; 0x58
 80051a6:	e002      	b.n	80051ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	4a20      	ldr	r2, [pc, #128]	; (8005234 <HAL_ADC_Start_DMA+0xfc>)
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ba:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_ADC_Start_DMA+0x100>)
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_ADC_Start_DMA+0x104>)
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	221c      	movs	r2, #28
 80051cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0210 	orr.w	r2, r2, #16
 80051e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3340      	adds	r3, #64	; 0x40
 8005200:	4619      	mov	r1, r3
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f001 f9c7 	bl	8006598 <HAL_DMA_Start_IT>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fe14 	bl	8004e40 <LL_ADC_REG_StartConversion>
 8005218:	e006      	b.n	8005228 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005222:	e001      	b.n	8005228 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	08005f5f 	.word	0x08005f5f
 8005238:	08006037 	.word	0x08006037
 800523c:	08006053 	.word	0x08006053

08005240 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <HAL_ADC_IRQHandler+0x56>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 ffb1 	bl	80061f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_ADC_IRQHandler+0x6a>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d05e      	beq.n	8005372 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d059      	beq.n	8005372 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fc73 	bl	8004bc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03e      	beq.n	8005364 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d135      	bne.n	8005364 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d12e      	bne.n	8005364 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fdac 	bl	8004e68 <LL_ADC_REG_IsConversionOngoing>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11a      	bne.n	800534c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 020c 	bic.w	r2, r2, #12
 8005324:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d112      	bne.n	8005364 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
 800534a:	e00b      	b.n	8005364 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	f043 0201 	orr.w	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff f81f 	bl	80043a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	220c      	movs	r2, #12
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_ADC_IRQHandler+0x146>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d072      	beq.n	8005476 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d06d      	beq.n	8005476 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fc44 	bl	8004c44 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80053bc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fbff 	bl	8004bc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053c8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d047      	beq.n	8005468 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_ADC_IRQHandler+0x1b2>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03f      	beq.n	8005468 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d13a      	bne.n	8005468 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d133      	bne.n	8005468 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d12e      	bne.n	8005468 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fd3d 	bl	8004e8e <LL_ADC_INJ_IsConversionOngoing>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11a      	bne.n	8005450 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005428:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d112      	bne.n	8005468 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
 800544e:	e00b      	b.n	8005468 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	f043 0210 	orr.w	r2, r3, #16
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fe99 	bl	80061a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2260      	movs	r2, #96	; 0x60
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b00      	cmp	r3, #0
 800547e:	d011      	beq.n	80054a4 <HAL_ADC_IRQHandler+0x264>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00c      	beq.n	80054a4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f886 	bl	80055a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d012      	beq.n	80054d4 <HAL_ADC_IRQHandler+0x294>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fe7f 	bl	80061c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d012      	beq.n	8005504 <HAL_ADC_IRQHandler+0x2c4>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fe71 	bl	80061dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02a      	beq.n	8005564 <HAL_ADC_IRQHandler+0x324>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d025      	beq.n	8005564 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005520:	2301      	movs	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e008      	b.n	8005538 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005534:	2301      	movs	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10e      	bne.n	800555c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	f043 0202 	orr.w	r2, r3, #2
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f830 	bl	80055bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2210      	movs	r2, #16
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <HAL_ADC_IRQHandler+0x360>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	f043 0208 	orr.w	r2, r3, #8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fe0a 	bl	80061b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b0b6      	sub	sp, #216	; 0xd8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x22>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e3bb      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x79a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fc32 	bl	8004e68 <LL_ADC_REG_IsConversionOngoing>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 83a0 	bne.w	8005d4c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d824      	bhi.n	8005666 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	3b02      	subs	r3, #2
 8005622:	2b03      	cmp	r3, #3
 8005624:	d81b      	bhi.n	800565e <HAL_ADC_ConfigChannel+0x8e>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <HAL_ADC_ConfigChannel+0x5c>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800563d 	.word	0x0800563d
 8005630:	08005645 	.word	0x08005645
 8005634:	0800564d 	.word	0x0800564d
 8005638:	08005655 	.word	0x08005655
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800563c:	230c      	movs	r3, #12
 800563e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005642:	e010      	b.n	8005666 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005644:	2312      	movs	r3, #18
 8005646:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800564a:	e00c      	b.n	8005666 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800564c:	2318      	movs	r3, #24
 800564e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005652:	e008      	b.n	8005666 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800565c:	e003      	b.n	8005666 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800565e:	2306      	movs	r3, #6
 8005660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005664:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005674:	f7ff faba 	bl	8004bec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fbf3 	bl	8004e68 <LL_ADC_REG_IsConversionOngoing>
 8005682:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fbff 	bl	8004e8e <LL_ADC_INJ_IsConversionOngoing>
 8005690:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 81a4 	bne.w	80059e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800569e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 819f 	bne.w	80059e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f7ff fad8 	bl	8004c6a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	08db      	lsrs	r3, r3, #3
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d00a      	beq.n	80056f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6919      	ldr	r1, [r3, #16]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056ec:	f7ff fa16 	bl	8004b1c <LL_ADC_SetOffset>
 80056f0:	e179      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fa33 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80056fe:	4603      	mov	r3, r0
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_ADC_ConfigChannel+0x14e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fa28 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 8005714:	4603      	mov	r3, r0
 8005716:	0e9b      	lsrs	r3, r3, #26
 8005718:	f003 021f 	and.w	r2, r3, #31
 800571c:	e01e      	b.n	800575c <HAL_ADC_ConfigChannel+0x18c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fa1d 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 800572a:	4603      	mov	r3, r0
 800572c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005734:	fa93 f3a3 	rbit	r3, r3
 8005738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800573c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800574c:	2320      	movs	r3, #32
 800574e:	e004      	b.n	800575a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x1a4>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0e9b      	lsrs	r3, r3, #26
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	e018      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x1d6>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005780:	fa93 f3a3 	rbit	r3, r3
 8005784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800578c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005798:	2320      	movs	r3, #32
 800579a:	e004      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800579c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057a0:	fab3 f383 	clz	r3, r3
 80057a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d106      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff f9ec 	bl	8004b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f9d0 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x214>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2101      	movs	r1, #1
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff f9c5 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	f003 021f 	and.w	r2, r3, #31
 80057e2:	e01e      	b.n	8005822 <HAL_ADC_ConfigChannel+0x252>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f9ba 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800580a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005812:	2320      	movs	r3, #32
 8005814:	e004      	b.n	8005820 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_ADC_ConfigChannel+0x26a>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	0e9b      	lsrs	r3, r3, #26
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	e018      	b.n	800586c <HAL_ADC_ConfigChannel+0x29c>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800584e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005852:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800585e:	2320      	movs	r3, #32
 8005860:	e004      	b.n	800586c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005862:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800586c:	429a      	cmp	r2, r3
 800586e:	d106      	bne.n	800587e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	2101      	movs	r1, #1
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff f989 	bl	8004b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2102      	movs	r1, #2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff f96d 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 800588a:	4603      	mov	r3, r0
 800588c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x2da>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2102      	movs	r1, #2
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff f962 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80058a0:	4603      	mov	r3, r0
 80058a2:	0e9b      	lsrs	r3, r3, #26
 80058a4:	f003 021f 	and.w	r2, r3, #31
 80058a8:	e01e      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x318>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2102      	movs	r1, #2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff f957 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c0:	fa93 f3a3 	rbit	r3, r3
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80058d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80058d8:	2320      	movs	r3, #32
 80058da:	e004      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80058dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x330>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	e014      	b.n	800592a <HAL_ADC_ConfigChannel+0x35a>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005908:	fa93 f3a3 	rbit	r3, r3
 800590c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800590e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800591c:	2320      	movs	r3, #32
 800591e:	e004      	b.n	800592a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800592a:	429a      	cmp	r2, r3
 800592c:	d106      	bne.n	800593c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	2102      	movs	r1, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff f92a 	bl	8004b90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2103      	movs	r1, #3
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff f90e 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 8005948:	4603      	mov	r3, r0
 800594a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x398>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2103      	movs	r1, #3
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff f903 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 800595e:	4603      	mov	r3, r0
 8005960:	0e9b      	lsrs	r3, r3, #26
 8005962:	f003 021f 	and.w	r2, r3, #31
 8005966:	e017      	b.n	8005998 <HAL_ADC_ConfigChannel+0x3c8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2103      	movs	r1, #3
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f8f8 	bl	8004b64 <LL_ADC_GetOffsetChannel>
 8005974:	4603      	mov	r3, r0
 8005976:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800598a:	2320      	movs	r3, #32
 800598c:	e003      	b.n	8005996 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x3e0>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	0e9b      	lsrs	r3, r3, #26
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	e011      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x404>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b8:	fa93 f3a3 	rbit	r3, r3
 80059bc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80059be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80059c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80059c8:	2320      	movs	r3, #32
 80059ca:	e003      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80059cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d106      	bne.n	80059e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	2103      	movs	r1, #3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff f8d5 	bl	8004b90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fa02 	bl	8004df4 <LL_ADC_IsEnabled>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8140 	bne.w	8005c78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f7ff f95b 	bl	8004cc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	4a8f      	ldr	r2, [pc, #572]	; (8005c4c <HAL_ADC_ConfigChannel+0x67c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f040 8131 	bne.w	8005c78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_ADC_ConfigChannel+0x46e>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	0e9b      	lsrs	r3, r3, #26
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	bf94      	ite	ls
 8005a36:	2301      	movls	r3, #1
 8005a38:	2300      	movhi	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e019      	b.n	8005a72 <HAL_ADC_ConfigChannel+0x4a2>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a46:	fa93 f3a3 	rbit	r3, r3
 8005a4a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005a56:	2320      	movs	r3, #32
 8005a58:	e003      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	3301      	adds	r3, #1
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	bf94      	ite	ls
 8005a6c:	2301      	movls	r3, #1
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d079      	beq.n	8005b6a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x4c2>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	0e9b      	lsrs	r3, r3, #26
 8005a88:	3301      	adds	r3, #1
 8005a8a:	069b      	lsls	r3, r3, #26
 8005a8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a90:	e015      	b.n	8005abe <HAL_ADC_ConfigChannel+0x4ee>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005aaa:	2320      	movs	r3, #32
 8005aac:	e003      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	fab3 f383 	clz	r3, r3
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	069b      	lsls	r3, r3, #26
 8005aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x50e>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	0e9b      	lsrs	r3, r3, #26
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	e017      	b.n	8005b0e <HAL_ADC_ConfigChannel+0x53e>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	fa93 f3a3 	rbit	r3, r3
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005af6:	2320      	movs	r3, #32
 8005af8:	e003      	b.n	8005b02 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	fab3 f383 	clz	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	3301      	adds	r3, #1
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	ea42 0103 	orr.w	r1, r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x564>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	0e9b      	lsrs	r3, r3, #26
 8005b24:	3301      	adds	r3, #1
 8005b26:	f003 021f 	and.w	r2, r3, #31
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	051b      	lsls	r3, r3, #20
 8005b32:	e018      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x596>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	fa93 f3a3 	rbit	r3, r3
 8005b40:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	e003      	b.n	8005b58 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	fab3 f383 	clz	r3, r3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f003 021f 	and.w	r2, r3, #31
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b66:	430b      	orrs	r3, r1
 8005b68:	e081      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_ADC_ConfigChannel+0x5b6>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0e9b      	lsrs	r3, r3, #26
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	069b      	lsls	r3, r3, #26
 8005b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b84:	e015      	b.n	8005bb2 <HAL_ADC_ConfigChannel+0x5e2>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	e003      	b.n	8005baa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	069b      	lsls	r3, r3, #26
 8005bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x602>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0e9b      	lsrs	r3, r3, #26
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	e017      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x632>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	61bb      	str	r3, [r7, #24]
  return result;
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005bea:	2320      	movs	r3, #32
 8005bec:	e003      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	fab3 f383 	clz	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	ea42 0103 	orr.w	r1, r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x65e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	3b1e      	subs	r3, #30
 8005c26:	051b      	lsls	r3, r3, #20
 8005c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c2c:	e01e      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x69c>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	fa93 f3a3 	rbit	r3, r3
 8005c3a:	60fb      	str	r3, [r7, #12]
  return result;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005c46:	2320      	movs	r3, #32
 8005c48:	e006      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x688>
 8005c4a:	bf00      	nop
 8005c4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	fab3 f383 	clz	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f003 021f 	and.w	r2, r3, #31
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	3b1e      	subs	r3, #30
 8005c66:	051b      	lsls	r3, r3, #20
 8005c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c72:	4619      	mov	r1, r3
 8005c74:	f7fe fff9 	bl	8004c6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d06c      	beq.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c84:	483c      	ldr	r0, [pc, #240]	; (8005d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8005c86:	f7fe ff3b 	bl	8004b00 <LL_ADC_GetCommonPathInternalCh>
 8005c8a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3a      	ldr	r2, [pc, #232]	; (8005d7c <HAL_ADC_ConfigChannel+0x7ac>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d127      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d121      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a35      	ldr	r2, [pc, #212]	; (8005d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d157      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	482f      	ldr	r0, [pc, #188]	; (8005d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8005cba:	f7fe ff0e 	bl	8004ada <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cbe:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_ADC_ConfigChannel+0x7b4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	4a30      	ldr	r2, [pc, #192]	; (8005d88 <HAL_ADC_ConfigChannel+0x7b8>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005cd8:	e002      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f9      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ce6:	e03a      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <HAL_ADC_ConfigChannel+0x7bc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d113      	bne.n	8005d1a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d12a      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d10:	4619      	mov	r1, r3
 8005d12:	4819      	ldr	r0, [pc, #100]	; (8005d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8005d14:	f7fe fee1 	bl	8004ada <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d18:	e021      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d11c      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <HAL_ADC_ConfigChannel+0x7b0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d111      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d42:	4619      	mov	r1, r3
 8005d44:	480c      	ldr	r0, [pc, #48]	; (8005d78 <HAL_ADC_ConfigChannel+0x7a8>)
 8005d46:	f7fe fec8 	bl	8004ada <LL_ADC_SetCommonPathInternalCh>
 8005d4a:	e008      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	37d8      	adds	r7, #216	; 0xd8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	80080000 	.word	0x80080000
 8005d78:	50040300 	.word	0x50040300
 8005d7c:	c7520000 	.word	0xc7520000
 8005d80:	50040000 	.word	0x50040000
 8005d84:	20000000 	.word	0x20000000
 8005d88:	053e2d63 	.word	0x053e2d63
 8005d8c:	cb840000 	.word	0xcb840000
 8005d90:	80000001 	.word	0x80000001

08005d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff f825 	bl	8004df4 <LL_ADC_IsEnabled>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d169      	bne.n	8005e84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <ADC_Enable+0xfc>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0210 	orr.w	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e055      	b.n	8005e86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe ffe0 	bl	8004da4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005de4:	482b      	ldr	r0, [pc, #172]	; (8005e94 <ADC_Enable+0x100>)
 8005de6:	f7fe fe8b 	bl	8004b00 <LL_ADC_GetCommonPathInternalCh>
 8005dea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005df4:	4b28      	ldr	r3, [pc, #160]	; (8005e98 <ADC_Enable+0x104>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <ADC_Enable+0x108>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e0e:	e002      	b.n	8005e16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f9      	bne.n	8005e10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e1c:	f7fe fe1a 	bl	8004a54 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e22:	e028      	b.n	8005e76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe ffe3 	bl	8004df4 <LL_ADC_IsEnabled>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe ffb3 	bl	8004da4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e3e:	f7fe fe09 	bl	8004a54 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d914      	bls.n	8005e76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d00d      	beq.n	8005e76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f043 0210 	orr.w	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e007      	b.n	8005e86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d1cf      	bne.n	8005e24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	8000003f 	.word	0x8000003f
 8005e94:	50040300 	.word	0x50040300
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	053e2d63 	.word	0x053e2d63

08005ea0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe ffb4 	bl	8004e1a <LL_ADC_IsDisableOngoing>
 8005eb2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe ff9b 	bl	8004df4 <LL_ADC_IsEnabled>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d047      	beq.n	8005f54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d144      	bne.n	8005f54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030d 	and.w	r3, r3, #13
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10c      	bne.n	8005ef2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe ff75 	bl	8004dcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eea:	f7fe fdb3 	bl	8004a54 <HAL_GetTick>
 8005eee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ef0:	e029      	b.n	8005f46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	f043 0210 	orr.w	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e023      	b.n	8005f56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f0e:	f7fe fda1 	bl	8004a54 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d914      	bls.n	8005f46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	f043 0210 	orr.w	r2, r3, #16
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	f043 0201 	orr.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e007      	b.n	8005f56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1dc      	bne.n	8005f0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d14b      	bne.n	8006010 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d021      	beq.n	8005fd6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fe15 	bl	8004bc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d032      	beq.n	8006008 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d12b      	bne.n	8006008 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11f      	bne.n	8006008 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f043 0201 	orr.w	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
 8005fd4:	e018      	b.n	8006008 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d111      	bne.n	8006008 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7fe f9cd 	bl	80043a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800600e:	e00e      	b.n	800602e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff facd 	bl	80055bc <HAL_ADC_ErrorCallback>
}
 8006022:	e004      	b.n	800602e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fe f99f 	bl	8004388 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f043 0204 	orr.w	r2, r3, #4
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff fa9f 	bl	80055bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <LL_ADC_StartCalibration>:
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060cc:	d101      	bne.n	80060d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_ADCEx_Calibration_Start+0x1c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e04d      	b.n	8006198 <HAL_ADCEx_Calibration_Start+0xb8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff fecb 	bl	8005ea0 <ADC_Disable>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d136      	bne.n	8006182 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800611c:	f023 0302 	bic.w	r3, r3, #2
 8006120:	f043 0202 	orr.w	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ffa9 	bl	8006086 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006134:	e014      	b.n	8006160 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3301      	adds	r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006142:	d30d      	bcc.n	8006160 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	f023 0312 	bic.w	r3, r3, #18
 800614c:	f043 0210 	orr.w	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e01b      	b.n	8006198 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff ffa7 	bl	80060b8 <LL_ADC_IsCalibrationOnGoing>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e2      	bne.n	8006136 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f023 0303 	bic.w	r3, r3, #3
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	655a      	str	r2, [r3, #84]	; 0x54
 8006180:	e005      	b.n	800618e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f043 0210 	orr.w	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <__NVIC_SetPriorityGrouping+0x44>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006220:	4013      	ands	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800622c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006236:	4a04      	ldr	r2, [pc, #16]	; (8006248 <__NVIC_SetPriorityGrouping+0x44>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	60d3      	str	r3, [r2, #12]
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <__NVIC_GetPriorityGrouping+0x18>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	f003 0307 	and.w	r3, r3, #7
}
 800625a:	4618      	mov	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00

08006268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	2b00      	cmp	r3, #0
 8006278:	db0b      	blt.n	8006292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	f003 021f 	and.w	r2, r3, #31
 8006280:	4907      	ldr	r1, [pc, #28]	; (80062a0 <__NVIC_EnableIRQ+0x38>)
 8006282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2001      	movs	r0, #1
 800628a:	fa00 f202 	lsl.w	r2, r0, r2
 800628e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000e100 	.word	0xe000e100

080062a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db0a      	blt.n	80062ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	490c      	ldr	r1, [pc, #48]	; (80062f0 <__NVIC_SetPriority+0x4c>)
 80062be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c2:	0112      	lsls	r2, r2, #4
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	440b      	add	r3, r1
 80062c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062cc:	e00a      	b.n	80062e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	4908      	ldr	r1, [pc, #32]	; (80062f4 <__NVIC_SetPriority+0x50>)
 80062d4:	79fb      	ldrb	r3, [r7, #7]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	3b04      	subs	r3, #4
 80062dc:	0112      	lsls	r2, r2, #4
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	440b      	add	r3, r1
 80062e2:	761a      	strb	r2, [r3, #24]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	e000e100 	.word	0xe000e100
 80062f4:	e000ed00 	.word	0xe000ed00

080062f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b089      	sub	sp, #36	; 0x24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f1c3 0307 	rsb	r3, r3, #7
 8006312:	2b04      	cmp	r3, #4
 8006314:	bf28      	it	cs
 8006316:	2304      	movcs	r3, #4
 8006318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3304      	adds	r3, #4
 800631e:	2b06      	cmp	r3, #6
 8006320:	d902      	bls.n	8006328 <NVIC_EncodePriority+0x30>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3b03      	subs	r3, #3
 8006326:	e000      	b.n	800632a <NVIC_EncodePriority+0x32>
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	401a      	ands	r2, r3
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006340:	f04f 31ff 	mov.w	r1, #4294967295
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	fa01 f303 	lsl.w	r3, r1, r3
 800634a:	43d9      	mvns	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006350:	4313      	orrs	r3, r2
         );
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3b01      	subs	r3, #1
 800636c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006370:	d301      	bcc.n	8006376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006372:	2301      	movs	r3, #1
 8006374:	e00f      	b.n	8006396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006376:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <SysTick_Config+0x40>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800637e:	210f      	movs	r1, #15
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	f7ff ff8e 	bl	80062a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <SysTick_Config+0x40>)
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <SysTick_Config+0x40>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010

080063a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff29 	bl	8006204 <__NVIC_SetPriorityGrouping>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	4603      	mov	r3, r0
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063cc:	f7ff ff3e 	bl	800624c <__NVIC_GetPriorityGrouping>
 80063d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff8e 	bl	80062f8 <NVIC_EncodePriority>
 80063dc:	4602      	mov	r2, r0
 80063de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff ff5d 	bl	80062a4 <__NVIC_SetPriority>
}
 80063ea:	bf00      	nop
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ff31 	bl	8006268 <__NVIC_EnableIRQ>
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ffa2 	bl	8006360 <SysTick_Config>
 800641c:	4603      	mov	r3, r0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e098      	b.n	800656c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_DMA_Init+0x150>)
 8006442:	429a      	cmp	r2, r3
 8006444:	d80f      	bhi.n	8006466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	4b4b      	ldr	r3, [pc, #300]	; (800657c <HAL_DMA_Init+0x154>)
 800644e:	4413      	add	r3, r2
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <HAL_DMA_Init+0x158>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	091b      	lsrs	r3, r3, #4
 8006458:	009a      	lsls	r2, r3, #2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a48      	ldr	r2, [pc, #288]	; (8006584 <HAL_DMA_Init+0x15c>)
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
 8006464:	e00e      	b.n	8006484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	4b46      	ldr	r3, [pc, #280]	; (8006588 <HAL_DMA_Init+0x160>)
 800646e:	4413      	add	r3, r2
 8006470:	4a43      	ldr	r2, [pc, #268]	; (8006580 <HAL_DMA_Init+0x158>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	009a      	lsls	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a42      	ldr	r2, [pc, #264]	; (800658c <HAL_DMA_Init+0x164>)
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80064a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064de:	d039      	beq.n	8006554 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	4a27      	ldr	r2, [pc, #156]	; (8006584 <HAL_DMA_Init+0x15c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d11a      	bne.n	8006520 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80064ea:	4b29      	ldr	r3, [pc, #164]	; (8006590 <HAL_DMA_Init+0x168>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f003 031c 	and.w	r3, r3, #28
 80064f6:	210f      	movs	r1, #15
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	4924      	ldr	r1, [pc, #144]	; (8006590 <HAL_DMA_Init+0x168>)
 8006500:	4013      	ands	r3, r2
 8006502:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_DMA_Init+0x168>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	f003 031c 	and.w	r3, r3, #28
 8006514:	fa01 f303 	lsl.w	r3, r1, r3
 8006518:	491d      	ldr	r1, [pc, #116]	; (8006590 <HAL_DMA_Init+0x168>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	e019      	b.n	8006554 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006520:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	f003 031c 	and.w	r3, r3, #28
 800652c:	210f      	movs	r1, #15
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	4917      	ldr	r1, [pc, #92]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006536:	4013      	ands	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <HAL_DMA_Init+0x16c>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6859      	ldr	r1, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f003 031c 	and.w	r3, r3, #28
 800654a:	fa01 f303 	lsl.w	r3, r1, r3
 800654e:	4911      	ldr	r1, [pc, #68]	; (8006594 <HAL_DMA_Init+0x16c>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40020407 	.word	0x40020407
 800657c:	bffdfff8 	.word	0xbffdfff8
 8006580:	cccccccd 	.word	0xcccccccd
 8006584:	40020000 	.word	0x40020000
 8006588:	bffdfbf8 	.word	0xbffdfbf8
 800658c:	40020400 	.word	0x40020400
 8006590:	400200a8 	.word	0x400200a8
 8006594:	400204a8 	.word	0x400204a8

08006598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Start_IT+0x20>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e04b      	b.n	8006650 <HAL_DMA_Start_IT+0xb8>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d13a      	bne.n	8006642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f95f 	bl	80068b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 020e 	orr.w	r2, r2, #14
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e00f      	b.n	8006630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 020a 	orr.w	r2, r2, #10
 800662e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e005      	b.n	800664e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d008      	beq.n	8006682 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2204      	movs	r2, #4
 8006674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e022      	b.n	80066c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 020e 	bic.w	r2, r2, #14
 8006690:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f003 021c 	and.w	r2, r3, #28
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2101      	movs	r1, #1
 80066b0:	fa01 f202 	lsl.w	r2, r1, r2
 80066b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d005      	beq.n	80066f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2204      	movs	r2, #4
 80066f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e029      	b.n	800674c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 020e 	bic.w	r2, r2, #14
 8006706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f003 021c 	and.w	r2, r3, #28
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	2101      	movs	r1, #1
 8006726:	fa01 f202 	lsl.w	r2, r1, r2
 800672a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
    }
  }
  return status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	f003 031c 	and.w	r3, r3, #28
 8006776:	2204      	movs	r2, #4
 8006778:	409a      	lsls	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d026      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7a>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d021      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d107      	bne.n	80067aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0204 	bic.w	r2, r2, #4
 80067a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f003 021c 	and.w	r2, r3, #28
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2104      	movs	r1, #4
 80067b8:	fa01 f202 	lsl.w	r2, r1, r2
 80067bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d071      	beq.n	80068aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80067ce:	e06c      	b.n	80068aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f003 031c 	and.w	r3, r3, #28
 80067d8:	2202      	movs	r2, #2
 80067da:	409a      	lsls	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02e      	beq.n	8006842 <HAL_DMA_IRQHandler+0xec>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d029      	beq.n	8006842 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 020a 	bic.w	r2, r2, #10
 800680a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f003 021c 	and.w	r2, r3, #28
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2102      	movs	r1, #2
 8006822:	fa01 f202 	lsl.w	r2, r1, r2
 8006826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d038      	beq.n	80068aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006840:	e033      	b.n	80068aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	f003 031c 	and.w	r3, r3, #28
 800684a:	2208      	movs	r2, #8
 800684c:	409a      	lsls	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d02a      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d025      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 020e 	bic.w	r2, r2, #14
 800686e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f003 021c 	and.w	r2, r3, #28
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f202 	lsl.w	r2, r1, r2
 8006882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
}
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f003 021c 	and.w	r2, r3, #28
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2101      	movs	r1, #1
 80068d0:	fa01 f202 	lsl.w	r2, r1, r2
 80068d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d108      	bne.n	80068f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068f6:	e007      	b.n	8006908 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006922:	e148      	b.n	8006bb6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	2101      	movs	r1, #1
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 813a 	beq.w	8006bb0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d005      	beq.n	8006954 <HAL_GPIO_Init+0x40>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d130      	bne.n	80069b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	2203      	movs	r2, #3
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800698a:	2201      	movs	r2, #1
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4013      	ands	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 0201 	and.w	r2, r3, #1
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d017      	beq.n	80069f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	2203      	movs	r2, #3
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4013      	ands	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d123      	bne.n	8006a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	08da      	lsrs	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3208      	adds	r2, #8
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	220f      	movs	r2, #15
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	08da      	lsrs	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	6939      	ldr	r1, [r7, #16]
 8006a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	2203      	movs	r2, #3
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0203 	and.w	r2, r3, #3
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8094 	beq.w	8006bb0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a88:	4b52      	ldr	r3, [pc, #328]	; (8006bd4 <HAL_GPIO_Init+0x2c0>)
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	4a51      	ldr	r2, [pc, #324]	; (8006bd4 <HAL_GPIO_Init+0x2c0>)
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	6613      	str	r3, [r2, #96]	; 0x60
 8006a94:	4b4f      	ldr	r3, [pc, #316]	; (8006bd4 <HAL_GPIO_Init+0x2c0>)
 8006a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006aa0:	4a4d      	ldr	r2, [pc, #308]	; (8006bd8 <HAL_GPIO_Init+0x2c4>)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	089b      	lsrs	r3, r3, #2
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	220f      	movs	r2, #15
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006aca:	d00d      	beq.n	8006ae8 <HAL_GPIO_Init+0x1d4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a43      	ldr	r2, [pc, #268]	; (8006bdc <HAL_GPIO_Init+0x2c8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <HAL_GPIO_Init+0x1d0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a42      	ldr	r2, [pc, #264]	; (8006be0 <HAL_GPIO_Init+0x2cc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_GPIO_Init+0x1cc>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e004      	b.n	8006aea <HAL_GPIO_Init+0x1d6>
 8006ae0:	2307      	movs	r3, #7
 8006ae2:	e002      	b.n	8006aea <HAL_GPIO_Init+0x1d6>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <HAL_GPIO_Init+0x1d6>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	f002 0203 	and.w	r2, r2, #3
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4093      	lsls	r3, r2
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006afa:	4937      	ldr	r1, [pc, #220]	; (8006bd8 <HAL_GPIO_Init+0x2c4>)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	089b      	lsrs	r3, r3, #2
 8006b00:	3302      	adds	r3, #2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b08:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4013      	ands	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b2c:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b32:	4b2c      	ldr	r3, [pc, #176]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006b5c:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	43db      	mvns	r3, r3
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006b86:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <HAL_GPIO_Init+0x2d0>)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f aeaf 	bne.w	8006924 <HAL_GPIO_Init+0x10>
  }
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	48000400 	.word	0x48000400
 8006be0:	48000800 	.word	0x48000800
 8006be4:	40010400 	.word	0x40010400

08006be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e001      	b.n	8006c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	807b      	strh	r3, [r7, #2]
 8006c24:	4613      	mov	r3, r2
 8006c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c28:	787b      	ldrb	r3, [r7, #1]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c34:	e002      	b.n	8006c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c5e:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f806 	bl	8006c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40010400 	.word	0x40010400

08006c78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40007000 	.word	0x40007000

08006cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cba:	d130      	bne.n	8006d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc8:	d038      	beq.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2232      	movs	r2, #50	; 0x32
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	0c9b      	lsrs	r3, r3, #18
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf0:	e002      	b.n	8006cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d04:	d102      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f2      	bne.n	8006cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	d110      	bne.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e00f      	b.n	8006d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2a:	d007      	beq.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d34:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	20000000 	.word	0x20000000
 8006d54:	431bde83 	.word	0x431bde83

08006d58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f000 bc02 	b.w	8007570 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d6c:	4b96      	ldr	r3, [pc, #600]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d76:	4b94      	ldr	r3, [pc, #592]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80e4 	beq.w	8006f56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_RCC_OscConfig+0x4c>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b0c      	cmp	r3, #12
 8006d98:	f040 808b 	bne.w	8006eb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 8087 	bne.w	8006eb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006da4:	4b88      	ldr	r3, [pc, #544]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_RCC_OscConfig+0x64>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e3d9      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	4b81      	ldr	r3, [pc, #516]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x7e>
 8006dcc:	4b7e      	ldr	r3, [pc, #504]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd4:	e005      	b.n	8006de2 <HAL_RCC_OscConfig+0x8a>
 8006dd6:	4b7c      	ldr	r3, [pc, #496]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d223      	bcs.n	8006e2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fd8c 	bl	8007908 <RCC_SetFlashLatencyFromMSIRange>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e3ba      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dfa:	4b73      	ldr	r3, [pc, #460]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a72      	ldr	r2, [pc, #456]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4b70      	ldr	r3, [pc, #448]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	496d      	ldr	r1, [pc, #436]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e18:	4b6b      	ldr	r3, [pc, #428]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	4968      	ldr	r1, [pc, #416]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
 8006e2c:	e025      	b.n	8006e7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e2e:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a65      	ldr	r2, [pc, #404]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e34:	f043 0308 	orr.w	r3, r3, #8
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	4960      	ldr	r1, [pc, #384]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e4c:	4b5e      	ldr	r3, [pc, #376]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	495b      	ldr	r1, [pc, #364]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fd4c 	bl	8007908 <RCC_SetFlashLatencyFromMSIRange>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e37a      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e7a:	f000 fc81 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b51      	ldr	r3, [pc, #324]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	4950      	ldr	r1, [pc, #320]	; (8006fcc <HAL_RCC_OscConfig+0x274>)
 8006e8c:	5ccb      	ldrb	r3, [r1, r3]
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	4a4e      	ldr	r2, [pc, #312]	; (8006fd0 <HAL_RCC_OscConfig+0x278>)
 8006e98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e9a:	4b4e      	ldr	r3, [pc, #312]	; (8006fd4 <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd fd88 	bl	80049b4 <HAL_InitTick>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d052      	beq.n	8006f54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	e35e      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d032      	beq.n	8006f20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006eba:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a42      	ldr	r2, [pc, #264]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ec0:	f043 0301 	orr.w	r3, r3, #1
 8006ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ec6:	f7fd fdc5 	bl	8004a54 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ece:	f7fd fdc1 	bl	8004a54 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e347      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ee0:	4b39      	ldr	r3, [pc, #228]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0f0      	beq.n	8006ece <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	f043 0308 	orr.w	r3, r3, #8
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	4930      	ldr	r1, [pc, #192]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	492b      	ldr	r1, [pc, #172]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	604b      	str	r3, [r1, #4]
 8006f1e:	e01a      	b.n	8006f56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a28      	ldr	r2, [pc, #160]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fd92 	bl	8004a54 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f34:	f7fd fd8e 	bl	8004a54 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e314      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f46:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x1dc>
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d073      	beq.n	800704a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_OscConfig+0x21c>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b0c      	cmp	r3, #12
 8006f6c:	d10e      	bne.n	8006f8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d10b      	bne.n	8006f8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d063      	beq.n	8007048 <HAL_RCC_OscConfig+0x2f0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15f      	bne.n	8007048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e2f1      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x24c>
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a0b      	ldr	r2, [pc, #44]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e025      	b.n	8006ff0 <HAL_RCC_OscConfig+0x298>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d114      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x280>
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a02      	ldr	r2, [pc, #8]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e013      	b.n	8006ff0 <HAL_RCC_OscConfig+0x298>
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0801eff4 	.word	0x0801eff4
 8006fd0:	20000000 	.word	0x20000000
 8006fd4:	20000004 	.word	0x20000004
 8006fd8:	4ba0      	ldr	r3, [pc, #640]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a9f      	ldr	r2, [pc, #636]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4b9d      	ldr	r3, [pc, #628]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a9c      	ldr	r2, [pc, #624]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fd fd2c 	bl	8004a54 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007000:	f7fd fd28 	bl	8004a54 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e2ae      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007012:	4b92      	ldr	r3, [pc, #584]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x2a8>
 800701e:	e014      	b.n	800704a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fd fd18 	bl	8004a54 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007028:	f7fd fd14 	bl	8004a54 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e29a      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703a:	4b88      	ldr	r3, [pc, #544]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x2d0>
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d060      	beq.n	8007118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d005      	beq.n	8007068 <HAL_RCC_OscConfig+0x310>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d119      	bne.n	8007096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d116      	bne.n	8007096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007068:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_OscConfig+0x328>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e277      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007080:	4b76      	ldr	r3, [pc, #472]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	061b      	lsls	r3, r3, #24
 800708e:	4973      	ldr	r1, [pc, #460]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007094:	e040      	b.n	8007118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d023      	beq.n	80070e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709e:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a6e      	ldr	r2, [pc, #440]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070aa:	f7fd fcd3 	bl	8004a54 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b2:	f7fd fccf 	bl	8004a54 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e255      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c4:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d0:	4b62      	ldr	r3, [pc, #392]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	061b      	lsls	r3, r3, #24
 80070de:	495f      	ldr	r1, [pc, #380]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]
 80070e4:	e018      	b.n	8007118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e6:	4b5d      	ldr	r3, [pc, #372]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a5c      	ldr	r2, [pc, #368]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fd fcaf 	bl	8004a54 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fd fcab 	bl	8004a54 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e231      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800710c:	4b53      	ldr	r3, [pc, #332]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f0      	bne.n	80070fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d03c      	beq.n	800719e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01c      	beq.n	8007166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712c:	4b4b      	ldr	r3, [pc, #300]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800712e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007132:	4a4a      	ldr	r2, [pc, #296]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713c:	f7fd fc8a 	bl	8004a54 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7fd fc86 	bl	8004a54 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e20c      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0ef      	beq.n	8007144 <HAL_RCC_OscConfig+0x3ec>
 8007164:	e01b      	b.n	800719e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007166:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800716c:	4a3b      	ldr	r2, [pc, #236]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007176:	f7fd fc6d 	bl	8004a54 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717e:	f7fd fc69 	bl	8004a54 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1ef      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007190:	4b32      	ldr	r3, [pc, #200]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ef      	bne.n	800717e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80a6 	beq.w	80072f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071b0:	4b2a      	ldr	r3, [pc, #168]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c0:	4a26      	ldr	r2, [pc, #152]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c6:	6593      	str	r3, [r2, #88]	; 0x58
 80071c8:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d4:	2301      	movs	r3, #1
 80071d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d8:	4b21      	ldr	r3, [pc, #132]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d118      	bne.n	8007216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071e4:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1d      	ldr	r2, [pc, #116]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f0:	f7fd fc30 	bl	8004a54 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f8:	f7fd fc2c 	bl	8004a54 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e1b2      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d108      	bne.n	8007230 <HAL_RCC_OscConfig+0x4d8>
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800722e:	e029      	b.n	8007284 <HAL_RCC_OscConfig+0x52c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d115      	bne.n	8007264 <HAL_RCC_OscConfig+0x50c>
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	4a07      	ldr	r2, [pc, #28]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	4a03      	ldr	r2, [pc, #12]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007258:	e014      	b.n	8007284 <HAL_RCC_OscConfig+0x52c>
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000
 8007260:	40007000 	.word	0x40007000
 8007264:	4b9a      	ldr	r3, [pc, #616]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	4a99      	ldr	r2, [pc, #612]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007274:	4b96      	ldr	r3, [pc, #600]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	4a95      	ldr	r2, [pc, #596]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800727c:	f023 0304 	bic.w	r3, r3, #4
 8007280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d016      	beq.n	80072ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728c:	f7fd fbe2 	bl	8004a54 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007292:	e00a      	b.n	80072aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007294:	f7fd fbde 	bl	8004a54 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e162      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ed      	beq.n	8007294 <HAL_RCC_OscConfig+0x53c>
 80072b8:	e015      	b.n	80072e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fd fbcb 	bl	8004a54 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fd fbc7 	bl	8004a54 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e14b      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072d8:	4b7d      	ldr	r3, [pc, #500]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1ed      	bne.n	80072c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e6:	7ffb      	ldrb	r3, [r7, #31]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d105      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ec:	4b78      	ldr	r3, [pc, #480]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03c      	beq.n	800737e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800730c:	4b70      	ldr	r3, [pc, #448]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800730e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007312:	4a6f      	ldr	r2, [pc, #444]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731c:	f7fd fb9a 	bl	8004a54 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007324:	f7fd fb96 	bl	8004a54 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e11c      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007336:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ef      	beq.n	8007324 <HAL_RCC_OscConfig+0x5cc>
 8007344:	e01b      	b.n	800737e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007346:	4b62      	ldr	r3, [pc, #392]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800734c:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007356:	f7fd fb7d 	bl	8004a54 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800735e:	f7fd fb79 	bl	8004a54 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0ff      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007370:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1ef      	bne.n	800735e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80f3 	beq.w	800756e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	2b02      	cmp	r3, #2
 800738e:	f040 80c9 	bne.w	8007524 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007392:	4b4f      	ldr	r3, [pc, #316]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f003 0203 	and.w	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d12c      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	3b01      	subs	r3, #1
 80073b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d123      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d11b      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d113      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	3b01      	subs	r3, #1
 80073e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d109      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	3b01      	subs	r3, #1
 80073fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d06b      	beq.n	80074d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d062      	beq.n	80074cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007406:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e0ac      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007416:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800741c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007420:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007422:	f7fd fb17 	bl	8004a54 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742a:	f7fd fb13 	bl	8004a54 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e099      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743c:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <HAL_RCC_OscConfig+0x77c>)
 800744e:	4013      	ands	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007458:	3a01      	subs	r2, #1
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	4311      	orrs	r1, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007462:	0212      	lsls	r2, r2, #8
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0552      	lsls	r2, r2, #21
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007476:	0852      	lsrs	r2, r2, #1
 8007478:	3a01      	subs	r2, #1
 800747a:	0652      	lsls	r2, r2, #25
 800747c:	4311      	orrs	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007482:	06d2      	lsls	r2, r2, #27
 8007484:	430a      	orrs	r2, r1
 8007486:	4912      	ldr	r1, [pc, #72]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007488:	4313      	orrs	r3, r2
 800748a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007498:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800749e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074a4:	f7fd fad6 	bl	8004a54 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fd fad2 	bl	8004a54 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e058      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074ca:	e050      	b.n	800756e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e04f      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
 80074d0:	40021000 	.word	0x40021000
 80074d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074d8:	4b27      	ldr	r3, [pc, #156]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d144      	bne.n	800756e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80074e4:	4b24      	ldr	r3, [pc, #144]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a23      	ldr	r2, [pc, #140]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 80074ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f0:	4b21      	ldr	r3, [pc, #132]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a20      	ldr	r2, [pc, #128]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80074fc:	f7fd faaa 	bl	8004a54 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fd faa6 	bl	8004a54 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e02c      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x7ac>
 8007522:	e024      	b.n	800756e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b0c      	cmp	r3, #12
 8007528:	d01f      	beq.n	800756a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a12      	ldr	r2, [pc, #72]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 8007530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fd fa8d 	bl	8004a54 <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753e:	f7fd fa89 	bl	8004a54 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e00f      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007550:	4b09      	ldr	r3, [pc, #36]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	4905      	ldr	r1, [pc, #20]	; (8007578 <HAL_RCC_OscConfig+0x820>)
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <HAL_RCC_OscConfig+0x824>)
 8007564:	4013      	ands	r3, r2
 8007566:	60cb      	str	r3, [r1, #12]
 8007568:	e001      	b.n	800756e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40021000 	.word	0x40021000
 800757c:	feeefffc 	.word	0xfeeefffc

08007580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0e7      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b75      	ldr	r3, [pc, #468]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b72      	ldr	r3, [pc, #456]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 0207 	bic.w	r2, r3, #7
 80075aa:	4970      	ldr	r1, [pc, #448]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b6e      	ldr	r3, [pc, #440]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0cf      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d010      	beq.n	80075f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	4b66      	ldr	r3, [pc, #408]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075dc:	429a      	cmp	r2, r3
 80075de:	d908      	bls.n	80075f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e0:	4b63      	ldr	r3, [pc, #396]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4960      	ldr	r1, [pc, #384]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04c      	beq.n	8007698 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d107      	bne.n	8007616 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007606:	4b5a      	ldr	r3, [pc, #360]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d121      	bne.n	8007656 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e0a6      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d107      	bne.n	800762e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800761e:	4b54      	ldr	r3, [pc, #336]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d115      	bne.n	8007656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e09a      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007636:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e08e      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007646:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e086      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007656:	4b46      	ldr	r3, [pc, #280]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4943      	ldr	r1, [pc, #268]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007668:	f7fd f9f4 	bl	8004a54 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	e00a      	b.n	8007686 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007670:	f7fd f9f0 	bl	8004a54 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	; 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e06e      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	4b3a      	ldr	r3, [pc, #232]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 020c 	and.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	429a      	cmp	r2, r3
 8007696:	d1eb      	bne.n	8007670 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	4b31      	ldr	r3, [pc, #196]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d208      	bcs.n	80076c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b4:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	492b      	ldr	r1, [pc, #172]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d210      	bcs.n	80076f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d4:	4b25      	ldr	r3, [pc, #148]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f023 0207 	bic.w	r2, r3, #7
 80076dc:	4923      	ldr	r1, [pc, #140]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e4:	4b21      	ldr	r3, [pc, #132]	; (800776c <HAL_RCC_ClockConfig+0x1ec>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d001      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e036      	b.n	8007764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007702:	4b1b      	ldr	r3, [pc, #108]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4918      	ldr	r1, [pc, #96]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007720:	4b13      	ldr	r3, [pc, #76]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	4910      	ldr	r1, [pc, #64]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007730:	4313      	orrs	r3, r2
 8007732:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007734:	f000 f824 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 8007738:	4602      	mov	r2, r0
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	490b      	ldr	r1, [pc, #44]	; (8007774 <HAL_RCC_ClockConfig+0x1f4>)
 8007746:	5ccb      	ldrb	r3, [r1, r3]
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
 8007750:	4a09      	ldr	r2, [pc, #36]	; (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007754:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_RCC_ClockConfig+0x1fc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f7fd f92b 	bl	80049b4 <HAL_InitTick>
 800775e:	4603      	mov	r3, r0
 8007760:	72fb      	strb	r3, [r7, #11]

  return status;
 8007762:	7afb      	ldrb	r3, [r7, #11]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40022000 	.word	0x40022000
 8007770:	40021000 	.word	0x40021000
 8007774:	0801eff4 	.word	0x0801eff4
 8007778:	20000000 	.word	0x20000000
 800777c:	20000004 	.word	0x20000004

08007780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007780:	b480      	push	{r7}
 8007782:	b089      	sub	sp, #36	; 0x24
 8007784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800778e:	4b3e      	ldr	r3, [pc, #248]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
 8007796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007798:	4b3b      	ldr	r3, [pc, #236]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_RCC_GetSysClockFreq+0x34>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b0c      	cmp	r3, #12
 80077ac:	d121      	bne.n	80077f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d11e      	bne.n	80077f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80077b4:	4b34      	ldr	r3, [pc, #208]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 80077c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e005      	b.n	80077dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077d0:	4b2d      	ldr	r3, [pc, #180]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	091b      	lsrs	r3, r3, #4
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80077dc:	4a2b      	ldr	r2, [pc, #172]	; (800788c <HAL_RCC_GetSysClockFreq+0x10c>)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10d      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077f0:	e00a      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d102      	bne.n	80077fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077f8:	4b25      	ldr	r3, [pc, #148]	; (8007890 <HAL_RCC_GetSysClockFreq+0x110>)
 80077fa:	61bb      	str	r3, [r7, #24]
 80077fc:	e004      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d101      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007804:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_RCC_GetSysClockFreq+0x114>)
 8007806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b0c      	cmp	r3, #12
 800780c:	d134      	bne.n	8007878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800780e:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d003      	beq.n	8007826 <HAL_RCC_GetSysClockFreq+0xa6>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d003      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0xac>
 8007824:	e005      	b.n	8007832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCC_GetSysClockFreq+0x110>)
 8007828:	617b      	str	r3, [r7, #20]
      break;
 800782a:	e005      	b.n	8007838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800782c:	4b19      	ldr	r3, [pc, #100]	; (8007894 <HAL_RCC_GetSysClockFreq+0x114>)
 800782e:	617b      	str	r3, [r7, #20]
      break;
 8007830:	e002      	b.n	8007838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	617b      	str	r3, [r7, #20]
      break;
 8007836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	3301      	adds	r3, #1
 8007844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007846:	4b10      	ldr	r3, [pc, #64]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	fb03 f202 	mul.w	r2, r3, r2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800785e:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <HAL_RCC_GetSysClockFreq+0x108>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	0e5b      	lsrs	r3, r3, #25
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	3301      	adds	r3, #1
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	fbb2 f3f3 	udiv	r3, r2, r3
 8007876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007878:	69bb      	ldr	r3, [r7, #24]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3724      	adds	r7, #36	; 0x24
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40021000 	.word	0x40021000
 800788c:	0801f00c 	.word	0x0801f00c
 8007890:	00f42400 	.word	0x00f42400
 8007894:	007a1200 	.word	0x007a1200

08007898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800789c:	4b03      	ldr	r3, [pc, #12]	; (80078ac <HAL_RCC_GetHCLKFreq+0x14>)
 800789e:	681b      	ldr	r3, [r3, #0]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20000000 	.word	0x20000000

080078b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078b4:	f7ff fff0 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 80078b8:	4602      	mov	r2, r0
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	4904      	ldr	r1, [pc, #16]	; (80078d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078c6:	5ccb      	ldrb	r3, [r1, r3]
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	0801f004 	.word	0x0801f004

080078dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078e0:	f7ff ffda 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 80078e4:	4602      	mov	r2, r0
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	0adb      	lsrs	r3, r3, #11
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	4904      	ldr	r1, [pc, #16]	; (8007904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078f2:	5ccb      	ldrb	r3, [r1, r3]
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40021000 	.word	0x40021000
 8007904:	0801f004 	.word	0x0801f004

08007908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007914:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007920:	f7ff f9b6 	bl	8006c90 <HAL_PWREx_GetVoltageRange>
 8007924:	6178      	str	r0, [r7, #20]
 8007926:	e014      	b.n	8007952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800792e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007932:	6593      	str	r3, [r2, #88]	; 0x58
 8007934:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007940:	f7ff f9a6 	bl	8006c90 <HAL_PWREx_GetVoltageRange>
 8007944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007946:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794a:	4a1d      	ldr	r2, [pc, #116]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800794c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007958:	d10b      	bne.n	8007972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b80      	cmp	r3, #128	; 0x80
 800795e:	d919      	bls.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2ba0      	cmp	r3, #160	; 0xa0
 8007964:	d902      	bls.n	800796c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007966:	2302      	movs	r3, #2
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	e013      	b.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800796c:	2301      	movs	r3, #1
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	e010      	b.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d902      	bls.n	800797e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007978:	2303      	movs	r3, #3
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	e00a      	b.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d102      	bne.n	800798a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007984:	2302      	movs	r3, #2
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	e004      	b.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b70      	cmp	r3, #112	; 0x70
 800798e:	d101      	bne.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007990:	2301      	movs	r3, #1
 8007992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007994:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f023 0207 	bic.w	r2, r3, #7
 800799c:	4909      	ldr	r1, [pc, #36]	; (80079c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40021000 	.word	0x40021000
 80079c4:	40022000 	.word	0x40022000

080079c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079d0:	2300      	movs	r3, #0
 80079d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079d4:	2300      	movs	r3, #0
 80079d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d031      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079ec:	d01a      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80079ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079f2:	d814      	bhi.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079fc:	d10f      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80079fe:	4b5d      	ldr	r3, [pc, #372]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a0a:	e00c      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f9ce 	bl	8007db4 <RCCEx_PLLSAI1_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	74fb      	strb	r3, [r7, #19]
      break;
 8007a22:	e000      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a26:	7cfb      	ldrb	r3, [r7, #19]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10b      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a2c:	4b51      	ldr	r3, [pc, #324]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3a:	494e      	ldr	r1, [pc, #312]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a42:	e001      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	7cfb      	ldrb	r3, [r7, #19]
 8007a46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 809e 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a56:	2300      	movs	r3, #0
 8007a58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a5a:	4b46      	ldr	r3, [pc, #280]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a70:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a74:	4a3f      	ldr	r2, [pc, #252]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7c:	4b3d      	ldr	r3, [pc, #244]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a39      	ldr	r2, [pc, #228]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a98:	f7fc ffdc 	bl	8004a54 <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a9e:	e009      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa0:	f7fc ffd8 	bl	8004a54 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d902      	bls.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab2:	e005      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ab4:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0ef      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007ac0:	7cfb      	ldrb	r3, [r7, #19]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d15a      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ac6:	4b2b      	ldr	r3, [pc, #172]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01e      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d019      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ae2:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b0e:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d016      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fc ff98 	bl	8004a54 <HAL_GetTick>
 8007b24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b26:	e00b      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b28:	f7fc ff94 	bl	8004a54 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d902      	bls.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	74fb      	strb	r3, [r7, #19]
            break;
 8007b3e:	e006      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ec      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10b      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b62:	4904      	ldr	r1, [pc, #16]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b6a:	e009      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b6c:	7cfb      	ldrb	r3, [r7, #19]
 8007b6e:	74bb      	strb	r3, [r7, #18]
 8007b70:	e006      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007b72:	bf00      	nop
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b80:	7c7b      	ldrb	r3, [r7, #17]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b86:	4b8a      	ldr	r3, [pc, #552]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	4a89      	ldr	r2, [pc, #548]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b9e:	4b84      	ldr	r3, [pc, #528]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f023 0203 	bic.w	r2, r3, #3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	4980      	ldr	r1, [pc, #512]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc0:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 020c 	bic.w	r2, r3, #12
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	4978      	ldr	r1, [pc, #480]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007be2:	4b73      	ldr	r3, [pc, #460]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	496f      	ldr	r1, [pc, #444]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c04:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	4967      	ldr	r1, [pc, #412]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c26:	4b62      	ldr	r3, [pc, #392]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	495e      	ldr	r1, [pc, #376]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c48:	4b59      	ldr	r3, [pc, #356]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	4956      	ldr	r1, [pc, #344]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c6a:	4b51      	ldr	r3, [pc, #324]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	494d      	ldr	r1, [pc, #308]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d028      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c8c:	4b48      	ldr	r3, [pc, #288]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	4945      	ldr	r1, [pc, #276]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cac:	4b40      	ldr	r3, [pc, #256]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4a3f      	ldr	r2, [pc, #252]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cb6:	60d3      	str	r3, [r2, #12]
 8007cb8:	e011      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cc2:	d10c      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 f872 	bl	8007db4 <RCCEx_PLLSAI1_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007cd4:	7cfb      	ldrb	r3, [r7, #19]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007cda:	7cfb      	ldrb	r3, [r7, #19]
 8007cdc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d028      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf8:	492d      	ldr	r1, [pc, #180]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d08:	d106      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	4a28      	ldr	r2, [pc, #160]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d14:	60d3      	str	r3, [r2, #12]
 8007d16:	e011      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d20:	d10c      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	2101      	movs	r1, #1
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 f843 	bl	8007db4 <RCCEx_PLLSAI1_Config>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d32:	7cfb      	ldrb	r3, [r7, #19]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007d38:	7cfb      	ldrb	r3, [r7, #19]
 8007d3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01c      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d48:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d56:	4916      	ldr	r1, [pc, #88]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d66:	d10c      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f820 	bl	8007db4 <RCCEx_PLLSAI1_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d78:	7cfb      	ldrb	r3, [r7, #19]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
 8007d80:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9c:	4904      	ldr	r1, [pc, #16]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007da4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000

08007db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007dc2:	4b74      	ldr	r3, [pc, #464]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d018      	beq.n	8007e00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007dce:	4b71      	ldr	r3, [pc, #452]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f003 0203 	and.w	r2, r3, #3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d10d      	bne.n	8007dfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
       ||
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007de6:	4b6b      	ldr	r3, [pc, #428]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
       ||
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d047      	beq.n	8007e8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]
 8007dfe:	e044      	b.n	8007e8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d018      	beq.n	8007e3a <RCCEx_PLLSAI1_Config+0x86>
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d825      	bhi.n	8007e58 <RCCEx_PLLSAI1_Config+0xa4>
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d002      	beq.n	8007e16 <RCCEx_PLLSAI1_Config+0x62>
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d009      	beq.n	8007e28 <RCCEx_PLLSAI1_Config+0x74>
 8007e14:	e020      	b.n	8007e58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e16:	4b5f      	ldr	r3, [pc, #380]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d11d      	bne.n	8007e5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e26:	e01a      	b.n	8007e5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e28:	4b5a      	ldr	r3, [pc, #360]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d116      	bne.n	8007e62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e38:	e013      	b.n	8007e62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e3a:	4b56      	ldr	r3, [pc, #344]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10f      	bne.n	8007e66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e46:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e56:	e006      	b.n	8007e66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5c:	e004      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10d      	bne.n	8007e8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e6e:	4b49      	ldr	r3, [pc, #292]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	430b      	orrs	r3, r1
 8007e84:	4943      	ldr	r1, [pc, #268]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d17c      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007e90:	4b40      	ldr	r3, [pc, #256]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a3f      	ldr	r2, [pc, #252]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9c:	f7fc fdda 	bl	8004a54 <HAL_GetTick>
 8007ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ea2:	e009      	b.n	8007eb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ea4:	f7fc fdd6 	bl	8004a54 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d902      	bls.n	8007eb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8007eb6:	e005      	b.n	8007ec4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1ef      	bne.n	8007ea4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d15f      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ed0:	4b30      	ldr	r3, [pc, #192]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6892      	ldr	r2, [r2, #8]
 8007ee0:	0211      	lsls	r1, r2, #8
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68d2      	ldr	r2, [r2, #12]
 8007ee6:	06d2      	lsls	r2, r2, #27
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	492a      	ldr	r1, [pc, #168]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	610b      	str	r3, [r1, #16]
 8007ef0:	e027      	b.n	8007f42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d112      	bne.n	8007f1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ef8:	4b26      	ldr	r3, [pc, #152]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007f00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6892      	ldr	r2, [r2, #8]
 8007f08:	0211      	lsls	r1, r2, #8
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6912      	ldr	r2, [r2, #16]
 8007f0e:	0852      	lsrs	r2, r2, #1
 8007f10:	3a01      	subs	r2, #1
 8007f12:	0552      	lsls	r2, r2, #21
 8007f14:	430a      	orrs	r2, r1
 8007f16:	491f      	ldr	r1, [pc, #124]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	610b      	str	r3, [r1, #16]
 8007f1c:	e011      	b.n	8007f42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6892      	ldr	r2, [r2, #8]
 8007f2e:	0211      	lsls	r1, r2, #8
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6952      	ldr	r2, [r2, #20]
 8007f34:	0852      	lsrs	r2, r2, #1
 8007f36:	3a01      	subs	r2, #1
 8007f38:	0652      	lsls	r2, r2, #25
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	4915      	ldr	r1, [pc, #84]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4e:	f7fc fd81 	bl	8004a54 <HAL_GetTick>
 8007f52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f54:	e009      	b.n	8007f6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f56:	f7fc fd7d 	bl	8004a54 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d902      	bls.n	8007f6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	73fb      	strb	r3, [r7, #15]
          break;
 8007f68:	e005      	b.n	8007f76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0ef      	beq.n	8007f56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d106      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40021000 	.word	0x40021000

08007f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e049      	b.n	800803e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fc fae6 	bl	8004590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f000 fbf4 	bl	80087c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d001      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e03b      	b.n	80080d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d009      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0x4e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d004      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0x4e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d115      	bne.n	80080c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <HAL_TIM_Base_Start_IT+0xa4>)
 800809e:	4013      	ands	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b06      	cmp	r3, #6
 80080a6:	d015      	beq.n	80080d4 <HAL_TIM_Base_Start_IT+0x8c>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d011      	beq.n	80080d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c0:	e008      	b.n	80080d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0201 	orr.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e000      	b.n	80080d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	40014000 	.word	0x40014000
 80080ec:	00010007 	.word	0x00010007

080080f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e049      	b.n	8008196 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f841 	bl	800819e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f000 fb48 	bl	80087c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d020      	beq.n	8008216 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01b      	beq.n	8008216 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f06f 0202 	mvn.w	r2, #2
 80081e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fac2 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 8008202:	e005      	b.n	8008210 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fab4 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fac5 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d020      	beq.n	8008262 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01b      	beq.n	8008262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f06f 0204 	mvn.w	r2, #4
 8008232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa9c 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 800824e:	e005      	b.n	800825c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fa8e 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa9f 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d020      	beq.n	80082ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01b      	beq.n	80082ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f06f 0208 	mvn.w	r2, #8
 800827e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2204      	movs	r2, #4
 8008284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa76 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 800829a:	e005      	b.n	80082a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa68 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa79 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01b      	beq.n	80082fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f06f 0210 	mvn.w	r2, #16
 80082ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2208      	movs	r2, #8
 80082d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa50 	bl	8008786 <HAL_TIM_IC_CaptureCallback>
 80082e6:	e005      	b.n	80082f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa42 	bl	8008772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa53 	bl	800879a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f06f 0201 	mvn.w	r2, #1
 8008316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7fc f855 	bl	80043c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800833a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fe2d 	bl	8008f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fe25 	bl	8008fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa12 	bl	80087ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00c      	beq.n	80083ae <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f06f 0220 	mvn.w	r2, #32
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fded 	bl	8008f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083d2:	2302      	movs	r3, #2
 80083d4:	e0ff      	b.n	80085d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b14      	cmp	r3, #20
 80083e2:	f200 80f0 	bhi.w	80085c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	08008441 	.word	0x08008441
 80083f0:	080085c7 	.word	0x080085c7
 80083f4:	080085c7 	.word	0x080085c7
 80083f8:	080085c7 	.word	0x080085c7
 80083fc:	08008481 	.word	0x08008481
 8008400:	080085c7 	.word	0x080085c7
 8008404:	080085c7 	.word	0x080085c7
 8008408:	080085c7 	.word	0x080085c7
 800840c:	080084c3 	.word	0x080084c3
 8008410:	080085c7 	.word	0x080085c7
 8008414:	080085c7 	.word	0x080085c7
 8008418:	080085c7 	.word	0x080085c7
 800841c:	08008503 	.word	0x08008503
 8008420:	080085c7 	.word	0x080085c7
 8008424:	080085c7 	.word	0x080085c7
 8008428:	080085c7 	.word	0x080085c7
 800842c:	08008545 	.word	0x08008545
 8008430:	080085c7 	.word	0x080085c7
 8008434:	080085c7 	.word	0x080085c7
 8008438:	080085c7 	.word	0x080085c7
 800843c:	08008585 	.word	0x08008585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fa20 	bl	800888c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0208 	orr.w	r2, r2, #8
 800845a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0204 	bic.w	r2, r2, #4
 800846a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6999      	ldr	r1, [r3, #24]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	691a      	ldr	r2, [r3, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	619a      	str	r2, [r3, #24]
      break;
 800847e:	e0a5      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fa7c 	bl	8008984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800849a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6999      	ldr	r1, [r3, #24]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	021a      	lsls	r2, r3, #8
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	619a      	str	r2, [r3, #24]
      break;
 80084c0:	e084      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fad5 	bl	8008a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69da      	ldr	r2, [r3, #28]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f042 0208 	orr.w	r2, r2, #8
 80084dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0204 	bic.w	r2, r2, #4
 80084ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69d9      	ldr	r1, [r3, #28]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	61da      	str	r2, [r3, #28]
      break;
 8008500:	e064      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fb2d 	bl	8008b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800851c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800852c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69d9      	ldr	r1, [r3, #28]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	021a      	lsls	r2, r3, #8
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	61da      	str	r2, [r3, #28]
      break;
 8008542:	e043      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fb6a 	bl	8008c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0204 	bic.w	r2, r2, #4
 800856e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008582:	e023      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fba2 	bl	8008cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085c4:	e002      	b.n	80085cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop

080085e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIM_ConfigClockSource+0x1c>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e0b6      	b.n	800876a <HAL_TIM_ConfigClockSource+0x18a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800861e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008638:	d03e      	beq.n	80086b8 <HAL_TIM_ConfigClockSource+0xd8>
 800863a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863e:	f200 8087 	bhi.w	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	f000 8086 	beq.w	8008756 <HAL_TIM_ConfigClockSource+0x176>
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	d87f      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008650:	2b70      	cmp	r3, #112	; 0x70
 8008652:	d01a      	beq.n	800868a <HAL_TIM_ConfigClockSource+0xaa>
 8008654:	2b70      	cmp	r3, #112	; 0x70
 8008656:	d87b      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008658:	2b60      	cmp	r3, #96	; 0x60
 800865a:	d050      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x11e>
 800865c:	2b60      	cmp	r3, #96	; 0x60
 800865e:	d877      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008660:	2b50      	cmp	r3, #80	; 0x50
 8008662:	d03c      	beq.n	80086de <HAL_TIM_ConfigClockSource+0xfe>
 8008664:	2b50      	cmp	r3, #80	; 0x50
 8008666:	d873      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d058      	beq.n	800871e <HAL_TIM_ConfigClockSource+0x13e>
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d86f      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008670:	2b30      	cmp	r3, #48	; 0x30
 8008672:	d064      	beq.n	800873e <HAL_TIM_ConfigClockSource+0x15e>
 8008674:	2b30      	cmp	r3, #48	; 0x30
 8008676:	d86b      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008678:	2b20      	cmp	r3, #32
 800867a:	d060      	beq.n	800873e <HAL_TIM_ConfigClockSource+0x15e>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d867      	bhi.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d05c      	beq.n	800873e <HAL_TIM_ConfigClockSource+0x15e>
 8008684:	2b10      	cmp	r3, #16
 8008686:	d05a      	beq.n	800873e <HAL_TIM_ConfigClockSource+0x15e>
 8008688:	e062      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800869a:	f000 fbef 	bl	8008e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	609a      	str	r2, [r3, #8]
      break;
 80086b6:	e04f      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c8:	f000 fbd8 	bl	8008e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086da:	609a      	str	r2, [r3, #8]
      break;
 80086dc:	e03c      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ea:	461a      	mov	r2, r3
 80086ec:	f000 fb4c 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2150      	movs	r1, #80	; 0x50
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fba5 	bl	8008e46 <TIM_ITRx_SetConfig>
      break;
 80086fc:	e02c      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800870a:	461a      	mov	r2, r3
 800870c:	f000 fb6b 	bl	8008de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2160      	movs	r1, #96	; 0x60
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fb95 	bl	8008e46 <TIM_ITRx_SetConfig>
      break;
 800871c:	e01c      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800872a:	461a      	mov	r2, r3
 800872c:	f000 fb2c 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2140      	movs	r1, #64	; 0x40
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fb85 	bl	8008e46 <TIM_ITRx_SetConfig>
      break;
 800873c:	e00c      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f000 fb7c 	bl	8008e46 <TIM_ITRx_SetConfig>
      break;
 800874e:	e003      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
      break;
 8008754:	e000      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <TIM_Base_SetConfig+0xbc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_Base_SetConfig+0x20>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d108      	bne.n	80087f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a21      	ldr	r2, [pc, #132]	; (8008880 <TIM_Base_SetConfig+0xbc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00b      	beq.n	8008816 <TIM_Base_SetConfig+0x52>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008804:	d007      	beq.n	8008816 <TIM_Base_SetConfig+0x52>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1e      	ldr	r2, [pc, #120]	; (8008884 <TIM_Base_SetConfig+0xc0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_Base_SetConfig+0x52>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a1d      	ldr	r2, [pc, #116]	; (8008888 <TIM_Base_SetConfig+0xc4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d108      	bne.n	8008828 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	4313      	orrs	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a0c      	ldr	r2, [pc, #48]	; (8008880 <TIM_Base_SetConfig+0xbc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d007      	beq.n	8008864 <TIM_Base_SetConfig+0xa0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a0b      	ldr	r2, [pc, #44]	; (8008884 <TIM_Base_SetConfig+0xc0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_Base_SetConfig+0xa0>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <TIM_Base_SetConfig+0xc4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d103      	bne.n	800886c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	615a      	str	r2, [r3, #20]
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400

0800888c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	f023 0201 	bic.w	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 0302 	bic.w	r3, r3, #2
 80088d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a24      	ldr	r2, [pc, #144]	; (8008978 <TIM_OC1_SetConfig+0xec>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d007      	beq.n	80088fc <TIM_OC1_SetConfig+0x70>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a23      	ldr	r2, [pc, #140]	; (800897c <TIM_OC1_SetConfig+0xf0>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_OC1_SetConfig+0x70>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a22      	ldr	r2, [pc, #136]	; (8008980 <TIM_OC1_SetConfig+0xf4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d10c      	bne.n	8008916 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f023 0308 	bic.w	r3, r3, #8
 8008902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0304 	bic.w	r3, r3, #4
 8008914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a17      	ldr	r2, [pc, #92]	; (8008978 <TIM_OC1_SetConfig+0xec>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d007      	beq.n	800892e <TIM_OC1_SetConfig+0xa2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a16      	ldr	r2, [pc, #88]	; (800897c <TIM_OC1_SetConfig+0xf0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC1_SetConfig+0xa2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <TIM_OC1_SetConfig+0xf4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d111      	bne.n	8008952 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	621a      	str	r2, [r3, #32]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40014000 	.word	0x40014000
 8008980:	40014400 	.word	0x40014400

08008984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	f023 0210 	bic.w	r2, r3, #16
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0320 	bic.w	r3, r3, #32
 80089d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a22      	ldr	r2, [pc, #136]	; (8008a6c <TIM_OC2_SetConfig+0xe8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10d      	bne.n	8008a04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <TIM_OC2_SetConfig+0xe8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_OC2_SetConfig+0x98>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a18      	ldr	r2, [pc, #96]	; (8008a70 <TIM_OC2_SetConfig+0xec>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_OC2_SetConfig+0x98>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a17      	ldr	r2, [pc, #92]	; (8008a74 <TIM_OC2_SetConfig+0xf0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d113      	bne.n	8008a44 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40014000 	.word	0x40014000
 8008a74:	40014400 	.word	0x40014400

08008a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a21      	ldr	r2, [pc, #132]	; (8008b5c <TIM_OC3_SetConfig+0xe4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d10d      	bne.n	8008af6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <TIM_OC3_SetConfig+0xe4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <TIM_OC3_SetConfig+0x96>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <TIM_OC3_SetConfig+0xe8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC3_SetConfig+0x96>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <TIM_OC3_SetConfig+0xec>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d113      	bne.n	8008b36 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	621a      	str	r2, [r3, #32]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400

08008b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	031b      	lsls	r3, r3, #12
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a14      	ldr	r2, [pc, #80]	; (8008c18 <TIM_OC4_SetConfig+0xb0>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d007      	beq.n	8008bdc <TIM_OC4_SetConfig+0x74>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <TIM_OC4_SetConfig+0xb4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_OC4_SetConfig+0x74>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <TIM_OC4_SetConfig+0xb8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d109      	bne.n	8008bf0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	019b      	lsls	r3, r3, #6
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	621a      	str	r2, [r3, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	40012c00 	.word	0x40012c00
 8008c1c:	40014000 	.word	0x40014000
 8008c20:	40014400 	.word	0x40014400

08008c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	041b      	lsls	r3, r3, #16
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <TIM_OC5_SetConfig+0xa4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d007      	beq.n	8008c8e <TIM_OC5_SetConfig+0x6a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <TIM_OC5_SetConfig+0xa8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_OC5_SetConfig+0x6a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a11      	ldr	r2, [pc, #68]	; (8008cd0 <TIM_OC5_SetConfig+0xac>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d109      	bne.n	8008ca2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	621a      	str	r2, [r3, #32]
}
 8008cbc:	bf00      	nop
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	40012c00 	.word	0x40012c00
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400

08008cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <TIM_OC6_SetConfig+0xa8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d007      	beq.n	8008d40 <TIM_OC6_SetConfig+0x6c>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <TIM_OC6_SetConfig+0xac>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_OC6_SetConfig+0x6c>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <TIM_OC6_SetConfig+0xb0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d109      	bne.n	8008d54 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40012c00 	.word	0x40012c00
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40014400 	.word	0x40014400

08008d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f023 0201 	bic.w	r2, r3, #1
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 030a 	bic.w	r3, r3, #10
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f023 0210 	bic.w	r2, r3, #16
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	031b      	lsls	r3, r3, #12
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f043 0307 	orr.w	r3, r3, #7
 8008e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	609a      	str	r2, [r3, #8]
}
 8008e70:	bf00      	nop
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	021a      	lsls	r2, r3, #8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	609a      	str	r2, [r3, #8]
}
 8008eb0:	bf00      	nop
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e04f      	b.n	8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a21      	ldr	r2, [pc, #132]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d108      	bne.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a14      	ldr	r2, [pc, #80]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d10c      	bne.n	8008f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	40012c00 	.word	0x40012c00
 8008f84:	40014000 	.word	0x40014000

08008f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d178      	bne.n	80090ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_UART_Transmit+0x24>
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e071      	b.n	80090d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2221      	movs	r2, #33	; 0x21
 8008ff8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ffa:	f7fb fd2b 	bl	8004a54 <HAL_GetTick>
 8008ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	88fa      	ldrh	r2, [r7, #6]
 800900c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009018:	d108      	bne.n	800902c <HAL_UART_Transmit+0x68>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	e003      	b.n	8009034 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009034:	e030      	b.n	8009098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2200      	movs	r2, #0
 800903e:	2180      	movs	r1, #128	; 0x80
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fec9 	bl	8009dd8 <UART_WaitOnFlagUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2220      	movs	r2, #32
 8009050:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e03c      	b.n	80090d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10b      	bne.n	8009074 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	881a      	ldrh	r2, [r3, #0]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009068:	b292      	uxth	r2, r2
 800906a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	3302      	adds	r3, #2
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e008      	b.n	8009086 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	781a      	ldrb	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	b292      	uxth	r2, r2
 800907e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	3301      	adds	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800908c:	b29b      	uxth	r3, r3
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1c8      	bne.n	8009036 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	2140      	movs	r1, #64	; 0x40
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fe92 	bl	8009dd8 <UART_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e005      	b.n	80090d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b0ba      	sub	sp, #232	; 0xe8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009102:	f640 030f 	movw	r3, #2063	; 0x80f
 8009106:	4013      	ands	r3, r2
 8009108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800910c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d115      	bne.n	8009140 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00f      	beq.n	8009140 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 82ae 	beq.w	8009692 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
      }
      return;
 800913e:	e2a8      	b.n	8009692 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8117 	beq.w	8009378 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800914a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800915a:	4b85      	ldr	r3, [pc, #532]	; (8009370 <HAL_UART_IRQHandler+0x298>)
 800915c:	4013      	ands	r3, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 810a 	beq.w	8009378 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d011      	beq.n	8009194 <HAL_UART_IRQHandler+0xbc>
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2201      	movs	r2, #1
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918a:	f043 0201 	orr.w	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <HAL_UART_IRQHandler+0xec>
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2202      	movs	r2, #2
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ba:	f043 0204 	orr.w	r2, r3, #4
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d011      	beq.n	80091f4 <HAL_UART_IRQHandler+0x11c>
 80091d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00b      	beq.n	80091f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2204      	movs	r2, #4
 80091e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ea:	f043 0202 	orr.w	r2, r3, #2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d017      	beq.n	8009230 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800920c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009210:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2208      	movs	r2, #8
 800921e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009226:	f043 0208 	orr.w	r2, r3, #8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009238:	2b00      	cmp	r3, #0
 800923a:	d012      	beq.n	8009262 <HAL_UART_IRQHandler+0x18a>
 800923c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009258:	f043 0220 	orr.w	r2, r3, #32
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 8214 	beq.w	8009696 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800926e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00d      	beq.n	8009296 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d005      	beq.n	80092ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d04f      	beq.n	800935a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fdf3 	bl	8009ea6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ca:	2b40      	cmp	r3, #64	; 0x40
 80092cc:	d141      	bne.n	8009352 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1d9      	bne.n	80092ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931e:	2b00      	cmp	r3, #0
 8009320:	d013      	beq.n	800934a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009326:	4a13      	ldr	r2, [pc, #76]	; (8009374 <HAL_UART_IRQHandler+0x29c>)
 8009328:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800932e:	4618      	mov	r0, r3
 8009330:	f7fd f9d0 	bl	80066d4 <HAL_DMA_Abort_IT>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d017      	beq.n	800936a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009348:	e00f      	b.n	800936a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f9b8 	bl	80096c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	e00b      	b.n	800936a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9b4 	bl	80096c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009358:	e007      	b.n	800936a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9b0 	bl	80096c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009368:	e195      	b.n	8009696 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936a:	bf00      	nop
    return;
 800936c:	e193      	b.n	8009696 <HAL_UART_IRQHandler+0x5be>
 800936e:	bf00      	nop
 8009370:	04000120 	.word	0x04000120
 8009374:	08009f6f 	.word	0x08009f6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937c:	2b01      	cmp	r3, #1
 800937e:	f040 814e 	bne.w	800961e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 8147 	beq.w	800961e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8140 	beq.w	800961e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2210      	movs	r2, #16
 80093a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	f040 80b8 	bne.w	8009526 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 8167 	beq.w	800969a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093d6:	429a      	cmp	r2, r3
 80093d8:	f080 815f 	bcs.w	800969a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 8086 	bne.w	8009504 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800940c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009426:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800942e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800943a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1da      	bne.n	80093f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3308      	adds	r3, #8
 8009448:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009454:	f023 0301 	bic.w	r3, r3, #1
 8009458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3308      	adds	r3, #8
 8009462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800946a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800946e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e1      	bne.n	8009442 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800948e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3308      	adds	r3, #8
 800949e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d4:	f023 0310 	bic.w	r3, r3, #16
 80094d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80094e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e4      	bne.n	80094c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd f8aa 	bl	8006658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009516:	b29b      	uxth	r3, r3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	b29b      	uxth	r3, r3
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8d8 	bl	80096d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009524:	e0b9      	b.n	800969a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009532:	b29b      	uxth	r3, r3
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009540:	b29b      	uxth	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 80ab 	beq.w	800969e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 80a6 	beq.w	800969e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009574:	647b      	str	r3, [r7, #68]	; 0x44
 8009576:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800957a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e4      	bne.n	8009552 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3308      	adds	r3, #8
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	623b      	str	r3, [r7, #32]
   return(result);
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095ac:	633a      	str	r2, [r7, #48]	; 0x30
 80095ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e3      	bne.n	8009588 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f023 0310 	bic.w	r3, r3, #16
 80095e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095f6:	61fb      	str	r3, [r7, #28]
 80095f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	69b9      	ldr	r1, [r7, #24]
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	617b      	str	r3, [r7, #20]
   return(result);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e4      	bne.n	80095d4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f85c 	bl	80096d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800961c:	e03f      	b.n	800969e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800961e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00e      	beq.n	8009648 <HAL_UART_IRQHandler+0x570>
 800962a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d008      	beq.n	8009648 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800963e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fd3b 	bl	800a0bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009646:	e02d      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00e      	beq.n	8009672 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800965c:	2b00      	cmp	r3, #0
 800965e:	d008      	beq.n	8009672 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01c      	beq.n	80096a2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
    }
    return;
 8009670:	e017      	b.n	80096a2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	d012      	beq.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
 800967e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00c      	beq.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fc85 	bl	8009f9a <UART_EndTransmit_IT>
    return;
 8009690:	e008      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009692:	bf00      	nop
 8009694:	e006      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009696:	bf00      	nop
 8009698:	e004      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800969a:	bf00      	nop
 800969c:	e002      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
      return;
 800969e:	bf00      	nop
 80096a0:	e000      	b.n	80096a4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80096a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80096a4:	37e8      	adds	r7, #232	; 0xe8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop

080096ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096f0:	b08a      	sub	sp, #40	; 0x28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	431a      	orrs	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	431a      	orrs	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	4313      	orrs	r3, r2
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	4bb4      	ldr	r3, [pc, #720]	; (80099ec <UART_SetConfig+0x300>)
 800971c:	4013      	ands	r3, r2
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	6812      	ldr	r2, [r2, #0]
 8009722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009724:	430b      	orrs	r3, r1
 8009726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4aa9      	ldr	r2, [pc, #676]	; (80099f0 <UART_SetConfig+0x304>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009754:	4313      	orrs	r3, r2
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009768:	430a      	orrs	r2, r1
 800976a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4aa0      	ldr	r2, [pc, #640]	; (80099f4 <UART_SetConfig+0x308>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d126      	bne.n	80097c4 <UART_SetConfig+0xd8>
 8009776:	4ba0      	ldr	r3, [pc, #640]	; (80099f8 <UART_SetConfig+0x30c>)
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	2b03      	cmp	r3, #3
 8009782:	d81b      	bhi.n	80097bc <UART_SetConfig+0xd0>
 8009784:	a201      	add	r2, pc, #4	; (adr r2, 800978c <UART_SetConfig+0xa0>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097ad 	.word	0x080097ad
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097b5 	.word	0x080097b5
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097a2:	e080      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80097a4:	2302      	movs	r3, #2
 80097a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097aa:	e07c      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80097ac:	2304      	movs	r3, #4
 80097ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097b2:	e078      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80097b4:	2308      	movs	r3, #8
 80097b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ba:	e074      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80097bc:	2310      	movs	r3, #16
 80097be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097c2:	e070      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a8c      	ldr	r2, [pc, #560]	; (80099fc <UART_SetConfig+0x310>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d138      	bne.n	8009840 <UART_SetConfig+0x154>
 80097ce:	4b8a      	ldr	r3, [pc, #552]	; (80099f8 <UART_SetConfig+0x30c>)
 80097d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d4:	f003 030c 	and.w	r3, r3, #12
 80097d8:	2b0c      	cmp	r3, #12
 80097da:	d82d      	bhi.n	8009838 <UART_SetConfig+0x14c>
 80097dc:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <UART_SetConfig+0xf8>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	08009819 	.word	0x08009819
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009839 	.word	0x08009839
 80097f0:	08009839 	.word	0x08009839
 80097f4:	08009829 	.word	0x08009829
 80097f8:	08009839 	.word	0x08009839
 80097fc:	08009839 	.word	0x08009839
 8009800:	08009839 	.word	0x08009839
 8009804:	08009821 	.word	0x08009821
 8009808:	08009839 	.word	0x08009839
 800980c:	08009839 	.word	0x08009839
 8009810:	08009839 	.word	0x08009839
 8009814:	08009831 	.word	0x08009831
 8009818:	2300      	movs	r3, #0
 800981a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800981e:	e042      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009820:	2302      	movs	r3, #2
 8009822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009826:	e03e      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009828:	2304      	movs	r3, #4
 800982a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800982e:	e03a      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009830:	2308      	movs	r3, #8
 8009832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009836:	e036      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009838:	2310      	movs	r3, #16
 800983a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800983e:	e032      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a6a      	ldr	r2, [pc, #424]	; (80099f0 <UART_SetConfig+0x304>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d12a      	bne.n	80098a0 <UART_SetConfig+0x1b4>
 800984a:	4b6b      	ldr	r3, [pc, #428]	; (80099f8 <UART_SetConfig+0x30c>)
 800984c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009854:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009858:	d01a      	beq.n	8009890 <UART_SetConfig+0x1a4>
 800985a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800985e:	d81b      	bhi.n	8009898 <UART_SetConfig+0x1ac>
 8009860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009864:	d00c      	beq.n	8009880 <UART_SetConfig+0x194>
 8009866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986a:	d815      	bhi.n	8009898 <UART_SetConfig+0x1ac>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <UART_SetConfig+0x18c>
 8009870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009874:	d008      	beq.n	8009888 <UART_SetConfig+0x19c>
 8009876:	e00f      	b.n	8009898 <UART_SetConfig+0x1ac>
 8009878:	2300      	movs	r3, #0
 800987a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800987e:	e012      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009880:	2302      	movs	r3, #2
 8009882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009886:	e00e      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009888:	2304      	movs	r3, #4
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800988e:	e00a      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009890:	2308      	movs	r3, #8
 8009892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009896:	e006      	b.n	80098a6 <UART_SetConfig+0x1ba>
 8009898:	2310      	movs	r3, #16
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800989e:	e002      	b.n	80098a6 <UART_SetConfig+0x1ba>
 80098a0:	2310      	movs	r3, #16
 80098a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a51      	ldr	r2, [pc, #324]	; (80099f0 <UART_SetConfig+0x304>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d17a      	bne.n	80099a6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098b4:	2b08      	cmp	r3, #8
 80098b6:	d824      	bhi.n	8009902 <UART_SetConfig+0x216>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <UART_SetConfig+0x1d4>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	08009903 	.word	0x08009903
 80098c8:	080098ed 	.word	0x080098ed
 80098cc:	08009903 	.word	0x08009903
 80098d0:	080098f3 	.word	0x080098f3
 80098d4:	08009903 	.word	0x08009903
 80098d8:	08009903 	.word	0x08009903
 80098dc:	08009903 	.word	0x08009903
 80098e0:	080098fb 	.word	0x080098fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e4:	f7fd ffe4 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 80098e8:	61f8      	str	r0, [r7, #28]
        break;
 80098ea:	e010      	b.n	800990e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098ec:	4b44      	ldr	r3, [pc, #272]	; (8009a00 <UART_SetConfig+0x314>)
 80098ee:	61fb      	str	r3, [r7, #28]
        break;
 80098f0:	e00d      	b.n	800990e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098f2:	f7fd ff45 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 80098f6:	61f8      	str	r0, [r7, #28]
        break;
 80098f8:	e009      	b.n	800990e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098fe:	61fb      	str	r3, [r7, #28]
        break;
 8009900:	e005      	b.n	800990e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800990c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 8107 	beq.w	8009b24 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4413      	add	r3, r2
 8009920:	69fa      	ldr	r2, [r7, #28]
 8009922:	429a      	cmp	r2, r3
 8009924:	d305      	bcc.n	8009932 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	429a      	cmp	r2, r3
 8009930:	d903      	bls.n	800993a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009938:	e0f4      	b.n	8009b24 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	2200      	movs	r2, #0
 800993e:	461c      	mov	r4, r3
 8009940:	4615      	mov	r5, r2
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	022b      	lsls	r3, r5, #8
 800994c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009950:	0222      	lsls	r2, r4, #8
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	6849      	ldr	r1, [r1, #4]
 8009956:	0849      	lsrs	r1, r1, #1
 8009958:	2000      	movs	r0, #0
 800995a:	4688      	mov	r8, r1
 800995c:	4681      	mov	r9, r0
 800995e:	eb12 0a08 	adds.w	sl, r2, r8
 8009962:	eb43 0b09 	adc.w	fp, r3, r9
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	603b      	str	r3, [r7, #0]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009974:	4650      	mov	r0, sl
 8009976:	4659      	mov	r1, fp
 8009978:	f7f7 f8f0 	bl	8000b5c <__aeabi_uldivmod>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4613      	mov	r3, r2
 8009982:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800998a:	d308      	bcc.n	800999e <UART_SetConfig+0x2b2>
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009992:	d204      	bcs.n	800999e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	60da      	str	r2, [r3, #12]
 800999c:	e0c2      	b.n	8009b24 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80099a4:	e0be      	b.n	8009b24 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ae:	d16a      	bne.n	8009a86 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80099b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d834      	bhi.n	8009a22 <UART_SetConfig+0x336>
 80099b8:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <UART_SetConfig+0x2d4>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	08009a05 	.word	0x08009a05
 80099c8:	08009a0d 	.word	0x08009a0d
 80099cc:	08009a23 	.word	0x08009a23
 80099d0:	08009a13 	.word	0x08009a13
 80099d4:	08009a23 	.word	0x08009a23
 80099d8:	08009a23 	.word	0x08009a23
 80099dc:	08009a23 	.word	0x08009a23
 80099e0:	08009a1b 	.word	0x08009a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e4:	f7fd ff64 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 80099e8:	61f8      	str	r0, [r7, #28]
        break;
 80099ea:	e020      	b.n	8009a2e <UART_SetConfig+0x342>
 80099ec:	efff69f3 	.word	0xefff69f3
 80099f0:	40008000 	.word	0x40008000
 80099f4:	40013800 	.word	0x40013800
 80099f8:	40021000 	.word	0x40021000
 80099fc:	40004400 	.word	0x40004400
 8009a00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a04:	f7fd ff6a 	bl	80078dc <HAL_RCC_GetPCLK2Freq>
 8009a08:	61f8      	str	r0, [r7, #28]
        break;
 8009a0a:	e010      	b.n	8009a2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a0c:	4b4c      	ldr	r3, [pc, #304]	; (8009b40 <UART_SetConfig+0x454>)
 8009a0e:	61fb      	str	r3, [r7, #28]
        break;
 8009a10:	e00d      	b.n	8009a2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a12:	f7fd feb5 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 8009a16:	61f8      	str	r0, [r7, #28]
        break;
 8009a18:	e009      	b.n	8009a2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a1e:	61fb      	str	r3, [r7, #28]
        break;
 8009a20:	e005      	b.n	8009a2e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d077      	beq.n	8009b24 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	005a      	lsls	r2, r3, #1
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	441a      	add	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b0f      	cmp	r3, #15
 8009a4e:	d916      	bls.n	8009a7e <UART_SetConfig+0x392>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a56:	d212      	bcs.n	8009a7e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f023 030f 	bic.w	r3, r3, #15
 8009a60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	8afb      	ldrh	r3, [r7, #22]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	8afa      	ldrh	r2, [r7, #22]
 8009a7a:	60da      	str	r2, [r3, #12]
 8009a7c:	e052      	b.n	8009b24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a84:	e04e      	b.n	8009b24 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d827      	bhi.n	8009ade <UART_SetConfig+0x3f2>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x3a8>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009ac1 	.word	0x08009ac1
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	08009adf 	.word	0x08009adf
 8009aa4:	08009acf 	.word	0x08009acf
 8009aa8:	08009adf 	.word	0x08009adf
 8009aac:	08009adf 	.word	0x08009adf
 8009ab0:	08009adf 	.word	0x08009adf
 8009ab4:	08009ad7 	.word	0x08009ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab8:	f7fd fefa 	bl	80078b0 <HAL_RCC_GetPCLK1Freq>
 8009abc:	61f8      	str	r0, [r7, #28]
        break;
 8009abe:	e014      	b.n	8009aea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ac0:	f7fd ff0c 	bl	80078dc <HAL_RCC_GetPCLK2Freq>
 8009ac4:	61f8      	str	r0, [r7, #28]
        break;
 8009ac6:	e010      	b.n	8009aea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	; (8009b40 <UART_SetConfig+0x454>)
 8009aca:	61fb      	str	r3, [r7, #28]
        break;
 8009acc:	e00d      	b.n	8009aea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ace:	f7fd fe57 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 8009ad2:	61f8      	str	r0, [r7, #28]
        break;
 8009ad4:	e009      	b.n	8009aea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ada:	61fb      	str	r3, [r7, #28]
        break;
 8009adc:	e005      	b.n	8009aea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ae8:	bf00      	nop
    }

    if (pclk != 0U)
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d019      	beq.n	8009b24 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	085a      	lsrs	r2, r3, #1
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	441a      	add	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d909      	bls.n	8009b1e <UART_SetConfig+0x432>
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b10:	d205      	bcs.n	8009b1e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60da      	str	r2, [r3, #12]
 8009b1c:	e002      	b.n	8009b24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009b30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3728      	adds	r7, #40	; 0x28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b3e:	bf00      	nop
 8009b40:	00f42400 	.word	0x00f42400

08009b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00a      	beq.n	8009b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d01a      	beq.n	8009c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c42:	d10a      	bne.n	8009c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	605a      	str	r2, [r3, #4]
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b098      	sub	sp, #96	; 0x60
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c98:	f7fa fedc 	bl	8004a54 <HAL_GetTick>
 8009c9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d12e      	bne.n	8009d0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f88c 	bl	8009dd8 <UART_WaitOnFlagUntilTimeout>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d021      	beq.n	8009d0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cda:	653b      	str	r3, [r7, #80]	; 0x50
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e062      	b.n	8009dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d149      	bne.n	8009dac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d20:	2200      	movs	r2, #0
 8009d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f856 	bl	8009dd8 <UART_WaitOnFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d03c      	beq.n	8009dac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d50:	633b      	str	r3, [r7, #48]	; 0x30
 8009d52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d58:	e841 2300 	strex	r3, r2, [r1]
 8009d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e6      	bne.n	8009d32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0301 	bic.w	r3, r3, #1
 8009d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3308      	adds	r3, #8
 8009d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d84:	61fa      	str	r2, [r7, #28]
 8009d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	69b9      	ldr	r1, [r7, #24]
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	617b      	str	r3, [r7, #20]
   return(result);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e5      	bne.n	8009d64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e011      	b.n	8009dd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3758      	adds	r7, #88	; 0x58
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	4613      	mov	r3, r2
 8009de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de8:	e049      	b.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df0:	d045      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009df2:	f7fa fe2f 	bl	8004a54 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d302      	bcc.n	8009e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e048      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d031      	beq.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d110      	bne.n	8009e4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f838 	bl	8009ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e029      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e58:	d111      	bne.n	8009e7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f81e 	bl	8009ea6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e00f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4013      	ands	r3, r2
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d0a6      	beq.n	8009dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b095      	sub	sp, #84	; 0x54
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ece:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e6      	bne.n	8009eae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f023 0301 	bic.w	r3, r3, #1
 8009ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e5      	bne.n	8009ee0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d118      	bne.n	8009f4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f023 0310 	bic.w	r3, r3, #16
 8009f30:	647b      	str	r3, [r7, #68]	; 0x44
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3a:	61bb      	str	r3, [r7, #24]
 8009f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6979      	ldr	r1, [r7, #20]
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	613b      	str	r3, [r7, #16]
   return(result);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e6      	bne.n	8009f1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009f62:	bf00      	nop
 8009f64:	3754      	adds	r7, #84	; 0x54
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fb97 	bl	80096c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b088      	sub	sp, #32
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	e853 3f00 	ldrex	r3, [r3]
 8009fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb6:	61fb      	str	r3, [r7, #28]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6979      	ldr	r1, [r7, #20]
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e6      	bne.n	8009fa2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff fb63 	bl	80096ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fe6:	bf00      	nop
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e056      	b.n	800a0b4 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7fa fade 	bl	80045d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2224      	movs	r2, #36	; 0x24
 800a020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fd82 	bl	8009b44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fb53 	bl	80096ec <UART_SetConfig>
 800a046:	4603      	mov	r3, r0
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e031      	b.n	800a0b4 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a05e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	430a      	orrs	r2, r1
 800a072:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	055b      	lsls	r3, r3, #21
 800a078:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800a08e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	6979      	ldr	r1, [r7, #20]
 800a098:	430b      	orrs	r3, r1
 800a09a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0201 	orr.w	r2, r2, #1
 800a0aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff fdeb 	bl	8009c88 <UART_CheckIdleState>
 800a0b2:	4603      	mov	r3, r0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800a0d8:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <DWT_Delay_ms+0x44>)
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800a0de:	f7fd fbdb 	bl	8007898 <HAL_RCC_GetHCLKFreq>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4a0c      	ldr	r2, [pc, #48]	; (800a118 <DWT_Delay_ms+0x48>)
 800a0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ea:	099b      	lsrs	r3, r3, #6
 800a0ec:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800a0f8:	bf00      	nop
 800a0fa:	4b06      	ldr	r3, [pc, #24]	; (800a114 <DWT_Delay_ms+0x44>)
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d3f8      	bcc.n	800a0fa <DWT_Delay_ms+0x2a>
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	e0001000 	.word	0xe0001000
 800a118:	10624dd3 	.word	0x10624dd3

0800a11c <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08a      	sub	sp, #40	; 0x28
 800a120:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a122:	f107 0310 	add.w	r3, r7, #16
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	605a      	str	r2, [r3, #4]
 800a12c:	609a      	str	r2, [r3, #8]
 800a12e:	60da      	str	r2, [r3, #12]
 800a130:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a138:	2300      	movs	r3, #0
 800a13a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 800a13e:	f000 fccf 	bl	800aae0 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 800a142:	2300      	movs	r3, #0
 800a144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a148:	e102      	b.n	800a350 <STEPPERS_Init+0x234>
    {
    	for(j=0; j<4; j++)
 800a14a:	2300      	movs	r3, #0
 800a14c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a150:	e079      	b.n	800a246 <STEPPERS_Init+0x12a>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 800a152:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a156:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a15a:	4889      	ldr	r0, [pc, #548]	; (800a380 <STEPPERS_Init+0x264>)
 800a15c:	4613      	mov	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	440b      	add	r3, r1
 800a164:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a168:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a16c:	d10c      	bne.n	800a188 <STEPPERS_Init+0x6c>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a16e:	4b85      	ldr	r3, [pc, #532]	; (800a384 <STEPPERS_Init+0x268>)
 800a170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a172:	4a84      	ldr	r2, [pc, #528]	; (800a384 <STEPPERS_Init+0x268>)
 800a174:	f043 0301 	orr.w	r3, r3, #1
 800a178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a17a:	4b82      	ldr	r3, [pc, #520]	; (800a384 <STEPPERS_Init+0x268>)
 800a17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	e034      	b.n	800a1f2 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 800a188:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a18c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a190:	487b      	ldr	r0, [pc, #492]	; (800a380 <STEPPERS_Init+0x264>)
 800a192:	4613      	mov	r3, r2
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	440b      	add	r3, r1
 800a19a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a19e:	4a7a      	ldr	r2, [pc, #488]	; (800a388 <STEPPERS_Init+0x26c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d10c      	bne.n	800a1be <STEPPERS_Init+0xa2>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1a4:	4b77      	ldr	r3, [pc, #476]	; (800a384 <STEPPERS_Init+0x268>)
 800a1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a8:	4a76      	ldr	r2, [pc, #472]	; (800a384 <STEPPERS_Init+0x268>)
 800a1aa:	f043 0302 	orr.w	r3, r3, #2
 800a1ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1b0:	4b74      	ldr	r3, [pc, #464]	; (800a384 <STEPPERS_Init+0x268>)
 800a1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	e019      	b.n	800a1f2 <STEPPERS_Init+0xd6>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 800a1be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1c2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a1c6:	486e      	ldr	r0, [pc, #440]	; (800a380 <STEPPERS_Init+0x264>)
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a1d4:	4a6d      	ldr	r2, [pc, #436]	; (800a38c <STEPPERS_Init+0x270>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d10b      	bne.n	800a1f2 <STEPPERS_Init+0xd6>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1da:	4b6a      	ldr	r3, [pc, #424]	; (800a384 <STEPPERS_Init+0x268>)
 800a1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1de:	4a69      	ldr	r2, [pc, #420]	; (800a384 <STEPPERS_Init+0x268>)
 800a1e0:	f043 0304 	orr.w	r3, r3, #4
 800a1e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1e6:	4b67      	ldr	r3, [pc, #412]	; (800a384 <STEPPERS_Init+0x268>)
 800a1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 800a1f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1f6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a1fa:	4861      	ldr	r0, [pc, #388]	; (800a380 <STEPPERS_Init+0x264>)
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	440b      	add	r3, r1
 800a206:	3308      	adds	r3, #8
 800a208:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a20c:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a20e:	2301      	movs	r3, #1
 800a210:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a212:	2300      	movs	r3, #0
 800a214:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a216:	2300      	movs	r3, #0
 800a218:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 800a21a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a21e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800a222:	4857      	ldr	r0, [pc, #348]	; (800a380 <STEPPERS_Init+0x264>)
 800a224:	4613      	mov	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	440b      	add	r3, r1
 800a22c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a230:	f107 0210 	add.w	r2, r7, #16
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7fc fb6c 	bl	8006914 <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 800a23c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a240:	3301      	adds	r3, #1
 800a242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d981      	bls.n	800a152 <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CCW;
 800a24e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a252:	494f      	ldr	r1, [pc, #316]	; (800a390 <STEPPERS_Init+0x274>)
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	3311      	adds	r3, #17
 800a260:	2201      	movs	r2, #1
 800a262:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 800a264:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a268:	4949      	ldr	r1, [pc, #292]	; (800a390 <STEPPERS_Init+0x274>)
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	330f      	adds	r3, #15
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 800a27a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a27e:	4944      	ldr	r1, [pc, #272]	; (800a390 <STEPPERS_Init+0x274>)
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 800a28e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a292:	493f      	ldr	r1, [pc, #252]	; (800a390 <STEPPERS_Init+0x274>)
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	440b      	add	r3, r1
 800a29e:	3304      	adds	r3, #4
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 800a2a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2a8:	4939      	ldr	r1, [pc, #228]	; (800a390 <STEPPERS_Init+0x274>)
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	440b      	add	r3, r1
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 800a2ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2be:	4934      	ldr	r1, [pc, #208]	; (800a390 <STEPPERS_Init+0x274>)
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	330e      	adds	r3, #14
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800a2d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2d4:	492a      	ldr	r1, [pc, #168]	; (800a380 <STEPPERS_Init+0x264>)
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	331b      	adds	r3, #27
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d00b      	beq.n	800a300 <STEPPERS_Init+0x1e4>
 800a2e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2ec:	4924      	ldr	r1, [pc, #144]	; (800a380 <STEPPERS_Init+0x264>)
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	331b      	adds	r3, #27
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <STEPPERS_Init+0x1fc>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 800a300:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a304:	4922      	ldr	r1, [pc, #136]	; (800a390 <STEPPERS_Init+0x274>)
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	440b      	add	r3, r1
 800a310:	3310      	adds	r3, #16
 800a312:	2204      	movs	r2, #4
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	e016      	b.n	800a346 <STEPPERS_Init+0x22a>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800a318:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a31c:	4918      	ldr	r1, [pc, #96]	; (800a380 <STEPPERS_Init+0x264>)
 800a31e:	4613      	mov	r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	331b      	adds	r3, #27
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d10a      	bne.n	800a346 <STEPPERS_Init+0x22a>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 800a330:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a334:	4916      	ldr	r1, [pc, #88]	; (800a390 <STEPPERS_Init+0x274>)
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	3310      	adds	r3, #16
 800a342:	2208      	movs	r2, #8
 800a344:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 800a346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a34a:	3301      	adds	r3, #1
 800a34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a354:	2b00      	cmp	r3, #0
 800a356:	f43f aef8 	beq.w	800a14a <STEPPERS_Init+0x2e>
    	}
    }
    // for debug
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a35a:	2301      	movs	r3, #1
 800a35c:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a35e:	2301      	movs	r3, #1
 800a360:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a36a:	f107 0310 	add.w	r3, r7, #16
 800a36e:	4619      	mov	r1, r3
 800a370:	4805      	ldr	r0, [pc, #20]	; (800a388 <STEPPERS_Init+0x26c>)
 800a372:	f7fc facf 	bl	8006914 <HAL_GPIO_Init>
}
 800a376:	bf00      	nop
 800a378:	3728      	adds	r7, #40	; 0x28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	0801f03c 	.word	0x0801f03c
 800a384:	40021000 	.word	0x40021000
 800a388:	48000400 	.word	0x48000400
 800a38c:	48000800 	.word	0x48000800
 800a390:	20002d14 	.word	0x20002d14
 800a394:	00000000 	.word	0x00000000

0800a398 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 800a398:	b590      	push	{r4, r7, lr}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	460a      	mov	r2, r1
 800a3a2:	71fb      	strb	r3, [r7, #7]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 800a3ac:	79fa      	ldrb	r2, [r7, #7]
 800a3ae:	4928      	ldr	r1, [pc, #160]	; (800a450 <STEPPER_SetSpeed+0xb8>)
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	440b      	add	r3, r1
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	88ba      	ldrh	r2, [r7, #4]
 800a3be:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	4924      	ldr	r1, [pc, #144]	; (800a454 <STEPPER_SetSpeed+0xbc>)
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	331b      	adds	r3, #27
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d10b      	bne.n	800a3ee <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 800a3d6:	79fa      	ldrb	r2, [r7, #7]
 800a3d8:	491e      	ldr	r1, [pc, #120]	; (800a454 <STEPPER_SetSpeed+0xbc>)
 800a3da:	4613      	mov	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	1a9b      	subs	r3, r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3318      	adds	r3, #24
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	e009      	b.n	800a402 <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 800a3ee:	79fa      	ldrb	r2, [r7, #7]
 800a3f0:	4918      	ldr	r1, [pc, #96]	; (800a454 <STEPPER_SetSpeed+0xbc>)
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	3318      	adds	r3, #24
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 800a402:	88bb      	ldrh	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	fb02 f303 	mul.w	r3, r2, r3
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f6 f872 	bl	80004f4 <__aeabi_ui2d>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	a10c      	add	r1, pc, #48	; (adr r1, 800a448 <STEPPER_SetSpeed+0xb0>)
 800a416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a41a:	f7f6 fa0f 	bl	800083c <__aeabi_ddiv>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	79fc      	ldrb	r4, [r7, #7]
 800a424:	4610      	mov	r0, r2
 800a426:	4619      	mov	r1, r3
 800a428:	f7f6 fb78 	bl	8000b1c <__aeabi_d2uiz>
 800a42c:	4602      	mov	r2, r0
 800a42e:	4908      	ldr	r1, [pc, #32]	; (800a450 <STEPPER_SetSpeed+0xb8>)
 800a430:	4623      	mov	r3, r4
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4423      	add	r3, r4
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	3308      	adds	r3, #8
 800a43c:	601a      	str	r2, [r3, #0]
}
 800a43e:	bf00      	nop
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	bd90      	pop	{r4, r7, pc}
 800a446:	bf00      	nop
 800a448:	00000000 	.word	0x00000000
 800a44c:	40ed4c00 	.word	0x40ed4c00
 800a450:	20002d14 	.word	0x20002d14
 800a454:	0801f03c 	.word	0x0801f03c

0800a458 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 800a458:	b590      	push	{r4, r7, lr}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 800a462:	79fa      	ldrb	r2, [r7, #7]
 800a464:	4999      	ldr	r1, [pc, #612]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a466:	4613      	mov	r3, r2
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	1a9b      	subs	r3, r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	440b      	add	r3, r1
 800a470:	331a      	adds	r3, #26
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 81c4 	bne.w	800a802 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800a47a:	79fa      	ldrb	r2, [r7, #7]
 800a47c:	4993      	ldr	r1, [pc, #588]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a47e:	4613      	mov	r3, r2
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	1a9b      	subs	r3, r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	440b      	add	r3, r1
 800a488:	331b      	adds	r3, #27
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f040 8088 	bne.w	800a5a2 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800a492:	79fa      	ldrb	r2, [r7, #7]
 800a494:	498d      	ldr	r1, [pc, #564]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a496:	4613      	mov	r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	1a9b      	subs	r3, r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	79fa      	ldrb	r2, [r7, #7]
 800a4a4:	4989      	ldr	r1, [pc, #548]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3310      	adds	r3, #16
 800a4b2:	8819      	ldrh	r1, [r3, #0]
 800a4b4:	79fa      	ldrb	r2, [r7, #7]
 800a4b6:	4c86      	ldr	r4, [pc, #536]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4423      	add	r3, r4
 800a4c2:	330f      	adds	r3, #15
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4b82      	ldr	r3, [pc, #520]	; (800a6d4 <STEPPER_One_Step+0x27c>)
 800a4ca:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7fc fba2 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800a4d4:	79fa      	ldrb	r2, [r7, #7]
 800a4d6:	497d      	ldr	r1, [pc, #500]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	79fa      	ldrb	r2, [r7, #7]
 800a4e8:	4978      	ldr	r1, [pc, #480]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3312      	adds	r3, #18
 800a4f6:	8819      	ldrh	r1, [r3, #0]
 800a4f8:	79fa      	ldrb	r2, [r7, #7]
 800a4fa:	4c75      	ldr	r4, [pc, #468]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4423      	add	r3, r4
 800a506:	330f      	adds	r3, #15
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	4a72      	ldr	r2, [pc, #456]	; (800a6d4 <STEPPER_One_Step+0x27c>)
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	461a      	mov	r2, r3
 800a514:	f7fc fb80 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800a518:	79fa      	ldrb	r2, [r7, #7]
 800a51a:	496c      	ldr	r1, [pc, #432]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a51c:	4613      	mov	r3, r2
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	3308      	adds	r3, #8
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	79fa      	ldrb	r2, [r7, #7]
 800a52c:	4967      	ldr	r1, [pc, #412]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a52e:	4613      	mov	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	3314      	adds	r3, #20
 800a53a:	8819      	ldrh	r1, [r3, #0]
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	4c64      	ldr	r4, [pc, #400]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4423      	add	r3, r4
 800a54a:	330f      	adds	r3, #15
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	4a61      	ldr	r2, [pc, #388]	; (800a6d4 <STEPPER_One_Step+0x27c>)
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	789b      	ldrb	r3, [r3, #2]
 800a556:	461a      	mov	r2, r3
 800a558:	f7fc fb5e 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800a55c:	79fa      	ldrb	r2, [r7, #7]
 800a55e:	495b      	ldr	r1, [pc, #364]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a560:	4613      	mov	r3, r2
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	1a9b      	subs	r3, r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	440b      	add	r3, r1
 800a56a:	330c      	adds	r3, #12
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	79fa      	ldrb	r2, [r7, #7]
 800a570:	4956      	ldr	r1, [pc, #344]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a572:	4613      	mov	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	440b      	add	r3, r1
 800a57c:	3316      	adds	r3, #22
 800a57e:	8819      	ldrh	r1, [r3, #0]
 800a580:	79fa      	ldrb	r2, [r7, #7]
 800a582:	4c53      	ldr	r4, [pc, #332]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4423      	add	r3, r4
 800a58e:	330f      	adds	r3, #15
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	4a50      	ldr	r2, [pc, #320]	; (800a6d4 <STEPPER_One_Step+0x27c>)
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	78db      	ldrb	r3, [r3, #3]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7fc fb3c 	bl	8006c18 <HAL_GPIO_WritePin>
 800a5a0:	e12f      	b.n	800a802 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800a5a2:	79fa      	ldrb	r2, [r7, #7]
 800a5a4:	4949      	ldr	r1, [pc, #292]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	440b      	add	r3, r1
 800a5b0:	331b      	adds	r3, #27
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	f040 8091 	bne.w	800a6dc <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800a5ba:	79fa      	ldrb	r2, [r7, #7]
 800a5bc:	4943      	ldr	r1, [pc, #268]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a5be:	4613      	mov	r3, r2
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	79fa      	ldrb	r2, [r7, #7]
 800a5cc:	493f      	ldr	r1, [pc, #252]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	440b      	add	r3, r1
 800a5d8:	3310      	adds	r3, #16
 800a5da:	8819      	ldrh	r1, [r3, #0]
 800a5dc:	79fa      	ldrb	r2, [r7, #7]
 800a5de:	4c3c      	ldr	r4, [pc, #240]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4423      	add	r3, r4
 800a5ea:	330f      	adds	r3, #15
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4b39      	ldr	r3, [pc, #228]	; (800a6d8 <STEPPER_One_Step+0x280>)
 800a5f2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f7fc fb0e 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800a5fc:	79fa      	ldrb	r2, [r7, #7]
 800a5fe:	4933      	ldr	r1, [pc, #204]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a600:	4613      	mov	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	440b      	add	r3, r1
 800a60a:	3304      	adds	r3, #4
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	79fa      	ldrb	r2, [r7, #7]
 800a610:	492e      	ldr	r1, [pc, #184]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a612:	4613      	mov	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	1a9b      	subs	r3, r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	440b      	add	r3, r1
 800a61c:	3312      	adds	r3, #18
 800a61e:	8819      	ldrh	r1, [r3, #0]
 800a620:	79fa      	ldrb	r2, [r7, #7]
 800a622:	4c2b      	ldr	r4, [pc, #172]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a624:	4613      	mov	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4423      	add	r3, r4
 800a62e:	330f      	adds	r3, #15
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	4a29      	ldr	r2, [pc, #164]	; (800a6d8 <STEPPER_One_Step+0x280>)
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	785b      	ldrb	r3, [r3, #1]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7fc faec 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800a640:	79fa      	ldrb	r2, [r7, #7]
 800a642:	4922      	ldr	r1, [pc, #136]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a644:	4613      	mov	r3, r2
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	440b      	add	r3, r1
 800a64e:	3308      	adds	r3, #8
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	79fa      	ldrb	r2, [r7, #7]
 800a654:	491d      	ldr	r1, [pc, #116]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a656:	4613      	mov	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	1a9b      	subs	r3, r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	3314      	adds	r3, #20
 800a662:	8819      	ldrh	r1, [r3, #0]
 800a664:	79fa      	ldrb	r2, [r7, #7]
 800a666:	4c1a      	ldr	r4, [pc, #104]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4423      	add	r3, r4
 800a672:	330f      	adds	r3, #15
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	4a18      	ldr	r2, [pc, #96]	; (800a6d8 <STEPPER_One_Step+0x280>)
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	789b      	ldrb	r3, [r3, #2]
 800a67e:	461a      	mov	r2, r3
 800a680:	f7fc faca 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800a684:	79fa      	ldrb	r2, [r7, #7]
 800a686:	4911      	ldr	r1, [pc, #68]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	330c      	adds	r3, #12
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	79fa      	ldrb	r2, [r7, #7]
 800a698:	490c      	ldr	r1, [pc, #48]	; (800a6cc <STEPPER_One_Step+0x274>)
 800a69a:	4613      	mov	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	440b      	add	r3, r1
 800a6a4:	3316      	adds	r3, #22
 800a6a6:	8819      	ldrh	r1, [r3, #0]
 800a6a8:	79fa      	ldrb	r2, [r7, #7]
 800a6aa:	4c09      	ldr	r4, [pc, #36]	; (800a6d0 <STEPPER_One_Step+0x278>)
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4423      	add	r3, r4
 800a6b6:	330f      	adds	r3, #15
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4a07      	ldr	r2, [pc, #28]	; (800a6d8 <STEPPER_One_Step+0x280>)
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	78db      	ldrb	r3, [r3, #3]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7fc faa8 	bl	8006c18 <HAL_GPIO_WritePin>
 800a6c8:	e09b      	b.n	800a802 <STEPPER_One_Step+0x3aa>
 800a6ca:	bf00      	nop
 800a6cc:	0801f03c 	.word	0x0801f03c
 800a6d0:	20002d14 	.word	0x20002d14
 800a6d4:	2000000c 	.word	0x2000000c
 800a6d8:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800a6dc:	79fa      	ldrb	r2, [r7, #7]
 800a6de:	4988      	ldr	r1, [pc, #544]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	331b      	adds	r3, #27
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	f040 8087 	bne.w	800a802 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800a6f4:	79fa      	ldrb	r2, [r7, #7]
 800a6f6:	4982      	ldr	r1, [pc, #520]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	1a9b      	subs	r3, r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	6818      	ldr	r0, [r3, #0]
 800a704:	79fa      	ldrb	r2, [r7, #7]
 800a706:	497e      	ldr	r1, [pc, #504]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a708:	4613      	mov	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	1a9b      	subs	r3, r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	440b      	add	r3, r1
 800a712:	3310      	adds	r3, #16
 800a714:	8819      	ldrh	r1, [r3, #0]
 800a716:	79fa      	ldrb	r2, [r7, #7]
 800a718:	4c7a      	ldr	r4, [pc, #488]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4423      	add	r3, r4
 800a724:	330f      	adds	r3, #15
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	4b77      	ldr	r3, [pc, #476]	; (800a908 <STEPPER_One_Step+0x4b0>)
 800a72c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800a730:	461a      	mov	r2, r3
 800a732:	f7fc fa71 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800a736:	79fa      	ldrb	r2, [r7, #7]
 800a738:	4971      	ldr	r1, [pc, #452]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a73a:	4613      	mov	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	440b      	add	r3, r1
 800a744:	3304      	adds	r3, #4
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	79fa      	ldrb	r2, [r7, #7]
 800a74a:	496d      	ldr	r1, [pc, #436]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a74c:	4613      	mov	r3, r2
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	1a9b      	subs	r3, r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	3312      	adds	r3, #18
 800a758:	8819      	ldrh	r1, [r3, #0]
 800a75a:	79fa      	ldrb	r2, [r7, #7]
 800a75c:	4c69      	ldr	r4, [pc, #420]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4423      	add	r3, r4
 800a768:	330f      	adds	r3, #15
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	4a66      	ldr	r2, [pc, #408]	; (800a908 <STEPPER_One_Step+0x4b0>)
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	461a      	mov	r2, r3
 800a776:	f7fc fa4f 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800a77a:	79fa      	ldrb	r2, [r7, #7]
 800a77c:	4960      	ldr	r1, [pc, #384]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a77e:	4613      	mov	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	1a9b      	subs	r3, r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	3308      	adds	r3, #8
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	495c      	ldr	r1, [pc, #368]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a790:	4613      	mov	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	3314      	adds	r3, #20
 800a79c:	8819      	ldrh	r1, [r3, #0]
 800a79e:	79fa      	ldrb	r2, [r7, #7]
 800a7a0:	4c58      	ldr	r4, [pc, #352]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4423      	add	r3, r4
 800a7ac:	330f      	adds	r3, #15
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4a55      	ldr	r2, [pc, #340]	; (800a908 <STEPPER_One_Step+0x4b0>)
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	789b      	ldrb	r3, [r3, #2]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f7fc fa2d 	bl	8006c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800a7be:	79fa      	ldrb	r2, [r7, #7]
 800a7c0:	494f      	ldr	r1, [pc, #316]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	330c      	adds	r3, #12
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	79fa      	ldrb	r2, [r7, #7]
 800a7d2:	494b      	ldr	r1, [pc, #300]	; (800a900 <STEPPER_One_Step+0x4a8>)
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	1a9b      	subs	r3, r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	3316      	adds	r3, #22
 800a7e0:	8819      	ldrh	r1, [r3, #0]
 800a7e2:	79fa      	ldrb	r2, [r7, #7]
 800a7e4:	4c47      	ldr	r4, [pc, #284]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4423      	add	r3, r4
 800a7f0:	330f      	adds	r3, #15
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4a44      	ldr	r2, [pc, #272]	; (800a908 <STEPPER_One_Step+0x4b0>)
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	78db      	ldrb	r3, [r3, #3]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f7fc fa0b 	bl	8006c18 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800a802:	79fa      	ldrb	r2, [r7, #7]
 800a804:	493f      	ldr	r1, [pc, #252]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	440b      	add	r3, r1
 800a810:	3311      	adds	r3, #17
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d132      	bne.n	800a87e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 800a818:	79fa      	ldrb	r2, [r7, #7]
 800a81a:	493a      	ldr	r1, [pc, #232]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	440b      	add	r3, r1
 800a826:	330f      	adds	r3, #15
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d112      	bne.n	800a854 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800a82e:	79f9      	ldrb	r1, [r7, #7]
 800a830:	79fa      	ldrb	r2, [r7, #7]
 800a832:	4834      	ldr	r0, [pc, #208]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a834:	460b      	mov	r3, r1
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4403      	add	r3, r0
 800a83e:	3310      	adds	r3, #16
 800a840:	7818      	ldrb	r0, [r3, #0]
 800a842:	4930      	ldr	r1, [pc, #192]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a844:	4613      	mov	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	440b      	add	r3, r1
 800a84e:	330f      	adds	r3, #15
 800a850:	4602      	mov	r2, r0
 800a852:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 800a854:	79fa      	ldrb	r2, [r7, #7]
 800a856:	492b      	ldr	r1, [pc, #172]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	330f      	adds	r3, #15
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	3b01      	subs	r3, #1
 800a868:	b2d8      	uxtb	r0, r3
 800a86a:	4926      	ldr	r1, [pc, #152]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	440b      	add	r3, r1
 800a876:	330f      	adds	r3, #15
 800a878:	4602      	mov	r2, r0
 800a87a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800a87c:	e03c      	b.n	800a8f8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800a87e:	79fa      	ldrb	r2, [r7, #7]
 800a880:	4920      	ldr	r1, [pc, #128]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	3311      	adds	r3, #17
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d131      	bne.n	800a8f8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 800a894:	79fa      	ldrb	r2, [r7, #7]
 800a896:	491b      	ldr	r1, [pc, #108]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	330f      	adds	r3, #15
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	b2d8      	uxtb	r0, r3
 800a8aa:	4916      	ldr	r1, [pc, #88]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	440b      	add	r3, r1
 800a8b6:	330f      	adds	r3, #15
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 800a8bc:	79fa      	ldrb	r2, [r7, #7]
 800a8be:	4911      	ldr	r1, [pc, #68]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	330f      	adds	r3, #15
 800a8cc:	7819      	ldrb	r1, [r3, #0]
 800a8ce:	79fa      	ldrb	r2, [r7, #7]
 800a8d0:	480c      	ldr	r0, [pc, #48]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4403      	add	r3, r0
 800a8dc:	3310      	adds	r3, #16
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d109      	bne.n	800a8f8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 800a8e4:	79fa      	ldrb	r2, [r7, #7]
 800a8e6:	4907      	ldr	r1, [pc, #28]	; (800a904 <STEPPER_One_Step+0x4ac>)
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	330f      	adds	r3, #15
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd90      	pop	{r4, r7, pc}
 800a900:	0801f03c 	.word	0x0801f03c
 800a904:	20002d14 	.word	0x20002d14
 800a908:	2000002c 	.word	0x2000002c

0800a90c <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
 800a918:	4613      	mov	r3, r2
 800a91a:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 800a924:	79fa      	ldrb	r2, [r7, #7]
 800a926:	4926      	ldr	r1, [pc, #152]	; (800a9c0 <STEPPER_Step_Blocking+0xb4>)
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3311      	adds	r3, #17
 800a934:	79ba      	ldrb	r2, [r7, #6]
 800a936:	701a      	strb	r2, [r3, #0]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 800a938:	79fa      	ldrb	r2, [r7, #7]
 800a93a:	4921      	ldr	r1, [pc, #132]	; (800a9c0 <STEPPER_Step_Blocking+0xb4>)
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	330e      	adds	r3, #14
 800a948:	2201      	movs	r2, #1
 800a94a:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 800a94c:	79fa      	ldrb	r2, [r7, #7]
 800a94e:	491c      	ldr	r1, [pc, #112]	; (800a9c0 <STEPPER_Step_Blocking+0xb4>)
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	330c      	adds	r3, #12
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	79fa      	ldrb	r2, [r7, #7]
 800a962:	4918      	ldr	r1, [pc, #96]	; (800a9c4 <STEPPER_Step_Blocking+0xb8>)
 800a964:	4613      	mov	r3, r2
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	1a9b      	subs	r3, r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	3318      	adds	r3, #24
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	fb00 f303 	mul.w	r3, r0, r3
 800a976:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a97a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a97e:	60bb      	str	r3, [r7, #8]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 800a980:	2300      	movs	r3, #0
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	e009      	b.n	800a99a <STEPPER_Step_Blocking+0x8e>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fd65 	bl	800a458 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 800a98e:	68b8      	ldr	r0, [r7, #8]
 800a990:	f7ff fb9e 	bl	800a0d0 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d3f1      	bcc.n	800a986 <STEPPER_Step_Blocking+0x7a>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 800a9a2:	79fa      	ldrb	r2, [r7, #7]
 800a9a4:	4906      	ldr	r1, [pc, #24]	; (800a9c0 <STEPPER_Step_Blocking+0xb4>)
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	330e      	adds	r3, #14
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	20002d14 	.word	0x20002d14
 800a9c4:	0801f03c 	.word	0x0801f03c

0800a9c8 <STEPPER_Stop>:
	gs_STEPPER_info[au8_STEPPER_Instance].Steps += au32_Steps;
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
}

void STEPPER_Stop(uint8_t au8_STEPPER_Instance)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	71fb      	strb	r3, [r7, #7]
	gs_STEPPER_info[au8_STEPPER_Instance].Steps = 0;
 800a9d2:	79fa      	ldrb	r2, [r7, #7]
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <STEPPER_Stop+0x28>)
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	20002d14 	.word	0x20002d14

0800a9f4 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a34      	ldr	r2, [pc, #208]	; (800aad8 <STEPPER_TMR_OVF_ISR+0xe4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d162      	bne.n	800aad0 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
 800aa0e:	e05c      	b.n	800aaca <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 800aa10:	7bfa      	ldrb	r2, [r7, #15]
 800aa12:	4932      	ldr	r1, [pc, #200]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	440b      	add	r3, r1
 800aa1e:	3304      	adds	r3, #4
 800aa20:	6819      	ldr	r1, [r3, #0]
 800aa22:	7bfa      	ldrb	r2, [r7, #15]
 800aa24:	482d      	ldr	r0, [pc, #180]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa26:	4613      	mov	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4403      	add	r3, r0
 800aa30:	3308      	adds	r3, #8
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4299      	cmp	r1, r3
 800aa36:	d333      	bcc.n	800aaa0 <STEPPER_TMR_OVF_ISR+0xac>
 800aa38:	7bfa      	ldrb	r2, [r7, #15]
 800aa3a:	4928      	ldr	r1, [pc, #160]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	330e      	adds	r3, #14
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d028      	beq.n	800aaa0 <STEPPER_TMR_OVF_ISR+0xac>
 800aa4e:	7bfa      	ldrb	r2, [r7, #15]
 800aa50:	4922      	ldr	r1, [pc, #136]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01e      	beq.n	800aaa0 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff fcf7 	bl	800a458 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	491b      	ldr	r1, [pc, #108]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	1e59      	subs	r1, r3, #1
 800aa7c:	4817      	ldr	r0, [pc, #92]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4403      	add	r3, r0
 800aa88:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800aa8a:	7bfa      	ldrb	r2, [r7, #15]
 800aa8c:	4913      	ldr	r1, [pc, #76]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	3304      	adds	r3, #4
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e011      	b.n	800aac4 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 800aaa0:	7bfa      	ldrb	r2, [r7, #15]
 800aaa2:	490e      	ldr	r1, [pc, #56]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	3304      	adds	r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	1c59      	adds	r1, r3, #1
 800aab4:	4809      	ldr	r0, [pc, #36]	; (800aadc <STEPPER_TMR_OVF_ISR+0xe8>)
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4403      	add	r3, r0
 800aac0:	3304      	adds	r3, #4
 800aac2:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	3301      	adds	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d09f      	beq.n	800aa10 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 800aad0:	bf00      	nop
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	40014000 	.word	0x40014000
 800aadc:	20002d14 	.word	0x20002d14

0800aae0 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800aae4:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <DWT_Delay_Init+0x58>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	4a13      	ldr	r2, [pc, #76]	; (800ab38 <DWT_Delay_Init+0x58>)
 800aaea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaee:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <DWT_Delay_Init+0x58>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	4a10      	ldr	r2, [pc, #64]	; (800ab38 <DWT_Delay_Init+0x58>)
 800aaf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aafa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800aafc:	4b0f      	ldr	r3, [pc, #60]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0e      	ldr	r2, [pc, #56]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800ab08:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a0b      	ldr	r2, [pc, #44]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800ab0e:	f043 0301 	orr.w	r3, r3, #1
 800ab12:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800ab1a:	bf00      	nop
    __ASM volatile ("NOP");
 800ab1c:	bf00      	nop
    __ASM volatile ("NOP");
 800ab1e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <DWT_Delay_Init+0x5c>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e000      	b.n	800ab2e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800ab2c:	2301      	movs	r3, #1
    }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	e000edf0 	.word	0xe000edf0
 800ab3c:	e0001000 	.word	0xe0001000

0800ab40 <_strtol_l.constprop.0>:
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab46:	d001      	beq.n	800ab4c <_strtol_l.constprop.0+0xc>
 800ab48:	2b24      	cmp	r3, #36	; 0x24
 800ab4a:	d906      	bls.n	800ab5a <_strtol_l.constprop.0+0x1a>
 800ab4c:	f000 f9ea 	bl	800af24 <__errno>
 800ab50:	2316      	movs	r3, #22
 800ab52:	6003      	str	r3, [r0, #0]
 800ab54:	2000      	movs	r0, #0
 800ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac40 <_strtol_l.constprop.0+0x100>
 800ab5e:	460d      	mov	r5, r1
 800ab60:	462e      	mov	r6, r5
 800ab62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab66:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab6a:	f017 0708 	ands.w	r7, r7, #8
 800ab6e:	d1f7      	bne.n	800ab60 <_strtol_l.constprop.0+0x20>
 800ab70:	2c2d      	cmp	r4, #45	; 0x2d
 800ab72:	d132      	bne.n	800abda <_strtol_l.constprop.0+0x9a>
 800ab74:	782c      	ldrb	r4, [r5, #0]
 800ab76:	2701      	movs	r7, #1
 800ab78:	1cb5      	adds	r5, r6, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d05b      	beq.n	800ac36 <_strtol_l.constprop.0+0xf6>
 800ab7e:	2b10      	cmp	r3, #16
 800ab80:	d109      	bne.n	800ab96 <_strtol_l.constprop.0+0x56>
 800ab82:	2c30      	cmp	r4, #48	; 0x30
 800ab84:	d107      	bne.n	800ab96 <_strtol_l.constprop.0+0x56>
 800ab86:	782c      	ldrb	r4, [r5, #0]
 800ab88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab8c:	2c58      	cmp	r4, #88	; 0x58
 800ab8e:	d14d      	bne.n	800ac2c <_strtol_l.constprop.0+0xec>
 800ab90:	786c      	ldrb	r4, [r5, #1]
 800ab92:	2310      	movs	r3, #16
 800ab94:	3502      	adds	r5, #2
 800ab96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab9e:	f04f 0e00 	mov.w	lr, #0
 800aba2:	fbb8 f9f3 	udiv	r9, r8, r3
 800aba6:	4676      	mov	r6, lr
 800aba8:	fb03 8a19 	mls	sl, r3, r9, r8
 800abac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abb0:	f1bc 0f09 	cmp.w	ip, #9
 800abb4:	d816      	bhi.n	800abe4 <_strtol_l.constprop.0+0xa4>
 800abb6:	4664      	mov	r4, ip
 800abb8:	42a3      	cmp	r3, r4
 800abba:	dd24      	ble.n	800ac06 <_strtol_l.constprop.0+0xc6>
 800abbc:	f1be 3fff 	cmp.w	lr, #4294967295
 800abc0:	d008      	beq.n	800abd4 <_strtol_l.constprop.0+0x94>
 800abc2:	45b1      	cmp	r9, r6
 800abc4:	d31c      	bcc.n	800ac00 <_strtol_l.constprop.0+0xc0>
 800abc6:	d101      	bne.n	800abcc <_strtol_l.constprop.0+0x8c>
 800abc8:	45a2      	cmp	sl, r4
 800abca:	db19      	blt.n	800ac00 <_strtol_l.constprop.0+0xc0>
 800abcc:	fb06 4603 	mla	r6, r6, r3, r4
 800abd0:	f04f 0e01 	mov.w	lr, #1
 800abd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abd8:	e7e8      	b.n	800abac <_strtol_l.constprop.0+0x6c>
 800abda:	2c2b      	cmp	r4, #43	; 0x2b
 800abdc:	bf04      	itt	eq
 800abde:	782c      	ldrbeq	r4, [r5, #0]
 800abe0:	1cb5      	addeq	r5, r6, #2
 800abe2:	e7ca      	b.n	800ab7a <_strtol_l.constprop.0+0x3a>
 800abe4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800abe8:	f1bc 0f19 	cmp.w	ip, #25
 800abec:	d801      	bhi.n	800abf2 <_strtol_l.constprop.0+0xb2>
 800abee:	3c37      	subs	r4, #55	; 0x37
 800abf0:	e7e2      	b.n	800abb8 <_strtol_l.constprop.0+0x78>
 800abf2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800abf6:	f1bc 0f19 	cmp.w	ip, #25
 800abfa:	d804      	bhi.n	800ac06 <_strtol_l.constprop.0+0xc6>
 800abfc:	3c57      	subs	r4, #87	; 0x57
 800abfe:	e7db      	b.n	800abb8 <_strtol_l.constprop.0+0x78>
 800ac00:	f04f 3eff 	mov.w	lr, #4294967295
 800ac04:	e7e6      	b.n	800abd4 <_strtol_l.constprop.0+0x94>
 800ac06:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac0a:	d105      	bne.n	800ac18 <_strtol_l.constprop.0+0xd8>
 800ac0c:	2322      	movs	r3, #34	; 0x22
 800ac0e:	6003      	str	r3, [r0, #0]
 800ac10:	4646      	mov	r6, r8
 800ac12:	b942      	cbnz	r2, 800ac26 <_strtol_l.constprop.0+0xe6>
 800ac14:	4630      	mov	r0, r6
 800ac16:	e79e      	b.n	800ab56 <_strtol_l.constprop.0+0x16>
 800ac18:	b107      	cbz	r7, 800ac1c <_strtol_l.constprop.0+0xdc>
 800ac1a:	4276      	negs	r6, r6
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	d0f9      	beq.n	800ac14 <_strtol_l.constprop.0+0xd4>
 800ac20:	f1be 0f00 	cmp.w	lr, #0
 800ac24:	d000      	beq.n	800ac28 <_strtol_l.constprop.0+0xe8>
 800ac26:	1e69      	subs	r1, r5, #1
 800ac28:	6011      	str	r1, [r2, #0]
 800ac2a:	e7f3      	b.n	800ac14 <_strtol_l.constprop.0+0xd4>
 800ac2c:	2430      	movs	r4, #48	; 0x30
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1b1      	bne.n	800ab96 <_strtol_l.constprop.0+0x56>
 800ac32:	2308      	movs	r3, #8
 800ac34:	e7af      	b.n	800ab96 <_strtol_l.constprop.0+0x56>
 800ac36:	2c30      	cmp	r4, #48	; 0x30
 800ac38:	d0a5      	beq.n	800ab86 <_strtol_l.constprop.0+0x46>
 800ac3a:	230a      	movs	r3, #10
 800ac3c:	e7ab      	b.n	800ab96 <_strtol_l.constprop.0+0x56>
 800ac3e:	bf00      	nop
 800ac40:	0801f059 	.word	0x0801f059

0800ac44 <strtol>:
 800ac44:	4613      	mov	r3, r2
 800ac46:	460a      	mov	r2, r1
 800ac48:	4601      	mov	r1, r0
 800ac4a:	4802      	ldr	r0, [pc, #8]	; (800ac54 <strtol+0x10>)
 800ac4c:	6800      	ldr	r0, [r0, #0]
 800ac4e:	f7ff bf77 	b.w	800ab40 <_strtol_l.constprop.0>
 800ac52:	bf00      	nop
 800ac54:	200000a4 	.word	0x200000a4

0800ac58 <std>:
 800ac58:	2300      	movs	r3, #0
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac66:	6083      	str	r3, [r0, #8]
 800ac68:	8181      	strh	r1, [r0, #12]
 800ac6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac6c:	81c2      	strh	r2, [r0, #14]
 800ac6e:	6183      	str	r3, [r0, #24]
 800ac70:	4619      	mov	r1, r3
 800ac72:	2208      	movs	r2, #8
 800ac74:	305c      	adds	r0, #92	; 0x5c
 800ac76:	f000 f906 	bl	800ae86 <memset>
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	; (800acb0 <std+0x58>)
 800ac7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <std+0x5c>)
 800ac80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <std+0x60>)
 800ac84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <std+0x64>)
 800ac88:	6323      	str	r3, [r4, #48]	; 0x30
 800ac8a:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <std+0x68>)
 800ac8c:	6224      	str	r4, [r4, #32]
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d006      	beq.n	800aca0 <std+0x48>
 800ac92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac96:	4294      	cmp	r4, r2
 800ac98:	d002      	beq.n	800aca0 <std+0x48>
 800ac9a:	33d0      	adds	r3, #208	; 0xd0
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d105      	bne.n	800acac <std+0x54>
 800aca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca8:	f000 b966 	b.w	800af78 <__retarget_lock_init_recursive>
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop
 800acb0:	0800ae01 	.word	0x0800ae01
 800acb4:	0800ae23 	.word	0x0800ae23
 800acb8:	0800ae5b 	.word	0x0800ae5b
 800acbc:	0800ae7f 	.word	0x0800ae7f
 800acc0:	20002d28 	.word	0x20002d28

0800acc4 <stdio_exit_handler>:
 800acc4:	4a02      	ldr	r2, [pc, #8]	; (800acd0 <stdio_exit_handler+0xc>)
 800acc6:	4903      	ldr	r1, [pc, #12]	; (800acd4 <stdio_exit_handler+0x10>)
 800acc8:	4803      	ldr	r0, [pc, #12]	; (800acd8 <stdio_exit_handler+0x14>)
 800acca:	f000 b869 	b.w	800ada0 <_fwalk_sglue>
 800acce:	bf00      	nop
 800acd0:	2000004c 	.word	0x2000004c
 800acd4:	0800b825 	.word	0x0800b825
 800acd8:	20000058 	.word	0x20000058

0800acdc <cleanup_stdio>:
 800acdc:	6841      	ldr	r1, [r0, #4]
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <cleanup_stdio+0x34>)
 800ace0:	4299      	cmp	r1, r3
 800ace2:	b510      	push	{r4, lr}
 800ace4:	4604      	mov	r4, r0
 800ace6:	d001      	beq.n	800acec <cleanup_stdio+0x10>
 800ace8:	f000 fd9c 	bl	800b824 <_fflush_r>
 800acec:	68a1      	ldr	r1, [r4, #8]
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <cleanup_stdio+0x38>)
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <cleanup_stdio+0x1e>
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 fd95 	bl	800b824 <_fflush_r>
 800acfa:	68e1      	ldr	r1, [r4, #12]
 800acfc:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <cleanup_stdio+0x3c>)
 800acfe:	4299      	cmp	r1, r3
 800ad00:	d004      	beq.n	800ad0c <cleanup_stdio+0x30>
 800ad02:	4620      	mov	r0, r4
 800ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad08:	f000 bd8c 	b.w	800b824 <_fflush_r>
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	bf00      	nop
 800ad10:	20002d28 	.word	0x20002d28
 800ad14:	20002d90 	.word	0x20002d90
 800ad18:	20002df8 	.word	0x20002df8

0800ad1c <global_stdio_init.part.0>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <global_stdio_init.part.0+0x30>)
 800ad20:	4c0b      	ldr	r4, [pc, #44]	; (800ad50 <global_stdio_init.part.0+0x34>)
 800ad22:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <global_stdio_init.part.0+0x38>)
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	4620      	mov	r0, r4
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	f7ff ff94 	bl	800ac58 <std>
 800ad30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad34:	2201      	movs	r2, #1
 800ad36:	2109      	movs	r1, #9
 800ad38:	f7ff ff8e 	bl	800ac58 <std>
 800ad3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad40:	2202      	movs	r2, #2
 800ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad46:	2112      	movs	r1, #18
 800ad48:	f7ff bf86 	b.w	800ac58 <std>
 800ad4c:	20002e60 	.word	0x20002e60
 800ad50:	20002d28 	.word	0x20002d28
 800ad54:	0800acc5 	.word	0x0800acc5

0800ad58 <__sfp_lock_acquire>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__sfp_lock_acquire+0x8>)
 800ad5a:	f000 b90e 	b.w	800af7a <__retarget_lock_acquire_recursive>
 800ad5e:	bf00      	nop
 800ad60:	20002e69 	.word	0x20002e69

0800ad64 <__sfp_lock_release>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__sfp_lock_release+0x8>)
 800ad66:	f000 b909 	b.w	800af7c <__retarget_lock_release_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	20002e69 	.word	0x20002e69

0800ad70 <__sinit>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	4604      	mov	r4, r0
 800ad74:	f7ff fff0 	bl	800ad58 <__sfp_lock_acquire>
 800ad78:	6a23      	ldr	r3, [r4, #32]
 800ad7a:	b11b      	cbz	r3, 800ad84 <__sinit+0x14>
 800ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad80:	f7ff bff0 	b.w	800ad64 <__sfp_lock_release>
 800ad84:	4b04      	ldr	r3, [pc, #16]	; (800ad98 <__sinit+0x28>)
 800ad86:	6223      	str	r3, [r4, #32]
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <__sinit+0x2c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f5      	bne.n	800ad7c <__sinit+0xc>
 800ad90:	f7ff ffc4 	bl	800ad1c <global_stdio_init.part.0>
 800ad94:	e7f2      	b.n	800ad7c <__sinit+0xc>
 800ad96:	bf00      	nop
 800ad98:	0800acdd 	.word	0x0800acdd
 800ad9c:	20002e60 	.word	0x20002e60

0800ada0 <_fwalk_sglue>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	4607      	mov	r7, r0
 800ada6:	4688      	mov	r8, r1
 800ada8:	4614      	mov	r4, r2
 800adaa:	2600      	movs	r6, #0
 800adac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb0:	f1b9 0901 	subs.w	r9, r9, #1
 800adb4:	d505      	bpl.n	800adc2 <_fwalk_sglue+0x22>
 800adb6:	6824      	ldr	r4, [r4, #0]
 800adb8:	2c00      	cmp	r4, #0
 800adba:	d1f7      	bne.n	800adac <_fwalk_sglue+0xc>
 800adbc:	4630      	mov	r0, r6
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc2:	89ab      	ldrh	r3, [r5, #12]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d907      	bls.n	800add8 <_fwalk_sglue+0x38>
 800adc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adcc:	3301      	adds	r3, #1
 800adce:	d003      	beq.n	800add8 <_fwalk_sglue+0x38>
 800add0:	4629      	mov	r1, r5
 800add2:	4638      	mov	r0, r7
 800add4:	47c0      	blx	r8
 800add6:	4306      	orrs	r6, r0
 800add8:	3568      	adds	r5, #104	; 0x68
 800adda:	e7e9      	b.n	800adb0 <_fwalk_sglue+0x10>

0800addc <iprintf>:
 800addc:	b40f      	push	{r0, r1, r2, r3}
 800adde:	b507      	push	{r0, r1, r2, lr}
 800ade0:	4906      	ldr	r1, [pc, #24]	; (800adfc <iprintf+0x20>)
 800ade2:	ab04      	add	r3, sp, #16
 800ade4:	6808      	ldr	r0, [r1, #0]
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	6881      	ldr	r1, [r0, #8]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f000 f9e9 	bl	800b1c4 <_vfiprintf_r>
 800adf2:	b003      	add	sp, #12
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b004      	add	sp, #16
 800adfa:	4770      	bx	lr
 800adfc:	200000a4 	.word	0x200000a4

0800ae00 <__sread>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	f000 f868 	bl	800aedc <_read_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	bfab      	itete	ge
 800ae10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae12:	89a3      	ldrhlt	r3, [r4, #12]
 800ae14:	181b      	addge	r3, r3, r0
 800ae16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae1a:	bfac      	ite	ge
 800ae1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae1e:	81a3      	strhlt	r3, [r4, #12]
 800ae20:	bd10      	pop	{r4, pc}

0800ae22 <__swrite>:
 800ae22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	461f      	mov	r7, r3
 800ae28:	898b      	ldrh	r3, [r1, #12]
 800ae2a:	05db      	lsls	r3, r3, #23
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	4616      	mov	r6, r2
 800ae32:	d505      	bpl.n	800ae40 <__swrite+0x1e>
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	2302      	movs	r3, #2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f000 f83c 	bl	800aeb8 <_lseek_r>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4628      	mov	r0, r5
 800ae52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	f000 b853 	b.w	800af00 <_write_r>

0800ae5a <__sseek>:
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae62:	f000 f829 	bl	800aeb8 <_lseek_r>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	bf15      	itete	ne
 800ae6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae76:	81a3      	strheq	r3, [r4, #12]
 800ae78:	bf18      	it	ne
 800ae7a:	81a3      	strhne	r3, [r4, #12]
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <__sclose>:
 800ae7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae82:	f000 b809 	b.w	800ae98 <_close_r>

0800ae86 <memset>:
 800ae86:	4402      	add	r2, r0
 800ae88:	4603      	mov	r3, r0
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d100      	bne.n	800ae90 <memset+0xa>
 800ae8e:	4770      	bx	lr
 800ae90:	f803 1b01 	strb.w	r1, [r3], #1
 800ae94:	e7f9      	b.n	800ae8a <memset+0x4>
	...

0800ae98 <_close_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d06      	ldr	r5, [pc, #24]	; (800aeb4 <_close_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f9 fcc7 	bl	8004836 <_close>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_close_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_close_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20002e64 	.word	0x20002e64

0800aeb8 <_lseek_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d07      	ldr	r5, [pc, #28]	; (800aed8 <_lseek_r+0x20>)
 800aebc:	4604      	mov	r4, r0
 800aebe:	4608      	mov	r0, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	2200      	movs	r2, #0
 800aec4:	602a      	str	r2, [r5, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f7f9 fcdc 	bl	8004884 <_lseek>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_lseek_r+0x1e>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_lseek_r+0x1e>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	20002e64 	.word	0x20002e64

0800aedc <_read_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	; (800aefc <_read_r+0x20>)
 800aee0:	4604      	mov	r4, r0
 800aee2:	4608      	mov	r0, r1
 800aee4:	4611      	mov	r1, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	602a      	str	r2, [r5, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	f7f9 fc6a 	bl	80047c4 <_read>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_read_r+0x1e>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_read_r+0x1e>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20002e64 	.word	0x20002e64

0800af00 <_write_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d07      	ldr	r5, [pc, #28]	; (800af20 <_write_r+0x20>)
 800af04:	4604      	mov	r4, r0
 800af06:	4608      	mov	r0, r1
 800af08:	4611      	mov	r1, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	f7f9 fc75 	bl	80047fe <_write>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_write_r+0x1e>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_write_r+0x1e>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	20002e64 	.word	0x20002e64

0800af24 <__errno>:
 800af24:	4b01      	ldr	r3, [pc, #4]	; (800af2c <__errno+0x8>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	200000a4 	.word	0x200000a4

0800af30 <__libc_init_array>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	4d0d      	ldr	r5, [pc, #52]	; (800af68 <__libc_init_array+0x38>)
 800af34:	4c0d      	ldr	r4, [pc, #52]	; (800af6c <__libc_init_array+0x3c>)
 800af36:	1b64      	subs	r4, r4, r5
 800af38:	10a4      	asrs	r4, r4, #2
 800af3a:	2600      	movs	r6, #0
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	d109      	bne.n	800af54 <__libc_init_array+0x24>
 800af40:	4d0b      	ldr	r5, [pc, #44]	; (800af70 <__libc_init_array+0x40>)
 800af42:	4c0c      	ldr	r4, [pc, #48]	; (800af74 <__libc_init_array+0x44>)
 800af44:	f000 fdc0 	bl	800bac8 <_init>
 800af48:	1b64      	subs	r4, r4, r5
 800af4a:	10a4      	asrs	r4, r4, #2
 800af4c:	2600      	movs	r6, #0
 800af4e:	42a6      	cmp	r6, r4
 800af50:	d105      	bne.n	800af5e <__libc_init_array+0x2e>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	f855 3b04 	ldr.w	r3, [r5], #4
 800af58:	4798      	blx	r3
 800af5a:	3601      	adds	r6, #1
 800af5c:	e7ee      	b.n	800af3c <__libc_init_array+0xc>
 800af5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af62:	4798      	blx	r3
 800af64:	3601      	adds	r6, #1
 800af66:	e7f2      	b.n	800af4e <__libc_init_array+0x1e>
 800af68:	0801f194 	.word	0x0801f194
 800af6c:	0801f194 	.word	0x0801f194
 800af70:	0801f194 	.word	0x0801f194
 800af74:	0801f198 	.word	0x0801f198

0800af78 <__retarget_lock_init_recursive>:
 800af78:	4770      	bx	lr

0800af7a <__retarget_lock_acquire_recursive>:
 800af7a:	4770      	bx	lr

0800af7c <__retarget_lock_release_recursive>:
 800af7c:	4770      	bx	lr
	...

0800af80 <_free_r>:
 800af80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af82:	2900      	cmp	r1, #0
 800af84:	d044      	beq.n	800b010 <_free_r+0x90>
 800af86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8a:	9001      	str	r0, [sp, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f1a1 0404 	sub.w	r4, r1, #4
 800af92:	bfb8      	it	lt
 800af94:	18e4      	addlt	r4, r4, r3
 800af96:	f000 f8df 	bl	800b158 <__malloc_lock>
 800af9a:	4a1e      	ldr	r2, [pc, #120]	; (800b014 <_free_r+0x94>)
 800af9c:	9801      	ldr	r0, [sp, #4]
 800af9e:	6813      	ldr	r3, [r2, #0]
 800afa0:	b933      	cbnz	r3, 800afb0 <_free_r+0x30>
 800afa2:	6063      	str	r3, [r4, #4]
 800afa4:	6014      	str	r4, [r2, #0]
 800afa6:	b003      	add	sp, #12
 800afa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afac:	f000 b8da 	b.w	800b164 <__malloc_unlock>
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	d908      	bls.n	800afc6 <_free_r+0x46>
 800afb4:	6825      	ldr	r5, [r4, #0]
 800afb6:	1961      	adds	r1, r4, r5
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf01      	itttt	eq
 800afbc:	6819      	ldreq	r1, [r3, #0]
 800afbe:	685b      	ldreq	r3, [r3, #4]
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	e7ed      	b.n	800afa2 <_free_r+0x22>
 800afc6:	461a      	mov	r2, r3
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	b10b      	cbz	r3, 800afd0 <_free_r+0x50>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d9fa      	bls.n	800afc6 <_free_r+0x46>
 800afd0:	6811      	ldr	r1, [r2, #0]
 800afd2:	1855      	adds	r5, r2, r1
 800afd4:	42a5      	cmp	r5, r4
 800afd6:	d10b      	bne.n	800aff0 <_free_r+0x70>
 800afd8:	6824      	ldr	r4, [r4, #0]
 800afda:	4421      	add	r1, r4
 800afdc:	1854      	adds	r4, r2, r1
 800afde:	42a3      	cmp	r3, r4
 800afe0:	6011      	str	r1, [r2, #0]
 800afe2:	d1e0      	bne.n	800afa6 <_free_r+0x26>
 800afe4:	681c      	ldr	r4, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	6053      	str	r3, [r2, #4]
 800afea:	440c      	add	r4, r1
 800afec:	6014      	str	r4, [r2, #0]
 800afee:	e7da      	b.n	800afa6 <_free_r+0x26>
 800aff0:	d902      	bls.n	800aff8 <_free_r+0x78>
 800aff2:	230c      	movs	r3, #12
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	e7d6      	b.n	800afa6 <_free_r+0x26>
 800aff8:	6825      	ldr	r5, [r4, #0]
 800affa:	1961      	adds	r1, r4, r5
 800affc:	428b      	cmp	r3, r1
 800affe:	bf04      	itt	eq
 800b000:	6819      	ldreq	r1, [r3, #0]
 800b002:	685b      	ldreq	r3, [r3, #4]
 800b004:	6063      	str	r3, [r4, #4]
 800b006:	bf04      	itt	eq
 800b008:	1949      	addeq	r1, r1, r5
 800b00a:	6021      	streq	r1, [r4, #0]
 800b00c:	6054      	str	r4, [r2, #4]
 800b00e:	e7ca      	b.n	800afa6 <_free_r+0x26>
 800b010:	b003      	add	sp, #12
 800b012:	bd30      	pop	{r4, r5, pc}
 800b014:	20002e6c 	.word	0x20002e6c

0800b018 <sbrk_aligned>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	4e0e      	ldr	r6, [pc, #56]	; (800b054 <sbrk_aligned+0x3c>)
 800b01c:	460c      	mov	r4, r1
 800b01e:	6831      	ldr	r1, [r6, #0]
 800b020:	4605      	mov	r5, r0
 800b022:	b911      	cbnz	r1, 800b02a <sbrk_aligned+0x12>
 800b024:	f000 fcbc 	bl	800b9a0 <_sbrk_r>
 800b028:	6030      	str	r0, [r6, #0]
 800b02a:	4621      	mov	r1, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 fcb7 	bl	800b9a0 <_sbrk_r>
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	d00a      	beq.n	800b04c <sbrk_aligned+0x34>
 800b036:	1cc4      	adds	r4, r0, #3
 800b038:	f024 0403 	bic.w	r4, r4, #3
 800b03c:	42a0      	cmp	r0, r4
 800b03e:	d007      	beq.n	800b050 <sbrk_aligned+0x38>
 800b040:	1a21      	subs	r1, r4, r0
 800b042:	4628      	mov	r0, r5
 800b044:	f000 fcac 	bl	800b9a0 <_sbrk_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	d101      	bne.n	800b050 <sbrk_aligned+0x38>
 800b04c:	f04f 34ff 	mov.w	r4, #4294967295
 800b050:	4620      	mov	r0, r4
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	20002e70 	.word	0x20002e70

0800b058 <_malloc_r>:
 800b058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b05c:	1ccd      	adds	r5, r1, #3
 800b05e:	f025 0503 	bic.w	r5, r5, #3
 800b062:	3508      	adds	r5, #8
 800b064:	2d0c      	cmp	r5, #12
 800b066:	bf38      	it	cc
 800b068:	250c      	movcc	r5, #12
 800b06a:	2d00      	cmp	r5, #0
 800b06c:	4607      	mov	r7, r0
 800b06e:	db01      	blt.n	800b074 <_malloc_r+0x1c>
 800b070:	42a9      	cmp	r1, r5
 800b072:	d905      	bls.n	800b080 <_malloc_r+0x28>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	2600      	movs	r6, #0
 800b07a:	4630      	mov	r0, r6
 800b07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b080:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b154 <_malloc_r+0xfc>
 800b084:	f000 f868 	bl	800b158 <__malloc_lock>
 800b088:	f8d8 3000 	ldr.w	r3, [r8]
 800b08c:	461c      	mov	r4, r3
 800b08e:	bb5c      	cbnz	r4, 800b0e8 <_malloc_r+0x90>
 800b090:	4629      	mov	r1, r5
 800b092:	4638      	mov	r0, r7
 800b094:	f7ff ffc0 	bl	800b018 <sbrk_aligned>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	4604      	mov	r4, r0
 800b09c:	d155      	bne.n	800b14a <_malloc_r+0xf2>
 800b09e:	f8d8 4000 	ldr.w	r4, [r8]
 800b0a2:	4626      	mov	r6, r4
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	d145      	bne.n	800b134 <_malloc_r+0xdc>
 800b0a8:	2c00      	cmp	r4, #0
 800b0aa:	d048      	beq.n	800b13e <_malloc_r+0xe6>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	eb04 0903 	add.w	r9, r4, r3
 800b0b6:	f000 fc73 	bl	800b9a0 <_sbrk_r>
 800b0ba:	4581      	cmp	r9, r0
 800b0bc:	d13f      	bne.n	800b13e <_malloc_r+0xe6>
 800b0be:	6821      	ldr	r1, [r4, #0]
 800b0c0:	1a6d      	subs	r5, r5, r1
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7ff ffa7 	bl	800b018 <sbrk_aligned>
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d037      	beq.n	800b13e <_malloc_r+0xe6>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	442b      	add	r3, r5
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d038      	beq.n	800b14e <_malloc_r+0xf6>
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	42a2      	cmp	r2, r4
 800b0e0:	d12b      	bne.n	800b13a <_malloc_r+0xe2>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	605a      	str	r2, [r3, #4]
 800b0e6:	e00f      	b.n	800b108 <_malloc_r+0xb0>
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	1b52      	subs	r2, r2, r5
 800b0ec:	d41f      	bmi.n	800b12e <_malloc_r+0xd6>
 800b0ee:	2a0b      	cmp	r2, #11
 800b0f0:	d917      	bls.n	800b122 <_malloc_r+0xca>
 800b0f2:	1961      	adds	r1, r4, r5
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	6025      	str	r5, [r4, #0]
 800b0f8:	bf18      	it	ne
 800b0fa:	6059      	strne	r1, [r3, #4]
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	bf08      	it	eq
 800b100:	f8c8 1000 	streq.w	r1, [r8]
 800b104:	5162      	str	r2, [r4, r5]
 800b106:	604b      	str	r3, [r1, #4]
 800b108:	4638      	mov	r0, r7
 800b10a:	f104 060b 	add.w	r6, r4, #11
 800b10e:	f000 f829 	bl	800b164 <__malloc_unlock>
 800b112:	f026 0607 	bic.w	r6, r6, #7
 800b116:	1d23      	adds	r3, r4, #4
 800b118:	1af2      	subs	r2, r6, r3
 800b11a:	d0ae      	beq.n	800b07a <_malloc_r+0x22>
 800b11c:	1b9b      	subs	r3, r3, r6
 800b11e:	50a3      	str	r3, [r4, r2]
 800b120:	e7ab      	b.n	800b07a <_malloc_r+0x22>
 800b122:	42a3      	cmp	r3, r4
 800b124:	6862      	ldr	r2, [r4, #4]
 800b126:	d1dd      	bne.n	800b0e4 <_malloc_r+0x8c>
 800b128:	f8c8 2000 	str.w	r2, [r8]
 800b12c:	e7ec      	b.n	800b108 <_malloc_r+0xb0>
 800b12e:	4623      	mov	r3, r4
 800b130:	6864      	ldr	r4, [r4, #4]
 800b132:	e7ac      	b.n	800b08e <_malloc_r+0x36>
 800b134:	4634      	mov	r4, r6
 800b136:	6876      	ldr	r6, [r6, #4]
 800b138:	e7b4      	b.n	800b0a4 <_malloc_r+0x4c>
 800b13a:	4613      	mov	r3, r2
 800b13c:	e7cc      	b.n	800b0d8 <_malloc_r+0x80>
 800b13e:	230c      	movs	r3, #12
 800b140:	603b      	str	r3, [r7, #0]
 800b142:	4638      	mov	r0, r7
 800b144:	f000 f80e 	bl	800b164 <__malloc_unlock>
 800b148:	e797      	b.n	800b07a <_malloc_r+0x22>
 800b14a:	6025      	str	r5, [r4, #0]
 800b14c:	e7dc      	b.n	800b108 <_malloc_r+0xb0>
 800b14e:	605b      	str	r3, [r3, #4]
 800b150:	deff      	udf	#255	; 0xff
 800b152:	bf00      	nop
 800b154:	20002e6c 	.word	0x20002e6c

0800b158 <__malloc_lock>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__malloc_lock+0x8>)
 800b15a:	f7ff bf0e 	b.w	800af7a <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	20002e68 	.word	0x20002e68

0800b164 <__malloc_unlock>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__malloc_unlock+0x8>)
 800b166:	f7ff bf09 	b.w	800af7c <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	20002e68 	.word	0x20002e68

0800b170 <__sfputc_r>:
 800b170:	6893      	ldr	r3, [r2, #8]
 800b172:	3b01      	subs	r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	b410      	push	{r4}
 800b178:	6093      	str	r3, [r2, #8]
 800b17a:	da08      	bge.n	800b18e <__sfputc_r+0x1e>
 800b17c:	6994      	ldr	r4, [r2, #24]
 800b17e:	42a3      	cmp	r3, r4
 800b180:	db01      	blt.n	800b186 <__sfputc_r+0x16>
 800b182:	290a      	cmp	r1, #10
 800b184:	d103      	bne.n	800b18e <__sfputc_r+0x1e>
 800b186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b18a:	f000 bb73 	b.w	800b874 <__swbuf_r>
 800b18e:	6813      	ldr	r3, [r2, #0]
 800b190:	1c58      	adds	r0, r3, #1
 800b192:	6010      	str	r0, [r2, #0]
 800b194:	7019      	strb	r1, [r3, #0]
 800b196:	4608      	mov	r0, r1
 800b198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <__sfputs_r>:
 800b19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	18d5      	adds	r5, r2, r3
 800b1a8:	42ac      	cmp	r4, r5
 800b1aa:	d101      	bne.n	800b1b0 <__sfputs_r+0x12>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e007      	b.n	800b1c0 <__sfputs_r+0x22>
 800b1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b4:	463a      	mov	r2, r7
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffda 	bl	800b170 <__sfputc_r>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d1f3      	bne.n	800b1a8 <__sfputs_r+0xa>
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1c4 <_vfiprintf_r>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	b09d      	sub	sp, #116	; 0x74
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	4698      	mov	r8, r3
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	b118      	cbz	r0, 800b1dc <_vfiprintf_r+0x18>
 800b1d4:	6a03      	ldr	r3, [r0, #32]
 800b1d6:	b90b      	cbnz	r3, 800b1dc <_vfiprintf_r+0x18>
 800b1d8:	f7ff fdca 	bl	800ad70 <__sinit>
 800b1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1de:	07d9      	lsls	r1, r3, #31
 800b1e0:	d405      	bmi.n	800b1ee <_vfiprintf_r+0x2a>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	059a      	lsls	r2, r3, #22
 800b1e6:	d402      	bmi.n	800b1ee <_vfiprintf_r+0x2a>
 800b1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ea:	f7ff fec6 	bl	800af7a <__retarget_lock_acquire_recursive>
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	071b      	lsls	r3, r3, #28
 800b1f2:	d501      	bpl.n	800b1f8 <_vfiprintf_r+0x34>
 800b1f4:	692b      	ldr	r3, [r5, #16]
 800b1f6:	b99b      	cbnz	r3, 800b220 <_vfiprintf_r+0x5c>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f000 fb78 	bl	800b8f0 <__swsetup_r>
 800b200:	b170      	cbz	r0, 800b220 <_vfiprintf_r+0x5c>
 800b202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b204:	07dc      	lsls	r4, r3, #31
 800b206:	d504      	bpl.n	800b212 <_vfiprintf_r+0x4e>
 800b208:	f04f 30ff 	mov.w	r0, #4294967295
 800b20c:	b01d      	add	sp, #116	; 0x74
 800b20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	0598      	lsls	r0, r3, #22
 800b216:	d4f7      	bmi.n	800b208 <_vfiprintf_r+0x44>
 800b218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b21a:	f7ff feaf 	bl	800af7c <__retarget_lock_release_recursive>
 800b21e:	e7f3      	b.n	800b208 <_vfiprintf_r+0x44>
 800b220:	2300      	movs	r3, #0
 800b222:	9309      	str	r3, [sp, #36]	; 0x24
 800b224:	2320      	movs	r3, #32
 800b226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b22a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b22e:	2330      	movs	r3, #48	; 0x30
 800b230:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b3e4 <_vfiprintf_r+0x220>
 800b234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b238:	f04f 0901 	mov.w	r9, #1
 800b23c:	4623      	mov	r3, r4
 800b23e:	469a      	mov	sl, r3
 800b240:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b244:	b10a      	cbz	r2, 800b24a <_vfiprintf_r+0x86>
 800b246:	2a25      	cmp	r2, #37	; 0x25
 800b248:	d1f9      	bne.n	800b23e <_vfiprintf_r+0x7a>
 800b24a:	ebba 0b04 	subs.w	fp, sl, r4
 800b24e:	d00b      	beq.n	800b268 <_vfiprintf_r+0xa4>
 800b250:	465b      	mov	r3, fp
 800b252:	4622      	mov	r2, r4
 800b254:	4629      	mov	r1, r5
 800b256:	4630      	mov	r0, r6
 800b258:	f7ff ffa1 	bl	800b19e <__sfputs_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	f000 80a9 	beq.w	800b3b4 <_vfiprintf_r+0x1f0>
 800b262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b264:	445a      	add	r2, fp
 800b266:	9209      	str	r2, [sp, #36]	; 0x24
 800b268:	f89a 3000 	ldrb.w	r3, [sl]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80a1 	beq.w	800b3b4 <_vfiprintf_r+0x1f0>
 800b272:	2300      	movs	r3, #0
 800b274:	f04f 32ff 	mov.w	r2, #4294967295
 800b278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b27c:	f10a 0a01 	add.w	sl, sl, #1
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b288:	931a      	str	r3, [sp, #104]	; 0x68
 800b28a:	4654      	mov	r4, sl
 800b28c:	2205      	movs	r2, #5
 800b28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b292:	4854      	ldr	r0, [pc, #336]	; (800b3e4 <_vfiprintf_r+0x220>)
 800b294:	f7f4 ff9c 	bl	80001d0 <memchr>
 800b298:	9a04      	ldr	r2, [sp, #16]
 800b29a:	b9d8      	cbnz	r0, 800b2d4 <_vfiprintf_r+0x110>
 800b29c:	06d1      	lsls	r1, r2, #27
 800b29e:	bf44      	itt	mi
 800b2a0:	2320      	movmi	r3, #32
 800b2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a6:	0713      	lsls	r3, r2, #28
 800b2a8:	bf44      	itt	mi
 800b2aa:	232b      	movmi	r3, #43	; 0x2b
 800b2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b6:	d015      	beq.n	800b2e4 <_vfiprintf_r+0x120>
 800b2b8:	9a07      	ldr	r2, [sp, #28]
 800b2ba:	4654      	mov	r4, sl
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f04f 0c0a 	mov.w	ip, #10
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2c8:	3b30      	subs	r3, #48	; 0x30
 800b2ca:	2b09      	cmp	r3, #9
 800b2cc:	d94d      	bls.n	800b36a <_vfiprintf_r+0x1a6>
 800b2ce:	b1b0      	cbz	r0, 800b2fe <_vfiprintf_r+0x13a>
 800b2d0:	9207      	str	r2, [sp, #28]
 800b2d2:	e014      	b.n	800b2fe <_vfiprintf_r+0x13a>
 800b2d4:	eba0 0308 	sub.w	r3, r0, r8
 800b2d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	46a2      	mov	sl, r4
 800b2e2:	e7d2      	b.n	800b28a <_vfiprintf_r+0xc6>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	1d19      	adds	r1, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bfbb      	ittet	lt
 800b2f0:	425b      	neglt	r3, r3
 800b2f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2f6:	9307      	strge	r3, [sp, #28]
 800b2f8:	9307      	strlt	r3, [sp, #28]
 800b2fa:	bfb8      	it	lt
 800b2fc:	9204      	strlt	r2, [sp, #16]
 800b2fe:	7823      	ldrb	r3, [r4, #0]
 800b300:	2b2e      	cmp	r3, #46	; 0x2e
 800b302:	d10c      	bne.n	800b31e <_vfiprintf_r+0x15a>
 800b304:	7863      	ldrb	r3, [r4, #1]
 800b306:	2b2a      	cmp	r3, #42	; 0x2a
 800b308:	d134      	bne.n	800b374 <_vfiprintf_r+0x1b0>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	1d1a      	adds	r2, r3, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	9203      	str	r2, [sp, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfb8      	it	lt
 800b316:	f04f 33ff 	movlt.w	r3, #4294967295
 800b31a:	3402      	adds	r4, #2
 800b31c:	9305      	str	r3, [sp, #20]
 800b31e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b3f4 <_vfiprintf_r+0x230>
 800b322:	7821      	ldrb	r1, [r4, #0]
 800b324:	2203      	movs	r2, #3
 800b326:	4650      	mov	r0, sl
 800b328:	f7f4 ff52 	bl	80001d0 <memchr>
 800b32c:	b138      	cbz	r0, 800b33e <_vfiprintf_r+0x17a>
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	eba0 000a 	sub.w	r0, r0, sl
 800b334:	2240      	movs	r2, #64	; 0x40
 800b336:	4082      	lsls	r2, r0
 800b338:	4313      	orrs	r3, r2
 800b33a:	3401      	adds	r4, #1
 800b33c:	9304      	str	r3, [sp, #16]
 800b33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b342:	4829      	ldr	r0, [pc, #164]	; (800b3e8 <_vfiprintf_r+0x224>)
 800b344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b348:	2206      	movs	r2, #6
 800b34a:	f7f4 ff41 	bl	80001d0 <memchr>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d03f      	beq.n	800b3d2 <_vfiprintf_r+0x20e>
 800b352:	4b26      	ldr	r3, [pc, #152]	; (800b3ec <_vfiprintf_r+0x228>)
 800b354:	bb1b      	cbnz	r3, 800b39e <_vfiprintf_r+0x1da>
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	3307      	adds	r3, #7
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	3308      	adds	r3, #8
 800b360:	9303      	str	r3, [sp, #12]
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	443b      	add	r3, r7
 800b366:	9309      	str	r3, [sp, #36]	; 0x24
 800b368:	e768      	b.n	800b23c <_vfiprintf_r+0x78>
 800b36a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b36e:	460c      	mov	r4, r1
 800b370:	2001      	movs	r0, #1
 800b372:	e7a6      	b.n	800b2c2 <_vfiprintf_r+0xfe>
 800b374:	2300      	movs	r3, #0
 800b376:	3401      	adds	r4, #1
 800b378:	9305      	str	r3, [sp, #20]
 800b37a:	4619      	mov	r1, r3
 800b37c:	f04f 0c0a 	mov.w	ip, #10
 800b380:	4620      	mov	r0, r4
 800b382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b386:	3a30      	subs	r2, #48	; 0x30
 800b388:	2a09      	cmp	r2, #9
 800b38a:	d903      	bls.n	800b394 <_vfiprintf_r+0x1d0>
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0c6      	beq.n	800b31e <_vfiprintf_r+0x15a>
 800b390:	9105      	str	r1, [sp, #20]
 800b392:	e7c4      	b.n	800b31e <_vfiprintf_r+0x15a>
 800b394:	fb0c 2101 	mla	r1, ip, r1, r2
 800b398:	4604      	mov	r4, r0
 800b39a:	2301      	movs	r3, #1
 800b39c:	e7f0      	b.n	800b380 <_vfiprintf_r+0x1bc>
 800b39e:	ab03      	add	r3, sp, #12
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	4b12      	ldr	r3, [pc, #72]	; (800b3f0 <_vfiprintf_r+0x22c>)
 800b3a6:	a904      	add	r1, sp, #16
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f3af 8000 	nop.w
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	1c78      	adds	r0, r7, #1
 800b3b2:	d1d6      	bne.n	800b362 <_vfiprintf_r+0x19e>
 800b3b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3b6:	07d9      	lsls	r1, r3, #31
 800b3b8:	d405      	bmi.n	800b3c6 <_vfiprintf_r+0x202>
 800b3ba:	89ab      	ldrh	r3, [r5, #12]
 800b3bc:	059a      	lsls	r2, r3, #22
 800b3be:	d402      	bmi.n	800b3c6 <_vfiprintf_r+0x202>
 800b3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c2:	f7ff fddb 	bl	800af7c <__retarget_lock_release_recursive>
 800b3c6:	89ab      	ldrh	r3, [r5, #12]
 800b3c8:	065b      	lsls	r3, r3, #25
 800b3ca:	f53f af1d 	bmi.w	800b208 <_vfiprintf_r+0x44>
 800b3ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3d0:	e71c      	b.n	800b20c <_vfiprintf_r+0x48>
 800b3d2:	ab03      	add	r3, sp, #12
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <_vfiprintf_r+0x22c>)
 800b3da:	a904      	add	r1, sp, #16
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f000 f879 	bl	800b4d4 <_printf_i>
 800b3e2:	e7e4      	b.n	800b3ae <_vfiprintf_r+0x1ea>
 800b3e4:	0801f159 	.word	0x0801f159
 800b3e8:	0801f163 	.word	0x0801f163
 800b3ec:	00000000 	.word	0x00000000
 800b3f0:	0800b19f 	.word	0x0800b19f
 800b3f4:	0801f15f 	.word	0x0801f15f

0800b3f8 <_printf_common>:
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	4699      	mov	r9, r3
 800b400:	688a      	ldr	r2, [r1, #8]
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b408:	4293      	cmp	r3, r2
 800b40a:	bfb8      	it	lt
 800b40c:	4613      	movlt	r3, r2
 800b40e:	6033      	str	r3, [r6, #0]
 800b410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b414:	4607      	mov	r7, r0
 800b416:	460c      	mov	r4, r1
 800b418:	b10a      	cbz	r2, 800b41e <_printf_common+0x26>
 800b41a:	3301      	adds	r3, #1
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	0699      	lsls	r1, r3, #26
 800b422:	bf42      	ittt	mi
 800b424:	6833      	ldrmi	r3, [r6, #0]
 800b426:	3302      	addmi	r3, #2
 800b428:	6033      	strmi	r3, [r6, #0]
 800b42a:	6825      	ldr	r5, [r4, #0]
 800b42c:	f015 0506 	ands.w	r5, r5, #6
 800b430:	d106      	bne.n	800b440 <_printf_common+0x48>
 800b432:	f104 0a19 	add.w	sl, r4, #25
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	6832      	ldr	r2, [r6, #0]
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	dc26      	bgt.n	800b48e <_printf_common+0x96>
 800b440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b444:	1e13      	subs	r3, r2, #0
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	bf18      	it	ne
 800b44a:	2301      	movne	r3, #1
 800b44c:	0692      	lsls	r2, r2, #26
 800b44e:	d42b      	bmi.n	800b4a8 <_printf_common+0xb0>
 800b450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d01e      	beq.n	800b49c <_printf_common+0xa4>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	6922      	ldr	r2, [r4, #16]
 800b462:	f003 0306 	and.w	r3, r3, #6
 800b466:	2b04      	cmp	r3, #4
 800b468:	bf02      	ittt	eq
 800b46a:	68e5      	ldreq	r5, [r4, #12]
 800b46c:	6833      	ldreq	r3, [r6, #0]
 800b46e:	1aed      	subeq	r5, r5, r3
 800b470:	68a3      	ldr	r3, [r4, #8]
 800b472:	bf0c      	ite	eq
 800b474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b478:	2500      	movne	r5, #0
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bfc4      	itt	gt
 800b47e:	1a9b      	subgt	r3, r3, r2
 800b480:	18ed      	addgt	r5, r5, r3
 800b482:	2600      	movs	r6, #0
 800b484:	341a      	adds	r4, #26
 800b486:	42b5      	cmp	r5, r6
 800b488:	d11a      	bne.n	800b4c0 <_printf_common+0xc8>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e008      	b.n	800b4a0 <_printf_common+0xa8>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4649      	mov	r1, r9
 800b494:	4638      	mov	r0, r7
 800b496:	47c0      	blx	r8
 800b498:	3001      	adds	r0, #1
 800b49a:	d103      	bne.n	800b4a4 <_printf_common+0xac>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	e7c6      	b.n	800b436 <_printf_common+0x3e>
 800b4a8:	18e1      	adds	r1, r4, r3
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	2030      	movs	r0, #48	; 0x30
 800b4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b2:	4422      	add	r2, r4
 800b4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4bc:	3302      	adds	r3, #2
 800b4be:	e7c7      	b.n	800b450 <_printf_common+0x58>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d0e6      	beq.n	800b49c <_printf_common+0xa4>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7d9      	b.n	800b486 <_printf_common+0x8e>
	...

0800b4d4 <_printf_i>:
 800b4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	7e0f      	ldrb	r7, [r1, #24]
 800b4da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4dc:	2f78      	cmp	r7, #120	; 0x78
 800b4de:	4691      	mov	r9, r2
 800b4e0:	4680      	mov	r8, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	469a      	mov	sl, r3
 800b4e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ea:	d807      	bhi.n	800b4fc <_printf_i+0x28>
 800b4ec:	2f62      	cmp	r7, #98	; 0x62
 800b4ee:	d80a      	bhi.n	800b506 <_printf_i+0x32>
 800b4f0:	2f00      	cmp	r7, #0
 800b4f2:	f000 80d4 	beq.w	800b69e <_printf_i+0x1ca>
 800b4f6:	2f58      	cmp	r7, #88	; 0x58
 800b4f8:	f000 80c0 	beq.w	800b67c <_printf_i+0x1a8>
 800b4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b504:	e03a      	b.n	800b57c <_printf_i+0xa8>
 800b506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50a:	2b15      	cmp	r3, #21
 800b50c:	d8f6      	bhi.n	800b4fc <_printf_i+0x28>
 800b50e:	a101      	add	r1, pc, #4	; (adr r1, 800b514 <_printf_i+0x40>)
 800b510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b514:	0800b56d 	.word	0x0800b56d
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b4fd 	.word	0x0800b4fd
 800b520:	0800b4fd 	.word	0x0800b4fd
 800b524:	0800b4fd 	.word	0x0800b4fd
 800b528:	0800b4fd 	.word	0x0800b4fd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4fd 	.word	0x0800b4fd
 800b534:	0800b4fd 	.word	0x0800b4fd
 800b538:	0800b4fd 	.word	0x0800b4fd
 800b53c:	0800b4fd 	.word	0x0800b4fd
 800b540:	0800b685 	.word	0x0800b685
 800b544:	0800b5ad 	.word	0x0800b5ad
 800b548:	0800b63f 	.word	0x0800b63f
 800b54c:	0800b4fd 	.word	0x0800b4fd
 800b550:	0800b4fd 	.word	0x0800b4fd
 800b554:	0800b6a7 	.word	0x0800b6a7
 800b558:	0800b4fd 	.word	0x0800b4fd
 800b55c:	0800b5ad 	.word	0x0800b5ad
 800b560:	0800b4fd 	.word	0x0800b4fd
 800b564:	0800b4fd 	.word	0x0800b4fd
 800b568:	0800b647 	.word	0x0800b647
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57c:	2301      	movs	r3, #1
 800b57e:	e09f      	b.n	800b6c0 <_printf_i+0x1ec>
 800b580:	6820      	ldr	r0, [r4, #0]
 800b582:	682b      	ldr	r3, [r5, #0]
 800b584:	0607      	lsls	r7, r0, #24
 800b586:	f103 0104 	add.w	r1, r3, #4
 800b58a:	6029      	str	r1, [r5, #0]
 800b58c:	d501      	bpl.n	800b592 <_printf_i+0xbe>
 800b58e:	681e      	ldr	r6, [r3, #0]
 800b590:	e003      	b.n	800b59a <_printf_i+0xc6>
 800b592:	0646      	lsls	r6, r0, #25
 800b594:	d5fb      	bpl.n	800b58e <_printf_i+0xba>
 800b596:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	da03      	bge.n	800b5a6 <_printf_i+0xd2>
 800b59e:	232d      	movs	r3, #45	; 0x2d
 800b5a0:	4276      	negs	r6, r6
 800b5a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a6:	485a      	ldr	r0, [pc, #360]	; (800b710 <_printf_i+0x23c>)
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	e012      	b.n	800b5d2 <_printf_i+0xfe>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	6820      	ldr	r0, [r4, #0]
 800b5b0:	1d19      	adds	r1, r3, #4
 800b5b2:	6029      	str	r1, [r5, #0]
 800b5b4:	0605      	lsls	r5, r0, #24
 800b5b6:	d501      	bpl.n	800b5bc <_printf_i+0xe8>
 800b5b8:	681e      	ldr	r6, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <_printf_i+0xee>
 800b5bc:	0641      	lsls	r1, r0, #25
 800b5be:	d5fb      	bpl.n	800b5b8 <_printf_i+0xe4>
 800b5c0:	881e      	ldrh	r6, [r3, #0]
 800b5c2:	4853      	ldr	r0, [pc, #332]	; (800b710 <_printf_i+0x23c>)
 800b5c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2308      	moveq	r3, #8
 800b5ca:	230a      	movne	r3, #10
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d2:	6865      	ldr	r5, [r4, #4]
 800b5d4:	60a5      	str	r5, [r4, #8]
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	bfa2      	ittt	ge
 800b5da:	6821      	ldrge	r1, [r4, #0]
 800b5dc:	f021 0104 	bicge.w	r1, r1, #4
 800b5e0:	6021      	strge	r1, [r4, #0]
 800b5e2:	b90e      	cbnz	r6, 800b5e8 <_printf_i+0x114>
 800b5e4:	2d00      	cmp	r5, #0
 800b5e6:	d04b      	beq.n	800b680 <_printf_i+0x1ac>
 800b5e8:	4615      	mov	r5, r2
 800b5ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5ee:	fb03 6711 	mls	r7, r3, r1, r6
 800b5f2:	5dc7      	ldrb	r7, [r0, r7]
 800b5f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5f8:	4637      	mov	r7, r6
 800b5fa:	42bb      	cmp	r3, r7
 800b5fc:	460e      	mov	r6, r1
 800b5fe:	d9f4      	bls.n	800b5ea <_printf_i+0x116>
 800b600:	2b08      	cmp	r3, #8
 800b602:	d10b      	bne.n	800b61c <_printf_i+0x148>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	07de      	lsls	r6, r3, #31
 800b608:	d508      	bpl.n	800b61c <_printf_i+0x148>
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	6861      	ldr	r1, [r4, #4]
 800b60e:	4299      	cmp	r1, r3
 800b610:	bfde      	ittt	le
 800b612:	2330      	movle	r3, #48	; 0x30
 800b614:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b61c:	1b52      	subs	r2, r2, r5
 800b61e:	6122      	str	r2, [r4, #16]
 800b620:	f8cd a000 	str.w	sl, [sp]
 800b624:	464b      	mov	r3, r9
 800b626:	aa03      	add	r2, sp, #12
 800b628:	4621      	mov	r1, r4
 800b62a:	4640      	mov	r0, r8
 800b62c:	f7ff fee4 	bl	800b3f8 <_printf_common>
 800b630:	3001      	adds	r0, #1
 800b632:	d14a      	bne.n	800b6ca <_printf_i+0x1f6>
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	b004      	add	sp, #16
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	f043 0320 	orr.w	r3, r3, #32
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	4833      	ldr	r0, [pc, #204]	; (800b714 <_printf_i+0x240>)
 800b648:	2778      	movs	r7, #120	; 0x78
 800b64a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	6829      	ldr	r1, [r5, #0]
 800b652:	061f      	lsls	r7, r3, #24
 800b654:	f851 6b04 	ldr.w	r6, [r1], #4
 800b658:	d402      	bmi.n	800b660 <_printf_i+0x18c>
 800b65a:	065f      	lsls	r7, r3, #25
 800b65c:	bf48      	it	mi
 800b65e:	b2b6      	uxthmi	r6, r6
 800b660:	07df      	lsls	r7, r3, #31
 800b662:	bf48      	it	mi
 800b664:	f043 0320 	orrmi.w	r3, r3, #32
 800b668:	6029      	str	r1, [r5, #0]
 800b66a:	bf48      	it	mi
 800b66c:	6023      	strmi	r3, [r4, #0]
 800b66e:	b91e      	cbnz	r6, 800b678 <_printf_i+0x1a4>
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	f023 0320 	bic.w	r3, r3, #32
 800b676:	6023      	str	r3, [r4, #0]
 800b678:	2310      	movs	r3, #16
 800b67a:	e7a7      	b.n	800b5cc <_printf_i+0xf8>
 800b67c:	4824      	ldr	r0, [pc, #144]	; (800b710 <_printf_i+0x23c>)
 800b67e:	e7e4      	b.n	800b64a <_printf_i+0x176>
 800b680:	4615      	mov	r5, r2
 800b682:	e7bd      	b.n	800b600 <_printf_i+0x12c>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	6826      	ldr	r6, [r4, #0]
 800b688:	6961      	ldr	r1, [r4, #20]
 800b68a:	1d18      	adds	r0, r3, #4
 800b68c:	6028      	str	r0, [r5, #0]
 800b68e:	0635      	lsls	r5, r6, #24
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	d501      	bpl.n	800b698 <_printf_i+0x1c4>
 800b694:	6019      	str	r1, [r3, #0]
 800b696:	e002      	b.n	800b69e <_printf_i+0x1ca>
 800b698:	0670      	lsls	r0, r6, #25
 800b69a:	d5fb      	bpl.n	800b694 <_printf_i+0x1c0>
 800b69c:	8019      	strh	r1, [r3, #0]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	4615      	mov	r5, r2
 800b6a4:	e7bc      	b.n	800b620 <_printf_i+0x14c>
 800b6a6:	682b      	ldr	r3, [r5, #0]
 800b6a8:	1d1a      	adds	r2, r3, #4
 800b6aa:	602a      	str	r2, [r5, #0]
 800b6ac:	681d      	ldr	r5, [r3, #0]
 800b6ae:	6862      	ldr	r2, [r4, #4]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f7f4 fd8c 	bl	80001d0 <memchr>
 800b6b8:	b108      	cbz	r0, 800b6be <_printf_i+0x1ea>
 800b6ba:	1b40      	subs	r0, r0, r5
 800b6bc:	6060      	str	r0, [r4, #4]
 800b6be:	6863      	ldr	r3, [r4, #4]
 800b6c0:	6123      	str	r3, [r4, #16]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c8:	e7aa      	b.n	800b620 <_printf_i+0x14c>
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	462a      	mov	r2, r5
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	47d0      	blx	sl
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d0ad      	beq.n	800b634 <_printf_i+0x160>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	079b      	lsls	r3, r3, #30
 800b6dc:	d413      	bmi.n	800b706 <_printf_i+0x232>
 800b6de:	68e0      	ldr	r0, [r4, #12]
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	4298      	cmp	r0, r3
 800b6e4:	bfb8      	it	lt
 800b6e6:	4618      	movlt	r0, r3
 800b6e8:	e7a6      	b.n	800b638 <_printf_i+0x164>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	47d0      	blx	sl
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d09d      	beq.n	800b634 <_printf_i+0x160>
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	68e3      	ldr	r3, [r4, #12]
 800b6fc:	9903      	ldr	r1, [sp, #12]
 800b6fe:	1a5b      	subs	r3, r3, r1
 800b700:	42ab      	cmp	r3, r5
 800b702:	dcf2      	bgt.n	800b6ea <_printf_i+0x216>
 800b704:	e7eb      	b.n	800b6de <_printf_i+0x20a>
 800b706:	2500      	movs	r5, #0
 800b708:	f104 0619 	add.w	r6, r4, #25
 800b70c:	e7f5      	b.n	800b6fa <_printf_i+0x226>
 800b70e:	bf00      	nop
 800b710:	0801f16a 	.word	0x0801f16a
 800b714:	0801f17b 	.word	0x0801f17b

0800b718 <__sflush_r>:
 800b718:	898a      	ldrh	r2, [r1, #12]
 800b71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b71e:	4605      	mov	r5, r0
 800b720:	0710      	lsls	r0, r2, #28
 800b722:	460c      	mov	r4, r1
 800b724:	d458      	bmi.n	800b7d8 <__sflush_r+0xc0>
 800b726:	684b      	ldr	r3, [r1, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	dc05      	bgt.n	800b738 <__sflush_r+0x20>
 800b72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dc02      	bgt.n	800b738 <__sflush_r+0x20>
 800b732:	2000      	movs	r0, #0
 800b734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	d0f9      	beq.n	800b732 <__sflush_r+0x1a>
 800b73e:	2300      	movs	r3, #0
 800b740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b744:	682f      	ldr	r7, [r5, #0]
 800b746:	6a21      	ldr	r1, [r4, #32]
 800b748:	602b      	str	r3, [r5, #0]
 800b74a:	d032      	beq.n	800b7b2 <__sflush_r+0x9a>
 800b74c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	075a      	lsls	r2, r3, #29
 800b752:	d505      	bpl.n	800b760 <__sflush_r+0x48>
 800b754:	6863      	ldr	r3, [r4, #4]
 800b756:	1ac0      	subs	r0, r0, r3
 800b758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75a:	b10b      	cbz	r3, 800b760 <__sflush_r+0x48>
 800b75c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b75e:	1ac0      	subs	r0, r0, r3
 800b760:	2300      	movs	r3, #0
 800b762:	4602      	mov	r2, r0
 800b764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b766:	6a21      	ldr	r1, [r4, #32]
 800b768:	4628      	mov	r0, r5
 800b76a:	47b0      	blx	r6
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	d106      	bne.n	800b780 <__sflush_r+0x68>
 800b772:	6829      	ldr	r1, [r5, #0]
 800b774:	291d      	cmp	r1, #29
 800b776:	d82b      	bhi.n	800b7d0 <__sflush_r+0xb8>
 800b778:	4a29      	ldr	r2, [pc, #164]	; (800b820 <__sflush_r+0x108>)
 800b77a:	410a      	asrs	r2, r1
 800b77c:	07d6      	lsls	r6, r2, #31
 800b77e:	d427      	bmi.n	800b7d0 <__sflush_r+0xb8>
 800b780:	2200      	movs	r2, #0
 800b782:	6062      	str	r2, [r4, #4]
 800b784:	04d9      	lsls	r1, r3, #19
 800b786:	6922      	ldr	r2, [r4, #16]
 800b788:	6022      	str	r2, [r4, #0]
 800b78a:	d504      	bpl.n	800b796 <__sflush_r+0x7e>
 800b78c:	1c42      	adds	r2, r0, #1
 800b78e:	d101      	bne.n	800b794 <__sflush_r+0x7c>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b903      	cbnz	r3, 800b796 <__sflush_r+0x7e>
 800b794:	6560      	str	r0, [r4, #84]	; 0x54
 800b796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b798:	602f      	str	r7, [r5, #0]
 800b79a:	2900      	cmp	r1, #0
 800b79c:	d0c9      	beq.n	800b732 <__sflush_r+0x1a>
 800b79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d002      	beq.n	800b7ac <__sflush_r+0x94>
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7ff fbea 	bl	800af80 <_free_r>
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b0:	e7c0      	b.n	800b734 <__sflush_r+0x1c>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b0      	blx	r6
 800b7b8:	1c41      	adds	r1, r0, #1
 800b7ba:	d1c8      	bne.n	800b74e <__sflush_r+0x36>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0c5      	beq.n	800b74e <__sflush_r+0x36>
 800b7c2:	2b1d      	cmp	r3, #29
 800b7c4:	d001      	beq.n	800b7ca <__sflush_r+0xb2>
 800b7c6:	2b16      	cmp	r3, #22
 800b7c8:	d101      	bne.n	800b7ce <__sflush_r+0xb6>
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	e7b1      	b.n	800b732 <__sflush_r+0x1a>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	e7ad      	b.n	800b734 <__sflush_r+0x1c>
 800b7d8:	690f      	ldr	r7, [r1, #16]
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	d0a9      	beq.n	800b732 <__sflush_r+0x1a>
 800b7de:	0793      	lsls	r3, r2, #30
 800b7e0:	680e      	ldr	r6, [r1, #0]
 800b7e2:	bf08      	it	eq
 800b7e4:	694b      	ldreq	r3, [r1, #20]
 800b7e6:	600f      	str	r7, [r1, #0]
 800b7e8:	bf18      	it	ne
 800b7ea:	2300      	movne	r3, #0
 800b7ec:	eba6 0807 	sub.w	r8, r6, r7
 800b7f0:	608b      	str	r3, [r1, #8]
 800b7f2:	f1b8 0f00 	cmp.w	r8, #0
 800b7f6:	dd9c      	ble.n	800b732 <__sflush_r+0x1a>
 800b7f8:	6a21      	ldr	r1, [r4, #32]
 800b7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7fc:	4643      	mov	r3, r8
 800b7fe:	463a      	mov	r2, r7
 800b800:	4628      	mov	r0, r5
 800b802:	47b0      	blx	r6
 800b804:	2800      	cmp	r0, #0
 800b806:	dc06      	bgt.n	800b816 <__sflush_r+0xfe>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	f04f 30ff 	mov.w	r0, #4294967295
 800b814:	e78e      	b.n	800b734 <__sflush_r+0x1c>
 800b816:	4407      	add	r7, r0
 800b818:	eba8 0800 	sub.w	r8, r8, r0
 800b81c:	e7e9      	b.n	800b7f2 <__sflush_r+0xda>
 800b81e:	bf00      	nop
 800b820:	dfbffffe 	.word	0xdfbffffe

0800b824 <_fflush_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	690b      	ldr	r3, [r1, #16]
 800b828:	4605      	mov	r5, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	b913      	cbnz	r3, 800b834 <_fflush_r+0x10>
 800b82e:	2500      	movs	r5, #0
 800b830:	4628      	mov	r0, r5
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	b118      	cbz	r0, 800b83e <_fflush_r+0x1a>
 800b836:	6a03      	ldr	r3, [r0, #32]
 800b838:	b90b      	cbnz	r3, 800b83e <_fflush_r+0x1a>
 800b83a:	f7ff fa99 	bl	800ad70 <__sinit>
 800b83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0f3      	beq.n	800b82e <_fflush_r+0xa>
 800b846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b848:	07d0      	lsls	r0, r2, #31
 800b84a:	d404      	bmi.n	800b856 <_fflush_r+0x32>
 800b84c:	0599      	lsls	r1, r3, #22
 800b84e:	d402      	bmi.n	800b856 <_fflush_r+0x32>
 800b850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b852:	f7ff fb92 	bl	800af7a <__retarget_lock_acquire_recursive>
 800b856:	4628      	mov	r0, r5
 800b858:	4621      	mov	r1, r4
 800b85a:	f7ff ff5d 	bl	800b718 <__sflush_r>
 800b85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b860:	07da      	lsls	r2, r3, #31
 800b862:	4605      	mov	r5, r0
 800b864:	d4e4      	bmi.n	800b830 <_fflush_r+0xc>
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	059b      	lsls	r3, r3, #22
 800b86a:	d4e1      	bmi.n	800b830 <_fflush_r+0xc>
 800b86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86e:	f7ff fb85 	bl	800af7c <__retarget_lock_release_recursive>
 800b872:	e7dd      	b.n	800b830 <_fflush_r+0xc>

0800b874 <__swbuf_r>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	460e      	mov	r6, r1
 800b878:	4614      	mov	r4, r2
 800b87a:	4605      	mov	r5, r0
 800b87c:	b118      	cbz	r0, 800b886 <__swbuf_r+0x12>
 800b87e:	6a03      	ldr	r3, [r0, #32]
 800b880:	b90b      	cbnz	r3, 800b886 <__swbuf_r+0x12>
 800b882:	f7ff fa75 	bl	800ad70 <__sinit>
 800b886:	69a3      	ldr	r3, [r4, #24]
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	071a      	lsls	r2, r3, #28
 800b88e:	d525      	bpl.n	800b8dc <__swbuf_r+0x68>
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	b31b      	cbz	r3, 800b8dc <__swbuf_r+0x68>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	6922      	ldr	r2, [r4, #16]
 800b898:	1a98      	subs	r0, r3, r2
 800b89a:	6963      	ldr	r3, [r4, #20]
 800b89c:	b2f6      	uxtb	r6, r6
 800b89e:	4283      	cmp	r3, r0
 800b8a0:	4637      	mov	r7, r6
 800b8a2:	dc04      	bgt.n	800b8ae <__swbuf_r+0x3a>
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f7ff ffbc 	bl	800b824 <_fflush_r>
 800b8ac:	b9e0      	cbnz	r0, 800b8e8 <__swbuf_r+0x74>
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	60a3      	str	r3, [r4, #8]
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	6022      	str	r2, [r4, #0]
 800b8ba:	701e      	strb	r6, [r3, #0]
 800b8bc:	6962      	ldr	r2, [r4, #20]
 800b8be:	1c43      	adds	r3, r0, #1
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d004      	beq.n	800b8ce <__swbuf_r+0x5a>
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	07db      	lsls	r3, r3, #31
 800b8c8:	d506      	bpl.n	800b8d8 <__swbuf_r+0x64>
 800b8ca:	2e0a      	cmp	r6, #10
 800b8cc:	d104      	bne.n	800b8d8 <__swbuf_r+0x64>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7ff ffa7 	bl	800b824 <_fflush_r>
 800b8d6:	b938      	cbnz	r0, 800b8e8 <__swbuf_r+0x74>
 800b8d8:	4638      	mov	r0, r7
 800b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 f806 	bl	800b8f0 <__swsetup_r>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d0d5      	beq.n	800b894 <__swbuf_r+0x20>
 800b8e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b8ec:	e7f4      	b.n	800b8d8 <__swbuf_r+0x64>
	...

0800b8f0 <__swsetup_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4b2a      	ldr	r3, [pc, #168]	; (800b99c <__swsetup_r+0xac>)
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	b118      	cbz	r0, 800b904 <__swsetup_r+0x14>
 800b8fc:	6a03      	ldr	r3, [r0, #32]
 800b8fe:	b90b      	cbnz	r3, 800b904 <__swsetup_r+0x14>
 800b900:	f7ff fa36 	bl	800ad70 <__sinit>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b90a:	0718      	lsls	r0, r3, #28
 800b90c:	d422      	bmi.n	800b954 <__swsetup_r+0x64>
 800b90e:	06d9      	lsls	r1, r3, #27
 800b910:	d407      	bmi.n	800b922 <__swsetup_r+0x32>
 800b912:	2309      	movs	r3, #9
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e034      	b.n	800b98c <__swsetup_r+0x9c>
 800b922:	0758      	lsls	r0, r3, #29
 800b924:	d512      	bpl.n	800b94c <__swsetup_r+0x5c>
 800b926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b928:	b141      	cbz	r1, 800b93c <__swsetup_r+0x4c>
 800b92a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b92e:	4299      	cmp	r1, r3
 800b930:	d002      	beq.n	800b938 <__swsetup_r+0x48>
 800b932:	4628      	mov	r0, r5
 800b934:	f7ff fb24 	bl	800af80 <_free_r>
 800b938:	2300      	movs	r3, #0
 800b93a:	6363      	str	r3, [r4, #52]	; 0x34
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	2300      	movs	r3, #0
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f043 0308 	orr.w	r3, r3, #8
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	b94b      	cbnz	r3, 800b96c <__swsetup_r+0x7c>
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b95e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b962:	d003      	beq.n	800b96c <__swsetup_r+0x7c>
 800b964:	4621      	mov	r1, r4
 800b966:	4628      	mov	r0, r5
 800b968:	f000 f850 	bl	800ba0c <__smakebuf_r>
 800b96c:	89a0      	ldrh	r0, [r4, #12]
 800b96e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b972:	f010 0301 	ands.w	r3, r0, #1
 800b976:	d00a      	beq.n	800b98e <__swsetup_r+0x9e>
 800b978:	2300      	movs	r3, #0
 800b97a:	60a3      	str	r3, [r4, #8]
 800b97c:	6963      	ldr	r3, [r4, #20]
 800b97e:	425b      	negs	r3, r3
 800b980:	61a3      	str	r3, [r4, #24]
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	b943      	cbnz	r3, 800b998 <__swsetup_r+0xa8>
 800b986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b98a:	d1c4      	bne.n	800b916 <__swsetup_r+0x26>
 800b98c:	bd38      	pop	{r3, r4, r5, pc}
 800b98e:	0781      	lsls	r1, r0, #30
 800b990:	bf58      	it	pl
 800b992:	6963      	ldrpl	r3, [r4, #20]
 800b994:	60a3      	str	r3, [r4, #8]
 800b996:	e7f4      	b.n	800b982 <__swsetup_r+0x92>
 800b998:	2000      	movs	r0, #0
 800b99a:	e7f7      	b.n	800b98c <__swsetup_r+0x9c>
 800b99c:	200000a4 	.word	0x200000a4

0800b9a0 <_sbrk_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d06      	ldr	r5, [pc, #24]	; (800b9bc <_sbrk_r+0x1c>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	602b      	str	r3, [r5, #0]
 800b9ac:	f7f8 ff78 	bl	80048a0 <_sbrk>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_sbrk_r+0x1a>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_sbrk_r+0x1a>
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	20002e64 	.word	0x20002e64

0800b9c0 <__swhatbuf_r>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	b096      	sub	sp, #88	; 0x58
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	461e      	mov	r6, r3
 800b9d0:	da0d      	bge.n	800b9ee <__swhatbuf_r+0x2e>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b9d8:	f04f 0100 	mov.w	r1, #0
 800b9dc:	bf0c      	ite	eq
 800b9de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b9e2:	2340      	movne	r3, #64	; 0x40
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	6031      	str	r1, [r6, #0]
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	b016      	add	sp, #88	; 0x58
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	466a      	mov	r2, sp
 800b9f0:	f000 f848 	bl	800ba84 <_fstat_r>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	dbec      	blt.n	800b9d2 <__swhatbuf_r+0x12>
 800b9f8:	9901      	ldr	r1, [sp, #4]
 800b9fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b9fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba02:	4259      	negs	r1, r3
 800ba04:	4159      	adcs	r1, r3
 800ba06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba0a:	e7eb      	b.n	800b9e4 <__swhatbuf_r+0x24>

0800ba0c <__smakebuf_r>:
 800ba0c:	898b      	ldrh	r3, [r1, #12]
 800ba0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba10:	079d      	lsls	r5, r3, #30
 800ba12:	4606      	mov	r6, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	d507      	bpl.n	800ba28 <__smakebuf_r+0x1c>
 800ba18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	2301      	movs	r3, #1
 800ba22:	6163      	str	r3, [r4, #20]
 800ba24:	b002      	add	sp, #8
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	ab01      	add	r3, sp, #4
 800ba2a:	466a      	mov	r2, sp
 800ba2c:	f7ff ffc8 	bl	800b9c0 <__swhatbuf_r>
 800ba30:	9900      	ldr	r1, [sp, #0]
 800ba32:	4605      	mov	r5, r0
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff fb0f 	bl	800b058 <_malloc_r>
 800ba3a:	b948      	cbnz	r0, 800ba50 <__smakebuf_r+0x44>
 800ba3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d4ef      	bmi.n	800ba24 <__smakebuf_r+0x18>
 800ba44:	f023 0303 	bic.w	r3, r3, #3
 800ba48:	f043 0302 	orr.w	r3, r3, #2
 800ba4c:	81a3      	strh	r3, [r4, #12]
 800ba4e:	e7e3      	b.n	800ba18 <__smakebuf_r+0xc>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	6020      	str	r0, [r4, #0]
 800ba54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	9b00      	ldr	r3, [sp, #0]
 800ba5c:	6163      	str	r3, [r4, #20]
 800ba5e:	9b01      	ldr	r3, [sp, #4]
 800ba60:	6120      	str	r0, [r4, #16]
 800ba62:	b15b      	cbz	r3, 800ba7c <__smakebuf_r+0x70>
 800ba64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f81d 	bl	800baa8 <_isatty_r>
 800ba6e:	b128      	cbz	r0, 800ba7c <__smakebuf_r+0x70>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	431d      	orrs	r5, r3
 800ba80:	81a5      	strh	r5, [r4, #12]
 800ba82:	e7cf      	b.n	800ba24 <__smakebuf_r+0x18>

0800ba84 <_fstat_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_fstat_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f8 fedc 	bl	800484e <_fstat>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_fstat_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_fstat_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	20002e64 	.word	0x20002e64

0800baa8 <_isatty_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d06      	ldr	r5, [pc, #24]	; (800bac4 <_isatty_r+0x1c>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f8 fedb 	bl	800486e <_isatty>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_isatty_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_isatty_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	20002e64 	.word	0x20002e64

0800bac8 <_init>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	bf00      	nop
 800bacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bace:	bc08      	pop	{r3}
 800bad0:	469e      	mov	lr, r3
 800bad2:	4770      	bx	lr

0800bad4 <_fini>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	bf00      	nop
 800bad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bada:	bc08      	pop	{r3}
 800badc:	469e      	mov	lr, r3
 800bade:	4770      	bx	lr
