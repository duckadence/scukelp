
winchcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800c808  0800c808  0001c808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d184  0800d184  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d18c  0800d18c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  200001ec  0800d380  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800d380  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b93  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003076  00000000  00000000  00034df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9e  00000000  00000000  00039148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023516  00000000  00000000  00039fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8a1  00000000  00000000  0005d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7cc3  00000000  00000000  00077d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061e8  00000000  00000000  0013fa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00145c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7f0 	.word	0x0800c7f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c7f0 	.word	0x0800c7f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b9a6 	b.w	8000f8c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f83c 	bl	8000cc4 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff33 	bl	8000acc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fca9 	bl	80005e8 <__aeabi_dmul>
 8000c96:	f7ff ff57 	bl	8000b48 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc2a 	bl	80004f4 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fca0 	bl	80005e8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fae2 	bl	8000278 <__aeabi_dsub>
 8000cb4:	f7ff ff48 	bl	8000b48 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9e08      	ldr	r6, [sp, #32]
 8000cca:	460d      	mov	r5, r1
 8000ccc:	4604      	mov	r4, r0
 8000cce:	460f      	mov	r7, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14a      	bne.n	8000d6a <__udivmoddi4+0xa6>
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0xe2>
 8000cda:	fab2 f382 	clz	r3, r2
 8000cde:	b143      	cbz	r3, 8000cf2 <__udivmoddi4+0x2e>
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	f1c3 0220 	rsb	r2, r3, #32
 8000ce8:	409f      	lsls	r7, r3
 8000cea:	fa20 f202 	lsr.w	r2, r0, r2
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	409c      	lsls	r4, r3
 8000cf2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf6:	fa1f f58c 	uxth.w	r5, ip
 8000cfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cfe:	0c22      	lsrs	r2, r4, #16
 8000d00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d08:	fb01 f005 	mul.w	r0, r1, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x62>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d18:	f080 811c 	bcs.w	8000f54 <__udivmoddi4+0x290>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f240 8119 	bls.w	8000f54 <__udivmoddi4+0x290>
 8000d22:	3902      	subs	r1, #2
 8000d24:	4462      	add	r2, ip
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b2a4      	uxth	r4, r4
 8000d2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d36:	fb00 f505 	mul.w	r5, r0, r5
 8000d3a:	42a5      	cmp	r5, r4
 8000d3c:	d90a      	bls.n	8000d54 <__udivmoddi4+0x90>
 8000d3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x294>
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x294>
 8000d50:	4464      	add	r4, ip
 8000d52:	3802      	subs	r0, #2
 8000d54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	b11e      	cbz	r6, 8000d66 <__udivmoddi4+0xa2>
 8000d5e:	40dc      	lsrs	r4, r3
 8000d60:	2300      	movs	r3, #0
 8000d62:	e9c6 4300 	strd	r4, r3, [r6]
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0xbc>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f000 80ed 	beq.w	8000f4e <__udivmoddi4+0x28a>
 8000d74:	2100      	movs	r1, #0
 8000d76:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	fab3 f183 	clz	r1, r3
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d149      	bne.n	8000e1c <__udivmoddi4+0x158>
 8000d88:	42ab      	cmp	r3, r5
 8000d8a:	d302      	bcc.n	8000d92 <__udivmoddi4+0xce>
 8000d8c:	4282      	cmp	r2, r0
 8000d8e:	f200 80f8 	bhi.w	8000f82 <__udivmoddi4+0x2be>
 8000d92:	1a84      	subs	r4, r0, r2
 8000d94:	eb65 0203 	sbc.w	r2, r5, r3
 8000d98:	2001      	movs	r0, #1
 8000d9a:	4617      	mov	r7, r2
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d0e2      	beq.n	8000d66 <__udivmoddi4+0xa2>
 8000da0:	e9c6 4700 	strd	r4, r7, [r6]
 8000da4:	e7df      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000da6:	b902      	cbnz	r2, 8000daa <__udivmoddi4+0xe6>
 8000da8:	deff      	udf	#255	; 0xff
 8000daa:	fab2 f382 	clz	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 8090 	bne.w	8000ed4 <__udivmoddi4+0x210>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc8:	0c22      	lsrs	r2, r4, #16
 8000dca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dce:	fb0e f005 	mul.w	r0, lr, r5
 8000dd2:	4290      	cmp	r0, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x124>
 8000dd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x122>
 8000de0:	4290      	cmp	r0, r2
 8000de2:	f200 80cb 	bhi.w	8000f7c <__udivmoddi4+0x2b8>
 8000de6:	4645      	mov	r5, r8
 8000de8:	1a12      	subs	r2, r2, r0
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df0:	fb07 2210 	mls	r2, r7, r0, r2
 8000df4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x14e>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e08:	d202      	bcs.n	8000e10 <__udivmoddi4+0x14c>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f200 80bb 	bhi.w	8000f86 <__udivmoddi4+0x2c2>
 8000e10:	4610      	mov	r0, r2
 8000e12:	eba4 040e 	sub.w	r4, r4, lr
 8000e16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1a:	e79f      	b.n	8000d5c <__udivmoddi4+0x98>
 8000e1c:	f1c1 0720 	rsb	r7, r1, #32
 8000e20:	408b      	lsls	r3, r1
 8000e22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e32:	40fd      	lsrs	r5, r7
 8000e34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e38:	4323      	orrs	r3, r4
 8000e3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e3e:	fa1f fe8c 	uxth.w	lr, ip
 8000e42:	fb09 5518 	mls	r5, r9, r8, r5
 8000e46:	0c1c      	lsrs	r4, r3, #16
 8000e48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e50:	42a5      	cmp	r5, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x1b0>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e64:	f080 8088 	bcs.w	8000f78 <__udivmoddi4+0x2b4>
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	f240 8085 	bls.w	8000f78 <__udivmoddi4+0x2b4>
 8000e6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e72:	4464      	add	r4, ip
 8000e74:	1b64      	subs	r4, r4, r5
 8000e76:	b29d      	uxth	r5, r3
 8000e78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e88:	45a6      	cmp	lr, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x1da>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e94:	d26c      	bcs.n	8000f70 <__udivmoddi4+0x2ac>
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	d96a      	bls.n	8000f70 <__udivmoddi4+0x2ac>
 8000e9a:	3b02      	subs	r3, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	46c8      	mov	r8, r9
 8000eae:	46ae      	mov	lr, r5
 8000eb0:	d356      	bcc.n	8000f60 <__udivmoddi4+0x29c>
 8000eb2:	d053      	beq.n	8000f5c <__udivmoddi4+0x298>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x208>
 8000eb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eba:	eb64 040e 	sbc.w	r4, r4, lr
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40ca      	lsrs	r2, r1
 8000ec4:	40cc      	lsrs	r4, r1
 8000ec6:	4317      	orrs	r7, r2
 8000ec8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed4:	f1c3 0120 	rsb	r1, r3, #32
 8000ed8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000edc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee4:	409d      	lsls	r5, r3
 8000ee6:	432a      	orrs	r2, r5
 8000ee8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef8:	0c11      	lsrs	r1, r2, #16
 8000efa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000efe:	fb00 f50e 	mul.w	r5, r0, lr
 8000f02:	428d      	cmp	r5, r1
 8000f04:	fa04 f403 	lsl.w	r4, r4, r3
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x258>
 8000f0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f12:	d22f      	bcs.n	8000f74 <__udivmoddi4+0x2b0>
 8000f14:	428d      	cmp	r5, r1
 8000f16:	d92d      	bls.n	8000f74 <__udivmoddi4+0x2b0>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1b49      	subs	r1, r1, r5
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f24:	fb07 1115 	mls	r1, r7, r5, r1
 8000f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f30:	4291      	cmp	r1, r2
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x282>
 8000f34:	eb1c 0202 	adds.w	r2, ip, r2
 8000f38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3c:	d216      	bcs.n	8000f6c <__udivmoddi4+0x2a8>
 8000f3e:	4291      	cmp	r1, r2
 8000f40:	d914      	bls.n	8000f6c <__udivmoddi4+0x2a8>
 8000f42:	3d02      	subs	r5, #2
 8000f44:	4462      	add	r2, ip
 8000f46:	1a52      	subs	r2, r2, r1
 8000f48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f4c:	e738      	b.n	8000dc0 <__udivmoddi4+0xfc>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000f54:	4639      	mov	r1, r7
 8000f56:	e6e6      	b.n	8000d26 <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x90>
 8000f5c:	4548      	cmp	r0, r9
 8000f5e:	d2a9      	bcs.n	8000eb4 <__udivmoddi4+0x1f0>
 8000f60:	ebb9 0802 	subs.w	r8, r9, r2
 8000f64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	e7a3      	b.n	8000eb4 <__udivmoddi4+0x1f0>
 8000f6c:	4645      	mov	r5, r8
 8000f6e:	e7ea      	b.n	8000f46 <__udivmoddi4+0x282>
 8000f70:	462b      	mov	r3, r5
 8000f72:	e794      	b.n	8000e9e <__udivmoddi4+0x1da>
 8000f74:	4640      	mov	r0, r8
 8000f76:	e7d1      	b.n	8000f1c <__udivmoddi4+0x258>
 8000f78:	46d0      	mov	r8, sl
 8000f7a:	e77b      	b.n	8000e74 <__udivmoddi4+0x1b0>
 8000f7c:	3d02      	subs	r5, #2
 8000f7e:	4462      	add	r2, ip
 8000f80:	e732      	b.n	8000de8 <__udivmoddi4+0x124>
 8000f82:	4608      	mov	r0, r1
 8000f84:	e70a      	b.n	8000d9c <__udivmoddi4+0xd8>
 8000f86:	4464      	add	r4, ip
 8000f88:	3802      	subs	r0, #2
 8000f8a:	e742      	b.n	8000e12 <__udivmoddi4+0x14e>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <SELECT+0x1c>)
 8000f9c:	f001 ffd4 	bl	8002f48 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 fcf1 	bl	8002988 <HAL_Delay>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	48000400 	.word	0x48000400

08000fb0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <DESELECT+0x1c>)
 8000fbc:	f001 ffc4 	bl	8002f48 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f001 fce1 	bl	8002988 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fda:	bf00      	nop
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SPI_TxByte+0x30>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d1f8      	bne.n	8000fdc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fea:	1df9      	adds	r1, r7, #7
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <SPI_TxByte+0x30>)
 8000ff2:	f003 fe44 	bl	8004c7e <HAL_SPI_Transmit>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000264 	.word	0x20000264

08001004 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001010:	bf00      	nop
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SPI_TxBuffer+0x30>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b02      	cmp	r3, #2
 800101e:	d1f8      	bne.n	8001012 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <SPI_TxBuffer+0x30>)
 8001028:	f003 fe29 	bl	8004c7e <HAL_SPI_Transmit>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000264 	.word	0x20000264

08001038 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001042:	bf00      	nop
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <SPI_RxByte+0x34>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b02      	cmp	r3, #2
 8001050:	d1f8      	bne.n	8001044 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001052:	1dba      	adds	r2, r7, #6
 8001054:	1df9      	adds	r1, r7, #7
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <SPI_RxByte+0x34>)
 800105e:	f003 ff83 	bl	8004f68 <HAL_SPI_TransmitReceive>

  return data;
 8001062:	79bb      	ldrb	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000264 	.word	0x20000264

08001070 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001078:	f7ff ffde 	bl	8001038 <SPI_RxByte>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <SD_ReadyWait+0x30>)
 8001094:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001098:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800109a:	f7ff ffcd 	bl	8001038 <SPI_RxByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d003      	beq.n	80010b0 <SD_ReadyWait+0x24>
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SD_ReadyWait+0x30>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f4      	bne.n	800109a <SD_ReadyWait+0xe>

  return res;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000020a 	.word	0x2000020a

080010c0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80010c6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80010ca:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80010cc:	f7ff ff70 	bl	8000fb0 <DESELECT>
  for(int i = 0; i < 10; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	e005      	b.n	80010e2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff7a 	bl	8000fd0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	3301      	adds	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	ddf6      	ble.n	80010d6 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80010e8:	f7ff ff52 	bl	8000f90 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001100:	2395      	movs	r3, #149	; 0x95
 8001102:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001104:	463b      	mov	r3, r7
 8001106:	2106      	movs	r1, #6
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff7b 	bl	8001004 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800110e:	e002      	b.n	8001116 <SD_PowerOn+0x56>
  {
    cnt--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3b01      	subs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001116:	f7ff ff8f 	bl	8001038 <SPI_RxByte>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d002      	beq.n	8001126 <SD_PowerOn+0x66>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f4      	bne.n	8001110 <SD_PowerOn+0x50>
  }

  DESELECT();
 8001126:	f7ff ff43 	bl	8000fb0 <DESELECT>
  SPI_TxByte(0XFF);
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	f7ff ff50 	bl	8000fd0 <SPI_TxByte>

  PowerFlag = 1;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <SD_PowerOn+0x80>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000020d 	.word	0x2000020d

08001144 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <SD_PowerOff+0x14>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	2000020d 	.word	0x2000020d

0800115c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <SD_CheckPower+0x14>)
 8001162:	781b      	ldrb	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000020d 	.word	0x2000020d

08001174 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <SD_RxDataBlock+0x58>)
 8001180:	22c8      	movs	r2, #200	; 0xc8
 8001182:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8001184:	f7ff ff58 	bl	8001038 <SPI_RxByte>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d103      	bne.n	800119a <SD_RxDataBlock+0x26>
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <SD_RxDataBlock+0x58>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f4      	bne.n	8001184 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2bfe      	cmp	r3, #254	; 0xfe
 800119e:	d001      	beq.n	80011a4 <SD_RxDataBlock+0x30>
 80011a0:	2300      	movs	r3, #0
 80011a2:	e00f      	b.n	80011c4 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff60 	bl	8001070 <SPI_RxBytePtr>
  } while(len--);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	603a      	str	r2, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80011ba:	f7ff ff3d 	bl	8001038 <SPI_RxByte>
  SPI_RxByte();
 80011be:	f7ff ff3b 	bl	8001038 <SPI_RxByte>

  return TRUE;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000208 	.word	0x20000208

080011d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80011e0:	f7ff ff54 	bl	800108c <SD_ReadyWait>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	d001      	beq.n	80011ee <SD_TxDataBlock+0x1e>
 80011ea:	2300      	movs	r3, #0
 80011ec:	e02f      	b.n	800124e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff feed 	bl	8000fd0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	2bfd      	cmp	r3, #253	; 0xfd
 80011fa:	d020      	beq.n	800123e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff feff 	bl	8001004 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8001206:	f7ff ff17 	bl	8001038 <SPI_RxByte>
    SPI_RxByte();
 800120a:	f7ff ff15 	bl	8001038 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800120e:	e00b      	b.n	8001228 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001210:	f7ff ff12 	bl	8001038 <SPI_RxByte>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b05      	cmp	r3, #5
 8001220:	d006      	beq.n	8001230 <SD_TxDataBlock+0x60>
      i++;
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	3301      	adds	r3, #1
 8001226:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	2b40      	cmp	r3, #64	; 0x40
 800122c:	d9f0      	bls.n	8001210 <SD_TxDataBlock+0x40>
 800122e:	e000      	b.n	8001232 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001230:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001232:	bf00      	nop
 8001234:	f7ff ff00 	bl	8001038 <SPI_RxByte>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0fa      	beq.n	8001234 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	2b05      	cmp	r3, #5
 8001246:	d101      	bne.n	800124c <SD_TxDataBlock+0x7c>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <SD_TxDataBlock+0x7e>

  return FALSE;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	6039      	str	r1, [r7, #0]
 8001260:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001262:	f7ff ff13 	bl	800108c <SD_ReadyWait>
 8001266:	4603      	mov	r3, r0
 8001268:	2bff      	cmp	r3, #255	; 0xff
 800126a:	d001      	beq.n	8001270 <SD_SendCmd+0x1a>
 800126c:	23ff      	movs	r3, #255	; 0xff
 800126e:	e042      	b.n	80012f6 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff feac 	bl	8000fd0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	0e1b      	lsrs	r3, r3, #24
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fea6 	bl	8000fd0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	0c1b      	lsrs	r3, r3, #16
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fea0 	bl	8000fd0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe9a 	bl	8000fd0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe95 	bl	8000fd0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d102      	bne.n	80012b2 <SD_SendCmd+0x5c>
 80012ac:	2395      	movs	r3, #149	; 0x95
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e007      	b.n	80012c2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b48      	cmp	r3, #72	; 0x48
 80012b6:	d102      	bne.n	80012be <SD_SendCmd+0x68>
 80012b8:	2387      	movs	r3, #135	; 0x87
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e001      	b.n	80012c2 <SD_SendCmd+0x6c>
  else crc = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe83 	bl	8000fd0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b4c      	cmp	r3, #76	; 0x4c
 80012ce:	d101      	bne.n	80012d4 <SD_SendCmd+0x7e>
 80012d0:	f7ff feb2 	bl	8001038 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80012d4:	230a      	movs	r3, #10
 80012d6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80012d8:	f7ff feae 	bl	8001038 <SPI_RxByte>
 80012dc:	4603      	mov	r3, r0
 80012de:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80012e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da05      	bge.n	80012f4 <SD_SendCmd+0x9e>
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	73bb      	strb	r3, [r7, #14]
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f1      	bne.n	80012d8 <SD_SendCmd+0x82>

  return res;
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SD_disk_initialize+0x14>
 8001310:	2301      	movs	r3, #1
 8001312:	e0d1      	b.n	80014b8 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001314:	4b6a      	ldr	r3, [pc, #424]	; (80014c0 <SD_disk_initialize+0x1c0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <SD_disk_initialize+0x2a>
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <SD_disk_initialize+0x1c0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	e0c6      	b.n	80014b8 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800132a:	f7ff fec9 	bl	80010c0 <SD_PowerOn>

  /* slave select */
  SELECT();
 800132e:	f7ff fe2f 	bl	8000f90 <SELECT>

  /* check disk type */
  type = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001336:	2100      	movs	r1, #0
 8001338:	2040      	movs	r0, #64	; 0x40
 800133a:	f7ff ff8c 	bl	8001256 <SD_SendCmd>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	f040 80a1 	bne.w	8001488 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <SD_disk_initialize+0x1c4>)
 8001348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800134e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001352:	2048      	movs	r0, #72	; 0x48
 8001354:	f7ff ff7f 	bl	8001256 <SD_SendCmd>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d155      	bne.n	800140a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e00c      	b.n	800137e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8001364:	7bfc      	ldrb	r4, [r7, #15]
 8001366:	f7ff fe67 	bl	8001038 <SPI_RxByte>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	f104 0310 	add.w	r3, r4, #16
 8001372:	443b      	add	r3, r7
 8001374:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3301      	adds	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d9ef      	bls.n	8001364 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001384:	7abb      	ldrb	r3, [r7, #10]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d17e      	bne.n	8001488 <SD_disk_initialize+0x188>
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2baa      	cmp	r3, #170	; 0xaa
 800138e:	d17b      	bne.n	8001488 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001390:	2100      	movs	r1, #0
 8001392:	2077      	movs	r0, #119	; 0x77
 8001394:	f7ff ff5f 	bl	8001256 <SD_SendCmd>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d807      	bhi.n	80013ae <SD_disk_initialize+0xae>
 800139e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013a2:	2069      	movs	r0, #105	; 0x69
 80013a4:	f7ff ff57 	bl	8001256 <SD_SendCmd>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <SD_disk_initialize+0x1c4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ec      	bne.n	8001390 <SD_disk_initialize+0x90>
 80013b6:	e000      	b.n	80013ba <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013b8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <SD_disk_initialize+0x1c4>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d062      	beq.n	8001488 <SD_disk_initialize+0x188>
 80013c2:	2100      	movs	r1, #0
 80013c4:	207a      	movs	r0, #122	; 0x7a
 80013c6:	f7ff ff46 	bl	8001256 <SD_SendCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15b      	bne.n	8001488 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e00c      	b.n	80013f0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80013d6:	7bfc      	ldrb	r4, [r7, #15]
 80013d8:	f7ff fe2e 	bl	8001038 <SPI_RxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	f104 0310 	add.w	r3, r4, #16
 80013e4:	443b      	add	r3, r7
 80013e6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d9ef      	bls.n	80013d6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013f6:	7a3b      	ldrb	r3, [r7, #8]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SD_disk_initialize+0x104>
 8001400:	230c      	movs	r3, #12
 8001402:	e000      	b.n	8001406 <SD_disk_initialize+0x106>
 8001404:	2304      	movs	r3, #4
 8001406:	73bb      	strb	r3, [r7, #14]
 8001408:	e03e      	b.n	8001488 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800140a:	2100      	movs	r1, #0
 800140c:	2077      	movs	r0, #119	; 0x77
 800140e:	f7ff ff22 	bl	8001256 <SD_SendCmd>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d808      	bhi.n	800142a <SD_disk_initialize+0x12a>
 8001418:	2100      	movs	r1, #0
 800141a:	2069      	movs	r0, #105	; 0x69
 800141c:	f7ff ff1b 	bl	8001256 <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d801      	bhi.n	800142a <SD_disk_initialize+0x12a>
 8001426:	2302      	movs	r3, #2
 8001428:	e000      	b.n	800142c <SD_disk_initialize+0x12c>
 800142a:	2301      	movs	r3, #1
 800142c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d10e      	bne.n	8001452 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001434:	2100      	movs	r1, #0
 8001436:	2077      	movs	r0, #119	; 0x77
 8001438:	f7ff ff0d 	bl	8001256 <SD_SendCmd>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d80e      	bhi.n	8001460 <SD_disk_initialize+0x160>
 8001442:	2100      	movs	r1, #0
 8001444:	2069      	movs	r0, #105	; 0x69
 8001446:	f7ff ff06 	bl	8001256 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <SD_disk_initialize+0x160>
 8001450:	e00c      	b.n	800146c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001452:	2100      	movs	r1, #0
 8001454:	2041      	movs	r0, #65	; 0x41
 8001456:	f7ff fefe 	bl	8001256 <SD_SendCmd>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <SD_disk_initialize+0x1c4>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e2      	bne.n	800142e <SD_disk_initialize+0x12e>
 8001468:	e000      	b.n	800146c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800146a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <SD_disk_initialize+0x1c4>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <SD_disk_initialize+0x184>
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	2050      	movs	r0, #80	; 0x50
 800147a:	f7ff feec 	bl	8001256 <SD_SendCmd>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SD_disk_initialize+0x188>
 8001484:	2300      	movs	r3, #0
 8001486:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <SD_disk_initialize+0x1c8>)
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 800148e:	f7ff fd8f 	bl	8000fb0 <DESELECT>
  SPI_RxByte();
 8001492:	f7ff fdd1 	bl	8001038 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <SD_disk_initialize+0x1c0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SD_disk_initialize+0x1c0>)
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e001      	b.n	80014b2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014ae:	f7ff fe49 	bl	8001144 <SD_PowerOff>
  }

  return Stat;
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SD_disk_initialize+0x1c0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000208 	.word	0x20000208
 80014c8:	2000020c 	.word	0x2000020c

080014cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SD_disk_status+0x14>
 80014dc:	2301      	movs	r3, #1
 80014de:	e002      	b.n	80014e6 <SD_disk_status+0x1a>
  return Stat;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SD_disk_status+0x28>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000

080014f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <SD_disk_read+0x1c>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <SD_disk_read+0x20>
 8001514:	2304      	movs	r3, #4
 8001516:	e051      	b.n	80015bc <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <SD_disk_read+0xcc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SD_disk_read+0x32>
 8001526:	2303      	movs	r3, #3
 8001528:	e048      	b.n	80015bc <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <SD_disk_read+0xd0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <SD_disk_read+0x44>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	607b      	str	r3, [r7, #4]

  SELECT();
 800153c:	f7ff fd28 	bl	8000f90 <SELECT>

  if (count == 1)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d111      	bne.n	800156a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2051      	movs	r0, #81	; 0x51
 800154a:	f7ff fe84 	bl	8001256 <SD_SendCmd>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d129      	bne.n	80015a8 <SD_disk_read+0xb0>
 8001554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001558:	68b8      	ldr	r0, [r7, #8]
 800155a:	f7ff fe0b 	bl	8001174 <SD_RxDataBlock>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d021      	beq.n	80015a8 <SD_disk_read+0xb0>
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	e01e      	b.n	80015a8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	2052      	movs	r0, #82	; 0x52
 800156e:	f7ff fe72 	bl	8001256 <SD_SendCmd>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d117      	bne.n	80015a8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f7ff fdf9 	bl	8001174 <SD_RxDataBlock>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00a      	beq.n	800159e <SD_disk_read+0xa6>
        buff += 512;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800158e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ed      	bne.n	8001578 <SD_disk_read+0x80>
 800159c:	e000      	b.n	80015a0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800159e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	204c      	movs	r0, #76	; 0x4c
 80015a4:	f7ff fe57 	bl	8001256 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80015a8:	f7ff fd02 	bl	8000fb0 <DESELECT>
  SPI_RxByte();
 80015ac:	f7ff fd44 	bl	8001038 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	2000020c 	.word	0x2000020c

080015cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <SD_disk_write+0x1c>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <SD_disk_write+0x20>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e06b      	b.n	80016c4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015ec:	4b37      	ldr	r3, [pc, #220]	; (80016cc <SD_disk_write+0x100>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SD_disk_write+0x32>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e062      	b.n	80016c4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <SD_disk_write+0x100>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SD_disk_write+0x44>
 800160c:	2302      	movs	r3, #2
 800160e:	e059      	b.n	80016c4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <SD_disk_write+0x104>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <SD_disk_write+0x56>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	607b      	str	r3, [r7, #4]

  SELECT();
 8001622:	f7ff fcb5 	bl	8000f90 <SELECT>

  if (count == 1)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d110      	bne.n	800164e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	2058      	movs	r0, #88	; 0x58
 8001630:	f7ff fe11 	bl	8001256 <SD_SendCmd>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d13a      	bne.n	80016b0 <SD_disk_write+0xe4>
 800163a:	21fe      	movs	r1, #254	; 0xfe
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f7ff fdc7 	bl	80011d0 <SD_TxDataBlock>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d033      	beq.n	80016b0 <SD_disk_write+0xe4>
      count = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	e030      	b.n	80016b0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <SD_disk_write+0x104>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800165a:	2100      	movs	r1, #0
 800165c:	2077      	movs	r0, #119	; 0x77
 800165e:	f7ff fdfa 	bl	8001256 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	2057      	movs	r0, #87	; 0x57
 8001666:	f7ff fdf6 	bl	8001256 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	2059      	movs	r0, #89	; 0x59
 800166e:	f7ff fdf2 	bl	8001256 <SD_SendCmd>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11b      	bne.n	80016b0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001678:	21fc      	movs	r1, #252	; 0xfc
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7ff fda8 	bl	80011d0 <SD_TxDataBlock>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <SD_disk_write+0xd0>
        buff += 512;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800168c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <SD_disk_write+0xac>
 800169a:	e000      	b.n	800169e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800169c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800169e:	21fd      	movs	r1, #253	; 0xfd
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fd95 	bl	80011d0 <SD_TxDataBlock>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <SD_disk_write+0xe4>
      {
        count = 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80016b0:	f7ff fc7e 	bl	8000fb0 <DESELECT>
  SPI_RxByte();
 80016b4:	f7ff fcc0 	bl	8001038 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	2000020c 	.word	0x2000020c

080016d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	603a      	str	r2, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	460b      	mov	r3, r1
 80016e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SD_disk_ioctl+0x1e>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e115      	b.n	800191e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d124      	bne.n	8001748 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d012      	beq.n	800172c <SD_disk_ioctl+0x58>
 8001706:	2b02      	cmp	r3, #2
 8001708:	dc1a      	bgt.n	8001740 <SD_disk_ioctl+0x6c>
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <SD_disk_ioctl+0x40>
 800170e:	2b01      	cmp	r3, #1
 8001710:	d006      	beq.n	8001720 <SD_disk_ioctl+0x4c>
 8001712:	e015      	b.n	8001740 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001714:	f7ff fd16 	bl	8001144 <SD_PowerOff>
      res = RES_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800171e:	e0fc      	b.n	800191a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001720:	f7ff fcce 	bl	80010c0 <SD_PowerOn>
      res = RES_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800172a:	e0f6      	b.n	800191a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	1c5c      	adds	r4, r3, #1
 8001730:	f7ff fd14 	bl	800115c <SD_CheckPower>
 8001734:	4603      	mov	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800173e:	e0ec      	b.n	800191a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001740:	2304      	movs	r3, #4
 8001742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001746:	e0e8      	b.n	800191a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001748:	4b77      	ldr	r3, [pc, #476]	; (8001928 <SD_disk_ioctl+0x254>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SD_disk_ioctl+0x86>
 8001756:	2303      	movs	r3, #3
 8001758:	e0e1      	b.n	800191e <SD_disk_ioctl+0x24a>

    SELECT();
 800175a:	f7ff fc19 	bl	8000f90 <SELECT>

    switch (ctrl)
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b0d      	cmp	r3, #13
 8001762:	f200 80cb 	bhi.w	80018fc <SD_disk_ioctl+0x228>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <SD_disk_ioctl+0x98>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	08001867 	.word	0x08001867
 8001770:	080017a5 	.word	0x080017a5
 8001774:	08001857 	.word	0x08001857
 8001778:	080018fd 	.word	0x080018fd
 800177c:	080018fd 	.word	0x080018fd
 8001780:	080018fd 	.word	0x080018fd
 8001784:	080018fd 	.word	0x080018fd
 8001788:	080018fd 	.word	0x080018fd
 800178c:	080018fd 	.word	0x080018fd
 8001790:	080018fd 	.word	0x080018fd
 8001794:	080018fd 	.word	0x080018fd
 8001798:	08001879 	.word	0x08001879
 800179c:	0800189d 	.word	0x0800189d
 80017a0:	080018c1 	.word	0x080018c1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017a4:	2100      	movs	r1, #0
 80017a6:	2049      	movs	r0, #73	; 0x49
 80017a8:	f7ff fd55 	bl	8001256 <SD_SendCmd>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 80a8 	bne.w	8001904 <SD_disk_ioctl+0x230>
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2110      	movs	r1, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fcda 	bl	8001174 <SD_RxDataBlock>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 809e 	beq.w	8001904 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80017c8:	7b3b      	ldrb	r3, [r7, #12]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10e      	bne.n	80017f0 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017d2:	7d7b      	ldrb	r3, [r7, #21]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	7d3b      	ldrb	r3, [r7, #20]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017e6:	8bfb      	ldrh	r3, [r7, #30]
 80017e8:	029a      	lsls	r2, r3, #10
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e02e      	b.n	800184e <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017f0:	7c7b      	ldrb	r3, [r7, #17]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	09db      	lsrs	r3, r3, #7
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0306 	and.w	r3, r3, #6
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	3302      	adds	r3, #2
 8001814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001818:	7d3b      	ldrb	r3, [r7, #20]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	b2db      	uxtb	r3, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	7cfb      	ldrb	r3, [r7, #19]
 8001822:	b29b      	uxth	r3, r3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	b29b      	uxth	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b29a      	uxth	r2, r3
 800182c:	7cbb      	ldrb	r3, [r7, #18]
 800182e:	029b      	lsls	r3, r3, #10
 8001830:	b29b      	uxth	r3, r3
 8001832:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29b      	uxth	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001840:	8bfa      	ldrh	r2, [r7, #30]
 8001842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001846:	3b09      	subs	r3, #9
 8001848:	409a      	lsls	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001854:	e056      	b.n	8001904 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001864:	e055      	b.n	8001912 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001866:	f7ff fc11 	bl	800108c <SD_ReadyWait>
 800186a:	4603      	mov	r3, r0
 800186c:	2bff      	cmp	r3, #255	; 0xff
 800186e:	d14b      	bne.n	8001908 <SD_disk_ioctl+0x234>
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001876:	e047      	b.n	8001908 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001878:	2100      	movs	r1, #0
 800187a:	2049      	movs	r0, #73	; 0x49
 800187c:	f7ff fceb 	bl	8001256 <SD_SendCmd>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d142      	bne.n	800190c <SD_disk_ioctl+0x238>
 8001886:	2110      	movs	r1, #16
 8001888:	6a38      	ldr	r0, [r7, #32]
 800188a:	f7ff fc73 	bl	8001174 <SD_RxDataBlock>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03b      	beq.n	800190c <SD_disk_ioctl+0x238>
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800189a:	e037      	b.n	800190c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800189c:	2100      	movs	r1, #0
 800189e:	204a      	movs	r0, #74	; 0x4a
 80018a0:	f7ff fcd9 	bl	8001256 <SD_SendCmd>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d132      	bne.n	8001910 <SD_disk_ioctl+0x23c>
 80018aa:	2110      	movs	r1, #16
 80018ac:	6a38      	ldr	r0, [r7, #32]
 80018ae:	f7ff fc61 	bl	8001174 <SD_RxDataBlock>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02b      	beq.n	8001910 <SD_disk_ioctl+0x23c>
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018be:	e027      	b.n	8001910 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018c0:	2100      	movs	r1, #0
 80018c2:	207a      	movs	r0, #122	; 0x7a
 80018c4:	f7ff fcc7 	bl	8001256 <SD_SendCmd>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018d4:	e00b      	b.n	80018ee <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 80018d6:	6a3c      	ldr	r4, [r7, #32]
 80018d8:	1c63      	adds	r3, r4, #1
 80018da:	623b      	str	r3, [r7, #32]
 80018dc:	f7ff fbac 	bl	8001038 <SPI_RxByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018e8:	3301      	adds	r3, #1
 80018ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d9ef      	bls.n	80018d6 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 80018fc:	2304      	movs	r3, #4
 80018fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001902:	e006      	b.n	8001912 <SD_disk_ioctl+0x23e>
      break;
 8001904:	bf00      	nop
 8001906:	e004      	b.n	8001912 <SD_disk_ioctl+0x23e>
      break;
 8001908:	bf00      	nop
 800190a:	e002      	b.n	8001912 <SD_disk_ioctl+0x23e>
      break;
 800190c:	bf00      	nop
 800190e:	e000      	b.n	8001912 <SD_disk_ioctl+0x23e>
      break;
 8001910:	bf00      	nop
    }

    DESELECT();
 8001912:	f7ff fb4d 	bl	8000fb0 <DESELECT>
    SPI_RxByte();
 8001916:	f7ff fb8f 	bl	8001038 <SPI_RxByte>
  }

  return res;
 800191a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800191e:	4618      	mov	r0, r3
 8001920:	372c      	adds	r7, #44	; 0x2c
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001932:	f000 ffb4 	bl	800289e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001936:	f000 f9d7 	bl	8001ce8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800193a:	f000 fad5 	bl	8001ee8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800193e:	f000 faa3 	bl	8001e88 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001942:	f000 fa23 	bl	8001d8c <MX_I2C1_Init>
	MX_FATFS_Init();
 8001946:	f004 fc39 	bl	80061bc <MX_FATFS_Init>
	MX_SPI3_Init();
 800194a:	f000 fa5f 	bl	8001e0c <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */

	lcd_init();
 800194e:	f000 fb96 	bl	800207e <lcd_init>
	lcd_backlight(1); // Turn on backlight
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fc06 	bl	8002164 <lcd_backlight>

	 process_SD_card();
	 */
	float random;

	for (int count = 0; count < OCEAN_SIZE; count++) {
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e026      	b.n	80019ac <main+0x80>
		random = rand() % 1 + 1; // Random number from 0 to 2
 800195e:	f007 fd3d 	bl	80093dc <rand>
 8001962:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001966:	607b      	str	r3, [r7, #4]
		if (count == 0) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <main+0x50>
			oceanTemp[count] = 27;
 800196e:	4a9d      	ldr	r2, [pc, #628]	; (8001be4 <main+0x2b8>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	4a9c      	ldr	r2, [pc, #624]	; (8001be8 <main+0x2bc>)
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e014      	b.n	80019a6 <main+0x7a>
		} else {
			oceanTemp[count] = oceanTemp[count - 1] - (random / 10);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3b01      	subs	r3, #1
 8001980:	4a98      	ldr	r2, [pc, #608]	; (8001be4 <main+0x2b8>)
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	edd7 6a01 	vldr	s13, [r7, #4]
 800198e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001992:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	4a92      	ldr	r2, [pc, #584]	; (8001be4 <main+0x2b8>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	for (int count = 0; count < OCEAN_SIZE; count++) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2bc7      	cmp	r3, #199	; 0xc7
 80019b0:	ddd5      	ble.n	800195e <main+0x32>
		}
	}

	depth = rand() % 100;
 80019b2:	f007 fd13 	bl	80093dc <rand>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a8c      	ldr	r2, [pc, #560]	; (8001bec <main+0x2c0>)
 80019ba:	fb82 1203 	smull	r1, r2, r2, r3
 80019be:	1151      	asrs	r1, r2, #5
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	1a8a      	subs	r2, r1, r2
 80019c4:	2164      	movs	r1, #100	; 0x64
 80019c6:	fb01 f202 	mul.w	r2, r1, r2
 80019ca:	1a9a      	subs	r2, r3, r2
 80019cc:	ee07 2a90 	vmov	s15, r2
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <main+0x2c4>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
		 winchStop();
		 }
		 }
		 */
		// Demo algorithm
		temp = oceanTemp[(int) depth];
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <main+0x2c4>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e4:	ee17 3a90 	vmov	r3, s15
 80019e8:	4a7e      	ldr	r2, [pc, #504]	; (8001be4 <main+0x2b8>)
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <main+0x2c8>)
 80019f2:	6013      	str	r3, [r2, #0]
		process_SD_card();
 80019f4:	f000 fbce 	bl	8002194 <process_SD_card>

		lcd_clear();
 80019f8:	f000 fbaa 	bl	8002150 <lcd_clear>
		strcpy(text, "Depth: ");
 80019fc:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <main+0x2cc>)
 80019fe:	4a7f      	ldr	r2, [pc, #508]	; (8001bfc <main+0x2d0>)
 8001a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a04:	e883 0003 	stmia.w	r3, {r0, r1}
		lcd_set_cursor(0, 0);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 fb7b 	bl	8002106 <lcd_set_cursor>
		lcd_write_string(text);
 8001a10:	4879      	ldr	r0, [pc, #484]	; (8001bf8 <main+0x2cc>)
 8001a12:	f000 fb63 	bl	80020dc <lcd_write_string>
		sprintf(num, "%d m", (int) depth); // @suppress("Float formatting support")
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <main+0x2c4>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 2a90 	vmov	r2, s15
 8001a24:	4976      	ldr	r1, [pc, #472]	; (8001c00 <main+0x2d4>)
 8001a26:	4877      	ldr	r0, [pc, #476]	; (8001c04 <main+0x2d8>)
 8001a28:	f007 ffe8 	bl	80099fc <siprintf>
		lcd_set_cursor(0, 7);
 8001a2c:	2107      	movs	r1, #7
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 fb69 	bl	8002106 <lcd_set_cursor>
		lcd_write_string(num);
 8001a34:	4873      	ldr	r0, [pc, #460]	; (8001c04 <main+0x2d8>)
 8001a36:	f000 fb51 	bl	80020dc <lcd_write_string>
		memset(num, 0, sizeof(num));
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4871      	ldr	r0, [pc, #452]	; (8001c04 <main+0x2d8>)
 8001a40:	f008 f83f 	bl	8009ac2 <memset>
		strcpy(text, "Temp: ");
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <main+0x2cc>)
 8001a46:	4a70      	ldr	r2, [pc, #448]	; (8001c08 <main+0x2dc>)
 8001a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a4c:	6018      	str	r0, [r3, #0]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	8019      	strh	r1, [r3, #0]
 8001a52:	3302      	adds	r3, #2
 8001a54:	0c0a      	lsrs	r2, r1, #16
 8001a56:	701a      	strb	r2, [r3, #0]
		lcd_set_cursor(1, 0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 fb53 	bl	8002106 <lcd_set_cursor>
		lcd_write_string(text);
 8001a60:	4865      	ldr	r0, [pc, #404]	; (8001bf8 <main+0x2cc>)
 8001a62:	f000 fb3b 	bl	80020dc <lcd_write_string>
		sprintf(num, "%d C", (int) temp); // @suppress("Float formatting support")
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <main+0x2c8>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a70:	ee17 2a90 	vmov	r2, s15
 8001a74:	4965      	ldr	r1, [pc, #404]	; (8001c0c <main+0x2e0>)
 8001a76:	4863      	ldr	r0, [pc, #396]	; (8001c04 <main+0x2d8>)
 8001a78:	f007 ffc0 	bl	80099fc <siprintf>
		lcd_set_cursor(1, 6);
 8001a7c:	2106      	movs	r1, #6
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 fb41 	bl	8002106 <lcd_set_cursor>
		lcd_write_string(num);
 8001a84:	485f      	ldr	r0, [pc, #380]	; (8001c04 <main+0x2d8>)
 8001a86:	f000 fb29 	bl	80020dc <lcd_write_string>
		memset(num, 0, sizeof(num));
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	485d      	ldr	r0, [pc, #372]	; (8001c04 <main+0x2d8>)
 8001a90:	f008 f817 	bl	8009ac2 <memset>

		if (temp < minTemp + 3) {
 8001a94:	2306      	movs	r3, #6
 8001a96:	3303      	adds	r3, #3
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <main+0x2c8>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	dd17      	ble.n	8001ae0 <main+0x1b4>
			depth -= 5;
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <main+0x2c4>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001aba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <main+0x2c4>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
			if (depth < 0) depth = 0;
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <main+0x2c4>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	f140 80f7 	bpl.w	8001cc4 <main+0x398>
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <main+0x2c4>)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e0f1      	b.n	8001cc4 <main+0x398>
		} else if (temp > maxTemp - 3) {
 8001ae0:	230e      	movs	r3, #14
 8001ae2:	3b03      	subs	r3, #3
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aec:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <main+0x2c8>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	d518      	bpl.n	8001b2e <main+0x202>
			depth += 5;
 8001afc:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <main+0x2c4>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <main+0x2c4>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
			if (depth > 200) depth = 200;
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <main+0x2c4>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001c10 <main+0x2e4>
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	f340 80cf 	ble.w	8001cc4 <main+0x398>
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <main+0x2c4>)
 8001b28:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <main+0x2e8>)
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e0ca      	b.n	8001cc4 <main+0x398>
		} else {
			lcd_clear();
 8001b2e:	f000 fb0f 	bl	8002150 <lcd_clear>
			strcpy(text, "Target Reached");
 8001b32:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <main+0x2cc>)
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <main+0x2ec>)
 8001b36:	4614      	mov	r4, r2
 8001b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b3c:	8023      	strh	r3, [r4, #0]
 8001b3e:	3402      	adds	r4, #2
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	7023      	strb	r3, [r4, #0]
			lcd_set_cursor(0, 0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 fadd 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 8001b4c:	482a      	ldr	r0, [pc, #168]	; (8001bf8 <main+0x2cc>)
 8001b4e:	f000 fac5 	bl	80020dc <lcd_write_string>
			strcpy(text, "Temp:");
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <main+0x2cc>)
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <main+0x2f0>)
 8001b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5a:	6018      	str	r0, [r3, #0]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	8019      	strh	r1, [r3, #0]
			lcd_set_cursor(1, 0);
 8001b60:	2100      	movs	r1, #0
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 facf 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 8001b68:	4823      	ldr	r0, [pc, #140]	; (8001bf8 <main+0x2cc>)
 8001b6a:	f000 fab7 	bl	80020dc <lcd_write_string>
			sprintf(num, "%d C", (int) temp); // @suppress("Float formatting support")
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <main+0x2c8>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	ee17 2a90 	vmov	r2, s15
 8001b7c:	4923      	ldr	r1, [pc, #140]	; (8001c0c <main+0x2e0>)
 8001b7e:	4821      	ldr	r0, [pc, #132]	; (8001c04 <main+0x2d8>)
 8001b80:	f007 ff3c 	bl	80099fc <siprintf>
			lcd_set_cursor(1, 6);
 8001b84:	2106      	movs	r1, #6
 8001b86:	2001      	movs	r0, #1
 8001b88:	f000 fabd 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(num);
 8001b8c:	481d      	ldr	r0, [pc, #116]	; (8001c04 <main+0x2d8>)
 8001b8e:	f000 faa5 	bl	80020dc <lcd_write_string>
			memset(num, 0, sizeof(num));
 8001b92:	220a      	movs	r2, #10
 8001b94:	2100      	movs	r1, #0
 8001b96:	481b      	ldr	r0, [pc, #108]	; (8001c04 <main+0x2d8>)
 8001b98:	f007 ff93 	bl	8009ac2 <memset>
			HAL_Delay(10000);
 8001b9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ba0:	f000 fef2 	bl	8002988 <HAL_Delay>
			for (int count = 0; count < OCEAN_SIZE; count++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e054      	b.n	8001c54 <main+0x328>
				random = rand() % 3 + 1; // Random number from 1 to 3
 8001baa:	f007 fc17 	bl	80093dc <rand>
 8001bae:	4601      	mov	r1, r0
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <main+0x2f4>)
 8001bb2:	fb83 3201 	smull	r3, r2, r3, r1
 8001bb6:	17cb      	asrs	r3, r1, #31
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	1aca      	subs	r2, r1, r3
 8001bc2:	1c53      	adds	r3, r2, #1
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	edc7 7a01 	vstr	s15, [r7, #4]
				if (count == 0) {
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d126      	bne.n	8001c24 <main+0x2f8>
					oceanTemp[count] = 27;
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <main+0x2b8>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a02      	ldr	r2, [pc, #8]	; (8001be8 <main+0x2bc>)
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e034      	b.n	8001c4e <main+0x322>
 8001be4:	20000378 	.word	0x20000378
 8001be8:	41d80000 	.word	0x41d80000
 8001bec:	51eb851f 	.word	0x51eb851f
 8001bf0:	20000370 	.word	0x20000370
 8001bf4:	20000374 	.word	0x20000374
 8001bf8:	20000350 	.word	0x20000350
 8001bfc:	0800c808 	.word	0x0800c808
 8001c00:	0800c810 	.word	0x0800c810
 8001c04:	20000364 	.word	0x20000364
 8001c08:	0800c818 	.word	0x0800c818
 8001c0c:	0800c820 	.word	0x0800c820
 8001c10:	43480000 	.word	0x43480000
 8001c14:	43480000 	.word	0x43480000
 8001c18:	0800c828 	.word	0x0800c828
 8001c1c:	0800c838 	.word	0x0800c838
 8001c20:	55555556 	.word	0x55555556
				} else {
					oceanTemp[count] = oceanTemp[count - 1] - (random / 10);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <main+0x3a4>)
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c36:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001c3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <main+0x3a4>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
			for (int count = 0; count < OCEAN_SIZE; count++) {
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2bc7      	cmp	r3, #199	; 0xc7
 8001c58:	dda7      	ble.n	8001baa <main+0x27e>
				}
			}

			depth = rand() % 100;
 8001c5a:	f007 fbbf 	bl	80093dc <rand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <main+0x3a8>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	1151      	asrs	r1, r2, #5
 8001c68:	17da      	asrs	r2, r3, #31
 8001c6a:	1a8a      	subs	r2, r1, r2
 8001c6c:	2164      	movs	r1, #100	; 0x64
 8001c6e:	fb01 f202 	mul.w	r2, r1, r2
 8001c72:	1a9a      	subs	r2, r3, r2
 8001c74:	ee07 2a90 	vmov	s15, r2
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <main+0x3ac>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]

			lcd_clear();
 8001c82:	f000 fa65 	bl	8002150 <lcd_clear>
			strcpy(text, "Generating");
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <main+0x3b0>)
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <main+0x3b4>)
 8001c8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c8c:	c303      	stmia	r3!, {r0, r1}
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	3302      	adds	r3, #2
 8001c92:	0c12      	lsrs	r2, r2, #16
 8001c94:	701a      	strb	r2, [r3, #0]
			lcd_set_cursor(0, 0);
 8001c96:	2100      	movs	r1, #0
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 fa34 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <main+0x3b0>)
 8001ca0:	f000 fa1c 	bl	80020dc <lcd_write_string>
			strcpy(text, "New Ocean");
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <main+0x3b0>)
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <main+0x3b8>)
 8001ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001caa:	c303      	stmia	r3!, {r0, r1}
 8001cac:	801a      	strh	r2, [r3, #0]
			lcd_set_cursor(1, 0);
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 fa28 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <main+0x3b0>)
 8001cb8:	f000 fa10 	bl	80020dc <lcd_write_string>

			HAL_Delay(5000);
 8001cbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001cc0:	f000 fe62 	bl	8002988 <HAL_Delay>
		}

		HAL_Delay(2000);
 8001cc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cc8:	f000 fe5e 	bl	8002988 <HAL_Delay>
		temp = oceanTemp[(int) depth];
 8001ccc:	e685      	b.n	80019da <main+0xae>
 8001cce:	bf00      	nop
 8001cd0:	20000378 	.word	0x20000378
 8001cd4:	51eb851f 	.word	0x51eb851f
 8001cd8:	20000370 	.word	0x20000370
 8001cdc:	20000350 	.word	0x20000350
 8001ce0:	0800c840 	.word	0x0800c840
 8001ce4:	0800c84c 	.word	0x0800c84c

08001ce8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b096      	sub	sp, #88	; 0x58
 8001cec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	2244      	movs	r2, #68	; 0x44
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f007 fee3 	bl	8009ac2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d0e:	f001 fd9d 	bl	800384c <HAL_PWREx_ControlVoltageScaling>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001d18:	f000 fb3c 	bl	8002394 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d28:	2360      	movs	r3, #96	; 0x60
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d30:	2301      	movs	r3, #1
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d44:	2302      	movs	r3, #2
 8001d46:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 fdd3 	bl	80038f8 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x74>
		Error_Handler();
 8001d58:	f000 fb1c 	bl	8002394 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2303      	movs	r3, #3
 8001d62:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001d70:	463b      	mov	r3, r7
 8001d72:	2101      	movs	r1, #1
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 f9d3 	bl	8004120 <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x9c>
		Error_Handler();
 8001d80:	f000 fb08 	bl	8002394 <Error_Handler>
	}
}
 8001d84:	bf00      	nop
 8001d86:	3758      	adds	r7, #88	; 0x58
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_I2C1_Init+0x78>)
 8001d94:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <MX_I2C1_Init+0x7c>)
 8001d9a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dc8:	f001 f8d6 	bl	8002f78 <HAL_I2C_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001dd2:	f000 fadf 	bl	8002394 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dda:	f001 fc91 	bl	8003700 <HAL_I2CEx_ConfigAnalogFilter>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001de4:	f000 fad6 	bl	8002394 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001de8:	2100      	movs	r1, #0
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dec:	f001 fcd3 	bl	8003796 <HAL_I2CEx_ConfigDigitalFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001df6:	f000 facd 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000210 	.word	0x20000210
 8001e04:	40005400 	.word	0x40005400
 8001e08:	00707cbb 	.word	0x00707cbb

08001e0c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <MX_SPI3_Init+0x78>)
 8001e14:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e2a:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e42:	2230      	movs	r2, #48	; 0x30
 8001e44:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e66:	2208      	movs	r2, #8
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_SPI3_Init+0x74>)
 8001e6c:	f002 fe64 	bl	8004b38 <HAL_SPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_SPI3_Init+0x6e>
		Error_Handler();
 8001e76:	f000 fa8d 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000264 	.word	0x20000264
 8001e84:	40003c00 	.word	0x40003c00

08001e88 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <MX_USART2_UART_Init+0x5c>)
 8001e90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ecc:	f003 fce6 	bl	800589c <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001ed6:	f000 fa5d 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002c8 	.word	0x200002c8
 8001ee4:	40004400 	.word	0x40004400

08001ee8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_GPIO_Init+0x94>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f000 fffa 	bl	8002f48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f000 fe80 	bl	8002c74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <lcd_write_nibble>:

/* USER CODE BEGIN 4 */
void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	79bb      	ldrb	r3, [r7, #6]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT; // Include backlight state in data
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <lcd_write_nibble+0x7c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001fc0:	f107 020f 	add.w	r2, r7, #15
 8001fc4:	2364      	movs	r3, #100	; 0x64
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	214e      	movs	r1, #78	; 0x4e
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <lcd_write_nibble+0x80>)
 8001fce:	f001 f86f 	bl	80030b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 fcd8 	bl	8002988 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001fe2:	f107 020f 	add.w	r2, r7, #15
 8001fe6:	2364      	movs	r3, #100	; 0x64
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	214e      	movs	r1, #78	; 0x4e
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <lcd_write_nibble+0x80>)
 8001ff0:	f001 f85e 	bl	80030b0 <HAL_I2C_Master_Transmit>
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000001 	.word	0x20000001
 8002000:	20000210 	.word	0x20000210

08002004 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ffad 	bl	8001f80 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffa8 	bl	8001f80 <lcd_write_nibble>
	if (cmd == 0x01 || cmd == 0x02) {
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d002      	beq.n	800203c <lcd_send_cmd+0x38>
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d102      	bne.n	8002042 <lcd_send_cmd+0x3e>
		HAL_Delay(2);
 800203c:	2002      	movs	r0, #2
 800203e:	f000 fca3 	bl	8002988 <HAL_Delay>
	}
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff8a 	bl	8001f80 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2101      	movs	r1, #1
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff85 	bl	8001f80 <lcd_write_nibble>
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <lcd_init>:

void lcd_init() {
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002082:	2032      	movs	r0, #50	; 0x32
 8002084:	f000 fc80 	bl	8002988 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 8002088:	2100      	movs	r1, #0
 800208a:	2003      	movs	r0, #3
 800208c:	f7ff ff78 	bl	8001f80 <lcd_write_nibble>
	HAL_Delay(5);
 8002090:	2005      	movs	r0, #5
 8002092:	f000 fc79 	bl	8002988 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 8002096:	2100      	movs	r1, #0
 8002098:	2003      	movs	r0, #3
 800209a:	f7ff ff71 	bl	8001f80 <lcd_write_nibble>
	HAL_Delay(1);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 fc72 	bl	8002988 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80020a4:	2100      	movs	r1, #0
 80020a6:	2003      	movs	r0, #3
 80020a8:	f7ff ff6a 	bl	8001f80 <lcd_write_nibble>
	HAL_Delay(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fc6b 	bl	8002988 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7ff ff63 	bl	8001f80 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 80020ba:	2028      	movs	r0, #40	; 0x28
 80020bc:	f7ff ffa2 	bl	8002004 <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 80020c0:	200c      	movs	r0, #12
 80020c2:	f7ff ff9f 	bl	8002004 <lcd_send_cmd>
	lcd_send_cmd(0x06);
 80020c6:	2006      	movs	r0, #6
 80020c8:	f7ff ff9c 	bl	8002004 <lcd_send_cmd>
	lcd_send_cmd(0x01);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ff99 	bl	8002004 <lcd_send_cmd>
	HAL_Delay(2);
 80020d2:	2002      	movs	r0, #2
 80020d4:	f000 fc58 	bl	8002988 <HAL_Delay>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <lcd_write_string>:

void lcd_write_string(char *str) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80020e4:	e006      	b.n	80020f4 <lcd_write_string+0x18>
		lcd_send_data(*str++);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ffab 	bl	800204a <lcd_send_data>
	while (*str) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f4      	bne.n	80020e6 <lcd_write_string+0xa>
	}
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	460a      	mov	r2, r1
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	4613      	mov	r3, r2
 8002114:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row) {
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <lcd_set_cursor+0x1c>
 800211c:	2b01      	cmp	r3, #1
 800211e:	d003      	beq.n	8002128 <lcd_set_cursor+0x22>
 8002120:	e005      	b.n	800212e <lcd_set_cursor+0x28>
		case 0:
			address = 0x00;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
			break;
 8002126:	e004      	b.n	8002132 <lcd_set_cursor+0x2c>
		case 1:
			address = 0x40;
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	73fb      	strb	r3, [r7, #15]
			break;
 800212c:	e001      	b.n	8002132 <lcd_set_cursor+0x2c>
		default:
			address = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	4413      	add	r3, r2
 8002138:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff5e 	bl	8002004 <lcd_send_cmd>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <lcd_clear>:

void lcd_clear(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff ff55 	bl	8002004 <lcd_send_cmd>
	HAL_Delay(2);
 800215a:	2002      	movs	r0, #2
 800215c:	f000 fc14 	bl	8002988 <HAL_Delay>
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <lcd_backlight+0x18>
		backlight_state = 1;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <lcd_backlight+0x2c>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
	} else {
		backlight_state = 0;
	}
}
 800217a:	e002      	b.n	8002182 <lcd_backlight+0x1e>
		backlight_state = 0;
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <lcd_backlight+0x2c>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000001 	.word	0x20000001

08002194 <process_SD_card>:

void process_SD_card(void) {
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
	FIL fil;                  //File handle
	FRESULT fres;                 //Result after operations
	char int_to_str[10];

	do {
		FatFs = malloc(sizeof(FATFS));
 800219e:	f241 0038 	movw	r0, #4152	; 0x1038
 80021a2:	f007 f85f 	bl	8009264 <malloc>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80021ac:	f102 0204 	add.w	r2, r2, #4
 80021b0:	6013      	str	r3, [r2, #0]
		//Mount the SD Card
		fres = f_mount(FatFs, "", 0);    //1=mount now
 80021b2:	2200      	movs	r2, #0
 80021b4:	496a      	ldr	r1, [pc, #424]	; (8002360 <process_SD_card+0x1cc>)
 80021b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021ba:	f103 0304 	add.w	r3, r3, #4
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f006 fa44 	bl	800864c <f_mount>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80021ca:	f102 0203 	add.w	r2, r2, #3
 80021ce:	7013      	strb	r3, [r2, #0]
		if (fres != FR_OK) {
 80021d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021d4:	f103 0303 	add.w	r3, r3, #3
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d029      	beq.n	8002232 <process_SD_card+0x9e>
			strcpy(text, "Mount failed");
 80021de:	4a61      	ldr	r2, [pc, #388]	; (8002364 <process_SD_card+0x1d0>)
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <process_SD_card+0x1d4>)
 80021e2:	4614      	mov	r4, r2
 80021e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e6:	c407      	stmia	r4!, {r0, r1, r2}
 80021e8:	7023      	strb	r3, [r4, #0]
			lcd_clear();
 80021ea:	f7ff ffb1 	bl	8002150 <lcd_clear>
			lcd_set_cursor(0, 0);
 80021ee:	2100      	movs	r1, #0
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff ff88 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 80021f6:	485b      	ldr	r0, [pc, #364]	; (8002364 <process_SD_card+0x1d0>)
 80021f8:	f7ff ff70 	bl	80020dc <lcd_write_string>
			sprintf(int_to_str, "%d", fres);
 80021fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002200:	f103 0303 	add.w	r3, r3, #3
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	3b04      	subs	r3, #4
 800220c:	4957      	ldr	r1, [pc, #348]	; (800236c <process_SD_card+0x1d8>)
 800220e:	4618      	mov	r0, r3
 8002210:	f007 fbf4 	bl	80099fc <siprintf>
			lcd_set_cursor(1, 0);
 8002214:	2100      	movs	r1, #0
 8002216:	2001      	movs	r0, #1
 8002218:	f7ff ff75 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(int_to_str);
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	3b04      	subs	r3, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff5a 	bl	80020dc <lcd_write_string>
			HAL_Delay(1000);
 8002228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222c:	f000 fbac 	bl	8002988 <HAL_Delay>
			break;
 8002230:	e084      	b.n	800233c <process_SD_card+0x1a8>
		}

		//Open the file
		fres = f_open(&fil, "data_log.txt",
 8002232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002236:	3b18      	subs	r3, #24
 8002238:	2232      	movs	r2, #50	; 0x32
 800223a:	494d      	ldr	r1, [pc, #308]	; (8002370 <process_SD_card+0x1dc>)
 800223c:	4618      	mov	r0, r3
 800223e:	f006 fa4b 	bl	80086d8 <f_open>
 8002242:	4603      	mov	r3, r0
 8002244:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002248:	f102 0203 	add.w	r2, r2, #3
 800224c:	7013      	strb	r3, [r2, #0]
		FA_OPEN_APPEND | FA_WRITE);
		if (fres != FR_OK) {
 800224e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002252:	f103 0303 	add.w	r3, r3, #3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02d      	beq.n	80022b8 <process_SD_card+0x124>
			strcpy(text, "File not open");
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <process_SD_card+0x1d0>)
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <process_SD_card+0x1e0>)
 8002260:	4614      	mov	r4, r2
 8002262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002264:	c407      	stmia	r4!, {r0, r1, r2}
 8002266:	8023      	strh	r3, [r4, #0]
			lcd_clear();
 8002268:	f7ff ff72 	bl	8002150 <lcd_clear>
			lcd_set_cursor(0, 0);
 800226c:	2100      	movs	r1, #0
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff ff49 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(text);
 8002274:	483b      	ldr	r0, [pc, #236]	; (8002364 <process_SD_card+0x1d0>)
 8002276:	f7ff ff31 	bl	80020dc <lcd_write_string>
			sprintf(int_to_str, "%d", fres);
 800227a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800227e:	f103 0303 	add.w	r3, r3, #3
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	3b04      	subs	r3, #4
 800228a:	4938      	ldr	r1, [pc, #224]	; (800236c <process_SD_card+0x1d8>)
 800228c:	4618      	mov	r0, r3
 800228e:	f007 fbb5 	bl	80099fc <siprintf>
			lcd_set_cursor(1, 0);
 8002292:	2100      	movs	r1, #0
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff ff36 	bl	8002106 <lcd_set_cursor>
			lcd_write_string(int_to_str);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	3b04      	subs	r3, #4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff1b 	bl	80020dc <lcd_write_string>
			HAL_Delay(1000);
 80022a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022aa:	f000 fb6d 	bl	8002988 <HAL_Delay>
			HAL_Delay(1000);
 80022ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022b2:	f000 fb69 	bl	8002988 <HAL_Delay>
			break;
 80022b6:	e041      	b.n	800233c <process_SD_card+0x1a8>
		lcd_set_cursor(0, 0);
		lcd_write_string(text);
		HAL_Delay(1000);
		*/
		//write the data
		f_puts("Depth: ", &fil);
 80022b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022bc:	3b18      	subs	r3, #24
 80022be:	4619      	mov	r1, r3
 80022c0:	482d      	ldr	r0, [pc, #180]	; (8002378 <process_SD_card+0x1e4>)
 80022c2:	f006 fe88 	bl	8008fd6 <f_puts>
		sprintf(num, "%d m | ", (int) depth); // @suppress("Float formatting support")
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <process_SD_card+0x1e8>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d0:	ee17 2a90 	vmov	r2, s15
 80022d4:	492a      	ldr	r1, [pc, #168]	; (8002380 <process_SD_card+0x1ec>)
 80022d6:	482b      	ldr	r0, [pc, #172]	; (8002384 <process_SD_card+0x1f0>)
 80022d8:	f007 fb90 	bl	80099fc <siprintf>
		f_puts(num, &fil);
 80022dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e0:	3b18      	subs	r3, #24
 80022e2:	4619      	mov	r1, r3
 80022e4:	4827      	ldr	r0, [pc, #156]	; (8002384 <process_SD_card+0x1f0>)
 80022e6:	f006 fe76 	bl	8008fd6 <f_puts>
		memset(num, 0, sizeof(num));
 80022ea:	220a      	movs	r2, #10
 80022ec:	2100      	movs	r1, #0
 80022ee:	4825      	ldr	r0, [pc, #148]	; (8002384 <process_SD_card+0x1f0>)
 80022f0:	f007 fbe7 	bl	8009ac2 <memset>
		f_puts("Temp: ", &fil);
 80022f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f8:	3b18      	subs	r3, #24
 80022fa:	4619      	mov	r1, r3
 80022fc:	4822      	ldr	r0, [pc, #136]	; (8002388 <process_SD_card+0x1f4>)
 80022fe:	f006 fe6a 	bl	8008fd6 <f_puts>
		sprintf(num, "%d m\n", (int) temp); // @suppress("Float formatting support")
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <process_SD_card+0x1f8>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 2a90 	vmov	r2, s15
 8002310:	491f      	ldr	r1, [pc, #124]	; (8002390 <process_SD_card+0x1fc>)
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <process_SD_card+0x1f0>)
 8002314:	f007 fb72 	bl	80099fc <siprintf>
		f_puts(num, &fil);
 8002318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231c:	3b18      	subs	r3, #24
 800231e:	4619      	mov	r1, r3
 8002320:	4818      	ldr	r0, [pc, #96]	; (8002384 <process_SD_card+0x1f0>)
 8002322:	f006 fe58 	bl	8008fd6 <f_puts>
		memset(num, 0, sizeof(num));
 8002326:	220a      	movs	r2, #10
 8002328:	2100      	movs	r1, #0
 800232a:	4816      	ldr	r0, [pc, #88]	; (8002384 <process_SD_card+0x1f0>)
 800232c:	f007 fbc9 	bl	8009ac2 <memset>
		//close your file
		f_close(&fil);
 8002330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002334:	3b18      	subs	r3, #24
 8002336:	4618      	mov	r0, r3
 8002338:	f006 fdac 	bl	8008e94 <f_close>

	} while ( false);

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 800233c:	2200      	movs	r2, #0
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <process_SD_card+0x1cc>)
 8002340:	2000      	movs	r0, #0
 8002342:	f006 f983 	bl	800864c <f_mount>
	lcd_clear();
	lcd_set_cursor(0, 0);
	lcd_write_string(text);
	HAL_Delay(1000);
	*/
	free(FatFs);
 8002346:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800234a:	f103 0304 	add.w	r3, r3, #4
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	f006 ff90 	bl	8009274 <free>
}
 8002354:	bf00      	nop
 8002356:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bd90      	pop	{r4, r7, pc}
 8002360:	0800c858 	.word	0x0800c858
 8002364:	20000350 	.word	0x20000350
 8002368:	0800c85c 	.word	0x0800c85c
 800236c:	0800c86c 	.word	0x0800c86c
 8002370:	0800c870 	.word	0x0800c870
 8002374:	0800c880 	.word	0x0800c880
 8002378:	0800c808 	.word	0x0800c808
 800237c:	20000370 	.word	0x20000370
 8002380:	0800c890 	.word	0x0800c890
 8002384:	20000364 	.word	0x20000364
 8002388:	0800c818 	.word	0x0800c818
 800238c:	20000374 	.word	0x20000374
 8002390:	0800c898 	.word	0x0800c898

08002394 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800239c:	e7fe      	b.n	800239c <Error_Handler+0x8>
	...

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_MspInit+0x44>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_MspInit+0x44>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6613      	str	r3, [r2, #96]	; 0x60
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_MspInit+0x44>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_MspInit+0x44>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <HAL_MspInit+0x44>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_MspInit+0x44>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b09e      	sub	sp, #120	; 0x78
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	2254      	movs	r2, #84	; 0x54
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f007 fb5a 	bl	8009ac2 <memset>
  if(hi2c->Instance==I2C1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_I2C_MspInit+0xa4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d135      	bne.n	8002484 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002418:	2340      	movs	r3, #64	; 0x40
 800241a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800241c:	2300      	movs	r3, #0
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f002 f89f 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002430:	f7ff ffb0 	bl	8002394 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	2312      	movs	r3, #18
 8002452:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245c:	2304      	movs	r3, #4
 800245e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002464:	4619      	mov	r1, r3
 8002466:	480b      	ldr	r0, [pc, #44]	; (8002494 <HAL_I2C_MspInit+0xac>)
 8002468:	f000 fc04 	bl	8002c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_I2C_MspInit+0xa8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3778      	adds	r7, #120	; 0x78
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40005400 	.word	0x40005400
 8002490:	40021000 	.word	0x40021000
 8002494:	48000400 	.word	0x48000400

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_SPI_MspInit+0x8c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d12f      	bne.n	800251a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	6593      	str	r3, [r2, #88]	; 0x58
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_SPI_MspInit+0x90>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024ea:	2338      	movs	r3, #56	; 0x38
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024fa:	2306      	movs	r3, #6
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4809      	ldr	r0, [pc, #36]	; (800252c <HAL_SPI_MspInit+0x94>)
 8002506:	f000 fbb5 	bl	8002c74 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	2033      	movs	r0, #51	; 0x33
 8002510:	f000 fb39 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002514:	2033      	movs	r0, #51	; 0x33
 8002516:	f000 fb52 	bl	8002bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	; 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40003c00 	.word	0x40003c00
 8002528:	40021000 	.word	0x40021000
 800252c:	48000400 	.word	0x48000400

08002530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b09e      	sub	sp, #120	; 0x78
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	2254      	movs	r2, #84	; 0x54
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f007 fab6 	bl	8009ac2 <memset>
  if(huart->Instance==USART2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a28      	ldr	r2, [pc, #160]	; (80025fc <HAL_UART_MspInit+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d148      	bne.n	80025f2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002560:	2302      	movs	r3, #2
 8002562:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fffb 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002578:	f7ff ff0c 	bl	8002394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_UART_MspInit+0xd0>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <HAL_UART_MspInit+0xd0>)
 8002582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_UART_MspInit+0xd0>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_UART_MspInit+0xd0>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_UART_MspInit+0xd0>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_UART_MspInit+0xd0>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80025ac:	2304      	movs	r3, #4
 80025ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025bc:	2307      	movs	r3, #7
 80025be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f000 fb53 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80025ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80025e0:	2303      	movs	r3, #3
 80025e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ee:	f000 fb41 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025f2:	bf00      	nop
 80025f4:	3778      	adds	r7, #120	; 0x78
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40004400 	.word	0x40004400
 8002600:	40021000 	.word	0x40021000

08002604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002608:	e7fe      	b.n	8002608 <NMI_Handler+0x4>

0800260a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <MemManage_Handler+0x4>

08002616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <UsageFault_Handler+0x4>

08002622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <SysTick_Handler+0x34>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <SysTick_Handler+0x18>
	  Timer1--;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <SysTick_Handler+0x34>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <SysTick_Handler+0x34>)
 8002662:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <SysTick_Handler+0x38>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <SysTick_Handler+0x2c>
	  Timer2--;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <SysTick_Handler+0x38>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <SysTick_Handler+0x38>)
 8002676:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 f966 	bl	8002948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000208 	.word	0x20000208
 8002684:	2000020a 	.word	0x2000020a

08002688 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <SPI3_IRQHandler+0x10>)
 800268e:	f002 fe8d 	bl	80053ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000264 	.word	0x20000264

0800269c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_kill>:

int _kill(int pid, int sig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026b6:	f007 fa63 	bl	8009b80 <__errno>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2216      	movs	r2, #22
 80026be:	601a      	str	r2, [r3, #0]
  return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_exit>:

void _exit (int status)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ffe7 	bl	80026ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80026de:	e7fe      	b.n	80026de <_exit+0x12>

080026e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e00a      	b.n	8002708 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026f2:	f3af 8000 	nop.w
 80026f6:	4601      	mov	r1, r0
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	b2ca      	uxtb	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	dbf0      	blt.n	80026f2 <_read+0x12>
  }

  return len;
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e009      	b.n	8002740 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	60ba      	str	r2, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	dbf1      	blt.n	800272c <_write+0x12>
  }
  return len;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_close>:

int _close(int file)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277a:	605a      	str	r2, [r3, #4]
  return 0;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_isatty>:

int _isatty(int file)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f007 f9c8 	bl	8009b80 <__errno>
 80027f0:	4603      	mov	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <_sbrk+0x64>)
 800280c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20010000 	.word	0x20010000
 800281c:	00000400 	.word	0x00000400
 8002820:	20000698 	.word	0x20000698
 8002824:	20000a28 	.word	0x20000a28

08002828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <SystemInit+0x20>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <SystemInit+0x20>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002850:	f7ff ffea 	bl	8002828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <LoopForever+0x6>)
  ldr r1, =_edata
 8002856:	490d      	ldr	r1, [pc, #52]	; (800288c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <LoopForever+0xe>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800286c:	4c0a      	ldr	r4, [pc, #40]	; (8002898 <LoopForever+0x16>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287a:	f007 f987 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287e:	f7ff f855 	bl	800192c <main>

08002882 <LoopForever>:

LoopForever:
    b LoopForever
 8002882:	e7fe      	b.n	8002882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002884:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002890:	0800d194 	.word	0x0800d194
  ldr r2, =_sbss
 8002894:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002898:	20000a28 	.word	0x20000a28

0800289c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC1_IRQHandler>

0800289e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 f961 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f80e 	bl	80028d0 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	71fb      	strb	r3, [r7, #7]
 80028be:	e001      	b.n	80028c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028c0:	f7ff fd6e 	bl	80023a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028c4:	79fb      	ldrb	r3, [r7, #7]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_InitTick+0x6c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_InitTick+0x70>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_InitTick+0x6c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f96d 	bl	8002bda <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d809      	bhi.n	8002920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f000 f937 	bl	8002b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_InitTick+0x74>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e007      	b.n	8002930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e004      	b.n	8002930 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	e001      	b.n	8002930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c
 8002940:	20000004 	.word	0x20000004
 8002944:	20000008 	.word	0x20000008

08002948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x20>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_IncTick+0x24>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_IncTick+0x24>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000000c 	.word	0x2000000c
 800296c:	2000069c 	.word	0x2000069c

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	2000069c 	.word	0x2000069c

08002988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff ffee 	bl	8002970 <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d005      	beq.n	80029ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_Delay+0x44>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ae:	bf00      	nop
 80029b0:	f7ff ffde 	bl	8002970 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d8f7      	bhi.n	80029b0 <HAL_Delay+0x28>
  {
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60d3      	str	r3, [r2, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b98:	f7ff ff3e 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff8e 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5d 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff31 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffa2 	bl	8002b2c <SysTick_Config>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d005      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	e029      	b.n	8002c6a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 020e 	bic.w	r2, r2, #14
 8002c24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f003 021c 	and.w	r2, r3, #28
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
    }
  }
  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c82:	e148      	b.n	8002f16 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 813a 	beq.w	8002f10 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d005      	beq.n	8002cb4 <HAL_GPIO_Init+0x40>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d130      	bne.n	8002d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cea:	2201      	movs	r2, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0201 	and.w	r2, r3, #1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d017      	beq.n	8002d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d123      	bne.n	8002da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	08da      	lsrs	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3208      	adds	r2, #8
 8002d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	6939      	ldr	r1, [r7, #16]
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8094 	beq.w	8002f10 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6613      	str	r3, [r2, #96]	; 0x60
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e00:	4a4d      	ldr	r2, [pc, #308]	; (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e2a:	d00d      	beq.n	8002e48 <HAL_GPIO_Init+0x1d4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a43      	ldr	r2, [pc, #268]	; (8002f3c <HAL_GPIO_Init+0x2c8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d007      	beq.n	8002e44 <HAL_GPIO_Init+0x1d0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_GPIO_Init+0x1cc>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e004      	b.n	8002e4a <HAL_GPIO_Init+0x1d6>
 8002e40:	2307      	movs	r3, #7
 8002e42:	e002      	b.n	8002e4a <HAL_GPIO_Init+0x1d6>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_GPIO_Init+0x1d6>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee0:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f aeaf 	bne.w	8002c84 <HAL_GPIO_Init+0x10>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	48000800 	.word	0x48000800
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e08d      	b.n	80030a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fa22 	bl	80023e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e006      	b.n	8003000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d108      	bne.n	800301a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	e007      	b.n	800302a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69d9      	ldr	r1, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
 80030c0:	4613      	mov	r3, r2
 80030c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 80fd 	bne.w	80032cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2C_Master_Transmit+0x30>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0f6      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e8:	f7ff fc42 	bl	8002970 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2319      	movs	r3, #25
 80030f4:	2201      	movs	r2, #1
 80030f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f914 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0e1      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	; 0x21
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d906      	bls.n	800314a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e007      	b.n	800315a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003158:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d024      	beq.n	80031ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <HAL_I2C_Master_Transmit+0x228>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa79 	bl	800369c <I2C_TransferConfig>
 80031aa:	e066      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	8979      	ldrh	r1, [r7, #10]
 80031b4:	4b48      	ldr	r3, [pc, #288]	; (80032d8 <HAL_I2C_Master_Transmit+0x228>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fa6e 	bl	800369c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031c0:	e05b      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	6a39      	ldr	r1, [r7, #32]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f8fd 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07b      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d034      	beq.n	800327a <HAL_I2C_Master_Transmit+0x1ca>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d130      	bne.n	800327a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f880 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e04d      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2bff      	cmp	r3, #255	; 0xff
 800323a:	d90e      	bls.n	800325a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	22ff      	movs	r2, #255	; 0xff
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	b2da      	uxtb	r2, r3
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa22 	bl	800369c <I2C_TransferConfig>
 8003258:	e00f      	b.n	800327a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	b2da      	uxtb	r2, r3
 800326a:	8979      	ldrh	r1, [r7, #10]
 800326c:	2300      	movs	r3, #0
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fa11 	bl	800369c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d19e      	bne.n	80031c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	6a39      	ldr	r1, [r7, #32]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f8e3 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01a      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_I2C_Master_Transmit+0x22c>)
 80032ac:	400b      	ands	r3, r1
 80032ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	80002000 	.word	0x80002000
 80032dc:	fe00e800 	.word	0xfe00e800

080032e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d103      	bne.n	80032fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d007      	beq.n	800331c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	619a      	str	r2, [r3, #24]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003338:	e031      	b.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d02d      	beq.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7ff fb15 	bl	8002970 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d122      	bne.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d113      	bne.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d0be      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d2:	e033      	b.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f87f 	bl	80034dc <I2C_IsErrorOccurred>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e031      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d025      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7ff fabe 	bl	8002970 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d013      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d1c4      	bne.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003460:	e02f      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f838 	bl	80034dc <I2C_IsErrorOccurred>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff fa7b 	bl	8002970 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d013      	beq.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d1c8      	bne.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d068      	beq.n	80035da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2210      	movs	r2, #16
 800350e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003510:	e049      	b.n	80035a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d045      	beq.n	80035a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7ff fa29 	bl	8002970 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_IsErrorOccurred+0x54>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d13a      	bne.n	80035a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003552:	d121      	bne.n	8003598 <I2C_IsErrorOccurred+0xbc>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800355a:	d01d      	beq.n	8003598 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b20      	cmp	r3, #32
 8003560:	d01a      	beq.n	8003598 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003570:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003572:	f7ff f9fd 	bl	8002970 <HAL_GetTick>
 8003576:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	e00e      	b.n	8003598 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800357a:	f7ff f9f9 	bl	8002970 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b19      	cmp	r3, #25
 8003586:	d907      	bls.n	8003598 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003596:	e006      	b.n	80035a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d1e9      	bne.n	800357a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d003      	beq.n	80035bc <I2C_IsErrorOccurred+0xe0>
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0aa      	beq.n	8003512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01c      	beq.n	800368a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fe45 	bl	80032e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <I2C_IsErrorOccurred+0x1bc>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b4:	7a7b      	ldrb	r3, [r7, #9]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	0d5b      	lsrs	r3, r3, #21
 80036d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <I2C_TransferConfig+0x60>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	43db      	mvns	r3, r3
 80036e0:	ea02 0103 	and.w	r1, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	03ff63ff 	.word	0x03ff63ff

08003700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d138      	bne.n	8003788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003720:	2302      	movs	r3, #2
 8003722:	e032      	b.n	800378a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	; 0x24
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d139      	bne.n	8003820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e033      	b.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2224      	movs	r2, #36	; 0x24
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_PWREx_GetVoltageRange+0x18>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40007000 	.word	0x40007000

0800384c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385a:	d130      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d038      	beq.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2232      	movs	r2, #50	; 0x32
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003890:	e002      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b01      	subs	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d102      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f2      	bne.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d110      	bne.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00f      	b.n	80038de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d007      	beq.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038cc:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40007000 	.word	0x40007000
 80038f0:	20000004 	.word	0x20000004
 80038f4:	431bde83 	.word	0x431bde83

080038f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	f000 bc02 	b.w	8004110 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390c:	4b96      	ldr	r3, [pc, #600]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003916:	4b94      	ldr	r3, [pc, #592]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80e4 	beq.w	8003af6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_RCC_OscConfig+0x4c>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	f040 808b 	bne.w	8003a52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b01      	cmp	r3, #1
 8003940:	f040 8087 	bne.w	8003a52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003944:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_OscConfig+0x64>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e3d9      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	4b81      	ldr	r3, [pc, #516]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_RCC_OscConfig+0x7e>
 800396c:	4b7e      	ldr	r3, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003974:	e005      	b.n	8003982 <HAL_RCC_OscConfig+0x8a>
 8003976:	4b7c      	ldr	r3, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003982:	4293      	cmp	r3, r2
 8003984:	d223      	bcs.n	80039ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fd8c 	bl	80044a8 <RCC_SetFlashLatencyFromMSIRange>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e3ba      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399a:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039a0:	f043 0308 	orr.w	r3, r3, #8
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	496d      	ldr	r1, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b8:	4b6b      	ldr	r3, [pc, #428]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	4968      	ldr	r1, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
 80039cc:	e025      	b.n	8003a1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ce:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4960      	ldr	r1, [pc, #384]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	495b      	ldr	r1, [pc, #364]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fd4c 	bl	80044a8 <RCC_SetFlashLatencyFromMSIRange>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e37a      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a1a:	f000 fc81 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	4950      	ldr	r1, [pc, #320]	; (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <HAL_RCC_OscConfig+0x278>)
 8003a38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe ff46 	bl	80028d0 <HAL_InitTick>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d052      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	e35e      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d032      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a5a:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a66:	f7fe ff83 	bl	8002970 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6e:	f7fe ff7f 	bl	8002970 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e347      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a92:	f043 0308 	orr.w	r3, r3, #8
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4930      	ldr	r1, [pc, #192]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	492b      	ldr	r1, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
 8003abe:	e01a      	b.n	8003af6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003acc:	f7fe ff50 	bl	8002970 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad4:	f7fe ff4c 	bl	8002970 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e314      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1dc>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d073      	beq.n	8003bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x21c>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d063      	beq.n	8003be8 <HAL_RCC_OscConfig+0x2f0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15f      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e2f1      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x24c>
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e025      	b.n	8003b90 <HAL_RCC_OscConfig+0x298>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	d114      	bne.n	8003b78 <HAL_RCC_OscConfig+0x280>
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a02      	ldr	r2, [pc, #8]	; (8003b68 <HAL_RCC_OscConfig+0x270>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e013      	b.n	8003b90 <HAL_RCC_OscConfig+0x298>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	0800c8e8 	.word	0x0800c8e8
 8003b70:	20000004 	.word	0x20000004
 8003b74:	20000008 	.word	0x20000008
 8003b78:	4ba0      	ldr	r3, [pc, #640]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a9f      	ldr	r2, [pc, #636]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b9d      	ldr	r3, [pc, #628]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a9c      	ldr	r2, [pc, #624]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe feea 	bl	8002970 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fee6 	bl	8002970 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e2ae      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb2:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2a8>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fed6 	bl	8002970 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fed2 	bl	8002970 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e29a      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bda:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d0>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d060      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_OscConfig+0x310>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d119      	bne.n	8003c36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d116      	bne.n	8003c36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c08:	4b7c      	ldr	r3, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_OscConfig+0x328>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e277      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	4973      	ldr	r1, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c34:	e040      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d023      	beq.n	8003c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fe fe91 	bl	8002970 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fe fe8d 	bl	8002970 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e255      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	495f      	ldr	r1, [pc, #380]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	e018      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe fe6d 	bl	8002970 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fe69 	bl	8002970 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e231      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d03c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe fe48 	bl	8002970 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fe fe44 	bl	8002970 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e20c      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ef      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x3ec>
 8003d04:	e01b      	b.n	8003d3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d06:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0c:	4a3b      	ldr	r2, [pc, #236]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fe fe2b 	bl	8002970 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fe27 	bl	8002970 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1ef      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d30:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ef      	bne.n	8003d1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a6 	beq.w	8003e98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6593      	str	r3, [r2, #88]	; 0x58
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d74:	2301      	movs	r3, #1
 8003d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCC_OscConfig+0x508>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCC_OscConfig+0x508>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d90:	f7fe fdee 	bl	8002970 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7fe fdea 	bl	8002970 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1b2      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x508>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4d8>
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dce:	e029      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d115      	bne.n	8003e04 <HAL_RCC_OscConfig+0x50c>
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <HAL_RCC_OscConfig+0x504>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df8:	e014      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
 8003e04:	4b9a      	ldr	r3, [pc, #616]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	4a99      	ldr	r2, [pc, #612]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e14:	4b96      	ldr	r3, [pc, #600]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	4a95      	ldr	r2, [pc, #596]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fe fda0 	bl	8002970 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e34:	f7fe fd9c 	bl	8002970 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e162      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ed      	beq.n	8003e34 <HAL_RCC_OscConfig+0x53c>
 8003e58:	e015      	b.n	8003e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe fd89 	bl	8002970 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe fd85 	bl	8002970 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e14b      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e78:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ed      	bne.n	8003e62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e86:	7ffb      	ldrb	r3, [r7, #31]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8c:	4b78      	ldr	r3, [pc, #480]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d03c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01c      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003eac:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fd58 	bl	8002970 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec4:	f7fe fd54 	bl	8002970 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e11c      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed6:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ef      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x5cc>
 8003ee4:	e01b      	b.n	8003f1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ee6:	4b62      	ldr	r3, [pc, #392]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eec:	4a60      	ldr	r2, [pc, #384]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fd3b 	bl	8002970 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003efe:	f7fe fd37 	bl	8002970 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0ff      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ef      	bne.n	8003efe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80f3 	beq.w	800410e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f040 80c9 	bne.w	80040c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f32:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0203 	and.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d12c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	3b01      	subs	r3, #1
 8003f52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d123      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d11b      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d113      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d06b      	beq.n	8004078 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d062      	beq.n	800406c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fa6:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0ac      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2d      	ldr	r2, [pc, #180]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc2:	f7fe fcd5 	bl	8002970 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe fcd1 	bl	8002970 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e099      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_RCC_OscConfig+0x77c>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004002:	0212      	lsls	r2, r2, #8
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800400a:	0852      	lsrs	r2, r2, #1
 800400c:	3a01      	subs	r2, #1
 800400e:	0552      	lsls	r2, r2, #21
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004016:	0852      	lsrs	r2, r2, #1
 8004018:	3a01      	subs	r2, #1
 800401a:	0652      	lsls	r2, r2, #25
 800401c:	4311      	orrs	r1, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004022:	06d2      	lsls	r2, r2, #27
 8004024:	430a      	orrs	r2, r1
 8004026:	4912      	ldr	r1, [pc, #72]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8004028:	4313      	orrs	r3, r2
 800402a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0f      	ldr	r2, [pc, #60]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 800403e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004044:	f7fe fc94 	bl	8002970 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fc90 	bl	8002970 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e058      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_RCC_OscConfig+0x778>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800406a:	e050      	b.n	800410e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e04f      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
 8004070:	40021000 	.word	0x40021000
 8004074:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d144      	bne.n	800410e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004090:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409c:	f7fe fc68 	bl	8002970 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fc64 	bl	8002970 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e02c      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x7ac>
 80040c2:	e024      	b.n	800410e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d01f      	beq.n	800410a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 80040d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fc4b 	bl	8002970 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040de:	f7fe fc47 	bl	8002970 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e00f      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4905      	ldr	r1, [pc, #20]	; (8004118 <HAL_RCC_OscConfig+0x820>)
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_OscConfig+0x824>)
 8004104:	4013      	ands	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
 8004108:	e001      	b.n	800410e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	feeefffc 	.word	0xfeeefffc

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0e7      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b75      	ldr	r3, [pc, #468]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d910      	bls.n	8004164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b72      	ldr	r3, [pc, #456]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 0207 	bic.w	r2, r3, #7
 800414a:	4970      	ldr	r1, [pc, #448]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b6e      	ldr	r3, [pc, #440]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0cf      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	429a      	cmp	r2, r3
 800417e:	d908      	bls.n	8004192 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b63      	ldr	r3, [pc, #396]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4960      	ldr	r1, [pc, #384]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d04c      	beq.n	8004238 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a6:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d121      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e0a6      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041be:	4b54      	ldr	r3, [pc, #336]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e09a      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d6:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e08e      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e086      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4943      	ldr	r1, [pc, #268]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fe fbb2 	bl	8002970 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe fbae 	bl	8002970 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e06e      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004250:	429a      	cmp	r2, r3
 8004252:	d208      	bcs.n	8004266 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	492b      	ldr	r1, [pc, #172]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d210      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 0207 	bic.w	r2, r3, #7
 800427c:	4923      	ldr	r1, [pc, #140]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCC_ClockConfig+0x1ec>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e036      	b.n	8004304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4918      	ldr	r1, [pc, #96]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4910      	ldr	r1, [pc, #64]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042d4:	f000 f824 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	490b      	ldr	r1, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x1f4>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	4a09      	ldr	r2, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x1f8>)
 80042f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_ClockConfig+0x1fc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fae9 	bl	80028d0 <HAL_InitTick>
 80042fe:	4603      	mov	r3, r0
 8004300:	72fb      	strb	r3, [r7, #11]

  return status;
 8004302:	7afb      	ldrb	r3, [r7, #11]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
 8004314:	0800c8e8 	.word	0x0800c8e8
 8004318:	20000004 	.word	0x20000004
 800431c:	20000008 	.word	0x20000008

08004320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432e:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004338:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x34>
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d121      	bne.n	8004392 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d11e      	bne.n	8004392 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004354:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004360:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e005      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004370:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800437c:	4a2b      	ldr	r2, [pc, #172]	; (800442c <HAL_RCC_GetSysClockFreq+0x10c>)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004384:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d102      	bne.n	800439e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_RCC_GetSysClockFreq+0x110>)
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	e004      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_RCC_GetSysClockFreq+0x114>)
 80043a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d134      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ae:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d003      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0xac>
 80043c4:	e005      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c8:	617b      	str	r3, [r7, #20]
      break;
 80043ca:	e005      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ce:	617b      	str	r3, [r7, #20]
      break;
 80043d0:	e002      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	617b      	str	r3, [r7, #20]
      break;
 80043d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	3301      	adds	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	fb03 f202 	mul.w	r2, r3, r2
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCC_GetSysClockFreq+0x108>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	0e5b      	lsrs	r3, r3, #25
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	3301      	adds	r3, #1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004418:	69bb      	ldr	r3, [r7, #24]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	0800c900 	.word	0x0800c900
 8004430:	00f42400 	.word	0x00f42400
 8004434:	007a1200 	.word	0x007a1200

08004438 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCC_GetHCLKFreq+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004454:	f7ff fff0 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	0800c8f8 	.word	0x0800c8f8

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004480:	f7ff ffda 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0adb      	lsrs	r3, r3, #11
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	0800c8f8 	.word	0x0800c8f8

080044a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044c0:	f7ff f9b6 	bl	8003830 <HAL_PWREx_GetVoltageRange>
 80044c4:	6178      	str	r0, [r7, #20]
 80044c6:	e014      	b.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	6593      	str	r3, [r2, #88]	; 0x58
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044e0:	f7ff f9a6 	bl	8003830 <HAL_PWREx_GetVoltageRange>
 80044e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d10b      	bne.n	8004512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d919      	bls.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2ba0      	cmp	r3, #160	; 0xa0
 8004504:	d902      	bls.n	800450c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004506:	2302      	movs	r3, #2
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e013      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800450c:	2301      	movs	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	e010      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d902      	bls.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004518:	2303      	movs	r3, #3
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e00a      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d102      	bne.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004524:	2302      	movs	r3, #2
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	e004      	b.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d101      	bne.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004530:	2301      	movs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 0207 	bic.w	r2, r3, #7
 800453c:	4909      	ldr	r1, [pc, #36]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	40022000 	.word	0x40022000

08004568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004570:	2300      	movs	r3, #0
 8004572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004574:	2300      	movs	r3, #0
 8004576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004580:	2b00      	cmp	r3, #0
 8004582:	d031      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800458c:	d01a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800458e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004592:	d814      	bhi.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800459c:	d10f      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800459e:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4a5c      	ldr	r2, [pc, #368]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045aa:	e00c      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f9ce 	bl	8004954 <RCCEx_PLLSAI1_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	74fb      	strb	r3, [r7, #19]
      break;
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045cc:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	494e      	ldr	r1, [pc, #312]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045e2:	e001      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 809e 	beq.w	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045fa:	4b46      	ldr	r3, [pc, #280]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461a:	6593      	str	r3, [r2, #88]	; 0x58
 800461c:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004628:	2301      	movs	r3, #1
 800462a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462c:	4b3a      	ldr	r3, [pc, #232]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a39      	ldr	r2, [pc, #228]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004638:	f7fe f99a 	bl	8002970 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800463e:	e009      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fe f996 	bl	8002970 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d902      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	74fb      	strb	r3, [r7, #19]
        break;
 8004652:	e005      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004654:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d15a      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	429a      	cmp	r2, r3
 8004680:	d019      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ae:	4a19      	ldr	r2, [pc, #100]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe f956 	bl	8002970 <HAL_GetTick>
 80046c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c6:	e00b      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fe f952 	bl	8002970 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d902      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	74fb      	strb	r3, [r7, #19]
            break;
 80046de:	e006      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ec      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	4904      	ldr	r1, [pc, #16]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800470a:	e009      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
 8004710:	e006      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004720:	7c7b      	ldrb	r3, [r7, #17]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b8a      	ldr	r3, [pc, #552]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	4a89      	ldr	r2, [pc, #548]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473e:	4b84      	ldr	r3, [pc, #528]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	f023 0203 	bic.w	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4980      	ldr	r1, [pc, #512]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004760:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f023 020c 	bic.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	4978      	ldr	r1, [pc, #480]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004782:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	496f      	ldr	r1, [pc, #444]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	4967      	ldr	r1, [pc, #412]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	495e      	ldr	r1, [pc, #376]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e8:	4b59      	ldr	r3, [pc, #356]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4956      	ldr	r1, [pc, #344]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800480a:	4b51      	ldr	r3, [pc, #324]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	494d      	ldr	r1, [pc, #308]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d028      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800482c:	4b48      	ldr	r3, [pc, #288]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4945      	ldr	r1, [pc, #276]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a3f      	ldr	r2, [pc, #252]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004856:	60d3      	str	r3, [r2, #12]
 8004858:	e011      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004862:	d10c      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f872 	bl	8004954 <RCCEx_PLLSAI1_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d028      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	492d      	ldr	r1, [pc, #180]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a8:	d106      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048aa:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b4:	60d3      	str	r3, [r2, #12]
 80048b6:	e011      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c0:	d10c      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 f843 	bl	8004954 <RCCEx_PLLSAI1_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01c      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	4916      	ldr	r1, [pc, #88]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004906:	d10c      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	2102      	movs	r1, #2
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f820 	bl	8004954 <RCCEx_PLLSAI1_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800491e:	7cfb      	ldrb	r3, [r7, #19]
 8004920:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	4904      	ldr	r1, [pc, #16]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004944:	7cbb      	ldrb	r3, [r7, #18]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000

08004954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004962:	4b74      	ldr	r3, [pc, #464]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800496e:	4b71      	ldr	r3, [pc, #452]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
       ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004986:	4b6b      	ldr	r3, [pc, #428]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
       ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d047      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e044      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d018      	beq.n	80049da <RCCEx_PLLSAI1_Config+0x86>
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d825      	bhi.n	80049f8 <RCCEx_PLLSAI1_Config+0xa4>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d002      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x62>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d009      	beq.n	80049c8 <RCCEx_PLLSAI1_Config+0x74>
 80049b4:	e020      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b6:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c6:	e01a      	b.n	80049fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e013      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e6:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f6:	e006      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e004      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a0e:	4b49      	ldr	r3, [pc, #292]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	430b      	orrs	r3, r1
 8004a24:	4943      	ldr	r1, [pc, #268]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d17c      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a30:	4b40      	ldr	r3, [pc, #256]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3f      	ldr	r2, [pc, #252]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fd ff98 	bl	8002970 <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a42:	e009      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a44:	f7fd ff94 	bl	8002970 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
        break;
 8004a56:	e005      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ef      	bne.n	8004a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d15f      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a70:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	492a      	ldr	r1, [pc, #168]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
 8004a90:	e027      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d112      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6892      	ldr	r2, [r2, #8]
 8004aa8:	0211      	lsls	r1, r2, #8
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6912      	ldr	r2, [r2, #16]
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0552      	lsls	r2, r2, #21
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	491f      	ldr	r1, [pc, #124]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	610b      	str	r3, [r1, #16]
 8004abc:	e011      	b.n	8004ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	0211      	lsls	r1, r2, #8
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6952      	ldr	r2, [r2, #20]
 8004ad4:	0852      	lsrs	r2, r2, #1
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0652      	lsls	r2, r2, #25
 8004ada:	430a      	orrs	r2, r1
 8004adc:	4915      	ldr	r1, [pc, #84]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fd ff3f 	bl	8002970 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004af4:	e009      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af6:	f7fd ff3b 	bl	8002970 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d902      	bls.n	8004b0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	73fb      	strb	r3, [r7, #15]
          break;
 8004b08:	e005      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0ef      	beq.n	8004af6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	4903      	ldr	r1, [pc, #12]	; (8004b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e095      	b.n	8004c76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d009      	beq.n	8004b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd fc84 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb0:	d902      	bls.n	8004bb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e002      	b.n	8004bbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bc6:	d007      	beq.n	8004bd8 <HAL_SPI_Init+0xa0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	ea42 0103 	orr.w	r1, r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	f003 0204 	and.w	r2, r3, #4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c54:	ea42 0103 	orr.w	r1, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b088      	sub	sp, #32
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_SPI_Transmit+0x22>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e15f      	b.n	8004f60 <HAL_SPI_Transmit+0x2e2>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ca8:	f7fd fe62 	bl	8002970 <HAL_GetTick>
 8004cac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc2:	e148      	b.n	8004f56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Transmit+0x52>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd4:	e13f      	b.n	8004f56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d10f      	bne.n	8004d42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d007      	beq.n	8004d60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d68:	d94f      	bls.n	8004e0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0xfa>
 8004d72:	8afb      	ldrh	r3, [r7, #22]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d142      	bne.n	8004dfe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9c:	e02f      	b.n	8004dfe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d112      	bne.n	8004dd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd0:	e015      	b.n	8004dfe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd2:	f7fd fdcd 	bl	8002970 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d803      	bhi.n	8004dea <HAL_SPI_Transmit+0x16c>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_Transmit+0x172>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004dfc:	e0ab      	b.n	8004f56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ca      	bne.n	8004d9e <HAL_SPI_Transmit+0x120>
 8004e08:	e080      	b.n	8004f0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Transmit+0x19a>
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d174      	bne.n	8004f02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d912      	bls.n	8004e48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b02      	subs	r3, #2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e46:	e05c      	b.n	8004f02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e6e:	e048      	b.n	8004f02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d12b      	bne.n	8004ed6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d912      	bls.n	8004eae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b02      	subs	r3, #2
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eac:	e029      	b.n	8004f02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed4:	e015      	b.n	8004f02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed6:	f7fd fd4b 	bl	8002970 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d803      	bhi.n	8004eee <HAL_SPI_Transmit+0x270>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_Transmit+0x276>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004f00:	e029      	b.n	8004f56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1b1      	bne.n	8004e70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fc7d 	bl	8005810 <SPI_EndRxTxTransaction>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e003      	b.n	8004f56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f76:	2301      	movs	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x26>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e20a      	b.n	80053a4 <HAL_SPI_TransmitReceive+0x43c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f96:	f7fd fceb 	bl	8002970 <HAL_GetTick>
 8004f9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004faa:	887b      	ldrh	r3, [r7, #2]
 8004fac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb2:	7efb      	ldrb	r3, [r7, #27]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d00e      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x6e>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fbe:	d106      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x66>
 8004fc8:	7efb      	ldrb	r3, [r7, #27]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d003      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fd4:	e1e0      	b.n	8005398 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x80>
 8004fe2:	887b      	ldrh	r3, [r7, #2]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fee:	e1d3      	b.n	8005398 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d003      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2205      	movs	r2, #5
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005046:	d802      	bhi.n	800504e <HAL_SPI_TransmitReceive+0xe6>
 8005048:	8a3b      	ldrh	r3, [r7, #16]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d908      	bls.n	8005060 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e007      	b.n	8005070 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d007      	beq.n	800508e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005096:	f240 8081 	bls.w	800519c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x140>
 80050a2:	8a7b      	ldrh	r3, [r7, #18]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d16d      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050cc:	e05a      	b.n	8005184 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d11b      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x1ac>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x1ac>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d113      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	881a      	ldrh	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	1c9a      	adds	r2, r3, #2
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d11c      	bne.n	800515c <HAL_SPI_TransmitReceive+0x1f4>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	b292      	uxth	r2, r2
 800513a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005158:	2301      	movs	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800515c:	f7fd fc08 	bl	8002970 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005168:	429a      	cmp	r2, r3
 800516a:	d80b      	bhi.n	8005184 <HAL_SPI_TransmitReceive+0x21c>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d007      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005182:	e109      	b.n	8005398 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d19f      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x166>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d199      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x166>
 800519a:	e0e3      	b.n	8005364 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x244>
 80051a4:	8a7b      	ldrh	r3, [r7, #18]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f040 80cf 	bne.w	800534a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d912      	bls.n	80051dc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	881a      	ldrh	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	1c9a      	adds	r2, r3, #2
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b02      	subs	r3, #2
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051da:	e0b6      	b.n	800534a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005202:	e0a2      	b.n	800534a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d134      	bne.n	800527c <HAL_SPI_TransmitReceive+0x314>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02f      	beq.n	800527c <HAL_SPI_TransmitReceive+0x314>
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2b01      	cmp	r3, #1
 8005220:	d12c      	bne.n	800527c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d912      	bls.n	8005252 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b02      	subs	r3, #2
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005250:	e012      	b.n	8005278 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d148      	bne.n	800531c <HAL_SPI_TransmitReceive+0x3b4>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d042      	beq.n	800531c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d923      	bls.n	80052ea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	b292      	uxth	r2, r2
 80052ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b02      	subs	r3, #2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d81f      	bhi.n	8005318 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	e016      	b.n	8005318 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f103 020c 	add.w	r2, r3, #12
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005318:	2301      	movs	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800531c:	f7fd fb28 	bl	8002970 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005328:	429a      	cmp	r2, r3
 800532a:	d803      	bhi.n	8005334 <HAL_SPI_TransmitReceive+0x3cc>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d102      	bne.n	800533a <HAL_SPI_TransmitReceive+0x3d2>
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	2b00      	cmp	r3, #0
 8005338:	d107      	bne.n	800534a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005348:	e026      	b.n	8005398 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f af57 	bne.w	8005204 <HAL_SPI_TransmitReceive+0x29c>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	f47f af50 	bne.w	8005204 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fa51 	bl	8005810 <SPI_EndRxTxTransaction>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e003      	b.n	8005398 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3728      	adds	r7, #40	; 0x28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
    return;
 80053ea:	e0ce      	b.n	800558a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_SPI_IRQHandler+0x5e>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d004      	beq.n	800540a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
    return;
 8005408:	e0bf      	b.n	800558a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <HAL_SPI_IRQHandler+0x7e>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80b0 	beq.w	800558a <HAL_SPI_IRQHandler+0x1de>
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80aa 	beq.w	800558a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d023      	beq.n	8005488 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b03      	cmp	r3, #3
 800544a:	d011      	beq.n	8005470 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005450:	f043 0204 	orr.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	e00b      	b.n	8005488 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
        return;
 8005486:	e080      	b.n	800558a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d04f      	beq.n	8005588 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_SPI_IRQHandler+0x168>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d034      	beq.n	800557e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0203 	bic.w	r2, r2, #3
 8005522:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	2b00      	cmp	r3, #0
 800552a:	d011      	beq.n	8005550 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_SPI_IRQHandler+0x1e4>)
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	4618      	mov	r0, r3
 800553a:	f7fd fb5a 	bl	8002bf2 <HAL_DMA_Abort_IT>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <HAL_SPI_IRQHandler+0x1e4>)
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	4618      	mov	r0, r3
 8005566:	f7fd fb44 	bl	8002bf2 <HAL_DMA_Abort_IT>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800557c:	e003      	b.n	8005586 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f808 	bl	8005594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005584:	e000      	b.n	8005588 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005586:	bf00      	nop
    return;
 8005588:	bf00      	nop
  }
}
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	080055a9 	.word	0x080055a9

08005594 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ffe5 	bl	8005594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055e4:	f7fd f9c4 	bl	8002970 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055f4:	f7fd f9bc 	bl	8002970 <HAL_GetTick>
 80055f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055fa:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	015b      	lsls	r3, r3, #5
 8005600:	0d1b      	lsrs	r3, r3, #20
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800560a:	e054      	b.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d050      	beq.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005614:	f7fd f9ac 	bl	8002970 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	429a      	cmp	r2, r3
 8005622:	d902      	bls.n	800562a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d13d      	bne.n	80056a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005642:	d111      	bne.n	8005668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564c:	d004      	beq.n	8005658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d107      	bne.n	8005668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005670:	d10f      	bne.n	8005692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e017      	b.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4013      	ands	r3, r2
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d19b      	bne.n	800560c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000004 	.word	0x20000004

080056e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	; 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056f6:	f7fd f93b 	bl	8002970 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	4413      	add	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005706:	f7fd f933 	bl	8002970 <HAL_GetTick>
 800570a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005714:	4b3d      	ldr	r3, [pc, #244]	; (800580c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	0d1b      	lsrs	r3, r3, #20
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800572c:	e060      	b.n	80057f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005734:	d107      	bne.n	8005746 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005744:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d050      	beq.n	80057f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800574e:	f7fd f90f 	bl	8002970 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	429a      	cmp	r2, r3
 800575c:	d902      	bls.n	8005764 <SPI_WaitFifoStateUntilTimeout+0x80>
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d13d      	bne.n	80057e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577c:	d111      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005786:	d004      	beq.n	8005792 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d107      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	d10f      	bne.n	80057cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e010      	b.n	8005802 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d196      	bne.n	800572e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3728      	adds	r7, #40	; 0x28
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000004 	.word	0x20000004

08005810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff5b 	bl	80056e4 <SPI_WaitFifoStateUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e027      	b.n	8005894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fec0 	bl	80055d4 <SPI_WaitFlagStateUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e014      	b.n	8005894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff ff34 	bl	80056e4 <SPI_WaitFifoStateUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e000      	b.n	8005894 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e040      	b.n	8005930 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fe36 	bl	8002530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa54 	bl	8005d90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f825 	bl	8005938 <UART_SetConfig>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e01b      	b.n	8005930 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fad3 	bl	8005ed4 <UART_CheckIdleState>
 800592e:	4603      	mov	r3, r0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800593c:	b08a      	sub	sp, #40	; 0x28
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	431a      	orrs	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	431a      	orrs	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	4313      	orrs	r3, r2
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4bb4      	ldr	r3, [pc, #720]	; (8005c38 <UART_SetConfig+0x300>)
 8005968:	4013      	ands	r3, r2
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005970:	430b      	orrs	r3, r1
 8005972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4aa9      	ldr	r2, [pc, #676]	; (8005c3c <UART_SetConfig+0x304>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	4313      	orrs	r3, r2
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b4:	430a      	orrs	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4aa0      	ldr	r2, [pc, #640]	; (8005c40 <UART_SetConfig+0x308>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d126      	bne.n	8005a10 <UART_SetConfig+0xd8>
 80059c2:	4ba0      	ldr	r3, [pc, #640]	; (8005c44 <UART_SetConfig+0x30c>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d81b      	bhi.n	8005a08 <UART_SetConfig+0xd0>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0xa0>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a01 	.word	0x08005a01
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ee:	e080      	b.n	8005af2 <UART_SetConfig+0x1ba>
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f6:	e07c      	b.n	8005af2 <UART_SetConfig+0x1ba>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fe:	e078      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a06:	e074      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e070      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a8c      	ldr	r2, [pc, #560]	; (8005c48 <UART_SetConfig+0x310>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d138      	bne.n	8005a8c <UART_SetConfig+0x154>
 8005a1a:	4b8a      	ldr	r3, [pc, #552]	; (8005c44 <UART_SetConfig+0x30c>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	2b0c      	cmp	r3, #12
 8005a26:	d82d      	bhi.n	8005a84 <UART_SetConfig+0x14c>
 8005a28:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0xf8>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a65 	.word	0x08005a65
 8005a34:	08005a85 	.word	0x08005a85
 8005a38:	08005a85 	.word	0x08005a85
 8005a3c:	08005a85 	.word	0x08005a85
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005a85 	.word	0x08005a85
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005a85 	.word	0x08005a85
 8005a50:	08005a6d 	.word	0x08005a6d
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a85 	.word	0x08005a85
 8005a60:	08005a7d 	.word	0x08005a7d
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e042      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e03e      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e03a      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e036      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e032      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a6a      	ldr	r2, [pc, #424]	; (8005c3c <UART_SetConfig+0x304>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d12a      	bne.n	8005aec <UART_SetConfig+0x1b4>
 8005a96:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <UART_SetConfig+0x30c>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa4:	d01a      	beq.n	8005adc <UART_SetConfig+0x1a4>
 8005aa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aaa:	d81b      	bhi.n	8005ae4 <UART_SetConfig+0x1ac>
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab0:	d00c      	beq.n	8005acc <UART_SetConfig+0x194>
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab6:	d815      	bhi.n	8005ae4 <UART_SetConfig+0x1ac>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <UART_SetConfig+0x18c>
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d008      	beq.n	8005ad4 <UART_SetConfig+0x19c>
 8005ac2:	e00f      	b.n	8005ae4 <UART_SetConfig+0x1ac>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e012      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005acc:	2302      	movs	r3, #2
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e00e      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e00a      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e006      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aea:	e002      	b.n	8005af2 <UART_SetConfig+0x1ba>
 8005aec:	2310      	movs	r3, #16
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a51      	ldr	r2, [pc, #324]	; (8005c3c <UART_SetConfig+0x304>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d17a      	bne.n	8005bf2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d824      	bhi.n	8005b4e <UART_SetConfig+0x216>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x1d4>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b4f 	.word	0x08005b4f
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b3f 	.word	0x08005b3f
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b4f 	.word	0x08005b4f
 8005b28:	08005b4f 	.word	0x08005b4f
 8005b2c:	08005b47 	.word	0x08005b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fe fc8e 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8005b34:	61f8      	str	r0, [r7, #28]
        break;
 8005b36:	e010      	b.n	8005b5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b38:	4b44      	ldr	r3, [pc, #272]	; (8005c4c <UART_SetConfig+0x314>)
 8005b3a:	61fb      	str	r3, [r7, #28]
        break;
 8005b3c:	e00d      	b.n	8005b5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3e:	f7fe fbef 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8005b42:	61f8      	str	r0, [r7, #28]
        break;
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	61fb      	str	r3, [r7, #28]
        break;
 8005b4c:	e005      	b.n	8005b5a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8107 	beq.w	8005d70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d305      	bcc.n	8005b7e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d903      	bls.n	8005b86 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b84:	e0f4      	b.n	8005d70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	022b      	lsls	r3, r5, #8
 8005b98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b9c:	0222      	lsls	r2, r4, #8
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	6849      	ldr	r1, [r1, #4]
 8005ba2:	0849      	lsrs	r1, r1, #1
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	4688      	mov	r8, r1
 8005ba8:	4681      	mov	r9, r0
 8005baa:	eb12 0a08 	adds.w	sl, r2, r8
 8005bae:	eb43 0b09 	adc.w	fp, r3, r9
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	f7fb f830 	bl	8000c28 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4613      	mov	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd6:	d308      	bcc.n	8005bea <UART_SetConfig+0x2b2>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d204      	bcs.n	8005bea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e0c2      	b.n	8005d70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bf0:	e0be      	b.n	8005d70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfa:	d16a      	bne.n	8005cd2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d834      	bhi.n	8005c6e <UART_SetConfig+0x336>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x2d4>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c59 	.word	0x08005c59
 8005c18:	08005c6f 	.word	0x08005c6f
 8005c1c:	08005c5f 	.word	0x08005c5f
 8005c20:	08005c6f 	.word	0x08005c6f
 8005c24:	08005c6f 	.word	0x08005c6f
 8005c28:	08005c6f 	.word	0x08005c6f
 8005c2c:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe fc0e 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8005c34:	61f8      	str	r0, [r7, #28]
        break;
 8005c36:	e020      	b.n	8005c7a <UART_SetConfig+0x342>
 8005c38:	efff69f3 	.word	0xefff69f3
 8005c3c:	40008000 	.word	0x40008000
 8005c40:	40013800 	.word	0x40013800
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40004400 	.word	0x40004400
 8005c4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe fc14 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8005c54:	61f8      	str	r0, [r7, #28]
        break;
 8005c56:	e010      	b.n	8005c7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <UART_SetConfig+0x454>)
 8005c5a:	61fb      	str	r3, [r7, #28]
        break;
 8005c5c:	e00d      	b.n	8005c7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fe fb5f 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8005c62:	61f8      	str	r0, [r7, #28]
        break;
 8005c64:	e009      	b.n	8005c7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	61fb      	str	r3, [r7, #28]
        break;
 8005c6c:	e005      	b.n	8005c7a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d077      	beq.n	8005d70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	005a      	lsls	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d916      	bls.n	8005cca <UART_SetConfig+0x392>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca2:	d212      	bcs.n	8005cca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f023 030f 	bic.w	r3, r3, #15
 8005cac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	8afb      	ldrh	r3, [r7, #22]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	8afa      	ldrh	r2, [r7, #22]
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	e052      	b.n	8005d70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cd0:	e04e      	b.n	8005d70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d827      	bhi.n	8005d2a <UART_SetConfig+0x3f2>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x3a8>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	08005d2b 	.word	0x08005d2b
 8005cf0:	08005d1b 	.word	0x08005d1b
 8005cf4:	08005d2b 	.word	0x08005d2b
 8005cf8:	08005d2b 	.word	0x08005d2b
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d23 	.word	0x08005d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fe fba4 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8005d08:	61f8      	str	r0, [r7, #28]
        break;
 8005d0a:	e014      	b.n	8005d36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d0c:	f7fe fbb6 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
        break;
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <UART_SetConfig+0x454>)
 8005d16:	61fb      	str	r3, [r7, #28]
        break;
 8005d18:	e00d      	b.n	8005d36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe fb01 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8005d1e:	61f8      	str	r0, [r7, #28]
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	61fb      	str	r3, [r7, #28]
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d34:	bf00      	nop
    }

    if (pclk != 0U)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d019      	beq.n	8005d70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	085a      	lsrs	r2, r3, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d909      	bls.n	8005d6a <UART_SetConfig+0x432>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d205      	bcs.n	8005d6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60da      	str	r2, [r3, #12]
 8005d68:	e002      	b.n	8005d70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3728      	adds	r7, #40	; 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	00f42400 	.word	0x00f42400

08005d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8e:	d10a      	bne.n	8005ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b098      	sub	sp, #96	; 0x60
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee4:	f7fc fd44 	bl	8002970 <HAL_GetTick>
 8005ee8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d12e      	bne.n	8005f56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f00:	2200      	movs	r2, #0
 8005f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f88c 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d021      	beq.n	8005f56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
 8005f32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e062      	b.n	800601c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d149      	bne.n	8005ff8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f856 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d03c      	beq.n	8005ff8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd0:	61fa      	str	r2, [r7, #28]
 8005fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e011      	b.n	800601c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3758      	adds	r7, #88	; 0x58
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006034:	e049      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d045      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fc fc97 	bl	8002970 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e048      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d031      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d110      	bne.n	8006096 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2208      	movs	r2, #8
 800607a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f838 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2208      	movs	r2, #8
 8006086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e029      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a4:	d111      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f81e 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0a6      	beq.n	8006036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b095      	sub	sp, #84	; 0x54
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
 800611a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800611e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	61fb      	str	r3, [r7, #28]
   return(result);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e5      	bne.n	800612c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	2b01      	cmp	r3, #1
 8006166:	d118      	bne.n	800619a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	60bb      	str	r3, [r7, #8]
   return(result);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f023 0310 	bic.w	r3, r3, #16
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	613b      	str	r3, [r7, #16]
   return(result);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e6      	bne.n	8006168 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061ae:	bf00      	nop
 80061b0:	3754      	adds	r7, #84	; 0x54
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061c0:	4904      	ldr	r1, [pc, #16]	; (80061d4 <MX_FATFS_Init+0x18>)
 80061c2:	4805      	ldr	r0, [pc, #20]	; (80061d8 <MX_FATFS_Init+0x1c>)
 80061c4:	f002 ff78 	bl	80090b8 <FATFS_LinkDriver>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b03      	ldr	r3, [pc, #12]	; (80061dc <MX_FATFS_Init+0x20>)
 80061ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	200006a4 	.word	0x200006a4
 80061d8:	20000010 	.word	0x20000010
 80061dc:	200006a0 	.word	0x200006a0

080061e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fb f87f 	bl	8001300 <SD_disk_initialize>
 8006202:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fb f957 	bl	80014cc <SD_disk_status>
 800621e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006238:	7bf8      	ldrb	r0, [r7, #15]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	f7fb f95a 	bl	80014f8 <SD_disk_read>
 8006244:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800625e:	7bf8      	ldrb	r0, [r7, #15]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	f7fb f9b1 	bl	80015cc <SD_disk_write>
 800626a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	603a      	str	r2, [r7, #0]
 800627e:	71fb      	strb	r3, [r7, #7]
 8006280:	460b      	mov	r3, r1
 8006282:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006284:	79b9      	ldrb	r1, [r7, #6]
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f7fb fa22 	bl	80016d4 <SD_disk_ioctl>
 8006290:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <disk_status+0x30>)
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	79fa      	ldrb	r2, [r7, #7]
 80062b4:	4905      	ldr	r1, [pc, #20]	; (80062cc <disk_status+0x30>)
 80062b6:	440a      	add	r2, r1
 80062b8:	7a12      	ldrb	r2, [r2, #8]
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200008d0 	.word	0x200008d0

080062d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <disk_initialize+0x48>)
 80062e2:	5cd3      	ldrb	r3, [r2, r3]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d111      	bne.n	800630c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <disk_initialize+0x48>)
 80062ec:	2101      	movs	r1, #1
 80062ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <disk_initialize+0x48>)
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	79fa      	ldrb	r2, [r7, #7]
 80062fe:	4906      	ldr	r1, [pc, #24]	; (8006318 <disk_initialize+0x48>)
 8006300:	440a      	add	r2, r1
 8006302:	7a12      	ldrb	r2, [r2, #8]
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200008d0 	.word	0x200008d0

0800631c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <disk_read+0x3c>)
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	689c      	ldr	r4, [r3, #8]
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	4a07      	ldr	r2, [pc, #28]	; (8006358 <disk_read+0x3c>)
 800633c:	4413      	add	r3, r2
 800633e:	7a18      	ldrb	r0, [r3, #8]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	47a0      	blx	r4
 8006348:	4603      	mov	r3, r0
 800634a:	75fb      	strb	r3, [r7, #23]
  return res;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd90      	pop	{r4, r7, pc}
 8006356:	bf00      	nop
 8006358:	200008d0 	.word	0x200008d0

0800635c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <disk_write+0x3c>)
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	68dc      	ldr	r4, [r3, #12]
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4a07      	ldr	r2, [pc, #28]	; (8006398 <disk_write+0x3c>)
 800637c:	4413      	add	r3, r2
 800637e:	7a18      	ldrb	r0, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	47a0      	blx	r4
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]
  return res;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
}
 800638e:	4618      	mov	r0, r3
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd90      	pop	{r4, r7, pc}
 8006396:	bf00      	nop
 8006398:	200008d0 	.word	0x200008d0

0800639c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	603a      	str	r2, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	460b      	mov	r3, r1
 80063aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <disk_ioctl+0x38>)
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	79fa      	ldrb	r2, [r7, #7]
 80063ba:	4906      	ldr	r1, [pc, #24]	; (80063d4 <disk_ioctl+0x38>)
 80063bc:	440a      	add	r2, r1
 80063be:	7a10      	ldrb	r0, [r2, #8]
 80063c0:	79b9      	ldrb	r1, [r7, #6]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	4798      	blx	r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200008d0 	.word	0x200008d0

080063d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	b21a      	sxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063fa:	89fb      	ldrh	r3, [r7, #14]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3303      	adds	r3, #3
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	3202      	adds	r2, #2
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	3201      	adds	r2, #1
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006440:	68fb      	ldr	r3, [r7, #12]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	887a      	ldrh	r2, [r7, #2]
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	0a1b      	lsrs	r3, r3, #8
 80064b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	1c53      	adds	r3, r2, #1
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	6179      	str	r1, [r7, #20]
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3b01      	subs	r3, #1
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f1      	bne.n	80064f6 <mem_cpy+0x1a>
	}
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800651e:	b480      	push	{r7}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	617a      	str	r2, [r7, #20]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3b01      	subs	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f3      	bne.n	800652e <mem_set+0x10>
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006554:	b480      	push	{r7}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	61fa      	str	r2, [r7, #28]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4619      	mov	r1, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	61ba      	str	r2, [r7, #24]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	1acb      	subs	r3, r1, r3
 8006580:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3b01      	subs	r3, #1
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <mem_cmp+0x40>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0eb      	beq.n	800656c <mem_cmp+0x18>

	return r;
 8006594:	697b      	ldr	r3, [r7, #20]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3724      	adds	r7, #36	; 0x24
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065ac:	e002      	b.n	80065b4 <chk_chr+0x12>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3301      	adds	r3, #1
 80065b2:	607b      	str	r3, [r7, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <chk_chr+0x26>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d1f2      	bne.n	80065ae <chk_chr+0xc>
	return *str;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	781b      	ldrb	r3, [r3, #0]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e029      	b.n	8006640 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065ec:	4a27      	ldr	r2, [pc, #156]	; (800668c <chk_lock+0xb4>)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	4413      	add	r3, r2
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01d      	beq.n	8006636 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065fa:	4a24      	ldr	r2, [pc, #144]	; (800668c <chk_lock+0xb4>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	4413      	add	r3, r2
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d116      	bne.n	800663a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800660c:	4a1f      	ldr	r2, [pc, #124]	; (800668c <chk_lock+0xb4>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	4413      	add	r3, r2
 8006614:	3304      	adds	r3, #4
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800661c:	429a      	cmp	r2, r3
 800661e:	d10c      	bne.n	800663a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006620:	4a1a      	ldr	r2, [pc, #104]	; (800668c <chk_lock+0xb4>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4413      	add	r3, r2
 8006628:	3308      	adds	r3, #8
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006630:	429a      	cmp	r2, r3
 8006632:	d102      	bne.n	800663a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006634:	e007      	b.n	8006646 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d9d2      	bls.n	80065ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d109      	bne.n	8006660 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <chk_lock+0x80>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d101      	bne.n	800665c <chk_lock+0x84>
 8006658:	2300      	movs	r3, #0
 800665a:	e010      	b.n	800667e <chk_lock+0xa6>
 800665c:	2312      	movs	r3, #18
 800665e:	e00e      	b.n	800667e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <chk_lock+0xa0>
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <chk_lock+0xb4>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	4413      	add	r3, r2
 800666e:	330c      	adds	r3, #12
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d101      	bne.n	800667c <chk_lock+0xa4>
 8006678:	2310      	movs	r3, #16
 800667a:	e000      	b.n	800667e <chk_lock+0xa6>
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	200006b0 	.word	0x200006b0

08006690 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006696:	2300      	movs	r3, #0
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	e002      	b.n	80066a2 <enq_lock+0x12>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3301      	adds	r3, #1
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d806      	bhi.n	80066b6 <enq_lock+0x26>
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <enq_lock+0x40>)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	4413      	add	r3, r2
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f2      	bne.n	800669c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	200006b0 	.word	0x200006b0

080066d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e01f      	b.n	8006724 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80066e4:	4a41      	ldr	r2, [pc, #260]	; (80067ec <inc_lock+0x118>)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4413      	add	r3, r2
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d113      	bne.n	800671e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066f6:	4a3d      	ldr	r2, [pc, #244]	; (80067ec <inc_lock+0x118>)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	4413      	add	r3, r2
 80066fe:	3304      	adds	r3, #4
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006706:	429a      	cmp	r2, r3
 8006708:	d109      	bne.n	800671e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800670a:	4a38      	ldr	r2, [pc, #224]	; (80067ec <inc_lock+0x118>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4413      	add	r3, r2
 8006712:	3308      	adds	r3, #8
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800671a:	429a      	cmp	r2, r3
 800671c:	d006      	beq.n	800672c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d9dc      	bls.n	80066e4 <inc_lock+0x10>
 800672a:	e000      	b.n	800672e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800672c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d132      	bne.n	800679a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e002      	b.n	8006740 <inc_lock+0x6c>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d806      	bhi.n	8006754 <inc_lock+0x80>
 8006746:	4a29      	ldr	r2, [pc, #164]	; (80067ec <inc_lock+0x118>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4413      	add	r3, r2
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f2      	bne.n	800673a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d101      	bne.n	800675e <inc_lock+0x8a>
 800675a:	2300      	movs	r3, #0
 800675c:	e040      	b.n	80067e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4922      	ldr	r1, [pc, #136]	; (80067ec <inc_lock+0x118>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	440b      	add	r3, r1
 800676a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	491e      	ldr	r1, [pc, #120]	; (80067ec <inc_lock+0x118>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	440b      	add	r3, r1
 8006778:	3304      	adds	r3, #4
 800677a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	491a      	ldr	r1, [pc, #104]	; (80067ec <inc_lock+0x118>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	440b      	add	r3, r1
 8006788:	3308      	adds	r3, #8
 800678a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800678c:	4a17      	ldr	r2, [pc, #92]	; (80067ec <inc_lock+0x118>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	4413      	add	r3, r2
 8006794:	330c      	adds	r3, #12
 8006796:	2200      	movs	r2, #0
 8006798:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <inc_lock+0xe0>
 80067a0:	4a12      	ldr	r2, [pc, #72]	; (80067ec <inc_lock+0x118>)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	4413      	add	r3, r2
 80067a8:	330c      	adds	r3, #12
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <inc_lock+0xe0>
 80067b0:	2300      	movs	r3, #0
 80067b2:	e015      	b.n	80067e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d108      	bne.n	80067cc <inc_lock+0xf8>
 80067ba:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <inc_lock+0x118>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	4413      	add	r3, r2
 80067c2:	330c      	adds	r3, #12
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	e001      	b.n	80067d0 <inc_lock+0xfc>
 80067cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067d0:	4906      	ldr	r1, [pc, #24]	; (80067ec <inc_lock+0x118>)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	440b      	add	r3, r1
 80067d8:	330c      	adds	r3, #12
 80067da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	200006b0 	.word	0x200006b0

080067f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d825      	bhi.n	8006850 <dec_lock+0x60>
		n = Files[i].ctr;
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <dec_lock+0x74>)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	4413      	add	r3, r2
 800680c:	330c      	adds	r3, #12
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006812:	89fb      	ldrh	r3, [r7, #14]
 8006814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006818:	d101      	bne.n	800681e <dec_lock+0x2e>
 800681a:	2300      	movs	r3, #0
 800681c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800681e:	89fb      	ldrh	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <dec_lock+0x3a>
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	3b01      	subs	r3, #1
 8006828:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800682a:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <dec_lock+0x74>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	4413      	add	r3, r2
 8006832:	330c      	adds	r3, #12
 8006834:	89fa      	ldrh	r2, [r7, #14]
 8006836:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <dec_lock+0x5a>
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <dec_lock+0x74>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	737b      	strb	r3, [r7, #13]
 800684e:	e001      	b.n	8006854 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006850:	2302      	movs	r3, #2
 8006852:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006854:	7b7b      	ldrb	r3, [r7, #13]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	200006b0 	.word	0x200006b0

08006868 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e010      	b.n	8006898 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006876:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <clear_lock+0x44>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4413      	add	r3, r2
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d105      	bne.n	8006892 <clear_lock+0x2a>
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <clear_lock+0x44>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	4413      	add	r3, r2
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d9eb      	bls.n	8006876 <clear_lock+0xe>
	}
}
 800689e:	bf00      	nop
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	200006b0 	.word	0x200006b0

080068b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	78db      	ldrb	r3, [r3, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d034      	beq.n	800692e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7858      	ldrb	r0, [r3, #1]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068d4:	2301      	movs	r3, #1
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	f7ff fd40 	bl	800635c <disk_write>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	73fb      	strb	r3, [r7, #15]
 80068e6:	e022      	b.n	800692e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d217      	bcs.n	800692e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	789b      	ldrb	r3, [r3, #2]
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	e010      	b.n	8006928 <sync_window+0x78>
					wsect += fs->fsize;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4413      	add	r3, r2
 800690e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7858      	ldrb	r0, [r3, #1]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800691a:	2301      	movs	r3, #1
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	f7ff fd1d 	bl	800635c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3b01      	subs	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d8eb      	bhi.n	8006906 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d01b      	beq.n	8006988 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ffad 	bl	80068b0 <sync_window>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d113      	bne.n	8006988 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	7858      	ldrb	r0, [r3, #1]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800696a:	2301      	movs	r3, #1
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	f7ff fcd5 	bl	800631c <disk_read>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006978:	f04f 33ff 	mov.w	r3, #4294967295
 800697c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff87 	bl	80068b0 <sync_window>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d159      	bne.n	8006a60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d149      	bne.n	8006a48 <sync_fs+0xb4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	791b      	ldrb	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d145      	bne.n	8006a48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	899b      	ldrh	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	2100      	movs	r1, #0
 80069ca:	f7ff fda8 	bl	800651e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3338      	adds	r3, #56	; 0x38
 80069d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff fd37 	bl	800644e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3338      	adds	r3, #56	; 0x38
 80069e4:	4921      	ldr	r1, [pc, #132]	; (8006a6c <sync_fs+0xd8>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fd4c 	bl	8006484 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3338      	adds	r3, #56	; 0x38
 80069f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069f4:	491e      	ldr	r1, [pc, #120]	; (8006a70 <sync_fs+0xdc>)
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fd44 	bl	8006484 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3338      	adds	r3, #56	; 0x38
 8006a00:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7ff fd3a 	bl	8006484 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3338      	adds	r3, #56	; 0x38
 8006a14:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f7ff fd30 	bl	8006484 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7858      	ldrb	r0, [r3, #1]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f7ff fc8d 	bl	800635c <disk_write>
			fs->fsi_flag = 0;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fca3 	bl	800639c <disk_ioctl>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <sync_fs+0xcc>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	41615252 	.word	0x41615252
 8006a70:	61417272 	.word	0x61417272

08006a74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	3b02      	subs	r3, #2
 8006a82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	3b02      	subs	r3, #2
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d301      	bcc.n	8006a94 <clust2sect+0x20>
 8006a90:	2300      	movs	r3, #0
 8006a92:	e008      	b.n	8006aa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	895b      	ldrh	r3, [r3, #10]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	fb03 f202 	mul.w	r2, r3, r2
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	4413      	add	r3, r2
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d904      	bls.n	8006ad2 <get_fat+0x20>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d302      	bcc.n	8006ad8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e0bb      	b.n	8006c50 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f000 8083 	beq.w	8006bee <get_fat+0x13c>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	f300 80a7 	bgt.w	8006c3c <get_fat+0x18a>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <get_fat+0x46>
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d056      	beq.n	8006ba4 <get_fat+0xf2>
 8006af6:	e0a1      	b.n	8006c3c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	899b      	ldrh	r3, [r3, #12]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b16:	4413      	add	r3, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f7ff ff0c 	bl	8006938 <move_window>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 808d 	bne.w	8006c42 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	60fa      	str	r2, [r7, #12]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	8992      	ldrh	r2, [r2, #12]
 8006b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b36:	fb01 f202 	mul.w	r2, r1, r2
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	899b      	ldrh	r3, [r3, #12]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b56:	4413      	add	r3, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f7ff feec 	bl	8006938 <move_window>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d16f      	bne.n	8006c46 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	899b      	ldrh	r3, [r3, #12]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b72:	fb01 f202 	mul.w	r2, r1, r2
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <get_fat+0xe8>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	e002      	b.n	8006ba0 <get_fat+0xee>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba0:	617b      	str	r3, [r7, #20]
			break;
 8006ba2:	e055      	b.n	8006c50 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	899b      	ldrh	r3, [r3, #12]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb8:	4413      	add	r3, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f7ff febb 	bl	8006938 <move_window>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d140      	bne.n	8006c4a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	8992      	ldrh	r2, [r2, #12]
 8006bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bda:	fb00 f202 	mul.w	r2, r0, r2
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	440b      	add	r3, r1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fbf8 	bl	80063d8 <ld_word>
 8006be8:	4603      	mov	r3, r0
 8006bea:	617b      	str	r3, [r7, #20]
			break;
 8006bec:	e030      	b.n	8006c50 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	899b      	ldrh	r3, [r3, #12]
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c02:	4413      	add	r3, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f7ff fe96 	bl	8006938 <move_window>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11d      	bne.n	8006c4e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	8992      	ldrh	r2, [r2, #12]
 8006c20:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c24:	fb00 f202 	mul.w	r2, r0, r2
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fbeb 	bl	8006408 <ld_dword>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c38:	617b      	str	r3, [r7, #20]
			break;
 8006c3a:	e009      	b.n	8006c50 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e006      	b.n	8006c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c42:	bf00      	nop
 8006c44:	e004      	b.n	8006c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c4e:	bf00      	nop
		}
	}

	return val;
 8006c50:	697b      	ldr	r3, [r7, #20]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c5a:	b590      	push	{r4, r7, lr}
 8006c5c:	b089      	sub	sp, #36	; 0x24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c66:	2302      	movs	r3, #2
 8006c68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	f240 8109 	bls.w	8006e84 <put_fat+0x22a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	f080 8103 	bcs.w	8006e84 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	f000 80b6 	beq.w	8006df4 <put_fat+0x19a>
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	f300 80fb 	bgt.w	8006e84 <put_fat+0x22a>
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d003      	beq.n	8006c9a <put_fat+0x40>
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	f000 8083 	beq.w	8006d9e <put_fat+0x144>
 8006c98:	e0f4      	b.n	8006e84 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	899b      	ldrh	r3, [r3, #12]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cb8:	4413      	add	r3, r2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fe3b 	bl	8006938 <move_window>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cc6:	7ffb      	ldrb	r3, [r7, #31]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 80d4 	bne.w	8006e76 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	61ba      	str	r2, [r7, #24]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	8992      	ldrh	r2, [r2, #12]
 8006cde:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ce2:	fb00 f202 	mul.w	r2, r0, r2
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	440b      	add	r3, r1
 8006cea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <put_fat+0xb8>
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	b25a      	sxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e001      	b.n	8006d16 <put_fat+0xbc>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	899b      	ldrh	r3, [r3, #12]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d30:	4413      	add	r3, r2
 8006d32:	4619      	mov	r1, r3
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff fdff 	bl	8006938 <move_window>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d3e:	7ffb      	ldrb	r3, [r7, #31]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 809a 	bne.w	8006e7a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	899b      	ldrh	r3, [r3, #12]
 8006d50:	461a      	mov	r2, r3
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d58:	fb00 f202 	mul.w	r2, r0, r2
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	440b      	add	r3, r1
 8006d60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <put_fat+0x11a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	e00e      	b.n	8006d92 <put_fat+0x138>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	f023 030f 	bic.w	r3, r3, #15
 8006d7e:	b25a      	sxtb	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	70da      	strb	r2, [r3, #3]
			break;
 8006d9c:	e072      	b.n	8006e84 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	899b      	ldrh	r3, [r3, #12]
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4619      	mov	r1, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8006db2:	4413      	add	r3, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fdbe 	bl	8006938 <move_window>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dc0:	7ffb      	ldrb	r3, [r7, #31]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d15b      	bne.n	8006e7e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	8992      	ldrh	r2, [r2, #12]
 8006dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd8:	fb00 f202 	mul.w	r2, r0, r2
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	440b      	add	r3, r1
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	b292      	uxth	r2, r2
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fb31 	bl	800644e <st_word>
			fs->wflag = 1;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	70da      	strb	r2, [r3, #3]
			break;
 8006df2:	e047      	b.n	8006e84 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	899b      	ldrh	r3, [r3, #12]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e08:	4413      	add	r3, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fd93 	bl	8006938 <move_window>
 8006e12:	4603      	mov	r3, r0
 8006e14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d132      	bne.n	8006e82 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	8992      	ldrh	r2, [r2, #12]
 8006e30:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e34:	fb00 f202 	mul.w	r2, r0, r2
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fae3 	bl	8006408 <ld_dword>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e48:	4323      	orrs	r3, r4
 8006e4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	8992      	ldrh	r2, [r2, #12]
 8006e5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e5e:	fb00 f202 	mul.w	r2, r0, r2
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	440b      	add	r3, r1
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fb0b 	bl	8006484 <st_dword>
			fs->wflag = 1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	70da      	strb	r2, [r3, #3]
			break;
 8006e74:	e006      	b.n	8006e84 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e76:	bf00      	nop
 8006e78:	e004      	b.n	8006e84 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e7a:	bf00      	nop
 8006e7c:	e002      	b.n	8006e84 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e82:	bf00      	nop
		}
	}
	return res;
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3724      	adds	r7, #36	; 0x24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}

08006e8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b088      	sub	sp, #32
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d904      	bls.n	8006eb4 <remove_chain+0x26>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d301      	bcc.n	8006eb8 <remove_chain+0x2a>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e04b      	b.n	8006f50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	69b8      	ldr	r0, [r7, #24]
 8006ec6:	f7ff fec8 	bl	8006c5a <put_fat>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <remove_chain+0x4a>
 8006ed4:	7ffb      	ldrb	r3, [r7, #31]
 8006ed6:	e03b      	b.n	8006f50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fde9 	bl	8006ab2 <get_fat>
 8006ee0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d031      	beq.n	8006f4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <remove_chain+0x64>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e02e      	b.n	8006f50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d101      	bne.n	8006efe <remove_chain+0x70>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e028      	b.n	8006f50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006efe:	2200      	movs	r2, #0
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f7ff fea9 	bl	8006c5a <put_fat>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <remove_chain+0x88>
 8006f12:	7ffb      	ldrb	r3, [r7, #31]
 8006f14:	e01c      	b.n	8006f50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d20b      	bcs.n	8006f3c <remove_chain+0xae>
			fs->free_clst++;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	791b      	ldrb	r3, [r3, #4]
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3c6      	bcc.n	8006ed8 <remove_chain+0x4a>
 8006f4a:	e000      	b.n	8006f4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3720      	adds	r7, #32
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <create_chain+0x2c>
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d31b      	bcc.n	8006fbc <create_chain+0x64>
 8006f84:	2301      	movs	r3, #1
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e018      	b.n	8006fbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fd90 	bl	8006ab2 <get_fat>
 8006f92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d801      	bhi.n	8006f9e <create_chain+0x46>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e070      	b.n	8007080 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d101      	bne.n	8006faa <create_chain+0x52>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	e06a      	b.n	8007080 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d201      	bcs.n	8006fb8 <create_chain+0x60>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	e063      	b.n	8007080 <create_chain+0x128>
		scl = clst;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d307      	bcc.n	8006fe0 <create_chain+0x88>
				ncl = 2;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d901      	bls.n	8006fe0 <create_chain+0x88>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e04f      	b.n	8007080 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006fe0:	69f9      	ldr	r1, [r7, #28]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fd65 	bl	8006ab2 <get_fat>
 8006fe8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00e      	beq.n	800700e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d003      	beq.n	8006ffe <create_chain+0xa6>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d101      	bne.n	8007002 <create_chain+0xaa>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	e03e      	b.n	8007080 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	429a      	cmp	r2, r3
 8007008:	d1da      	bne.n	8006fc0 <create_chain+0x68>
 800700a:	2300      	movs	r3, #0
 800700c:	e038      	b.n	8007080 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800700e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f7ff fe1f 	bl	8006c5a <put_fat>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <create_chain+0xe2>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f7ff fe12 	bl	8006c5a <put_fat>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d116      	bne.n	800706e <create_chain+0x116>
		fs->last_clst = ncl;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	3b02      	subs	r3, #2
 8007050:	429a      	cmp	r2, r3
 8007052:	d804      	bhi.n	800705e <create_chain+0x106>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	1e5a      	subs	r2, r3, #1
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	791b      	ldrb	r3, [r3, #4]
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	711a      	strb	r2, [r3, #4]
 800706c:	e007      	b.n	800707e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d102      	bne.n	800707a <create_chain+0x122>
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	e000      	b.n	800707c <create_chain+0x124>
 800707a:	2301      	movs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800707e:	69fb      	ldr	r3, [r7, #28]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	3304      	adds	r3, #4
 800709e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	899b      	ldrh	r3, [r3, #12]
 80070a4:	461a      	mov	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	8952      	ldrh	r2, [r2, #10]
 80070b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	613a      	str	r2, [r7, #16]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <clmt_clust+0x42>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e010      	b.n	80070ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d307      	bcc.n	80070e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3304      	adds	r3, #4
 80070de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070e0:	e7e9      	b.n	80070b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80070e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800710e:	d204      	bcs.n	800711a <dir_sdi+0x22>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <dir_sdi+0x26>
		return FR_INT_ERR;
 800711a:	2302      	movs	r3, #2
 800711c:	e071      	b.n	8007202 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <dir_sdi+0x46>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d902      	bls.n	800713e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10c      	bne.n	800715e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	8912      	ldrh	r2, [r2, #8]
 800714c:	4293      	cmp	r3, r2
 800714e:	d301      	bcc.n	8007154 <dir_sdi+0x5c>
 8007150:	2302      	movs	r3, #2
 8007152:	e056      	b.n	8007202 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	61da      	str	r2, [r3, #28]
 800715c:	e02d      	b.n	80071ba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	895b      	ldrh	r3, [r3, #10]
 8007162:	461a      	mov	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	899b      	ldrh	r3, [r3, #12]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800716e:	e019      	b.n	80071a4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fc9c 	bl	8006ab2 <get_fat>
 800717a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d101      	bne.n	8007188 <dir_sdi+0x90>
 8007184:	2301      	movs	r3, #1
 8007186:	e03c      	b.n	8007202 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d904      	bls.n	8007198 <dir_sdi+0xa0>
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	429a      	cmp	r2, r3
 8007196:	d301      	bcc.n	800719c <dir_sdi+0xa4>
 8007198:	2302      	movs	r3, #2
 800719a:	e032      	b.n	8007202 <dir_sdi+0x10a>
			ofs -= csz;
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d2e1      	bcs.n	8007170 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071ac:	6979      	ldr	r1, [r7, #20]
 80071ae:	6938      	ldr	r0, [r7, #16]
 80071b0:	f7ff fc60 	bl	8006a74 <clust2sect>
 80071b4:	4602      	mov	r2, r0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <dir_sdi+0xd4>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e01a      	b.n	8007202 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	899b      	ldrh	r3, [r3, #12]
 80071d4:	4619      	mov	r1, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	899b      	ldrh	r3, [r3, #12]
 80071ec:	461a      	mov	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80071f4:	fb00 f202 	mul.w	r2, r0, r2
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	18ca      	adds	r2, r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	3320      	adds	r3, #32
 8007220:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <dir_next+0x28>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007230:	d301      	bcc.n	8007236 <dir_next+0x2c>
 8007232:	2304      	movs	r3, #4
 8007234:	e0bb      	b.n	80073ae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	899b      	ldrh	r3, [r3, #12]
 800723a:	461a      	mov	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007242:	fb01 f202 	mul.w	r2, r1, r2
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	f040 809d 	bne.w	8007388 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	8912      	ldrh	r2, [r2, #8]
 8007268:	4293      	cmp	r3, r2
 800726a:	f0c0 808d 	bcc.w	8007388 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	61da      	str	r2, [r3, #28]
 8007274:	2304      	movs	r3, #4
 8007276:	e09a      	b.n	80073ae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	899b      	ldrh	r3, [r3, #12]
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	fbb3 f3f2 	udiv	r3, r3, r2
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	8952      	ldrh	r2, [r2, #10]
 8007288:	3a01      	subs	r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d17b      	bne.n	8007388 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7ff fc0a 	bl	8006ab2 <get_fat>
 800729e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d801      	bhi.n	80072aa <dir_next+0xa0>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e081      	b.n	80073ae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d101      	bne.n	80072b6 <dir_next+0xac>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07b      	b.n	80073ae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d359      	bcc.n	8007374 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
 80072cc:	2304      	movs	r3, #4
 80072ce:	e06e      	b.n	80073ae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fe3d 	bl	8006f58 <create_chain>
 80072de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <dir_next+0xe0>
 80072e6:	2307      	movs	r3, #7
 80072e8:	e061      	b.n	80073ae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <dir_next+0xea>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e05c      	b.n	80073ae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d101      	bne.n	8007300 <dir_next+0xf6>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e056      	b.n	80073ae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff fad5 	bl	80068b0 <sync_window>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <dir_next+0x106>
 800730c:	2301      	movs	r3, #1
 800730e:	e04e      	b.n	80073ae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	899b      	ldrh	r3, [r3, #12]
 800731a:	461a      	mov	r2, r3
 800731c:	2100      	movs	r1, #0
 800731e:	f7ff f8fe 	bl	800651e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fba3 	bl	8006a74 <clust2sect>
 800732e:	4602      	mov	r2, r0
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	635a      	str	r2, [r3, #52]	; 0x34
 8007334:	e012      	b.n	800735c <dir_next+0x152>
						fs->wflag = 1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fab7 	bl	80068b0 <sync_window>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <dir_next+0x142>
 8007348:	2301      	movs	r3, #1
 800734a:	e030      	b.n	80073ae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	3301      	adds	r3, #1
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	635a      	str	r2, [r3, #52]	; 0x34
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	895b      	ldrh	r3, [r3, #10]
 8007360:	461a      	mov	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4293      	cmp	r3, r2
 8007366:	d3e6      	bcc.n	8007336 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fb79 	bl	8006a74 <clust2sect>
 8007382:	4602      	mov	r2, r0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	899b      	ldrh	r3, [r3, #12]
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a0:	fb00 f202 	mul.w	r2, r0, r2
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	18ca      	adds	r2, r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073c6:	2100      	movs	r1, #0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fe95 	bl	80070f8 <dir_sdi>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d12b      	bne.n	8007430 <dir_alloc+0x7a>
		n = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	4619      	mov	r1, r3
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff faa8 	bl	8006938 <move_window>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11d      	bne.n	800742e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2be5      	cmp	r3, #229	; 0xe5
 80073fa:	d004      	beq.n	8007406 <dir_alloc+0x50>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d102      	bne.n	800741a <dir_alloc+0x64>
 8007414:	e00c      	b.n	8007430 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800741a:	2101      	movs	r1, #1
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fef4 	bl	800720a <dir_next>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0d7      	beq.n	80073dc <dir_alloc+0x26>
 800742c:	e000      	b.n	8007430 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800742e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b04      	cmp	r3, #4
 8007434:	d101      	bne.n	800743a <dir_alloc+0x84>
 8007436:	2307      	movs	r3, #7
 8007438:	75fb      	strb	r3, [r7, #23]
	return res;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	331a      	adds	r3, #26
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe ffc0 	bl	80063d8 <ld_word>
 8007458:	4603      	mov	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d109      	bne.n	8007478 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe ffb5 	bl	80063d8 <ld_word>
 800746e:	4603      	mov	r3, r0
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007478:	68fb      	ldr	r3, [r7, #12]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	331a      	adds	r3, #26
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	b292      	uxth	r2, r2
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe ffd8 	bl	800644e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d109      	bne.n	80074ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f103 0214 	add.w	r2, r3, #20
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7fe ffca 	bl	800644e <st_word>
	}
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	331a      	adds	r3, #26
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe ff80 	bl	80063d8 <ld_word>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <cmp_lfn+0x1e>
 80074de:	2300      	movs	r3, #0
 80074e0:	e059      	b.n	8007596 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074f8:	2301      	movs	r3, #1
 80074fa:	81fb      	strh	r3, [r7, #14]
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	e033      	b.n	800756a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007502:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <cmp_lfn+0xdc>)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	4413      	add	r3, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe ff61 	bl	80063d8 <ld_word>
 8007516:	4603      	mov	r3, r0
 8007518:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800751a:	89fb      	ldrh	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01a      	beq.n	8007556 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2bfe      	cmp	r3, #254	; 0xfe
 8007524:	d812      	bhi.n	800754c <cmp_lfn+0x88>
 8007526:	89bb      	ldrh	r3, [r7, #12]
 8007528:	4618      	mov	r0, r3
 800752a:	f001 fe11 	bl	8009150 <ff_wtoupper>
 800752e:	4603      	mov	r3, r0
 8007530:	461c      	mov	r4, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	617a      	str	r2, [r7, #20]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fe05 	bl	8009150 <ff_wtoupper>
 8007546:	4603      	mov	r3, r0
 8007548:	429c      	cmp	r4, r3
 800754a:	d001      	beq.n	8007550 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800754c:	2300      	movs	r3, #0
 800754e:	e022      	b.n	8007596 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007550:	89bb      	ldrh	r3, [r7, #12]
 8007552:	81fb      	strh	r3, [r7, #14]
 8007554:	e006      	b.n	8007564 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007556:	89bb      	ldrh	r3, [r7, #12]
 8007558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800755c:	4293      	cmp	r3, r2
 800755e:	d001      	beq.n	8007564 <cmp_lfn+0xa0>
 8007560:	2300      	movs	r3, #0
 8007562:	e018      	b.n	8007596 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3301      	adds	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d9c8      	bls.n	8007502 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <cmp_lfn+0xd0>
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <cmp_lfn+0xd0>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <cmp_lfn+0xd0>
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007594:	2301      	movs	r3, #1
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd90      	pop	{r4, r7, pc}
 800759e:	bf00      	nop
 80075a0:	0800c9b0 	.word	0x0800c9b0

080075a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4611      	mov	r1, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	460b      	mov	r3, r1
 80075b4:	71fb      	strb	r3, [r7, #7]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	330d      	adds	r3, #13
 80075be:	79ba      	ldrb	r2, [r7, #6]
 80075c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	330b      	adds	r3, #11
 80075c6:	220f      	movs	r2, #15
 80075c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	330c      	adds	r3, #12
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	331a      	adds	r3, #26
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe ff38 	bl	800644e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	82fb      	strh	r3, [r7, #22]
 80075f2:	2300      	movs	r3, #0
 80075f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <put_lfn+0x6c>
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	61fa      	str	r2, [r7, #28]
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <put_lfn+0xcc>)
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4413      	add	r3, r2
 800761e:	8afa      	ldrh	r2, [r7, #22]
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe ff13 	bl	800644e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007628:	8afb      	ldrh	r3, [r7, #22]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <put_lfn+0x90>
 800762e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007632:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3301      	adds	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b0c      	cmp	r3, #12
 800763e:	d9da      	bls.n	80075f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007646:	4293      	cmp	r3, r2
 8007648:	d006      	beq.n	8007658 <put_lfn+0xb4>
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <put_lfn+0xbc>
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	79fa      	ldrb	r2, [r7, #7]
 8007664:	701a      	strb	r2, [r3, #0]
}
 8007666:	bf00      	nop
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	0800c9b0 	.word	0x0800c9b0

08007674 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	; 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007682:	220b      	movs	r2, #11
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7fe ff28 	bl	80064dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b05      	cmp	r3, #5
 8007690:	d92b      	bls.n	80076ea <gen_numname+0x76>
		sr = seq;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007696:	e022      	b.n	80076de <gen_numname+0x6a>
			wc = *lfn++;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	1c9a      	adds	r2, r3, #2
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076a2:	2300      	movs	r3, #0
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a6:	e017      	b.n	80076d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	005a      	lsls	r2, r3, #1
 80076ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <gen_numname+0x5e>
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	3301      	adds	r3, #1
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d9e4      	bls.n	80076a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d8      	bne.n	8007698 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80076ea:	2307      	movs	r3, #7
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	3330      	adds	r3, #48	; 0x30
 80076fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80076fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007702:	2b39      	cmp	r3, #57	; 0x39
 8007704:	d904      	bls.n	8007710 <gen_numname+0x9c>
 8007706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800770a:	3307      	adds	r3, #7
 800770c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	62ba      	str	r2, [r7, #40]	; 0x28
 8007716:	3330      	adds	r3, #48	; 0x30
 8007718:	443b      	add	r3, r7
 800771a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800771e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1df      	bne.n	80076ee <gen_numname+0x7a>
	ns[i] = '~';
 800772e:	f107 0214 	add.w	r2, r7, #20
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	4413      	add	r3, r2
 8007736:	227e      	movs	r2, #126	; 0x7e
 8007738:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
 800773e:	e002      	b.n	8007746 <gen_numname+0xd2>
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	3301      	adds	r3, #1
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	429a      	cmp	r2, r3
 800774c:	d205      	bcs.n	800775a <gen_numname+0xe6>
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	4413      	add	r3, r2
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b20      	cmp	r3, #32
 8007758:	d1f2      	bne.n	8007740 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b07      	cmp	r3, #7
 800775e:	d807      	bhi.n	8007770 <gen_numname+0xfc>
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	62ba      	str	r2, [r7, #40]	; 0x28
 8007766:	3330      	adds	r3, #48	; 0x30
 8007768:	443b      	add	r3, r7
 800776a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800776e:	e000      	b.n	8007772 <gen_numname+0xfe>
 8007770:	2120      	movs	r1, #32
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	627a      	str	r2, [r7, #36]	; 0x24
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	460a      	mov	r2, r1
 800777e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b07      	cmp	r3, #7
 8007784:	d9e9      	bls.n	800775a <gen_numname+0xe6>
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	3730      	adds	r7, #48	; 0x30
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800779c:	230b      	movs	r3, #11
 800779e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	0852      	lsrs	r2, r2, #1
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	4313      	orrs	r3, r2
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	6079      	str	r1, [r7, #4]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	4413      	add	r3, r2
 80077b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1ed      	bne.n	80077a0 <sum_sfn+0x10>
	return sum;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fc88 	bl	80070f8 <dir_sdi>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <dir_find+0x24>
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	e0a9      	b.n	800794a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077f6:	23ff      	movs	r3, #255	; 0xff
 80077f8:	753b      	strb	r3, [r7, #20]
 80077fa:	7d3b      	ldrb	r3, [r7, #20]
 80077fc:	757b      	strb	r3, [r7, #21]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	4619      	mov	r1, r3
 800780c:	6938      	ldr	r0, [r7, #16]
 800780e:	f7ff f893 	bl	8006938 <move_window>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f040 8090 	bne.w	800793e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007826:	7dbb      	ldrb	r3, [r7, #22]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d102      	bne.n	8007832 <dir_find+0x60>
 800782c:	2304      	movs	r3, #4
 800782e:	75fb      	strb	r3, [r7, #23]
 8007830:	e08a      	b.n	8007948 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	330b      	adds	r3, #11
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800783e:	73fb      	strb	r3, [r7, #15]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007846:	7dbb      	ldrb	r3, [r7, #22]
 8007848:	2be5      	cmp	r3, #229	; 0xe5
 800784a:	d007      	beq.n	800785c <dir_find+0x8a>
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <dir_find+0x98>
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b0f      	cmp	r3, #15
 800785a:	d006      	beq.n	800786a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800785c:	23ff      	movs	r3, #255	; 0xff
 800785e:	757b      	strb	r3, [r7, #21]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
 8007868:	e05e      	b.n	8007928 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d136      	bne.n	80078de <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d154      	bne.n	8007928 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800787e:	7dbb      	ldrb	r3, [r7, #22]
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	7b5b      	ldrb	r3, [r3, #13]
 800788e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007890:	7dbb      	ldrb	r3, [r7, #22]
 8007892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007896:	75bb      	strb	r3, [r7, #22]
 8007898:	7dbb      	ldrb	r3, [r7, #22]
 800789a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078a4:	7dba      	ldrb	r2, [r7, #22]
 80078a6:	7d7b      	ldrb	r3, [r7, #21]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d115      	bne.n	80078d8 <dir_find+0x106>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	330d      	adds	r3, #13
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	7d3a      	ldrb	r2, [r7, #20]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d10e      	bne.n	80078d8 <dir_find+0x106>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7ff fdfd 	bl	80074c4 <cmp_lfn>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <dir_find+0x106>
 80078d0:	7d7b      	ldrb	r3, [r7, #21]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e000      	b.n	80078da <dir_find+0x108>
 80078d8:	23ff      	movs	r3, #255	; 0xff
 80078da:	757b      	strb	r3, [r7, #21]
 80078dc:	e024      	b.n	8007928 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078de:	7d7b      	ldrb	r3, [r7, #21]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <dir_find+0x126>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff ff51 	bl	8007790 <sum_sfn>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	7d3b      	ldrb	r3, [r7, #20]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d024      	beq.n	8007942 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <dir_find+0x14a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a18      	ldr	r0, [r3, #32]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	220b      	movs	r2, #11
 8007910:	4619      	mov	r1, r3
 8007912:	f7fe fe1f 	bl	8006554 <mem_cmp>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d014      	beq.n	8007946 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800791c:	23ff      	movs	r3, #255	; 0xff
 800791e:	757b      	strb	r3, [r7, #21]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fc6d 	bl	800720a <dir_next>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f43f af65 	beq.w	8007806 <dir_find+0x34>
 800793c:	e004      	b.n	8007948 <dir_find+0x176>
		if (res != FR_OK) break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007946:	bf00      	nop

	return res;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08c      	sub	sp, #48	; 0x30
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007968:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <dir_register+0x20>
 8007970:	2306      	movs	r3, #6
 8007972:	e0e0      	b.n	8007b36 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007974:	2300      	movs	r3, #0
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
 8007978:	e002      	b.n	8007980 <dir_register+0x2c>
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	3301      	adds	r3, #1
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f4      	bne.n	800797a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	220c      	movs	r2, #12
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fd9d 	bl	80064dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d032      	beq.n	8007a12 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2240      	movs	r2, #64	; 0x40
 80079b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079b4:	2301      	movs	r3, #1
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b8:	e016      	b.n	80079e8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	f107 010c 	add.w	r1, r7, #12
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	f7ff fe53 	bl	8007674 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff feff 	bl	80077d2 <dir_find>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80079da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	3301      	adds	r3, #1
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	2b63      	cmp	r3, #99	; 0x63
 80079ec:	d9e5      	bls.n	80079ba <dir_register+0x66>
 80079ee:	e000      	b.n	80079f2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80079f0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	2b64      	cmp	r3, #100	; 0x64
 80079f6:	d101      	bne.n	80079fc <dir_register+0xa8>
 80079f8:	2307      	movs	r3, #7
 80079fa:	e09c      	b.n	8007b36 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80079fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d002      	beq.n	8007a0a <dir_register+0xb6>
 8007a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a08:	e095      	b.n	8007b36 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a0a:	7dfa      	ldrb	r2, [r7, #23]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <dir_register+0xd8>
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	330c      	adds	r3, #12
 8007a20:	4a47      	ldr	r2, [pc, #284]	; (8007b40 <dir_register+0x1ec>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	3301      	adds	r3, #1
 8007a2a:	e000      	b.n	8007a2e <dir_register+0xda>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a30:	6a39      	ldr	r1, [r7, #32]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fcbf 	bl	80073b6 <dir_alloc>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d148      	bne.n	8007ad8 <dir_register+0x184>
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	623b      	str	r3, [r7, #32]
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d042      	beq.n	8007ad8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695a      	ldr	r2, [r3, #20]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	015b      	lsls	r3, r3, #5
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fb4a 	bl	80070f8 <dir_sdi>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d132      	bne.n	8007ad8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3324      	adds	r3, #36	; 0x24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fe8a 	bl	8007790 <sum_sfn>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	4619      	mov	r1, r3
 8007a86:	69f8      	ldr	r0, [r7, #28]
 8007a88:	f7fe ff56 	bl	8006938 <move_window>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d11d      	bne.n	8007ad6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	6918      	ldr	r0, [r3, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a19      	ldr	r1, [r3, #32]
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	7efb      	ldrb	r3, [r7, #27]
 8007aa8:	f7ff fd7c 	bl	80075a4 <put_lfn>
				fs->wflag = 1;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fba8 	bl	800720a <dir_next>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <dir_register+0x184>
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	623b      	str	r3, [r7, #32]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1d5      	bne.n	8007a80 <dir_register+0x12c>
 8007ad4:	e000      	b.n	8007ad8 <dir_register+0x184>
				if (res != FR_OK) break;
 8007ad6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d128      	bne.n	8007b32 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	69f8      	ldr	r0, [r7, #28]
 8007ae8:	f7fe ff26 	bl	8006938 <move_window>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11b      	bne.n	8007b32 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	2220      	movs	r2, #32
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fd0b 	bl	800651e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a18      	ldr	r0, [r3, #32]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3324      	adds	r3, #36	; 0x24
 8007b10:	220b      	movs	r2, #11
 8007b12:	4619      	mov	r1, r3
 8007b14:	f7fe fce2 	bl	80064dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	330c      	adds	r3, #12
 8007b24:	f002 0218 	and.w	r2, r2, #24
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3730      	adds	r7, #48	; 0x30
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	4ec4ec4f 	.word	0x4ec4ec4f

08007b44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	61ba      	str	r2, [r7, #24]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b74:	2b1f      	cmp	r3, #31
 8007b76:	d940      	bls.n	8007bfa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b7a:	2b2f      	cmp	r3, #47	; 0x2f
 8007b7c:	d006      	beq.n	8007b8c <create_name+0x48>
 8007b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b80:	2b5c      	cmp	r3, #92	; 0x5c
 8007b82:	d110      	bne.n	8007ba6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b84:	e002      	b.n	8007b8c <create_name+0x48>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	4413      	add	r3, r2
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b2f      	cmp	r3, #47	; 0x2f
 8007b96:	d0f6      	beq.n	8007b86 <create_name+0x42>
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ba2:	d0f0      	beq.n	8007b86 <create_name+0x42>
			break;
 8007ba4:	e02a      	b.n	8007bfc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8007baa:	d901      	bls.n	8007bb0 <create_name+0x6c>
 8007bac:	2306      	movs	r3, #6
 8007bae:	e17d      	b.n	8007eac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fa8c 	bl	80090d8 <ff_convert>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <create_name+0x8a>
 8007bca:	2306      	movs	r3, #6
 8007bcc:	e16e      	b.n	8007eac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd2:	d809      	bhi.n	8007be8 <create_name+0xa4>
 8007bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	488d      	ldr	r0, [pc, #564]	; (8007e10 <create_name+0x2cc>)
 8007bda:	f7fe fce2 	bl	80065a2 <chk_chr>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <create_name+0xa4>
 8007be4:	2306      	movs	r3, #6
 8007be6:	e161      	b.n	8007eac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	617a      	str	r2, [r7, #20]
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bf6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007bf8:	e7b4      	b.n	8007b64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007bfa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	441a      	add	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c08:	2b1f      	cmp	r3, #31
 8007c0a:	d801      	bhi.n	8007c10 <create_name+0xcc>
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	e000      	b.n	8007c12 <create_name+0xce>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c16:	e011      	b.n	8007c3c <create_name+0xf8>
		w = lfn[di - 1];
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d002      	beq.n	8007c36 <create_name+0xf2>
 8007c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c32:	2b2e      	cmp	r3, #46	; 0x2e
 8007c34:	d106      	bne.n	8007c44 <create_name+0x100>
		di--;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1ea      	bne.n	8007c18 <create_name+0xd4>
 8007c42:	e000      	b.n	8007c46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007c44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <create_name+0x118>
 8007c58:	2306      	movs	r3, #6
 8007c5a:	e127      	b.n	8007eac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3324      	adds	r3, #36	; 0x24
 8007c60:	220b      	movs	r2, #11
 8007c62:	2120      	movs	r1, #32
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fc5a 	bl	800651e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	e002      	b.n	8007c76 <create_name+0x132>
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d0f5      	beq.n	8007c70 <create_name+0x12c>
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c90:	d0ee      	beq.n	8007c70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <create_name+0x168>
 8007c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c9c:	f043 0303 	orr.w	r3, r3, #3
 8007ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007ca4:	e002      	b.n	8007cac <create_name+0x168>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <create_name+0x182>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc4:	d1ef      	bne.n	8007ca6 <create_name+0x162>

	i = b = 0; ni = 8;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ccc:	2300      	movs	r3, #0
 8007cce:	623b      	str	r3, [r7, #32]
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	61ba      	str	r2, [r7, #24]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8090 	beq.w	8007e0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d006      	beq.n	8007d00 <create_name+0x1bc>
 8007cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf6:	d10a      	bne.n	8007d0e <create_name+0x1ca>
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d006      	beq.n	8007d0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d04:	f043 0303 	orr.w	r3, r3, #3
 8007d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d0c:	e07d      	b.n	8007e0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d203      	bcs.n	8007d1e <create_name+0x1da>
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d123      	bne.n	8007d66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b0b      	cmp	r3, #11
 8007d22:	d106      	bne.n	8007d32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d28:	f043 0303 	orr.w	r3, r3, #3
 8007d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d30:	e075      	b.n	8007e1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d005      	beq.n	8007d46 <create_name+0x202>
 8007d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d3e:	f043 0303 	orr.w	r3, r3, #3
 8007d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d866      	bhi.n	8007e1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	2308      	movs	r3, #8
 8007d54:	623b      	str	r3, [r7, #32]
 8007d56:	230b      	movs	r3, #11
 8007d58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d64:	e051      	b.n	8007e0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d68:	2b7f      	cmp	r3, #127	; 0x7f
 8007d6a:	d914      	bls.n	8007d96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f9b1 	bl	80090d8 <ff_convert>
 8007d76:	4603      	mov	r3, r0
 8007d78:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <create_name+0x246>
 8007d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d82:	3b80      	subs	r3, #128	; 0x80
 8007d84:	4a23      	ldr	r2, [pc, #140]	; (8007e14 <create_name+0x2d0>)
 8007d86:	5cd3      	ldrb	r3, [r2, r3]
 8007d88:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <create_name+0x268>
 8007d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d9e:	4619      	mov	r1, r3
 8007da0:	481d      	ldr	r0, [pc, #116]	; (8007e18 <create_name+0x2d4>)
 8007da2:	f7fe fbfe 	bl	80065a2 <chk_chr>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007dac:	235f      	movs	r3, #95	; 0x5f
 8007dae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db4:	f043 0303 	orr.w	r3, r3, #3
 8007db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dbc:	e01b      	b.n	8007df6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d909      	bls.n	8007dd8 <create_name+0x294>
 8007dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc6:	2b5a      	cmp	r3, #90	; 0x5a
 8007dc8:	d806      	bhi.n	8007dd8 <create_name+0x294>
					b |= 2;
 8007dca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dce:	f043 0302 	orr.w	r3, r3, #2
 8007dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dd6:	e00e      	b.n	8007df6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dda:	2b60      	cmp	r3, #96	; 0x60
 8007ddc:	d90b      	bls.n	8007df6 <create_name+0x2b2>
 8007dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de0:	2b7a      	cmp	r3, #122	; 0x7a
 8007de2:	d808      	bhi.n	8007df6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de8:	f043 0301 	orr.w	r3, r3, #1
 8007dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df2:	3b20      	subs	r3, #32
 8007df4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	623a      	str	r2, [r7, #32]
 8007dfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007dfe:	b2d1      	uxtb	r1, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4413      	add	r3, r2
 8007e04:	460a      	mov	r2, r1
 8007e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007e0a:	e763      	b.n	8007cd4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e0c:	bf00      	nop
 8007e0e:	e006      	b.n	8007e1e <create_name+0x2da>
 8007e10:	0800c8a0 	.word	0x0800c8a0
 8007e14:	0800c930 	.word	0x0800c930
 8007e18:	0800c8ac 	.word	0x0800c8ac
			if (si > di) break;			/* No extension */
 8007e1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e24:	2be5      	cmp	r3, #229	; 0xe5
 8007e26:	d103      	bne.n	8007e30 <create_name+0x2ec>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2205      	movs	r2, #5
 8007e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d104      	bne.n	8007e40 <create_name+0x2fc>
 8007e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e44:	f003 030c 	and.w	r3, r3, #12
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	d005      	beq.n	8007e58 <create_name+0x314>
 8007e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d105      	bne.n	8007e64 <create_name+0x320>
 8007e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d117      	bne.n	8007ea0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d105      	bne.n	8007e88 <create_name+0x344>
 8007e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e80:	f043 0310 	orr.w	r3, r3, #16
 8007e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8c:	f003 030c 	and.w	r3, r3, #12
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d105      	bne.n	8007ea0 <create_name+0x35c>
 8007e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e98:	f043 0308 	orr.w	r3, r3, #8
 8007e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ea6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007eaa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3728      	adds	r7, #40	; 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ec8:	e002      	b.n	8007ed0 <follow_path+0x1c>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ed6:	d0f8      	beq.n	8007eca <follow_path+0x16>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ede:	d0f4      	beq.n	8007eca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b1f      	cmp	r3, #31
 8007eec:	d80a      	bhi.n	8007f04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2280      	movs	r2, #128	; 0x80
 8007ef2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff f8fd 	bl	80070f8 <dir_sdi>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
 8007f02:	e048      	b.n	8007f96 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f04:	463b      	mov	r3, r7
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fe1b 	bl	8007b44 <create_name>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d139      	bne.n	8007f8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fc5a 	bl	80077d2 <dir_find>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d12c      	bne.n	8007f90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d127      	bne.n	8007f90 <follow_path+0xdc>
 8007f40:	2305      	movs	r3, #5
 8007f42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f44:	e024      	b.n	8007f90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d121      	bne.n	8007f94 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	799b      	ldrb	r3, [r3, #6]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f5c:	2305      	movs	r3, #5
 8007f5e:	75fb      	strb	r3, [r7, #23]
 8007f60:	e019      	b.n	8007f96 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	8992      	ldrh	r2, [r2, #12]
 8007f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f74:	fb00 f202 	mul.w	r2, r0, r2
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff fa60 	bl	8007444 <ld_clust>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f8a:	e7bb      	b.n	8007f04 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f8c:	bf00      	nop
 8007f8e:	e002      	b.n	8007f96 <follow_path+0xe2>
				break;
 8007f90:	bf00      	nop
 8007f92:	e000      	b.n	8007f96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f94:	bf00      	nop
			}
		}
	}

	return res;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d031      	beq.n	800801a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e002      	b.n	8007fc4 <get_ldnumber+0x24>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b1f      	cmp	r3, #31
 8007fca:	d903      	bls.n	8007fd4 <get_ldnumber+0x34>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b3a      	cmp	r3, #58	; 0x3a
 8007fd2:	d1f4      	bne.n	8007fbe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b3a      	cmp	r3, #58	; 0x3a
 8007fda:	d11c      	bne.n	8008016 <get_ldnumber+0x76>
			tp = *path;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	60fa      	str	r2, [r7, #12]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	3b30      	subs	r3, #48	; 0x30
 8007fec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	d80e      	bhi.n	8008012 <get_ldnumber+0x72>
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d10a      	bne.n	8008012 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d107      	bne.n	8008012 <get_ldnumber+0x72>
					vol = (int)i;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	3301      	adds	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	e002      	b.n	800801c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800801a:	693b      	ldr	r3, [r7, #16]
}
 800801c:	4618      	mov	r0, r3
 800801e:	371c      	adds	r7, #28
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	70da      	strb	r2, [r3, #3]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f04f 32ff 	mov.w	r2, #4294967295
 800803e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe fc78 	bl	8006938 <move_window>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <check_fs+0x2a>
 800804e:	2304      	movs	r3, #4
 8008050:	e038      	b.n	80080c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3338      	adds	r3, #56	; 0x38
 8008056:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f9bc 	bl	80063d8 <ld_word>
 8008060:	4603      	mov	r3, r0
 8008062:	461a      	mov	r2, r3
 8008064:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <check_fs+0x48>
 800806c:	2303      	movs	r3, #3
 800806e:	e029      	b.n	80080c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008076:	2be9      	cmp	r3, #233	; 0xe9
 8008078:	d009      	beq.n	800808e <check_fs+0x66>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008080:	2beb      	cmp	r3, #235	; 0xeb
 8008082:	d11e      	bne.n	80080c2 <check_fs+0x9a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800808a:	2b90      	cmp	r3, #144	; 0x90
 800808c:	d119      	bne.n	80080c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3338      	adds	r3, #56	; 0x38
 8008092:	3336      	adds	r3, #54	; 0x36
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe f9b7 	bl	8006408 <ld_dword>
 800809a:	4603      	mov	r3, r0
 800809c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <check_fs+0xa4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <check_fs+0x82>
 80080a6:	2300      	movs	r3, #0
 80080a8:	e00c      	b.n	80080c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3338      	adds	r3, #56	; 0x38
 80080ae:	3352      	adds	r3, #82	; 0x52
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe f9a9 	bl	8006408 <ld_dword>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4a05      	ldr	r2, [pc, #20]	; (80080d0 <check_fs+0xa8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d101      	bne.n	80080c2 <check_fs+0x9a>
 80080be:	2300      	movs	r3, #0
 80080c0:	e000      	b.n	80080c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080c2:	2302      	movs	r3, #2
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	00544146 	.word	0x00544146
 80080d0:	33544146 	.word	0x33544146

080080d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b096      	sub	sp, #88	; 0x58
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff ff59 	bl	8007fa0 <get_ldnumber>
 80080ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da01      	bge.n	80080fa <find_volume+0x26>
 80080f6:	230b      	movs	r3, #11
 80080f8:	e265      	b.n	80085c6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080fa:	4a9f      	ldr	r2, [pc, #636]	; (8008378 <find_volume+0x2a4>)
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <find_volume+0x3a>
 800810a:	230c      	movs	r3, #12
 800810c:	e25b      	b.n	80085c6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008112:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	f023 0301 	bic.w	r3, r3, #1
 800811a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01a      	beq.n	800815a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe f8b7 	bl	800629c <disk_status>
 800812e:	4603      	mov	r3, r0
 8008130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10c      	bne.n	800815a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <find_volume+0x82>
 8008146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008152:	230a      	movs	r3, #10
 8008154:	e237      	b.n	80085c6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008156:	2300      	movs	r3, #0
 8008158:	e235      	b.n	80085c6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008162:	b2da      	uxtb	r2, r3
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe f8af 	bl	80062d0 <disk_initialize>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008184:	2303      	movs	r3, #3
 8008186:	e21e      	b.n	80085c6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <find_volume+0xca>
 800818e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800819a:	230a      	movs	r3, #10
 800819c:	e213      	b.n	80085c6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	7858      	ldrb	r0, [r3, #1]
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	330c      	adds	r3, #12
 80081a6:	461a      	mov	r2, r3
 80081a8:	2102      	movs	r1, #2
 80081aa:	f7fe f8f7 	bl	800639c <disk_ioctl>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <find_volume+0xe4>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e206      	b.n	80085c6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	899b      	ldrh	r3, [r3, #12]
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c0:	d80d      	bhi.n	80081de <find_volume+0x10a>
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	899b      	ldrh	r3, [r3, #12]
 80081c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ca:	d308      	bcc.n	80081de <find_volume+0x10a>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	899b      	ldrh	r3, [r3, #12]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	899b      	ldrh	r3, [r3, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <find_volume+0x10e>
 80081de:	2301      	movs	r3, #1
 80081e0:	e1f1      	b.n	80085c6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ea:	f7ff ff1d 	bl	8008028 <check_fs>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d149      	bne.n	8008290 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081fc:	2300      	movs	r3, #0
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008200:	e01e      	b.n	8008240 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008210:	4413      	add	r3, r2
 8008212:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	3304      	adds	r3, #4
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d006      	beq.n	800822c <find_volume+0x158>
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	3308      	adds	r3, #8
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe f8f0 	bl	8006408 <ld_dword>
 8008228:	4602      	mov	r2, r0
 800822a:	e000      	b.n	800822e <find_volume+0x15a>
 800822c:	2200      	movs	r2, #0
 800822e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	3358      	adds	r3, #88	; 0x58
 8008234:	443b      	add	r3, r7
 8008236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	3301      	adds	r3, #1
 800823e:	643b      	str	r3, [r7, #64]	; 0x40
 8008240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008242:	2b03      	cmp	r3, #3
 8008244:	d9dd      	bls.n	8008202 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008246:	2300      	movs	r3, #0
 8008248:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800824a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <find_volume+0x182>
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	3b01      	subs	r3, #1
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	3358      	adds	r3, #88	; 0x58
 800825c:	443b      	add	r3, r7
 800825e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <find_volume+0x1a2>
 800826a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800826c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800826e:	f7ff fedb 	bl	8008028 <check_fs>
 8008272:	4603      	mov	r3, r0
 8008274:	e000      	b.n	8008278 <find_volume+0x1a4>
 8008276:	2303      	movs	r3, #3
 8008278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800827c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008280:	2b01      	cmp	r3, #1
 8008282:	d905      	bls.n	8008290 <find_volume+0x1bc>
 8008284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008286:	3301      	adds	r3, #1
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828c:	2b03      	cmp	r3, #3
 800828e:	d9e2      	bls.n	8008256 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008294:	2b04      	cmp	r3, #4
 8008296:	d101      	bne.n	800829c <find_volume+0x1c8>
 8008298:	2301      	movs	r3, #1
 800829a:	e194      	b.n	80085c6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800829c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d901      	bls.n	80082a8 <find_volume+0x1d4>
 80082a4:	230d      	movs	r3, #13
 80082a6:	e18e      	b.n	80085c6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	3338      	adds	r3, #56	; 0x38
 80082ac:	330b      	adds	r3, #11
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe f892 	bl	80063d8 <ld_word>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	899b      	ldrh	r3, [r3, #12]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <find_volume+0x1f0>
 80082c0:	230d      	movs	r3, #13
 80082c2:	e180      	b.n	80085c6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	3338      	adds	r3, #56	; 0x38
 80082c8:	3316      	adds	r3, #22
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe f884 	bl	80063d8 <ld_word>
 80082d0:	4603      	mov	r3, r0
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <find_volume+0x214>
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	3338      	adds	r3, #56	; 0x38
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe f891 	bl	8006408 <ld_dword>
 80082e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	789b      	ldrb	r3, [r3, #2]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d005      	beq.n	800830c <find_volume+0x238>
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	789b      	ldrb	r3, [r3, #2]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d001      	beq.n	800830c <find_volume+0x238>
 8008308:	230d      	movs	r3, #13
 800830a:	e15c      	b.n	80085c6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	789b      	ldrb	r3, [r3, #2]
 8008310:	461a      	mov	r2, r3
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008320:	b29a      	uxth	r2, r3
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	895b      	ldrh	r3, [r3, #10]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <find_volume+0x26c>
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	895b      	ldrh	r3, [r3, #10]
 8008332:	461a      	mov	r2, r3
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	895b      	ldrh	r3, [r3, #10]
 8008338:	3b01      	subs	r3, #1
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <find_volume+0x270>
 8008340:	230d      	movs	r3, #13
 8008342:	e140      	b.n	80085c6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	3338      	adds	r3, #56	; 0x38
 8008348:	3311      	adds	r3, #17
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe f844 	bl	80063d8 <ld_word>
 8008350:	4603      	mov	r3, r0
 8008352:	461a      	mov	r2, r3
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	891b      	ldrh	r3, [r3, #8]
 800835c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800835e:	8992      	ldrh	r2, [r2, #12]
 8008360:	0952      	lsrs	r2, r2, #5
 8008362:	b292      	uxth	r2, r2
 8008364:	fbb3 f1f2 	udiv	r1, r3, r2
 8008368:	fb01 f202 	mul.w	r2, r1, r2
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <find_volume+0x2a8>
 8008374:	230d      	movs	r3, #13
 8008376:	e126      	b.n	80085c6 <find_volume+0x4f2>
 8008378:	200006a8 	.word	0x200006a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	3338      	adds	r3, #56	; 0x38
 8008380:	3313      	adds	r3, #19
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe f828 	bl	80063d8 <ld_word>
 8008388:	4603      	mov	r3, r0
 800838a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800838c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <find_volume+0x2cc>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	3338      	adds	r3, #56	; 0x38
 8008396:	3320      	adds	r3, #32
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe f835 	bl	8006408 <ld_dword>
 800839e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	3338      	adds	r3, #56	; 0x38
 80083a4:	330e      	adds	r3, #14
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe f816 	bl	80063d8 <ld_word>
 80083ac:	4603      	mov	r3, r0
 80083ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <find_volume+0x2e6>
 80083b6:	230d      	movs	r3, #13
 80083b8:	e105      	b.n	80085c6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083be:	4413      	add	r3, r2
 80083c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c2:	8911      	ldrh	r1, [r2, #8]
 80083c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c6:	8992      	ldrh	r2, [r2, #12]
 80083c8:	0952      	lsrs	r2, r2, #5
 80083ca:	b292      	uxth	r2, r2
 80083cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80083d0:	b292      	uxth	r2, r2
 80083d2:	4413      	add	r3, r2
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	429a      	cmp	r2, r3
 80083dc:	d201      	bcs.n	80083e2 <find_volume+0x30e>
 80083de:	230d      	movs	r3, #13
 80083e0:	e0f1      	b.n	80085c6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ea:	8952      	ldrh	r2, [r2, #10]
 80083ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <find_volume+0x328>
 80083f8:	230d      	movs	r3, #13
 80083fa:	e0e4      	b.n	80085c6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80083fc:	2303      	movs	r3, #3
 80083fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008408:	4293      	cmp	r3, r2
 800840a:	d802      	bhi.n	8008412 <find_volume+0x33e>
 800840c:	2302      	movs	r3, #2
 800840e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008418:	4293      	cmp	r3, r2
 800841a:	d802      	bhi.n	8008422 <find_volume+0x34e>
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	1c9a      	adds	r2, r3, #2
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800842e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008430:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008434:	441a      	add	r2, r3
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800843a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	441a      	add	r2, r3
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008448:	2b03      	cmp	r3, #3
 800844a:	d11e      	bne.n	800848a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	3338      	adds	r3, #56	; 0x38
 8008450:	332a      	adds	r3, #42	; 0x2a
 8008452:	4618      	mov	r0, r3
 8008454:	f7fd ffc0 	bl	80063d8 <ld_word>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <find_volume+0x38e>
 800845e:	230d      	movs	r3, #13
 8008460:	e0b1      	b.n	80085c6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	891b      	ldrh	r3, [r3, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <find_volume+0x39a>
 800846a:	230d      	movs	r3, #13
 800846c:	e0ab      	b.n	80085c6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	3338      	adds	r3, #56	; 0x38
 8008472:	332c      	adds	r3, #44	; 0x2c
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd ffc7 	bl	8006408 <ld_dword>
 800847a:	4602      	mov	r2, r0
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
 8008488:	e01f      	b.n	80084ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	891b      	ldrh	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <find_volume+0x3c2>
 8008492:	230d      	movs	r3, #13
 8008494:	e097      	b.n	80085c6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	441a      	add	r2, r3
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d103      	bne.n	80084b2 <find_volume+0x3de>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	e00a      	b.n	80084c8 <find_volume+0x3f4>
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	69da      	ldr	r2, [r3, #28]
 80084b6:	4613      	mov	r3, r2
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	4413      	add	r3, r2
 80084bc:	085a      	lsrs	r2, r3, #1
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	6a1a      	ldr	r2, [r3, #32]
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	899b      	ldrh	r3, [r3, #12]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	440b      	add	r3, r1
 80084d8:	3b01      	subs	r3, #1
 80084da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084dc:	8989      	ldrh	r1, [r1, #12]
 80084de:	fbb3 f3f1 	udiv	r3, r3, r1
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d201      	bcs.n	80084ea <find_volume+0x416>
 80084e6:	230d      	movs	r3, #13
 80084e8:	e06d      	b.n	80085c6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	619a      	str	r2, [r3, #24]
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	2280      	movs	r2, #128	; 0x80
 80084fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008504:	2b03      	cmp	r3, #3
 8008506:	d149      	bne.n	800859c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	3338      	adds	r3, #56	; 0x38
 800850c:	3330      	adds	r3, #48	; 0x30
 800850e:	4618      	mov	r0, r3
 8008510:	f7fd ff62 	bl	80063d8 <ld_word>
 8008514:	4603      	mov	r3, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	d140      	bne.n	800859c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800851a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800851c:	3301      	adds	r3, #1
 800851e:	4619      	mov	r1, r3
 8008520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008522:	f7fe fa09 	bl	8006938 <move_window>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d137      	bne.n	800859c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	2200      	movs	r2, #0
 8008530:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	3338      	adds	r3, #56	; 0x38
 8008536:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800853a:	4618      	mov	r0, r3
 800853c:	f7fd ff4c 	bl	80063d8 <ld_word>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008548:	429a      	cmp	r2, r3
 800854a:	d127      	bne.n	800859c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	3338      	adds	r3, #56	; 0x38
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd ff59 	bl	8006408 <ld_dword>
 8008556:	4603      	mov	r3, r0
 8008558:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <find_volume+0x4fc>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d11e      	bne.n	800859c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	3338      	adds	r3, #56	; 0x38
 8008562:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008566:	4618      	mov	r0, r3
 8008568:	f7fd ff4e 	bl	8006408 <ld_dword>
 800856c:	4603      	mov	r3, r0
 800856e:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <find_volume+0x500>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d113      	bne.n	800859c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	3338      	adds	r3, #56	; 0x38
 8008578:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd ff43 	bl	8006408 <ld_dword>
 8008582:	4602      	mov	r2, r0
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	3338      	adds	r3, #56	; 0x38
 800858c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008590:	4618      	mov	r0, r3
 8008592:	f7fd ff39 	bl	8006408 <ld_dword>
 8008596:	4602      	mov	r2, r0
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <find_volume+0x504>)
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <find_volume+0x504>)
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <find_volume+0x504>)
 80085b2:	881a      	ldrh	r2, [r3, #0]
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	4a08      	ldr	r2, [pc, #32]	; (80085dc <find_volume+0x508>)
 80085bc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085c0:	f7fe f952 	bl	8006868 <clear_lock>
#endif
	return FR_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3758      	adds	r7, #88	; 0x58
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	41615252 	.word	0x41615252
 80085d4:	61417272 	.word	0x61417272
 80085d8:	200006ac 	.word	0x200006ac
 80085dc:	200006d0 	.word	0x200006d0

080085e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085ea:	2309      	movs	r3, #9
 80085ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01c      	beq.n	800862e <validate+0x4e>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d018      	beq.n	800862e <validate+0x4e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d013      	beq.n	800862e <validate+0x4e>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	889a      	ldrh	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	429a      	cmp	r2, r3
 8008612:	d10c      	bne.n	800862e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fe3e 	bl	800629c <disk_status>
 8008620:	4603      	mov	r3, r0
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <validate+0x4e>
			res = FR_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <validate+0x5a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	e000      	b.n	800863c <validate+0x5c>
 800863a:	2300      	movs	r3, #0
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6013      	str	r3, [r2, #0]
	return res;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800865e:	f107 0310 	add.w	r3, r7, #16
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fc9c 	bl	8007fa0 <get_ldnumber>
 8008668:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da01      	bge.n	8008674 <f_mount+0x28>
 8008670:	230b      	movs	r3, #11
 8008672:	e02b      	b.n	80086cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008674:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <f_mount+0x88>)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008684:	69b8      	ldr	r0, [r7, #24]
 8008686:	f7fe f8ef 	bl	8006868 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	2200      	movs	r2, #0
 800868e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	490d      	ldr	r1, [pc, #52]	; (80086d4 <f_mount+0x88>)
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <f_mount+0x66>
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d001      	beq.n	80086b6 <f_mount+0x6a>
 80086b2:	2300      	movs	r3, #0
 80086b4:	e00a      	b.n	80086cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086b6:	f107 010c 	add.w	r1, r7, #12
 80086ba:	f107 0308 	add.w	r3, r7, #8
 80086be:	2200      	movs	r2, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff fd07 	bl	80080d4 <find_volume>
 80086c6:	4603      	mov	r3, r0
 80086c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3720      	adds	r7, #32
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200006a8 	.word	0x200006a8

080086d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b09a      	sub	sp, #104	; 0x68
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <f_open+0x18>
 80086ec:	2309      	movs	r3, #9
 80086ee:	e1bb      	b.n	8008a68 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086f8:	79fa      	ldrb	r2, [r7, #7]
 80086fa:	f107 0114 	add.w	r1, r7, #20
 80086fe:	f107 0308 	add.w	r3, r7, #8
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fce6 	bl	80080d4 <find_volume>
 8008708:	4603      	mov	r3, r0
 800870a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800870e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 819f 	bne.w	8008a56 <f_open+0x37e>
		dj.obj.fs = fs;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	f107 0318 	add.w	r3, r7, #24
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fbc5 	bl	8007eb4 <follow_path>
 800872a:	4603      	mov	r3, r0
 800872c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11a      	bne.n	800876e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800873c:	b25b      	sxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	da03      	bge.n	800874a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008742:	2306      	movs	r3, #6
 8008744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008748:	e011      	b.n	800876e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	bf14      	ite	ne
 8008754:	2301      	movne	r3, #1
 8008756:	2300      	moveq	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	f107 0318 	add.w	r3, r7, #24
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f7fd ff38 	bl	80065d8 <chk_lock>
 8008768:	4603      	mov	r3, r0
 800876a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	f003 031c 	and.w	r3, r3, #28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d07f      	beq.n	8008878 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008784:	2b04      	cmp	r3, #4
 8008786:	d10e      	bne.n	80087a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008788:	f7fd ff82 	bl	8006690 <enq_lock>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <f_open+0xc8>
 8008792:	f107 0318 	add.w	r3, r7, #24
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff f8dc 	bl	8007954 <dir_register>
 800879c:	4603      	mov	r3, r0
 800879e:	e000      	b.n	80087a2 <f_open+0xca>
 80087a0:	2312      	movs	r3, #18
 80087a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	f043 0308 	orr.w	r3, r3, #8
 80087ac:	71fb      	strb	r3, [r7, #7]
 80087ae:	e010      	b.n	80087d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087b0:	7fbb      	ldrb	r3, [r7, #30]
 80087b2:	f003 0311 	and.w	r3, r3, #17
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <f_open+0xea>
					res = FR_DENIED;
 80087ba:	2307      	movs	r3, #7
 80087bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80087c0:	e007      	b.n	80087d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <f_open+0xfa>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d168      	bne.n	80088ac <f_open+0x1d4>
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d063      	beq.n	80088ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80087e4:	f7fd fcfc 	bl	80061e0 <get_fattime>
 80087e8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	330e      	adds	r3, #14
 80087ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fe47 	bl	8006484 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	3316      	adds	r3, #22
 80087fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fd fe41 	bl	8006484 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	330b      	adds	r3, #11
 8008806:	2220      	movs	r2, #32
 8008808:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fe17 	bl	8007444 <ld_clust>
 8008816:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800881c:	2200      	movs	r2, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fe2f 	bl	8007482 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	331c      	adds	r3, #28
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd fe2a 	bl	8006484 <st_dword>
					fs->wflag = 1;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2201      	movs	r2, #1
 8008834:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008838:	2b00      	cmp	r3, #0
 800883a:	d037      	beq.n	80088ac <f_open+0x1d4>
						dw = fs->winsect;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008842:	f107 0318 	add.w	r3, r7, #24
 8008846:	2200      	movs	r2, #0
 8008848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fb1f 	bl	8006e8e <remove_chain>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008856:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800885a:	2b00      	cmp	r3, #0
 800885c:	d126      	bne.n	80088ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe f868 	bl	8006938 <move_window>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008872:	3a01      	subs	r2, #1
 8008874:	615a      	str	r2, [r3, #20]
 8008876:	e019      	b.n	80088ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800887c:	2b00      	cmp	r3, #0
 800887e:	d115      	bne.n	80088ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008880:	7fbb      	ldrb	r3, [r7, #30]
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <f_open+0x1ba>
					res = FR_NO_FILE;
 800888a:	2304      	movs	r3, #4
 800888c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008890:	e00c      	b.n	80088ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <f_open+0x1d4>
 800889c:	7fbb      	ldrb	r3, [r7, #30]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <f_open+0x1d4>
						res = FR_DENIED;
 80088a6:	2307      	movs	r3, #7
 80088a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80088ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d128      	bne.n	8008906 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80088ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	f023 0301 	bic.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bf14      	ite	ne
 80088de:	2301      	movne	r3, #1
 80088e0:	2300      	moveq	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fd fef1 	bl	80066d4 <inc_lock>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <f_open+0x22e>
 8008900:	2302      	movs	r3, #2
 8008902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 80a3 	bne.w	8008a56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008914:	4611      	mov	r1, r2
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fd94 	bl	8007444 <ld_clust>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	331c      	adds	r3, #28
 8008926:	4618      	mov	r0, r3
 8008928:	f7fd fd6e 	bl	8006408 <ld_dword>
 800892c:	4602      	mov	r2, r0
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	88da      	ldrh	r2, [r3, #6]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	79fa      	ldrb	r2, [r7, #7]
 800894a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3330      	adds	r3, #48	; 0x30
 8008962:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fdd8 	bl	800651e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d06e      	beq.n	8008a56 <f_open+0x37e>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d06a      	beq.n	8008a56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	895b      	ldrh	r3, [r3, #10]
 800898c:	461a      	mov	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
 8008996:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a4:	e016      	b.n	80089d4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe f881 	bl	8006ab2 <get_fat>
 80089b0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80089b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d802      	bhi.n	80089be <f_open+0x2e6>
 80089b8:	2302      	movs	r3, #2
 80089ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d102      	bne.n	80089cc <f_open+0x2f4>
 80089c6:	2301      	movs	r3, #1
 80089c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <f_open+0x30c>
 80089dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d8e0      	bhi.n	80089a6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80089ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d131      	bne.n	8008a56 <f_open+0x37e>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	899b      	ldrh	r3, [r3, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80089fe:	fb01 f202 	mul.w	r2, r1, r2
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d026      	beq.n	8008a56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f831 	bl	8006a74 <clust2sect>
 8008a12:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d103      	bne.n	8008a22 <f_open+0x34a>
						res = FR_INT_ERR;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008a20:	e019      	b.n	8008a56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	899b      	ldrh	r3, [r3, #12]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a30:	441a      	add	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	7858      	ldrb	r0, [r3, #1]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	2301      	movs	r3, #1
 8008a46:	f7fd fc69 	bl	800631c <disk_read>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <f_open+0x37e>
 8008a50:	2301      	movs	r3, #1
 8008a52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <f_open+0x38c>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3768      	adds	r7, #104	; 0x68
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08c      	sub	sp, #48	; 0x30
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f107 0210 	add.w	r2, r7, #16
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fda5 	bl	80085e0 <validate>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <f_write+0x44>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	7d5b      	ldrb	r3, [r3, #21]
 8008aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <f_write+0x4a>
 8008ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ab8:	e16a      	b.n	8008d90 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	7d1b      	ldrb	r3, [r3, #20]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <f_write+0x5a>
 8008ac6:	2307      	movs	r3, #7
 8008ac8:	e162      	b.n	8008d90 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	441a      	add	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	f080 814c 	bcs.w	8008d74 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ae4:	e146      	b.n	8008d74 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	8992      	ldrh	r2, [r2, #12]
 8008aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8008af2:	fb01 f202 	mul.w	r2, r1, r2
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f040 80f1 	bne.w	8008ce0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	8992      	ldrh	r2, [r2, #12]
 8008b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	8952      	ldrh	r2, [r2, #10]
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	4013      	ands	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d143      	bne.n	8008ba2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10c      	bne.n	8008b3c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d11a      	bne.n	8008b64 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fa10 	bl	8006f58 <create_chain>
 8008b38:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b3a:	e013      	b.n	8008b64 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7fe fa9c 	bl	8007088 <clmt_clust>
 8008b50:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b52:	e007      	b.n	8008b64 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fe f9fb 	bl	8006f58 <create_chain>
 8008b62:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8109 	beq.w	8008d7e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d104      	bne.n	8008b7c <f_write+0x10c>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2202      	movs	r2, #2
 8008b76:	755a      	strb	r2, [r3, #21]
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e109      	b.n	8008d90 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d104      	bne.n	8008b8e <f_write+0x11e>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	755a      	strb	r2, [r3, #21]
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e100      	b.n	8008d90 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b92:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <f_write+0x132>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	7d1b      	ldrb	r3, [r3, #20]
 8008ba6:	b25b      	sxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da18      	bge.n	8008bde <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	7858      	ldrb	r0, [r3, #1]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1a      	ldr	r2, [r3, #32]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f7fd fbce 	bl	800635c <disk_write>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <f_write+0x160>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	755a      	strb	r2, [r3, #21]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e0df      	b.n	8008d90 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fd ff44 	bl	8006a74 <clust2sect>
 8008bec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <f_write+0x18e>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	755a      	strb	r2, [r3, #21]
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e0c8      	b.n	8008d90 <f_write+0x320>
			sect += csect;
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	4413      	add	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	899b      	ldrh	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d043      	beq.n	8008ca2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	4413      	add	r3, r2
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	8952      	ldrh	r2, [r2, #10]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d905      	bls.n	8008c34 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	895b      	ldrh	r3, [r3, #10]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	7858      	ldrb	r0, [r3, #1]
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	f7fd fb8d 	bl	800635c <disk_write>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d004      	beq.n	8008c52 <f_write+0x1e2>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	755a      	strb	r2, [r3, #21]
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e09e      	b.n	8008d90 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1a      	ldr	r2, [r3, #32]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	6a3a      	ldr	r2, [r7, #32]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d918      	bls.n	8008c92 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a1a      	ldr	r2, [r3, #32]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	8992      	ldrh	r2, [r2, #12]
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	18d1      	adds	r1, r2, r3
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	899b      	ldrh	r3, [r3, #12]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7fd fc2c 	bl	80064dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	7d1b      	ldrb	r3, [r3, #20]
 8008c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	899b      	ldrh	r3, [r3, #12]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ca0:	e04b      	b.n	8008d3a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d016      	beq.n	8008cda <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d210      	bcs.n	8008cda <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	7858      	ldrb	r0, [r3, #1]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	f7fd fb29 	bl	800631c <disk_read>
 8008cca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	755a      	strb	r2, [r3, #21]
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e05a      	b.n	8008d90 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	899b      	ldrh	r3, [r3, #12]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	8992      	ldrh	r2, [r2, #12]
 8008cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cf2:	fb01 f202 	mul.w	r2, r1, r2
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	1ac3      	subs	r3, r0, r3
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d901      	bls.n	8008d08 <f_write+0x298>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	8992      	ldrh	r2, [r2, #12]
 8008d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d1a:	fb00 f202 	mul.w	r2, r0, r2
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	440b      	add	r3, r1
 8008d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d24:	69f9      	ldr	r1, [r7, #28]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fd fbd8 	bl	80064dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	7d1b      	ldrb	r3, [r3, #20]
 8008d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	4413      	add	r3, r2
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	699a      	ldr	r2, [r3, #24]
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	441a      	add	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	619a      	str	r2, [r3, #24]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	bf38      	it	cc
 8008d5a:	461a      	movcc	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	60da      	str	r2, [r3, #12]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	441a      	add	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f47f aeb5 	bne.w	8008ae6 <f_write+0x76>
 8008d7c:	e000      	b.n	8008d80 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d7e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	7d1b      	ldrb	r3, [r3, #20]
 8008d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3730      	adds	r7, #48	; 0x30
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff fc19 	bl	80085e0 <validate>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d168      	bne.n	8008e8a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7d1b      	ldrb	r3, [r3, #20]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d062      	beq.n	8008e8a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7d1b      	ldrb	r3, [r3, #20]
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da15      	bge.n	8008dfa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	7858      	ldrb	r0, [r3, #1]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f7fd fabd 	bl	800635c <disk_write>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <f_sync+0x54>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e04f      	b.n	8008e8c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7d1b      	ldrb	r3, [r3, #20]
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008dfa:	f7fd f9f1 	bl	80061e0 <get_fattime>
 8008dfe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7fd fd95 	bl	8006938 <move_window>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d138      	bne.n	8008e8a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	330b      	adds	r3, #11
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	330b      	adds	r3, #11
 8008e28:	f042 0220 	orr.w	r2, r2, #32
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	f7fe fb21 	bl	8007482 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f103 021c 	add.w	r2, r3, #28
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7fd fb19 	bl	8006484 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3316      	adds	r3, #22
 8008e56:	6939      	ldr	r1, [r7, #16]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fd fb13 	bl	8006484 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3312      	adds	r3, #18
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fd faf2 	bl	800644e <st_word>
					fs->wflag = 1;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fd fd8e 	bl	8006994 <sync_fs>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
 8008e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff ff7b 	bl	8008d98 <f_sync>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d118      	bne.n	8008ede <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f107 0208 	add.w	r2, r7, #8
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff fb93 	bl	80085e0 <validate>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10c      	bne.n	8008ede <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fd fc91 	bl	80067f0 <dec_lock>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	2b0a      	cmp	r3, #10
 8008ef8:	d103      	bne.n	8008f02 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008efa:	210d      	movs	r1, #13
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fff3 	bl	8008ee8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db25      	blt.n	8008f5a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	60fa      	str	r2, [r7, #12]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	4413      	add	r3, r2
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b3c      	cmp	r3, #60	; 0x3c
 8008f20:	dd12      	ble.n	8008f48 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f103 010c 	add.w	r1, r3, #12
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	f107 0308 	add.w	r3, r7, #8
 8008f32:	f7ff fd9d 	bl	8008a70 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d101      	bne.n	8008f42 <putc_bfd+0x5a>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e001      	b.n	8008f46 <putc_bfd+0x5e>
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
 8008f46:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	609a      	str	r2, [r3, #8]
 8008f58:	e000      	b.n	8008f5c <putc_bfd+0x74>
	if (i < 0) return;
 8008f5a:	bf00      	nop
}
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	db16      	blt.n	8008fa0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f103 010c 	add.w	r1, r3, #12
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	461a      	mov	r2, r3
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	f7ff fd73 	bl	8008a70 <f_write>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d107      	bne.n	8008fa0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d102      	bne.n	8008fa0 <putc_flush+0x3e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	e001      	b.n	8008fa4 <putc_flush+0x42>
	return EOF;
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	609a      	str	r2, [r3, #8]
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b096      	sub	sp, #88	; 0x58
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff ffe0 	bl	8008fac <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008fec:	e009      	b.n	8009002 <f_puts+0x2c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	781a      	ldrb	r2, [r3, #0]
 8008ff6:	f107 030c 	add.w	r3, r7, #12
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff ff73 	bl	8008ee8 <putc_bfd>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f1      	bne.n	8008fee <f_puts+0x18>
	return putc_flush(&pb);
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff ffa7 	bl	8008f62 <putc_flush>
 8009014:	4603      	mov	r3, r0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3758      	adds	r7, #88	; 0x58
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009036:	4b1f      	ldr	r3, [pc, #124]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009038:	7a5b      	ldrb	r3, [r3, #9]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d131      	bne.n	80090a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009040:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009042:	7a5b      	ldrb	r3, [r3, #9]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800904e:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009060:	7a5b      	ldrb	r3, [r3, #9]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009068:	4413      	add	r3, r2
 800906a:	79fa      	ldrb	r2, [r7, #7]
 800906c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009070:	7a5b      	ldrb	r3, [r3, #9]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	b2d1      	uxtb	r1, r2
 8009078:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800907a:	7251      	strb	r1, [r2, #9]
 800907c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800907e:	7dbb      	ldrb	r3, [r7, #22]
 8009080:	3330      	adds	r3, #48	; 0x30
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3301      	adds	r3, #1
 800908c:	223a      	movs	r2, #58	; 0x3a
 800908e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3302      	adds	r3, #2
 8009094:	222f      	movs	r2, #47	; 0x2f
 8009096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3303      	adds	r3, #3
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	200008d0 	.word	0x200008d0

080090b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff ffaa 	bl	8009020 <FATFS_LinkDriverEx>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	2b7f      	cmp	r3, #127	; 0x7f
 80090e8:	d802      	bhi.n	80090f0 <ff_convert+0x18>
		c = chr;
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	81fb      	strh	r3, [r7, #14]
 80090ee:	e025      	b.n	800913c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090f6:	88fb      	ldrh	r3, [r7, #6]
 80090f8:	2bff      	cmp	r3, #255	; 0xff
 80090fa:	d805      	bhi.n	8009108 <ff_convert+0x30>
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	3b80      	subs	r3, #128	; 0x80
 8009100:	4a12      	ldr	r2, [pc, #72]	; (800914c <ff_convert+0x74>)
 8009102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009106:	e000      	b.n	800910a <ff_convert+0x32>
 8009108:	2300      	movs	r3, #0
 800910a:	81fb      	strh	r3, [r7, #14]
 800910c:	e016      	b.n	800913c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800910e:	2300      	movs	r3, #0
 8009110:	81fb      	strh	r3, [r7, #14]
 8009112:	e009      	b.n	8009128 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	4a0d      	ldr	r2, [pc, #52]	; (800914c <ff_convert+0x74>)
 8009118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911c:	88fa      	ldrh	r2, [r7, #6]
 800911e:	429a      	cmp	r2, r3
 8009120:	d006      	beq.n	8009130 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	3301      	adds	r3, #1
 8009126:	81fb      	strh	r3, [r7, #14]
 8009128:	89fb      	ldrh	r3, [r7, #14]
 800912a:	2b7f      	cmp	r3, #127	; 0x7f
 800912c:	d9f2      	bls.n	8009114 <ff_convert+0x3c>
 800912e:	e000      	b.n	8009132 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009130:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009132:	89fb      	ldrh	r3, [r7, #14]
 8009134:	3380      	adds	r3, #128	; 0x80
 8009136:	b29b      	uxth	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800913c:	89fb      	ldrh	r3, [r7, #14]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	0800c9c0 	.word	0x0800c9c0

08009150 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009160:	d201      	bcs.n	8009166 <ff_wtoupper+0x16>
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <ff_wtoupper+0x10c>)
 8009164:	e000      	b.n	8009168 <ff_wtoupper+0x18>
 8009166:	4b3e      	ldr	r3, [pc, #248]	; (8009260 <ff_wtoupper+0x110>)
 8009168:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	1c9a      	adds	r2, r3, #2
 800916e:	617a      	str	r2, [r7, #20]
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009174:	8a7b      	ldrh	r3, [r7, #18]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d068      	beq.n	800924c <ff_wtoupper+0xfc>
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	8a7b      	ldrh	r3, [r7, #18]
 800917e:	429a      	cmp	r2, r3
 8009180:	d364      	bcc.n	800924c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	617a      	str	r2, [r7, #20]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	823b      	strh	r3, [r7, #16]
 800918c:	8a3b      	ldrh	r3, [r7, #16]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	81fb      	strh	r3, [r7, #14]
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009198:	88fa      	ldrh	r2, [r7, #6]
 800919a:	8a79      	ldrh	r1, [r7, #18]
 800919c:	8a3b      	ldrh	r3, [r7, #16]
 800919e:	440b      	add	r3, r1
 80091a0:	429a      	cmp	r2, r3
 80091a2:	da49      	bge.n	8009238 <ff_wtoupper+0xe8>
			switch (cmd) {
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	2b08      	cmp	r3, #8
 80091a8:	d84f      	bhi.n	800924a <ff_wtoupper+0xfa>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <ff_wtoupper+0x60>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091d5 	.word	0x080091d5
 80091b4:	080091e7 	.word	0x080091e7
 80091b8:	080091fd 	.word	0x080091fd
 80091bc:	08009205 	.word	0x08009205
 80091c0:	0800920d 	.word	0x0800920d
 80091c4:	08009215 	.word	0x08009215
 80091c8:	0800921d 	.word	0x0800921d
 80091cc:	08009225 	.word	0x08009225
 80091d0:	0800922d 	.word	0x0800922d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	8a7b      	ldrh	r3, [r7, #18]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	80fb      	strh	r3, [r7, #6]
 80091e4:	e027      	b.n	8009236 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091e6:	88fa      	ldrh	r2, [r7, #6]
 80091e8:	8a7b      	ldrh	r3, [r7, #18]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	80fb      	strh	r3, [r7, #6]
 80091fa:	e01c      	b.n	8009236 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	3b10      	subs	r3, #16
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	e018      	b.n	8009236 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	3b20      	subs	r3, #32
 8009208:	80fb      	strh	r3, [r7, #6]
 800920a:	e014      	b.n	8009236 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	3b30      	subs	r3, #48	; 0x30
 8009210:	80fb      	strh	r3, [r7, #6]
 8009212:	e010      	b.n	8009236 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	3b1a      	subs	r3, #26
 8009218:	80fb      	strh	r3, [r7, #6]
 800921a:	e00c      	b.n	8009236 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	3308      	adds	r3, #8
 8009220:	80fb      	strh	r3, [r7, #6]
 8009222:	e008      	b.n	8009236 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	3b50      	subs	r3, #80	; 0x50
 8009228:	80fb      	strh	r3, [r7, #6]
 800922a:	e004      	b.n	8009236 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009232:	80fb      	strh	r3, [r7, #6]
 8009234:	bf00      	nop
			}
			break;
 8009236:	e008      	b.n	800924a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d195      	bne.n	800916a <ff_wtoupper+0x1a>
 800923e:	8a3b      	ldrh	r3, [r7, #16]
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4413      	add	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009248:	e78f      	b.n	800916a <ff_wtoupper+0x1a>
			break;
 800924a:	bf00      	nop
	}

	return chr;
 800924c:	88fb      	ldrh	r3, [r7, #6]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	0800cac0 	.word	0x0800cac0
 8009260:	0800ccb4 	.word	0x0800ccb4

08009264 <malloc>:
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <malloc+0xc>)
 8009266:	4601      	mov	r1, r0
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	f000 b82b 	b.w	80092c4 <_malloc_r>
 800926e:	bf00      	nop
 8009270:	2000007c 	.word	0x2000007c

08009274 <free>:
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <free+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f000 bcd3 	b.w	8009c24 <_free_r>
 800927e:	bf00      	nop
 8009280:	2000007c 	.word	0x2000007c

08009284 <sbrk_aligned>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4e0e      	ldr	r6, [pc, #56]	; (80092c0 <sbrk_aligned+0x3c>)
 8009288:	460c      	mov	r4, r1
 800928a:	6831      	ldr	r1, [r6, #0]
 800928c:	4605      	mov	r5, r0
 800928e:	b911      	cbnz	r1, 8009296 <sbrk_aligned+0x12>
 8009290:	f000 fc54 	bl	8009b3c <_sbrk_r>
 8009294:	6030      	str	r0, [r6, #0]
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 fc4f 	bl	8009b3c <_sbrk_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d00a      	beq.n	80092b8 <sbrk_aligned+0x34>
 80092a2:	1cc4      	adds	r4, r0, #3
 80092a4:	f024 0403 	bic.w	r4, r4, #3
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d007      	beq.n	80092bc <sbrk_aligned+0x38>
 80092ac:	1a21      	subs	r1, r4, r0
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fc44 	bl	8009b3c <_sbrk_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d101      	bne.n	80092bc <sbrk_aligned+0x38>
 80092b8:	f04f 34ff 	mov.w	r4, #4294967295
 80092bc:	4620      	mov	r0, r4
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	200008e0 	.word	0x200008e0

080092c4 <_malloc_r>:
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	1ccd      	adds	r5, r1, #3
 80092ca:	f025 0503 	bic.w	r5, r5, #3
 80092ce:	3508      	adds	r5, #8
 80092d0:	2d0c      	cmp	r5, #12
 80092d2:	bf38      	it	cc
 80092d4:	250c      	movcc	r5, #12
 80092d6:	2d00      	cmp	r5, #0
 80092d8:	4607      	mov	r7, r0
 80092da:	db01      	blt.n	80092e0 <_malloc_r+0x1c>
 80092dc:	42a9      	cmp	r1, r5
 80092de:	d905      	bls.n	80092ec <_malloc_r+0x28>
 80092e0:	230c      	movs	r3, #12
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	2600      	movs	r6, #0
 80092e6:	4630      	mov	r0, r6
 80092e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093c0 <_malloc_r+0xfc>
 80092f0:	f000 f868 	bl	80093c4 <__malloc_lock>
 80092f4:	f8d8 3000 	ldr.w	r3, [r8]
 80092f8:	461c      	mov	r4, r3
 80092fa:	bb5c      	cbnz	r4, 8009354 <_malloc_r+0x90>
 80092fc:	4629      	mov	r1, r5
 80092fe:	4638      	mov	r0, r7
 8009300:	f7ff ffc0 	bl	8009284 <sbrk_aligned>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	4604      	mov	r4, r0
 8009308:	d155      	bne.n	80093b6 <_malloc_r+0xf2>
 800930a:	f8d8 4000 	ldr.w	r4, [r8]
 800930e:	4626      	mov	r6, r4
 8009310:	2e00      	cmp	r6, #0
 8009312:	d145      	bne.n	80093a0 <_malloc_r+0xdc>
 8009314:	2c00      	cmp	r4, #0
 8009316:	d048      	beq.n	80093aa <_malloc_r+0xe6>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	4631      	mov	r1, r6
 800931c:	4638      	mov	r0, r7
 800931e:	eb04 0903 	add.w	r9, r4, r3
 8009322:	f000 fc0b 	bl	8009b3c <_sbrk_r>
 8009326:	4581      	cmp	r9, r0
 8009328:	d13f      	bne.n	80093aa <_malloc_r+0xe6>
 800932a:	6821      	ldr	r1, [r4, #0]
 800932c:	1a6d      	subs	r5, r5, r1
 800932e:	4629      	mov	r1, r5
 8009330:	4638      	mov	r0, r7
 8009332:	f7ff ffa7 	bl	8009284 <sbrk_aligned>
 8009336:	3001      	adds	r0, #1
 8009338:	d037      	beq.n	80093aa <_malloc_r+0xe6>
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	442b      	add	r3, r5
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	f8d8 3000 	ldr.w	r3, [r8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d038      	beq.n	80093ba <_malloc_r+0xf6>
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	42a2      	cmp	r2, r4
 800934c:	d12b      	bne.n	80093a6 <_malloc_r+0xe2>
 800934e:	2200      	movs	r2, #0
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	e00f      	b.n	8009374 <_malloc_r+0xb0>
 8009354:	6822      	ldr	r2, [r4, #0]
 8009356:	1b52      	subs	r2, r2, r5
 8009358:	d41f      	bmi.n	800939a <_malloc_r+0xd6>
 800935a:	2a0b      	cmp	r2, #11
 800935c:	d917      	bls.n	800938e <_malloc_r+0xca>
 800935e:	1961      	adds	r1, r4, r5
 8009360:	42a3      	cmp	r3, r4
 8009362:	6025      	str	r5, [r4, #0]
 8009364:	bf18      	it	ne
 8009366:	6059      	strne	r1, [r3, #4]
 8009368:	6863      	ldr	r3, [r4, #4]
 800936a:	bf08      	it	eq
 800936c:	f8c8 1000 	streq.w	r1, [r8]
 8009370:	5162      	str	r2, [r4, r5]
 8009372:	604b      	str	r3, [r1, #4]
 8009374:	4638      	mov	r0, r7
 8009376:	f104 060b 	add.w	r6, r4, #11
 800937a:	f000 f829 	bl	80093d0 <__malloc_unlock>
 800937e:	f026 0607 	bic.w	r6, r6, #7
 8009382:	1d23      	adds	r3, r4, #4
 8009384:	1af2      	subs	r2, r6, r3
 8009386:	d0ae      	beq.n	80092e6 <_malloc_r+0x22>
 8009388:	1b9b      	subs	r3, r3, r6
 800938a:	50a3      	str	r3, [r4, r2]
 800938c:	e7ab      	b.n	80092e6 <_malloc_r+0x22>
 800938e:	42a3      	cmp	r3, r4
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	d1dd      	bne.n	8009350 <_malloc_r+0x8c>
 8009394:	f8c8 2000 	str.w	r2, [r8]
 8009398:	e7ec      	b.n	8009374 <_malloc_r+0xb0>
 800939a:	4623      	mov	r3, r4
 800939c:	6864      	ldr	r4, [r4, #4]
 800939e:	e7ac      	b.n	80092fa <_malloc_r+0x36>
 80093a0:	4634      	mov	r4, r6
 80093a2:	6876      	ldr	r6, [r6, #4]
 80093a4:	e7b4      	b.n	8009310 <_malloc_r+0x4c>
 80093a6:	4613      	mov	r3, r2
 80093a8:	e7cc      	b.n	8009344 <_malloc_r+0x80>
 80093aa:	230c      	movs	r3, #12
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	4638      	mov	r0, r7
 80093b0:	f000 f80e 	bl	80093d0 <__malloc_unlock>
 80093b4:	e797      	b.n	80092e6 <_malloc_r+0x22>
 80093b6:	6025      	str	r5, [r4, #0]
 80093b8:	e7dc      	b.n	8009374 <_malloc_r+0xb0>
 80093ba:	605b      	str	r3, [r3, #4]
 80093bc:	deff      	udf	#255	; 0xff
 80093be:	bf00      	nop
 80093c0:	200008dc 	.word	0x200008dc

080093c4 <__malloc_lock>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__malloc_lock+0x8>)
 80093c6:	f000 bc06 	b.w	8009bd6 <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	20000a24 	.word	0x20000a24

080093d0 <__malloc_unlock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__malloc_unlock+0x8>)
 80093d2:	f000 bc01 	b.w	8009bd8 <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	20000a24 	.word	0x20000a24

080093dc <rand>:
 80093dc:	4b16      	ldr	r3, [pc, #88]	; (8009438 <rand+0x5c>)
 80093de:	b510      	push	{r4, lr}
 80093e0:	681c      	ldr	r4, [r3, #0]
 80093e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093e4:	b9b3      	cbnz	r3, 8009414 <rand+0x38>
 80093e6:	2018      	movs	r0, #24
 80093e8:	f7ff ff3c 	bl	8009264 <malloc>
 80093ec:	4602      	mov	r2, r0
 80093ee:	6320      	str	r0, [r4, #48]	; 0x30
 80093f0:	b920      	cbnz	r0, 80093fc <rand+0x20>
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <rand+0x60>)
 80093f4:	4812      	ldr	r0, [pc, #72]	; (8009440 <rand+0x64>)
 80093f6:	2152      	movs	r1, #82	; 0x52
 80093f8:	f000 fbf6 	bl	8009be8 <__assert_func>
 80093fc:	4911      	ldr	r1, [pc, #68]	; (8009444 <rand+0x68>)
 80093fe:	4b12      	ldr	r3, [pc, #72]	; (8009448 <rand+0x6c>)
 8009400:	e9c0 1300 	strd	r1, r3, [r0]
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <rand+0x70>)
 8009406:	6083      	str	r3, [r0, #8]
 8009408:	230b      	movs	r3, #11
 800940a:	8183      	strh	r3, [r0, #12]
 800940c:	2100      	movs	r1, #0
 800940e:	2001      	movs	r0, #1
 8009410:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009416:	480e      	ldr	r0, [pc, #56]	; (8009450 <rand+0x74>)
 8009418:	690b      	ldr	r3, [r1, #16]
 800941a:	694c      	ldr	r4, [r1, #20]
 800941c:	4a0d      	ldr	r2, [pc, #52]	; (8009454 <rand+0x78>)
 800941e:	4358      	muls	r0, r3
 8009420:	fb02 0004 	mla	r0, r2, r4, r0
 8009424:	fba3 3202 	umull	r3, r2, r3, r2
 8009428:	3301      	adds	r3, #1
 800942a:	eb40 0002 	adc.w	r0, r0, r2
 800942e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009432:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009436:	bd10      	pop	{r4, pc}
 8009438:	2000007c 	.word	0x2000007c
 800943c:	0800cd70 	.word	0x0800cd70
 8009440:	0800cd87 	.word	0x0800cd87
 8009444:	abcd330e 	.word	0xabcd330e
 8009448:	e66d1234 	.word	0xe66d1234
 800944c:	0005deec 	.word	0x0005deec
 8009450:	5851f42d 	.word	0x5851f42d
 8009454:	4c957f2d 	.word	0x4c957f2d

08009458 <_scanf_float>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	b087      	sub	sp, #28
 800945e:	4617      	mov	r7, r2
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	688b      	ldr	r3, [r1, #8]
 8009464:	1e5a      	subs	r2, r3, #1
 8009466:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800946a:	bf83      	ittte	hi
 800946c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009470:	195b      	addhi	r3, r3, r5
 8009472:	9302      	strhi	r3, [sp, #8]
 8009474:	2300      	movls	r3, #0
 8009476:	bf86      	itte	hi
 8009478:	f240 135d 	movwhi	r3, #349	; 0x15d
 800947c:	608b      	strhi	r3, [r1, #8]
 800947e:	9302      	strls	r3, [sp, #8]
 8009480:	680b      	ldr	r3, [r1, #0]
 8009482:	468b      	mov	fp, r1
 8009484:	2500      	movs	r5, #0
 8009486:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800948a:	f84b 3b1c 	str.w	r3, [fp], #28
 800948e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009492:	4680      	mov	r8, r0
 8009494:	460c      	mov	r4, r1
 8009496:	465e      	mov	r6, fp
 8009498:	46aa      	mov	sl, r5
 800949a:	46a9      	mov	r9, r5
 800949c:	9501      	str	r5, [sp, #4]
 800949e:	68a2      	ldr	r2, [r4, #8]
 80094a0:	b152      	cbz	r2, 80094b8 <_scanf_float+0x60>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b4e      	cmp	r3, #78	; 0x4e
 80094a8:	d864      	bhi.n	8009574 <_scanf_float+0x11c>
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d83c      	bhi.n	8009528 <_scanf_float+0xd0>
 80094ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094b2:	b2c8      	uxtb	r0, r1
 80094b4:	280e      	cmp	r0, #14
 80094b6:	d93a      	bls.n	800952e <_scanf_float+0xd6>
 80094b8:	f1b9 0f00 	cmp.w	r9, #0
 80094bc:	d003      	beq.n	80094c6 <_scanf_float+0x6e>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ca:	f1ba 0f01 	cmp.w	sl, #1
 80094ce:	f200 8113 	bhi.w	80096f8 <_scanf_float+0x2a0>
 80094d2:	455e      	cmp	r6, fp
 80094d4:	f200 8105 	bhi.w	80096e2 <_scanf_float+0x28a>
 80094d8:	2501      	movs	r5, #1
 80094da:	4628      	mov	r0, r5
 80094dc:	b007      	add	sp, #28
 80094de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094e6:	2a0d      	cmp	r2, #13
 80094e8:	d8e6      	bhi.n	80094b8 <_scanf_float+0x60>
 80094ea:	a101      	add	r1, pc, #4	; (adr r1, 80094f0 <_scanf_float+0x98>)
 80094ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094f0:	0800962f 	.word	0x0800962f
 80094f4:	080094b9 	.word	0x080094b9
 80094f8:	080094b9 	.word	0x080094b9
 80094fc:	080094b9 	.word	0x080094b9
 8009500:	0800968f 	.word	0x0800968f
 8009504:	08009667 	.word	0x08009667
 8009508:	080094b9 	.word	0x080094b9
 800950c:	080094b9 	.word	0x080094b9
 8009510:	0800963d 	.word	0x0800963d
 8009514:	080094b9 	.word	0x080094b9
 8009518:	080094b9 	.word	0x080094b9
 800951c:	080094b9 	.word	0x080094b9
 8009520:	080094b9 	.word	0x080094b9
 8009524:	080095f5 	.word	0x080095f5
 8009528:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800952c:	e7db      	b.n	80094e6 <_scanf_float+0x8e>
 800952e:	290e      	cmp	r1, #14
 8009530:	d8c2      	bhi.n	80094b8 <_scanf_float+0x60>
 8009532:	a001      	add	r0, pc, #4	; (adr r0, 8009538 <_scanf_float+0xe0>)
 8009534:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009538:	080095e7 	.word	0x080095e7
 800953c:	080094b9 	.word	0x080094b9
 8009540:	080095e7 	.word	0x080095e7
 8009544:	0800967b 	.word	0x0800967b
 8009548:	080094b9 	.word	0x080094b9
 800954c:	08009595 	.word	0x08009595
 8009550:	080095d1 	.word	0x080095d1
 8009554:	080095d1 	.word	0x080095d1
 8009558:	080095d1 	.word	0x080095d1
 800955c:	080095d1 	.word	0x080095d1
 8009560:	080095d1 	.word	0x080095d1
 8009564:	080095d1 	.word	0x080095d1
 8009568:	080095d1 	.word	0x080095d1
 800956c:	080095d1 	.word	0x080095d1
 8009570:	080095d1 	.word	0x080095d1
 8009574:	2b6e      	cmp	r3, #110	; 0x6e
 8009576:	d809      	bhi.n	800958c <_scanf_float+0x134>
 8009578:	2b60      	cmp	r3, #96	; 0x60
 800957a:	d8b2      	bhi.n	80094e2 <_scanf_float+0x8a>
 800957c:	2b54      	cmp	r3, #84	; 0x54
 800957e:	d077      	beq.n	8009670 <_scanf_float+0x218>
 8009580:	2b59      	cmp	r3, #89	; 0x59
 8009582:	d199      	bne.n	80094b8 <_scanf_float+0x60>
 8009584:	2d07      	cmp	r5, #7
 8009586:	d197      	bne.n	80094b8 <_scanf_float+0x60>
 8009588:	2508      	movs	r5, #8
 800958a:	e029      	b.n	80095e0 <_scanf_float+0x188>
 800958c:	2b74      	cmp	r3, #116	; 0x74
 800958e:	d06f      	beq.n	8009670 <_scanf_float+0x218>
 8009590:	2b79      	cmp	r3, #121	; 0x79
 8009592:	e7f6      	b.n	8009582 <_scanf_float+0x12a>
 8009594:	6821      	ldr	r1, [r4, #0]
 8009596:	05c8      	lsls	r0, r1, #23
 8009598:	d51a      	bpl.n	80095d0 <_scanf_float+0x178>
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80095a0:	6021      	str	r1, [r4, #0]
 80095a2:	f109 0901 	add.w	r9, r9, #1
 80095a6:	b11b      	cbz	r3, 80095b0 <_scanf_float+0x158>
 80095a8:	3b01      	subs	r3, #1
 80095aa:	3201      	adds	r2, #1
 80095ac:	9302      	str	r3, [sp, #8]
 80095ae:	60a2      	str	r2, [r4, #8]
 80095b0:	68a3      	ldr	r3, [r4, #8]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3b01      	subs	r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	607b      	str	r3, [r7, #4]
 80095c4:	f340 8084 	ble.w	80096d0 <_scanf_float+0x278>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	e766      	b.n	800949e <_scanf_float+0x46>
 80095d0:	eb1a 0f05 	cmn.w	sl, r5
 80095d4:	f47f af70 	bne.w	80094b8 <_scanf_float+0x60>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	f806 3b01 	strb.w	r3, [r6], #1
 80095e4:	e7e4      	b.n	80095b0 <_scanf_float+0x158>
 80095e6:	6822      	ldr	r2, [r4, #0]
 80095e8:	0610      	lsls	r0, r2, #24
 80095ea:	f57f af65 	bpl.w	80094b8 <_scanf_float+0x60>
 80095ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095f2:	e7f4      	b.n	80095de <_scanf_float+0x186>
 80095f4:	f1ba 0f00 	cmp.w	sl, #0
 80095f8:	d10e      	bne.n	8009618 <_scanf_float+0x1c0>
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	d10e      	bne.n	800961e <_scanf_float+0x1c6>
 8009600:	6822      	ldr	r2, [r4, #0]
 8009602:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009606:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800960a:	d108      	bne.n	800961e <_scanf_float+0x1c6>
 800960c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	f04f 0a01 	mov.w	sl, #1
 8009616:	e7e3      	b.n	80095e0 <_scanf_float+0x188>
 8009618:	f1ba 0f02 	cmp.w	sl, #2
 800961c:	d055      	beq.n	80096ca <_scanf_float+0x272>
 800961e:	2d01      	cmp	r5, #1
 8009620:	d002      	beq.n	8009628 <_scanf_float+0x1d0>
 8009622:	2d04      	cmp	r5, #4
 8009624:	f47f af48 	bne.w	80094b8 <_scanf_float+0x60>
 8009628:	3501      	adds	r5, #1
 800962a:	b2ed      	uxtb	r5, r5
 800962c:	e7d8      	b.n	80095e0 <_scanf_float+0x188>
 800962e:	f1ba 0f01 	cmp.w	sl, #1
 8009632:	f47f af41 	bne.w	80094b8 <_scanf_float+0x60>
 8009636:	f04f 0a02 	mov.w	sl, #2
 800963a:	e7d1      	b.n	80095e0 <_scanf_float+0x188>
 800963c:	b97d      	cbnz	r5, 800965e <_scanf_float+0x206>
 800963e:	f1b9 0f00 	cmp.w	r9, #0
 8009642:	f47f af3c 	bne.w	80094be <_scanf_float+0x66>
 8009646:	6822      	ldr	r2, [r4, #0]
 8009648:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800964c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009650:	f47f af39 	bne.w	80094c6 <_scanf_float+0x6e>
 8009654:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009658:	6022      	str	r2, [r4, #0]
 800965a:	2501      	movs	r5, #1
 800965c:	e7c0      	b.n	80095e0 <_scanf_float+0x188>
 800965e:	2d03      	cmp	r5, #3
 8009660:	d0e2      	beq.n	8009628 <_scanf_float+0x1d0>
 8009662:	2d05      	cmp	r5, #5
 8009664:	e7de      	b.n	8009624 <_scanf_float+0x1cc>
 8009666:	2d02      	cmp	r5, #2
 8009668:	f47f af26 	bne.w	80094b8 <_scanf_float+0x60>
 800966c:	2503      	movs	r5, #3
 800966e:	e7b7      	b.n	80095e0 <_scanf_float+0x188>
 8009670:	2d06      	cmp	r5, #6
 8009672:	f47f af21 	bne.w	80094b8 <_scanf_float+0x60>
 8009676:	2507      	movs	r5, #7
 8009678:	e7b2      	b.n	80095e0 <_scanf_float+0x188>
 800967a:	6822      	ldr	r2, [r4, #0]
 800967c:	0591      	lsls	r1, r2, #22
 800967e:	f57f af1b 	bpl.w	80094b8 <_scanf_float+0x60>
 8009682:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009686:	6022      	str	r2, [r4, #0]
 8009688:	f8cd 9004 	str.w	r9, [sp, #4]
 800968c:	e7a8      	b.n	80095e0 <_scanf_float+0x188>
 800968e:	6822      	ldr	r2, [r4, #0]
 8009690:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009694:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009698:	d006      	beq.n	80096a8 <_scanf_float+0x250>
 800969a:	0550      	lsls	r0, r2, #21
 800969c:	f57f af0c 	bpl.w	80094b8 <_scanf_float+0x60>
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	f43f af0f 	beq.w	80094c6 <_scanf_float+0x6e>
 80096a8:	0591      	lsls	r1, r2, #22
 80096aa:	bf58      	it	pl
 80096ac:	9901      	ldrpl	r1, [sp, #4]
 80096ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096b2:	bf58      	it	pl
 80096b4:	eba9 0101 	subpl.w	r1, r9, r1
 80096b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096bc:	bf58      	it	pl
 80096be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80096c2:	6022      	str	r2, [r4, #0]
 80096c4:	f04f 0900 	mov.w	r9, #0
 80096c8:	e78a      	b.n	80095e0 <_scanf_float+0x188>
 80096ca:	f04f 0a03 	mov.w	sl, #3
 80096ce:	e787      	b.n	80095e0 <_scanf_float+0x188>
 80096d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096d4:	4639      	mov	r1, r7
 80096d6:	4640      	mov	r0, r8
 80096d8:	4798      	blx	r3
 80096da:	2800      	cmp	r0, #0
 80096dc:	f43f aedf 	beq.w	800949e <_scanf_float+0x46>
 80096e0:	e6ea      	b.n	80094b8 <_scanf_float+0x60>
 80096e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096ea:	463a      	mov	r2, r7
 80096ec:	4640      	mov	r0, r8
 80096ee:	4798      	blx	r3
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	6123      	str	r3, [r4, #16]
 80096f6:	e6ec      	b.n	80094d2 <_scanf_float+0x7a>
 80096f8:	1e6b      	subs	r3, r5, #1
 80096fa:	2b06      	cmp	r3, #6
 80096fc:	d825      	bhi.n	800974a <_scanf_float+0x2f2>
 80096fe:	2d02      	cmp	r5, #2
 8009700:	d836      	bhi.n	8009770 <_scanf_float+0x318>
 8009702:	455e      	cmp	r6, fp
 8009704:	f67f aee8 	bls.w	80094d8 <_scanf_float+0x80>
 8009708:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800970c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009710:	463a      	mov	r2, r7
 8009712:	4640      	mov	r0, r8
 8009714:	4798      	blx	r3
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	3b01      	subs	r3, #1
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	e7f1      	b.n	8009702 <_scanf_float+0x2aa>
 800971e:	9802      	ldr	r0, [sp, #8]
 8009720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009724:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009728:	9002      	str	r0, [sp, #8]
 800972a:	463a      	mov	r2, r7
 800972c:	4640      	mov	r0, r8
 800972e:	4798      	blx	r3
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	3b01      	subs	r3, #1
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800973a:	fa5f fa8a 	uxtb.w	sl, sl
 800973e:	f1ba 0f02 	cmp.w	sl, #2
 8009742:	d1ec      	bne.n	800971e <_scanf_float+0x2c6>
 8009744:	3d03      	subs	r5, #3
 8009746:	b2ed      	uxtb	r5, r5
 8009748:	1b76      	subs	r6, r6, r5
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	05da      	lsls	r2, r3, #23
 800974e:	d52f      	bpl.n	80097b0 <_scanf_float+0x358>
 8009750:	055b      	lsls	r3, r3, #21
 8009752:	d510      	bpl.n	8009776 <_scanf_float+0x31e>
 8009754:	455e      	cmp	r6, fp
 8009756:	f67f aebf 	bls.w	80094d8 <_scanf_float+0x80>
 800975a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800975e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009762:	463a      	mov	r2, r7
 8009764:	4640      	mov	r0, r8
 8009766:	4798      	blx	r3
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	3b01      	subs	r3, #1
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	e7f1      	b.n	8009754 <_scanf_float+0x2fc>
 8009770:	46aa      	mov	sl, r5
 8009772:	9602      	str	r6, [sp, #8]
 8009774:	e7df      	b.n	8009736 <_scanf_float+0x2de>
 8009776:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	2965      	cmp	r1, #101	; 0x65
 800977e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009782:	f106 35ff 	add.w	r5, r6, #4294967295
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	d00c      	beq.n	80097a4 <_scanf_float+0x34c>
 800978a:	2945      	cmp	r1, #69	; 0x45
 800978c:	d00a      	beq.n	80097a4 <_scanf_float+0x34c>
 800978e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009792:	463a      	mov	r2, r7
 8009794:	4640      	mov	r0, r8
 8009796:	4798      	blx	r3
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800979e:	3b01      	subs	r3, #1
 80097a0:	1eb5      	subs	r5, r6, #2
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a8:	463a      	mov	r2, r7
 80097aa:	4640      	mov	r0, r8
 80097ac:	4798      	blx	r3
 80097ae:	462e      	mov	r6, r5
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	f015 0510 	ands.w	r5, r5, #16
 80097b6:	d158      	bne.n	800986a <_scanf_float+0x412>
 80097b8:	7035      	strb	r5, [r6, #0]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c4:	d11c      	bne.n	8009800 <_scanf_float+0x3a8>
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	454b      	cmp	r3, r9
 80097ca:	eba3 0209 	sub.w	r2, r3, r9
 80097ce:	d124      	bne.n	800981a <_scanf_float+0x3c2>
 80097d0:	2200      	movs	r2, #0
 80097d2:	4659      	mov	r1, fp
 80097d4:	4640      	mov	r0, r8
 80097d6:	f001 f87f 	bl	800a8d8 <_strtod_r>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	6821      	ldr	r1, [r4, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f011 0f02 	tst.w	r1, #2
 80097e4:	ec57 6b10 	vmov	r6, r7, d0
 80097e8:	f103 0204 	add.w	r2, r3, #4
 80097ec:	d020      	beq.n	8009830 <_scanf_float+0x3d8>
 80097ee:	9903      	ldr	r1, [sp, #12]
 80097f0:	600a      	str	r2, [r1, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	e9c3 6700 	strd	r6, r7, [r3]
 80097f8:	68e3      	ldr	r3, [r4, #12]
 80097fa:	3301      	adds	r3, #1
 80097fc:	60e3      	str	r3, [r4, #12]
 80097fe:	e66c      	b.n	80094da <_scanf_float+0x82>
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0e4      	beq.n	80097d0 <_scanf_float+0x378>
 8009806:	9905      	ldr	r1, [sp, #20]
 8009808:	230a      	movs	r3, #10
 800980a:	462a      	mov	r2, r5
 800980c:	3101      	adds	r1, #1
 800980e:	4640      	mov	r0, r8
 8009810:	f001 f8ea 	bl	800a9e8 <_strtol_r>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	9e05      	ldr	r6, [sp, #20]
 8009818:	1ac2      	subs	r2, r0, r3
 800981a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800981e:	429e      	cmp	r6, r3
 8009820:	bf28      	it	cs
 8009822:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009826:	4912      	ldr	r1, [pc, #72]	; (8009870 <_scanf_float+0x418>)
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f8e7 	bl	80099fc <siprintf>
 800982e:	e7cf      	b.n	80097d0 <_scanf_float+0x378>
 8009830:	f011 0f04 	tst.w	r1, #4
 8009834:	9903      	ldr	r1, [sp, #12]
 8009836:	600a      	str	r2, [r1, #0]
 8009838:	d1db      	bne.n	80097f2 <_scanf_float+0x39a>
 800983a:	f8d3 8000 	ldr.w	r8, [r3]
 800983e:	ee10 2a10 	vmov	r2, s0
 8009842:	ee10 0a10 	vmov	r0, s0
 8009846:	463b      	mov	r3, r7
 8009848:	4639      	mov	r1, r7
 800984a:	f7f7 f967 	bl	8000b1c <__aeabi_dcmpun>
 800984e:	b128      	cbz	r0, 800985c <_scanf_float+0x404>
 8009850:	4808      	ldr	r0, [pc, #32]	; (8009874 <_scanf_float+0x41c>)
 8009852:	f000 f9c3 	bl	8009bdc <nanf>
 8009856:	ed88 0a00 	vstr	s0, [r8]
 800985a:	e7cd      	b.n	80097f8 <_scanf_float+0x3a0>
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f992 	bl	8000b88 <__aeabi_d2f>
 8009864:	f8c8 0000 	str.w	r0, [r8]
 8009868:	e7c6      	b.n	80097f8 <_scanf_float+0x3a0>
 800986a:	2500      	movs	r5, #0
 800986c:	e635      	b.n	80094da <_scanf_float+0x82>
 800986e:	bf00      	nop
 8009870:	0800cddf 	.word	0x0800cddf
 8009874:	0800ce1f 	.word	0x0800ce1f

08009878 <std>:
 8009878:	2300      	movs	r3, #0
 800987a:	b510      	push	{r4, lr}
 800987c:	4604      	mov	r4, r0
 800987e:	e9c0 3300 	strd	r3, r3, [r0]
 8009882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009886:	6083      	str	r3, [r0, #8]
 8009888:	8181      	strh	r1, [r0, #12]
 800988a:	6643      	str	r3, [r0, #100]	; 0x64
 800988c:	81c2      	strh	r2, [r0, #14]
 800988e:	6183      	str	r3, [r0, #24]
 8009890:	4619      	mov	r1, r3
 8009892:	2208      	movs	r2, #8
 8009894:	305c      	adds	r0, #92	; 0x5c
 8009896:	f000 f914 	bl	8009ac2 <memset>
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <std+0x58>)
 800989c:	6263      	str	r3, [r4, #36]	; 0x24
 800989e:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <std+0x5c>)
 80098a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098a2:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <std+0x60>)
 80098a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098a6:	4b0d      	ldr	r3, [pc, #52]	; (80098dc <std+0x64>)
 80098a8:	6323      	str	r3, [r4, #48]	; 0x30
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <std+0x68>)
 80098ac:	6224      	str	r4, [r4, #32]
 80098ae:	429c      	cmp	r4, r3
 80098b0:	d006      	beq.n	80098c0 <std+0x48>
 80098b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80098b6:	4294      	cmp	r4, r2
 80098b8:	d002      	beq.n	80098c0 <std+0x48>
 80098ba:	33d0      	adds	r3, #208	; 0xd0
 80098bc:	429c      	cmp	r4, r3
 80098be:	d105      	bne.n	80098cc <std+0x54>
 80098c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c8:	f000 b984 	b.w	8009bd4 <__retarget_lock_init_recursive>
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	08009a3d 	.word	0x08009a3d
 80098d4:	08009a5f 	.word	0x08009a5f
 80098d8:	08009a97 	.word	0x08009a97
 80098dc:	08009abb 	.word	0x08009abb
 80098e0:	200008e4 	.word	0x200008e4

080098e4 <stdio_exit_handler>:
 80098e4:	4a02      	ldr	r2, [pc, #8]	; (80098f0 <stdio_exit_handler+0xc>)
 80098e6:	4903      	ldr	r1, [pc, #12]	; (80098f4 <stdio_exit_handler+0x10>)
 80098e8:	4803      	ldr	r0, [pc, #12]	; (80098f8 <stdio_exit_handler+0x14>)
 80098ea:	f000 b869 	b.w	80099c0 <_fwalk_sglue>
 80098ee:	bf00      	nop
 80098f0:	20000024 	.word	0x20000024
 80098f4:	0800b0c9 	.word	0x0800b0c9
 80098f8:	20000030 	.word	0x20000030

080098fc <cleanup_stdio>:
 80098fc:	6841      	ldr	r1, [r0, #4]
 80098fe:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <cleanup_stdio+0x34>)
 8009900:	4299      	cmp	r1, r3
 8009902:	b510      	push	{r4, lr}
 8009904:	4604      	mov	r4, r0
 8009906:	d001      	beq.n	800990c <cleanup_stdio+0x10>
 8009908:	f001 fbde 	bl	800b0c8 <_fflush_r>
 800990c:	68a1      	ldr	r1, [r4, #8]
 800990e:	4b09      	ldr	r3, [pc, #36]	; (8009934 <cleanup_stdio+0x38>)
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <cleanup_stdio+0x1e>
 8009914:	4620      	mov	r0, r4
 8009916:	f001 fbd7 	bl	800b0c8 <_fflush_r>
 800991a:	68e1      	ldr	r1, [r4, #12]
 800991c:	4b06      	ldr	r3, [pc, #24]	; (8009938 <cleanup_stdio+0x3c>)
 800991e:	4299      	cmp	r1, r3
 8009920:	d004      	beq.n	800992c <cleanup_stdio+0x30>
 8009922:	4620      	mov	r0, r4
 8009924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009928:	f001 bbce 	b.w	800b0c8 <_fflush_r>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	bf00      	nop
 8009930:	200008e4 	.word	0x200008e4
 8009934:	2000094c 	.word	0x2000094c
 8009938:	200009b4 	.word	0x200009b4

0800993c <global_stdio_init.part.0>:
 800993c:	b510      	push	{r4, lr}
 800993e:	4b0b      	ldr	r3, [pc, #44]	; (800996c <global_stdio_init.part.0+0x30>)
 8009940:	4c0b      	ldr	r4, [pc, #44]	; (8009970 <global_stdio_init.part.0+0x34>)
 8009942:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <global_stdio_init.part.0+0x38>)
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	4620      	mov	r0, r4
 8009948:	2200      	movs	r2, #0
 800994a:	2104      	movs	r1, #4
 800994c:	f7ff ff94 	bl	8009878 <std>
 8009950:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009954:	2201      	movs	r2, #1
 8009956:	2109      	movs	r1, #9
 8009958:	f7ff ff8e 	bl	8009878 <std>
 800995c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009960:	2202      	movs	r2, #2
 8009962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009966:	2112      	movs	r1, #18
 8009968:	f7ff bf86 	b.w	8009878 <std>
 800996c:	20000a1c 	.word	0x20000a1c
 8009970:	200008e4 	.word	0x200008e4
 8009974:	080098e5 	.word	0x080098e5

08009978 <__sfp_lock_acquire>:
 8009978:	4801      	ldr	r0, [pc, #4]	; (8009980 <__sfp_lock_acquire+0x8>)
 800997a:	f000 b92c 	b.w	8009bd6 <__retarget_lock_acquire_recursive>
 800997e:	bf00      	nop
 8009980:	20000a25 	.word	0x20000a25

08009984 <__sfp_lock_release>:
 8009984:	4801      	ldr	r0, [pc, #4]	; (800998c <__sfp_lock_release+0x8>)
 8009986:	f000 b927 	b.w	8009bd8 <__retarget_lock_release_recursive>
 800998a:	bf00      	nop
 800998c:	20000a25 	.word	0x20000a25

08009990 <__sinit>:
 8009990:	b510      	push	{r4, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	f7ff fff0 	bl	8009978 <__sfp_lock_acquire>
 8009998:	6a23      	ldr	r3, [r4, #32]
 800999a:	b11b      	cbz	r3, 80099a4 <__sinit+0x14>
 800999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a0:	f7ff bff0 	b.w	8009984 <__sfp_lock_release>
 80099a4:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <__sinit+0x28>)
 80099a6:	6223      	str	r3, [r4, #32]
 80099a8:	4b04      	ldr	r3, [pc, #16]	; (80099bc <__sinit+0x2c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f5      	bne.n	800999c <__sinit+0xc>
 80099b0:	f7ff ffc4 	bl	800993c <global_stdio_init.part.0>
 80099b4:	e7f2      	b.n	800999c <__sinit+0xc>
 80099b6:	bf00      	nop
 80099b8:	080098fd 	.word	0x080098fd
 80099bc:	20000a1c 	.word	0x20000a1c

080099c0 <_fwalk_sglue>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4607      	mov	r7, r0
 80099c6:	4688      	mov	r8, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	2600      	movs	r6, #0
 80099cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099d0:	f1b9 0901 	subs.w	r9, r9, #1
 80099d4:	d505      	bpl.n	80099e2 <_fwalk_sglue+0x22>
 80099d6:	6824      	ldr	r4, [r4, #0]
 80099d8:	2c00      	cmp	r4, #0
 80099da:	d1f7      	bne.n	80099cc <_fwalk_sglue+0xc>
 80099dc:	4630      	mov	r0, r6
 80099de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d907      	bls.n	80099f8 <_fwalk_sglue+0x38>
 80099e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ec:	3301      	adds	r3, #1
 80099ee:	d003      	beq.n	80099f8 <_fwalk_sglue+0x38>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4638      	mov	r0, r7
 80099f4:	47c0      	blx	r8
 80099f6:	4306      	orrs	r6, r0
 80099f8:	3568      	adds	r5, #104	; 0x68
 80099fa:	e7e9      	b.n	80099d0 <_fwalk_sglue+0x10>

080099fc <siprintf>:
 80099fc:	b40e      	push	{r1, r2, r3}
 80099fe:	b500      	push	{lr}
 8009a00:	b09c      	sub	sp, #112	; 0x70
 8009a02:	ab1d      	add	r3, sp, #116	; 0x74
 8009a04:	9002      	str	r0, [sp, #8]
 8009a06:	9006      	str	r0, [sp, #24]
 8009a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <siprintf+0x38>)
 8009a0e:	9107      	str	r1, [sp, #28]
 8009a10:	9104      	str	r1, [sp, #16]
 8009a12:	4909      	ldr	r1, [pc, #36]	; (8009a38 <siprintf+0x3c>)
 8009a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a18:	9105      	str	r1, [sp, #20]
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	a902      	add	r1, sp, #8
 8009a20:	f001 f83e 	bl	800aaa0 <_svfiprintf_r>
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	b01c      	add	sp, #112	; 0x70
 8009a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a30:	b003      	add	sp, #12
 8009a32:	4770      	bx	lr
 8009a34:	2000007c 	.word	0x2000007c
 8009a38:	ffff0208 	.word	0xffff0208

08009a3c <__sread>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	460c      	mov	r4, r1
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	f000 f868 	bl	8009b18 <_read_r>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	bfab      	itete	ge
 8009a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a50:	181b      	addge	r3, r3, r0
 8009a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a56:	bfac      	ite	ge
 8009a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a5a:	81a3      	strhlt	r3, [r4, #12]
 8009a5c:	bd10      	pop	{r4, pc}

08009a5e <__swrite>:
 8009a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	461f      	mov	r7, r3
 8009a64:	898b      	ldrh	r3, [r1, #12]
 8009a66:	05db      	lsls	r3, r3, #23
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	d505      	bpl.n	8009a7c <__swrite+0x1e>
 8009a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a74:	2302      	movs	r3, #2
 8009a76:	2200      	movs	r2, #0
 8009a78:	f000 f83c 	bl	8009af4 <_lseek_r>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	4632      	mov	r2, r6
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	f000 b863 	b.w	8009b5c <_write_r>

08009a96 <__sseek>:
 8009a96:	b510      	push	{r4, lr}
 8009a98:	460c      	mov	r4, r1
 8009a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9e:	f000 f829 	bl	8009af4 <_lseek_r>
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	bf15      	itete	ne
 8009aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ab2:	81a3      	strheq	r3, [r4, #12]
 8009ab4:	bf18      	it	ne
 8009ab6:	81a3      	strhne	r3, [r4, #12]
 8009ab8:	bd10      	pop	{r4, pc}

08009aba <__sclose>:
 8009aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abe:	f000 b809 	b.w	8009ad4 <_close_r>

08009ac2 <memset>:
 8009ac2:	4402      	add	r2, r0
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d100      	bne.n	8009acc <memset+0xa>
 8009aca:	4770      	bx	lr
 8009acc:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad0:	e7f9      	b.n	8009ac6 <memset+0x4>
	...

08009ad4 <_close_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d06      	ldr	r5, [pc, #24]	; (8009af0 <_close_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f8 fe37 	bl	8002752 <_close>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_close_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_close_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	20000a20 	.word	0x20000a20

08009af4 <_lseek_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_lseek_r+0x20>)
 8009af8:	4604      	mov	r4, r0
 8009afa:	4608      	mov	r0, r1
 8009afc:	4611      	mov	r1, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	602a      	str	r2, [r5, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f7f8 fe4c 	bl	80027a0 <_lseek>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_lseek_r+0x1e>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_lseek_r+0x1e>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	20000a20 	.word	0x20000a20

08009b18 <_read_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_read_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f8 fdda 	bl	80026e0 <_read>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_read_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_read_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	20000a20 	.word	0x20000a20

08009b3c <_sbrk_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d06      	ldr	r5, [pc, #24]	; (8009b58 <_sbrk_r+0x1c>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7f8 fe38 	bl	80027bc <_sbrk>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_sbrk_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_sbrk_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	20000a20 	.word	0x20000a20

08009b5c <_write_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4d07      	ldr	r5, [pc, #28]	; (8009b7c <_write_r+0x20>)
 8009b60:	4604      	mov	r4, r0
 8009b62:	4608      	mov	r0, r1
 8009b64:	4611      	mov	r1, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	602a      	str	r2, [r5, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f7f8 fdd5 	bl	800271a <_write>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_write_r+0x1e>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_write_r+0x1e>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20000a20 	.word	0x20000a20

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2000007c 	.word	0x2000007c

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4d0d      	ldr	r5, [pc, #52]	; (8009bc4 <__libc_init_array+0x38>)
 8009b90:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b92:	1b64      	subs	r4, r4, r5
 8009b94:	10a4      	asrs	r4, r4, #2
 8009b96:	2600      	movs	r6, #0
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	4d0b      	ldr	r5, [pc, #44]	; (8009bcc <__libc_init_array+0x40>)
 8009b9e:	4c0c      	ldr	r4, [pc, #48]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba0:	f002 fe26 	bl	800c7f0 <_init>
 8009ba4:	1b64      	subs	r4, r4, r5
 8009ba6:	10a4      	asrs	r4, r4, #2
 8009ba8:	2600      	movs	r6, #0
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb4:	4798      	blx	r3
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbe:	4798      	blx	r3
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800d18c 	.word	0x0800d18c
 8009bc8:	0800d18c 	.word	0x0800d18c
 8009bcc:	0800d18c 	.word	0x0800d18c
 8009bd0:	0800d190 	.word	0x0800d190

08009bd4 <__retarget_lock_init_recursive>:
 8009bd4:	4770      	bx	lr

08009bd6 <__retarget_lock_acquire_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <__retarget_lock_release_recursive>:
 8009bd8:	4770      	bx	lr
	...

08009bdc <nanf>:
 8009bdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009be4 <nanf+0x8>
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	7fc00000 	.word	0x7fc00000

08009be8 <__assert_func>:
 8009be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bea:	4614      	mov	r4, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <__assert_func+0x2c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	68d8      	ldr	r0, [r3, #12]
 8009bf6:	b14c      	cbz	r4, 8009c0c <__assert_func+0x24>
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <__assert_func+0x30>)
 8009bfa:	9100      	str	r1, [sp, #0]
 8009bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c00:	4906      	ldr	r1, [pc, #24]	; (8009c1c <__assert_func+0x34>)
 8009c02:	462b      	mov	r3, r5
 8009c04:	f001 fa88 	bl	800b118 <fiprintf>
 8009c08:	f001 fada 	bl	800b1c0 <abort>
 8009c0c:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <__assert_func+0x38>)
 8009c0e:	461c      	mov	r4, r3
 8009c10:	e7f3      	b.n	8009bfa <__assert_func+0x12>
 8009c12:	bf00      	nop
 8009c14:	2000007c 	.word	0x2000007c
 8009c18:	0800cde4 	.word	0x0800cde4
 8009c1c:	0800cdf1 	.word	0x0800cdf1
 8009c20:	0800ce1f 	.word	0x0800ce1f

08009c24 <_free_r>:
 8009c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d044      	beq.n	8009cb4 <_free_r+0x90>
 8009c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f1a1 0404 	sub.w	r4, r1, #4
 8009c36:	bfb8      	it	lt
 8009c38:	18e4      	addlt	r4, r4, r3
 8009c3a:	f7ff fbc3 	bl	80093c4 <__malloc_lock>
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <_free_r+0x94>)
 8009c40:	9801      	ldr	r0, [sp, #4]
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x30>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c50:	f7ff bbbe 	b.w	80093d0 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x46>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x22>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x50>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x46>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1855      	adds	r5, r2, r1
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x70>
 8009c7c:	6824      	ldr	r4, [r4, #0]
 8009c7e:	4421      	add	r1, r4
 8009c80:	1854      	adds	r4, r2, r1
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x26>
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	440c      	add	r4, r1
 8009c90:	6014      	str	r4, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x26>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x78>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x26>
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1961      	adds	r1, r4, r5
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1949      	addeq	r1, r1, r5
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x26>
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bd30      	pop	{r4, r5, pc}
 8009cb8:	200008dc 	.word	0x200008dc

08009cbc <sulp>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	ec45 4b10 	vmov	d0, r4, r5
 8009cc6:	4616      	mov	r6, r2
 8009cc8:	f002 f956 	bl	800bf78 <__ulp>
 8009ccc:	ec51 0b10 	vmov	r0, r1, d0
 8009cd0:	b17e      	cbz	r6, 8009cf2 <sulp+0x36>
 8009cd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd09      	ble.n	8009cf2 <sulp+0x36>
 8009cde:	051b      	lsls	r3, r3, #20
 8009ce0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009ce4:	2400      	movs	r4, #0
 8009ce6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cea:	4622      	mov	r2, r4
 8009cec:	462b      	mov	r3, r5
 8009cee:	f7f6 fc7b 	bl	80005e8 <__aeabi_dmul>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	0000      	movs	r0, r0
	...

08009cf8 <_strtod_l>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	ed2d 8b02 	vpush	{d8}
 8009d00:	b09b      	sub	sp, #108	; 0x6c
 8009d02:	4604      	mov	r4, r0
 8009d04:	9213      	str	r2, [sp, #76]	; 0x4c
 8009d06:	2200      	movs	r2, #0
 8009d08:	9216      	str	r2, [sp, #88]	; 0x58
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	f04f 0800 	mov.w	r8, #0
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	460a      	mov	r2, r1
 8009d16:	9215      	str	r2, [sp, #84]	; 0x54
 8009d18:	7811      	ldrb	r1, [r2, #0]
 8009d1a:	292b      	cmp	r1, #43	; 0x2b
 8009d1c:	d04c      	beq.n	8009db8 <_strtod_l+0xc0>
 8009d1e:	d83a      	bhi.n	8009d96 <_strtod_l+0x9e>
 8009d20:	290d      	cmp	r1, #13
 8009d22:	d834      	bhi.n	8009d8e <_strtod_l+0x96>
 8009d24:	2908      	cmp	r1, #8
 8009d26:	d834      	bhi.n	8009d92 <_strtod_l+0x9a>
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d03d      	beq.n	8009da8 <_strtod_l+0xb0>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8009d30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009d32:	7832      	ldrb	r2, [r6, #0]
 8009d34:	2a30      	cmp	r2, #48	; 0x30
 8009d36:	f040 80b4 	bne.w	8009ea2 <_strtod_l+0x1aa>
 8009d3a:	7872      	ldrb	r2, [r6, #1]
 8009d3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009d40:	2a58      	cmp	r2, #88	; 0x58
 8009d42:	d170      	bne.n	8009e26 <_strtod_l+0x12e>
 8009d44:	9302      	str	r3, [sp, #8]
 8009d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	ab16      	add	r3, sp, #88	; 0x58
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	4a8e      	ldr	r2, [pc, #568]	; (8009f88 <_strtod_l+0x290>)
 8009d50:	ab17      	add	r3, sp, #92	; 0x5c
 8009d52:	a915      	add	r1, sp, #84	; 0x54
 8009d54:	4620      	mov	r0, r4
 8009d56:	f001 faa1 	bl	800b29c <__gethex>
 8009d5a:	f010 070f 	ands.w	r7, r0, #15
 8009d5e:	4605      	mov	r5, r0
 8009d60:	d005      	beq.n	8009d6e <_strtod_l+0x76>
 8009d62:	2f06      	cmp	r7, #6
 8009d64:	d12a      	bne.n	8009dbc <_strtod_l+0xc4>
 8009d66:	3601      	adds	r6, #1
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9615      	str	r6, [sp, #84]	; 0x54
 8009d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f040 857f 	bne.w	800a874 <_strtod_l+0xb7c>
 8009d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d78:	b1db      	cbz	r3, 8009db2 <_strtod_l+0xba>
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d80:	ec43 2b10 	vmov	d0, r2, r3
 8009d84:	b01b      	add	sp, #108	; 0x6c
 8009d86:	ecbd 8b02 	vpop	{d8}
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	2920      	cmp	r1, #32
 8009d90:	d1cc      	bne.n	8009d2c <_strtod_l+0x34>
 8009d92:	3201      	adds	r2, #1
 8009d94:	e7bf      	b.n	8009d16 <_strtod_l+0x1e>
 8009d96:	292d      	cmp	r1, #45	; 0x2d
 8009d98:	d1c8      	bne.n	8009d2c <_strtod_l+0x34>
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	910a      	str	r1, [sp, #40]	; 0x28
 8009d9e:	1c51      	adds	r1, r2, #1
 8009da0:	9115      	str	r1, [sp, #84]	; 0x54
 8009da2:	7852      	ldrb	r2, [r2, #1]
 8009da4:	2a00      	cmp	r2, #0
 8009da6:	d1c3      	bne.n	8009d30 <_strtod_l+0x38>
 8009da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009daa:	9515      	str	r5, [sp, #84]	; 0x54
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f040 855f 	bne.w	800a870 <_strtod_l+0xb78>
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	e7e3      	b.n	8009d80 <_strtod_l+0x88>
 8009db8:	2100      	movs	r1, #0
 8009dba:	e7ef      	b.n	8009d9c <_strtod_l+0xa4>
 8009dbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dbe:	b13a      	cbz	r2, 8009dd0 <_strtod_l+0xd8>
 8009dc0:	2135      	movs	r1, #53	; 0x35
 8009dc2:	a818      	add	r0, sp, #96	; 0x60
 8009dc4:	f002 f9d5 	bl	800c172 <__copybits>
 8009dc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f001 fda8 	bl	800b920 <_Bfree>
 8009dd0:	3f01      	subs	r7, #1
 8009dd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009dd4:	2f04      	cmp	r7, #4
 8009dd6:	d806      	bhi.n	8009de6 <_strtod_l+0xee>
 8009dd8:	e8df f007 	tbb	[pc, r7]
 8009ddc:	201d0314 	.word	0x201d0314
 8009de0:	14          	.byte	0x14
 8009de1:	00          	.byte	0x00
 8009de2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009de6:	05e9      	lsls	r1, r5, #23
 8009de8:	bf48      	it	mi
 8009dea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009dee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	051b      	lsls	r3, r3, #20
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1b9      	bne.n	8009d6e <_strtod_l+0x76>
 8009dfa:	f7ff fec1 	bl	8009b80 <__errno>
 8009dfe:	2322      	movs	r3, #34	; 0x22
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	e7b4      	b.n	8009d6e <_strtod_l+0x76>
 8009e04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009e08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009e14:	e7e7      	b.n	8009de6 <_strtod_l+0xee>
 8009e16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f90 <_strtod_l+0x298>
 8009e1a:	e7e4      	b.n	8009de6 <_strtod_l+0xee>
 8009e1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009e20:	f04f 38ff 	mov.w	r8, #4294967295
 8009e24:	e7df      	b.n	8009de6 <_strtod_l+0xee>
 8009e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	9215      	str	r2, [sp, #84]	; 0x54
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	d0f9      	beq.n	8009e26 <_strtod_l+0x12e>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d09b      	beq.n	8009d6e <_strtod_l+0x76>
 8009e36:	2301      	movs	r3, #1
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009e46:	46d3      	mov	fp, sl
 8009e48:	220a      	movs	r2, #10
 8009e4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009e4c:	7806      	ldrb	r6, [r0, #0]
 8009e4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e52:	b2d9      	uxtb	r1, r3
 8009e54:	2909      	cmp	r1, #9
 8009e56:	d926      	bls.n	8009ea6 <_strtod_l+0x1ae>
 8009e58:	494c      	ldr	r1, [pc, #304]	; (8009f8c <_strtod_l+0x294>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f001 f988 	bl	800b170 <strncmp>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d030      	beq.n	8009ec6 <_strtod_l+0x1ce>
 8009e64:	2000      	movs	r0, #0
 8009e66:	4632      	mov	r2, r6
 8009e68:	9005      	str	r0, [sp, #20]
 8009e6a:	465e      	mov	r6, fp
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2a65      	cmp	r2, #101	; 0x65
 8009e70:	d001      	beq.n	8009e76 <_strtod_l+0x17e>
 8009e72:	2a45      	cmp	r2, #69	; 0x45
 8009e74:	d113      	bne.n	8009e9e <_strtod_l+0x1a6>
 8009e76:	b91e      	cbnz	r6, 8009e80 <_strtod_l+0x188>
 8009e78:	9a04      	ldr	r2, [sp, #16]
 8009e7a:	4302      	orrs	r2, r0
 8009e7c:	d094      	beq.n	8009da8 <_strtod_l+0xb0>
 8009e7e:	2600      	movs	r6, #0
 8009e80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009e82:	1c6a      	adds	r2, r5, #1
 8009e84:	9215      	str	r2, [sp, #84]	; 0x54
 8009e86:	786a      	ldrb	r2, [r5, #1]
 8009e88:	2a2b      	cmp	r2, #43	; 0x2b
 8009e8a:	d074      	beq.n	8009f76 <_strtod_l+0x27e>
 8009e8c:	2a2d      	cmp	r2, #45	; 0x2d
 8009e8e:	d078      	beq.n	8009f82 <_strtod_l+0x28a>
 8009e90:	f04f 0c00 	mov.w	ip, #0
 8009e94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e98:	2909      	cmp	r1, #9
 8009e9a:	d97f      	bls.n	8009f9c <_strtod_l+0x2a4>
 8009e9c:	9515      	str	r5, [sp, #84]	; 0x54
 8009e9e:	2700      	movs	r7, #0
 8009ea0:	e09e      	b.n	8009fe0 <_strtod_l+0x2e8>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e7c8      	b.n	8009e38 <_strtod_l+0x140>
 8009ea6:	f1bb 0f08 	cmp.w	fp, #8
 8009eaa:	bfd8      	it	le
 8009eac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009eae:	f100 0001 	add.w	r0, r0, #1
 8009eb2:	bfda      	itte	le
 8009eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009eb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8009eba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009ebe:	f10b 0b01 	add.w	fp, fp, #1
 8009ec2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ec4:	e7c1      	b.n	8009e4a <_strtod_l+0x152>
 8009ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	9215      	str	r2, [sp, #84]	; 0x54
 8009ecc:	785a      	ldrb	r2, [r3, #1]
 8009ece:	f1bb 0f00 	cmp.w	fp, #0
 8009ed2:	d037      	beq.n	8009f44 <_strtod_l+0x24c>
 8009ed4:	9005      	str	r0, [sp, #20]
 8009ed6:	465e      	mov	r6, fp
 8009ed8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009edc:	2b09      	cmp	r3, #9
 8009ede:	d912      	bls.n	8009f06 <_strtod_l+0x20e>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e7c4      	b.n	8009e6e <_strtod_l+0x176>
 8009ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	9215      	str	r2, [sp, #84]	; 0x54
 8009eea:	785a      	ldrb	r2, [r3, #1]
 8009eec:	3001      	adds	r0, #1
 8009eee:	2a30      	cmp	r2, #48	; 0x30
 8009ef0:	d0f8      	beq.n	8009ee4 <_strtod_l+0x1ec>
 8009ef2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	f200 84c1 	bhi.w	800a87e <_strtod_l+0xb86>
 8009efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009efe:	9005      	str	r0, [sp, #20]
 8009f00:	2000      	movs	r0, #0
 8009f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f04:	4606      	mov	r6, r0
 8009f06:	3a30      	subs	r2, #48	; 0x30
 8009f08:	f100 0301 	add.w	r3, r0, #1
 8009f0c:	d014      	beq.n	8009f38 <_strtod_l+0x240>
 8009f0e:	9905      	ldr	r1, [sp, #20]
 8009f10:	4419      	add	r1, r3
 8009f12:	9105      	str	r1, [sp, #20]
 8009f14:	4633      	mov	r3, r6
 8009f16:	eb00 0c06 	add.w	ip, r0, r6
 8009f1a:	210a      	movs	r1, #10
 8009f1c:	4563      	cmp	r3, ip
 8009f1e:	d113      	bne.n	8009f48 <_strtod_l+0x250>
 8009f20:	1833      	adds	r3, r6, r0
 8009f22:	2b08      	cmp	r3, #8
 8009f24:	f106 0601 	add.w	r6, r6, #1
 8009f28:	4406      	add	r6, r0
 8009f2a:	dc1a      	bgt.n	8009f62 <_strtod_l+0x26a>
 8009f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f2e:	230a      	movs	r3, #10
 8009f30:	fb03 2301 	mla	r3, r3, r1, r2
 8009f34:	9309      	str	r3, [sp, #36]	; 0x24
 8009f36:	2300      	movs	r3, #0
 8009f38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f3a:	1c51      	adds	r1, r2, #1
 8009f3c:	9115      	str	r1, [sp, #84]	; 0x54
 8009f3e:	7852      	ldrb	r2, [r2, #1]
 8009f40:	4618      	mov	r0, r3
 8009f42:	e7c9      	b.n	8009ed8 <_strtod_l+0x1e0>
 8009f44:	4658      	mov	r0, fp
 8009f46:	e7d2      	b.n	8009eee <_strtod_l+0x1f6>
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	f103 0301 	add.w	r3, r3, #1
 8009f4e:	dc03      	bgt.n	8009f58 <_strtod_l+0x260>
 8009f50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f52:	434f      	muls	r7, r1
 8009f54:	9709      	str	r7, [sp, #36]	; 0x24
 8009f56:	e7e1      	b.n	8009f1c <_strtod_l+0x224>
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	bfd8      	it	le
 8009f5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009f60:	e7dc      	b.n	8009f1c <_strtod_l+0x224>
 8009f62:	2e10      	cmp	r6, #16
 8009f64:	bfdc      	itt	le
 8009f66:	230a      	movle	r3, #10
 8009f68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009f6c:	e7e3      	b.n	8009f36 <_strtod_l+0x23e>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	2301      	movs	r3, #1
 8009f74:	e780      	b.n	8009e78 <_strtod_l+0x180>
 8009f76:	f04f 0c00 	mov.w	ip, #0
 8009f7a:	1caa      	adds	r2, r5, #2
 8009f7c:	9215      	str	r2, [sp, #84]	; 0x54
 8009f7e:	78aa      	ldrb	r2, [r5, #2]
 8009f80:	e788      	b.n	8009e94 <_strtod_l+0x19c>
 8009f82:	f04f 0c01 	mov.w	ip, #1
 8009f86:	e7f8      	b.n	8009f7a <_strtod_l+0x282>
 8009f88:	0800ce30 	.word	0x0800ce30
 8009f8c:	0800ce20 	.word	0x0800ce20
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f96:	1c51      	adds	r1, r2, #1
 8009f98:	9115      	str	r1, [sp, #84]	; 0x54
 8009f9a:	7852      	ldrb	r2, [r2, #1]
 8009f9c:	2a30      	cmp	r2, #48	; 0x30
 8009f9e:	d0f9      	beq.n	8009f94 <_strtod_l+0x29c>
 8009fa0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009fa4:	2908      	cmp	r1, #8
 8009fa6:	f63f af7a 	bhi.w	8009e9e <_strtod_l+0x1a6>
 8009faa:	3a30      	subs	r2, #48	; 0x30
 8009fac:	9208      	str	r2, [sp, #32]
 8009fae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fb0:	920c      	str	r2, [sp, #48]	; 0x30
 8009fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fb4:	1c57      	adds	r7, r2, #1
 8009fb6:	9715      	str	r7, [sp, #84]	; 0x54
 8009fb8:	7852      	ldrb	r2, [r2, #1]
 8009fba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009fbe:	f1be 0f09 	cmp.w	lr, #9
 8009fc2:	d938      	bls.n	800a036 <_strtod_l+0x33e>
 8009fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fc6:	1a7f      	subs	r7, r7, r1
 8009fc8:	2f08      	cmp	r7, #8
 8009fca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009fce:	dc03      	bgt.n	8009fd8 <_strtod_l+0x2e0>
 8009fd0:	9908      	ldr	r1, [sp, #32]
 8009fd2:	428f      	cmp	r7, r1
 8009fd4:	bfa8      	it	ge
 8009fd6:	460f      	movge	r7, r1
 8009fd8:	f1bc 0f00 	cmp.w	ip, #0
 8009fdc:	d000      	beq.n	8009fe0 <_strtod_l+0x2e8>
 8009fde:	427f      	negs	r7, r7
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	d14f      	bne.n	800a084 <_strtod_l+0x38c>
 8009fe4:	9904      	ldr	r1, [sp, #16]
 8009fe6:	4301      	orrs	r1, r0
 8009fe8:	f47f aec1 	bne.w	8009d6e <_strtod_l+0x76>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f47f aedb 	bne.w	8009da8 <_strtod_l+0xb0>
 8009ff2:	2a69      	cmp	r2, #105	; 0x69
 8009ff4:	d029      	beq.n	800a04a <_strtod_l+0x352>
 8009ff6:	dc26      	bgt.n	800a046 <_strtod_l+0x34e>
 8009ff8:	2a49      	cmp	r2, #73	; 0x49
 8009ffa:	d026      	beq.n	800a04a <_strtod_l+0x352>
 8009ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ffe:	f47f aed3 	bne.w	8009da8 <_strtod_l+0xb0>
 800a002:	499b      	ldr	r1, [pc, #620]	; (800a270 <_strtod_l+0x578>)
 800a004:	a815      	add	r0, sp, #84	; 0x54
 800a006:	f001 fb89 	bl	800b71c <__match>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f aecc 	beq.w	8009da8 <_strtod_l+0xb0>
 800a010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b28      	cmp	r3, #40	; 0x28
 800a016:	d12f      	bne.n	800a078 <_strtod_l+0x380>
 800a018:	4996      	ldr	r1, [pc, #600]	; (800a274 <_strtod_l+0x57c>)
 800a01a:	aa18      	add	r2, sp, #96	; 0x60
 800a01c:	a815      	add	r0, sp, #84	; 0x54
 800a01e:	f001 fb91 	bl	800b744 <__hexnan>
 800a022:	2805      	cmp	r0, #5
 800a024:	d128      	bne.n	800a078 <_strtod_l+0x380>
 800a026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a02c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a030:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a034:	e69b      	b.n	8009d6e <_strtod_l+0x76>
 800a036:	9f08      	ldr	r7, [sp, #32]
 800a038:	210a      	movs	r1, #10
 800a03a:	fb01 2107 	mla	r1, r1, r7, r2
 800a03e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a042:	9208      	str	r2, [sp, #32]
 800a044:	e7b5      	b.n	8009fb2 <_strtod_l+0x2ba>
 800a046:	2a6e      	cmp	r2, #110	; 0x6e
 800a048:	e7d9      	b.n	8009ffe <_strtod_l+0x306>
 800a04a:	498b      	ldr	r1, [pc, #556]	; (800a278 <_strtod_l+0x580>)
 800a04c:	a815      	add	r0, sp, #84	; 0x54
 800a04e:	f001 fb65 	bl	800b71c <__match>
 800a052:	2800      	cmp	r0, #0
 800a054:	f43f aea8 	beq.w	8009da8 <_strtod_l+0xb0>
 800a058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a05a:	4988      	ldr	r1, [pc, #544]	; (800a27c <_strtod_l+0x584>)
 800a05c:	3b01      	subs	r3, #1
 800a05e:	a815      	add	r0, sp, #84	; 0x54
 800a060:	9315      	str	r3, [sp, #84]	; 0x54
 800a062:	f001 fb5b 	bl	800b71c <__match>
 800a066:	b910      	cbnz	r0, 800a06e <_strtod_l+0x376>
 800a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a06a:	3301      	adds	r3, #1
 800a06c:	9315      	str	r3, [sp, #84]	; 0x54
 800a06e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a28c <_strtod_l+0x594>
 800a072:	f04f 0800 	mov.w	r8, #0
 800a076:	e67a      	b.n	8009d6e <_strtod_l+0x76>
 800a078:	4881      	ldr	r0, [pc, #516]	; (800a280 <_strtod_l+0x588>)
 800a07a:	f001 f899 	bl	800b1b0 <nan>
 800a07e:	ec59 8b10 	vmov	r8, r9, d0
 800a082:	e674      	b.n	8009d6e <_strtod_l+0x76>
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a088:	1afb      	subs	r3, r7, r3
 800a08a:	f1bb 0f00 	cmp.w	fp, #0
 800a08e:	bf08      	it	eq
 800a090:	46b3      	moveq	fp, r6
 800a092:	2e10      	cmp	r6, #16
 800a094:	9308      	str	r3, [sp, #32]
 800a096:	4635      	mov	r5, r6
 800a098:	bfa8      	it	ge
 800a09a:	2510      	movge	r5, #16
 800a09c:	f7f6 fa2a 	bl	80004f4 <__aeabi_ui2d>
 800a0a0:	2e09      	cmp	r6, #9
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	dd13      	ble.n	800a0d0 <_strtod_l+0x3d8>
 800a0a8:	4b76      	ldr	r3, [pc, #472]	; (800a284 <_strtod_l+0x58c>)
 800a0aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a0ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0b2:	f7f6 fa99 	bl	80005e8 <__aeabi_dmul>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	4689      	mov	r9, r1
 800a0bc:	f7f6 fa1a 	bl	80004f4 <__aeabi_ui2d>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	f7f6 f8d8 	bl	800027c <__adddf3>
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4689      	mov	r9, r1
 800a0d0:	2e0f      	cmp	r6, #15
 800a0d2:	dc38      	bgt.n	800a146 <_strtod_l+0x44e>
 800a0d4:	9b08      	ldr	r3, [sp, #32]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f43f ae49 	beq.w	8009d6e <_strtod_l+0x76>
 800a0dc:	dd24      	ble.n	800a128 <_strtod_l+0x430>
 800a0de:	2b16      	cmp	r3, #22
 800a0e0:	dc0b      	bgt.n	800a0fa <_strtod_l+0x402>
 800a0e2:	4968      	ldr	r1, [pc, #416]	; (800a284 <_strtod_l+0x58c>)
 800a0e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	f7f6 fa7a 	bl	80005e8 <__aeabi_dmul>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	e639      	b.n	8009d6e <_strtod_l+0x76>
 800a0fa:	9a08      	ldr	r2, [sp, #32]
 800a0fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a100:	4293      	cmp	r3, r2
 800a102:	db20      	blt.n	800a146 <_strtod_l+0x44e>
 800a104:	4c5f      	ldr	r4, [pc, #380]	; (800a284 <_strtod_l+0x58c>)
 800a106:	f1c6 060f 	rsb	r6, r6, #15
 800a10a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a10e:	4642      	mov	r2, r8
 800a110:	464b      	mov	r3, r9
 800a112:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a116:	f7f6 fa67 	bl	80005e8 <__aeabi_dmul>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	1b9e      	subs	r6, r3, r6
 800a11e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a122:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a126:	e7e3      	b.n	800a0f0 <_strtod_l+0x3f8>
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	3316      	adds	r3, #22
 800a12c:	db0b      	blt.n	800a146 <_strtod_l+0x44e>
 800a12e:	9b05      	ldr	r3, [sp, #20]
 800a130:	1bdf      	subs	r7, r3, r7
 800a132:	4b54      	ldr	r3, [pc, #336]	; (800a284 <_strtod_l+0x58c>)
 800a134:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 fb7c 	bl	800083c <__aeabi_ddiv>
 800a144:	e7d6      	b.n	800a0f4 <_strtod_l+0x3fc>
 800a146:	9b08      	ldr	r3, [sp, #32]
 800a148:	1b75      	subs	r5, r6, r5
 800a14a:	441d      	add	r5, r3
 800a14c:	2d00      	cmp	r5, #0
 800a14e:	dd70      	ble.n	800a232 <_strtod_l+0x53a>
 800a150:	f015 030f 	ands.w	r3, r5, #15
 800a154:	d00a      	beq.n	800a16c <_strtod_l+0x474>
 800a156:	494b      	ldr	r1, [pc, #300]	; (800a284 <_strtod_l+0x58c>)
 800a158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a15c:	4642      	mov	r2, r8
 800a15e:	464b      	mov	r3, r9
 800a160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a164:	f7f6 fa40 	bl	80005e8 <__aeabi_dmul>
 800a168:	4680      	mov	r8, r0
 800a16a:	4689      	mov	r9, r1
 800a16c:	f035 050f 	bics.w	r5, r5, #15
 800a170:	d04d      	beq.n	800a20e <_strtod_l+0x516>
 800a172:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a176:	dd22      	ble.n	800a1be <_strtod_l+0x4c6>
 800a178:	2500      	movs	r5, #0
 800a17a:	46ab      	mov	fp, r5
 800a17c:	9509      	str	r5, [sp, #36]	; 0x24
 800a17e:	9505      	str	r5, [sp, #20]
 800a180:	2322      	movs	r3, #34	; 0x22
 800a182:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a28c <_strtod_l+0x594>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	f04f 0800 	mov.w	r8, #0
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f43f aded 	beq.w	8009d6e <_strtod_l+0x76>
 800a194:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a196:	4620      	mov	r0, r4
 800a198:	f001 fbc2 	bl	800b920 <_Bfree>
 800a19c:	9905      	ldr	r1, [sp, #20]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f001 fbbe 	bl	800b920 <_Bfree>
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f001 fbba 	bl	800b920 <_Bfree>
 800a1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f001 fbb6 	bl	800b920 <_Bfree>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f001 fbb2 	bl	800b920 <_Bfree>
 800a1bc:	e5d7      	b.n	8009d6e <_strtod_l+0x76>
 800a1be:	4b32      	ldr	r3, [pc, #200]	; (800a288 <_strtod_l+0x590>)
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	112d      	asrs	r5, r5, #4
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	2d01      	cmp	r5, #1
 800a1ce:	dc21      	bgt.n	800a214 <_strtod_l+0x51c>
 800a1d0:	b10b      	cbz	r3, 800a1d6 <_strtod_l+0x4de>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	4689      	mov	r9, r1
 800a1d6:	492c      	ldr	r1, [pc, #176]	; (800a288 <_strtod_l+0x590>)
 800a1d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a1dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	464b      	mov	r3, r9
 800a1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e8:	f7f6 f9fe 	bl	80005e8 <__aeabi_dmul>
 800a1ec:	4b27      	ldr	r3, [pc, #156]	; (800a28c <_strtod_l+0x594>)
 800a1ee:	460a      	mov	r2, r1
 800a1f0:	400b      	ands	r3, r1
 800a1f2:	4927      	ldr	r1, [pc, #156]	; (800a290 <_strtod_l+0x598>)
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	d8be      	bhi.n	800a178 <_strtod_l+0x480>
 800a1fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1fe:	428b      	cmp	r3, r1
 800a200:	bf86      	itte	hi
 800a202:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a294 <_strtod_l+0x59c>
 800a206:	f04f 38ff 	movhi.w	r8, #4294967295
 800a20a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a20e:	2300      	movs	r3, #0
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	e07b      	b.n	800a30c <_strtod_l+0x614>
 800a214:	07ea      	lsls	r2, r5, #31
 800a216:	d505      	bpl.n	800a224 <_strtod_l+0x52c>
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f9e3 	bl	80005e8 <__aeabi_dmul>
 800a222:	2301      	movs	r3, #1
 800a224:	9a04      	ldr	r2, [sp, #16]
 800a226:	3208      	adds	r2, #8
 800a228:	f10a 0a01 	add.w	sl, sl, #1
 800a22c:	106d      	asrs	r5, r5, #1
 800a22e:	9204      	str	r2, [sp, #16]
 800a230:	e7cc      	b.n	800a1cc <_strtod_l+0x4d4>
 800a232:	d0ec      	beq.n	800a20e <_strtod_l+0x516>
 800a234:	426d      	negs	r5, r5
 800a236:	f015 020f 	ands.w	r2, r5, #15
 800a23a:	d00a      	beq.n	800a252 <_strtod_l+0x55a>
 800a23c:	4b11      	ldr	r3, [pc, #68]	; (800a284 <_strtod_l+0x58c>)
 800a23e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a242:	4640      	mov	r0, r8
 800a244:	4649      	mov	r1, r9
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 faf7 	bl	800083c <__aeabi_ddiv>
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	112d      	asrs	r5, r5, #4
 800a254:	d0db      	beq.n	800a20e <_strtod_l+0x516>
 800a256:	2d1f      	cmp	r5, #31
 800a258:	dd1e      	ble.n	800a298 <_strtod_l+0x5a0>
 800a25a:	2500      	movs	r5, #0
 800a25c:	46ab      	mov	fp, r5
 800a25e:	9509      	str	r5, [sp, #36]	; 0x24
 800a260:	9505      	str	r5, [sp, #20]
 800a262:	2322      	movs	r3, #34	; 0x22
 800a264:	f04f 0800 	mov.w	r8, #0
 800a268:	f04f 0900 	mov.w	r9, #0
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	e78d      	b.n	800a18c <_strtod_l+0x494>
 800a270:	0800ce2b 	.word	0x0800ce2b
 800a274:	0800ce44 	.word	0x0800ce44
 800a278:	0800ce22 	.word	0x0800ce22
 800a27c:	0800ce25 	.word	0x0800ce25
 800a280:	0800ce1f 	.word	0x0800ce1f
 800a284:	0800d0b0 	.word	0x0800d0b0
 800a288:	0800d088 	.word	0x0800d088
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	7ca00000 	.word	0x7ca00000
 800a294:	7fefffff 	.word	0x7fefffff
 800a298:	f015 0310 	ands.w	r3, r5, #16
 800a29c:	bf18      	it	ne
 800a29e:	236a      	movne	r3, #106	; 0x6a
 800a2a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a644 <_strtod_l+0x94c>
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	07ea      	lsls	r2, r5, #31
 800a2ae:	d504      	bpl.n	800a2ba <_strtod_l+0x5c2>
 800a2b0:	e9da 2300 	ldrd	r2, r3, [sl]
 800a2b4:	f7f6 f998 	bl	80005e8 <__aeabi_dmul>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	106d      	asrs	r5, r5, #1
 800a2bc:	f10a 0a08 	add.w	sl, sl, #8
 800a2c0:	d1f4      	bne.n	800a2ac <_strtod_l+0x5b4>
 800a2c2:	b10b      	cbz	r3, 800a2c8 <_strtod_l+0x5d0>
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4689      	mov	r9, r1
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	b1bb      	cbz	r3, 800a2fc <_strtod_l+0x604>
 800a2cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a2d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	dd10      	ble.n	800a2fc <_strtod_l+0x604>
 800a2da:	2b1f      	cmp	r3, #31
 800a2dc:	f340 811e 	ble.w	800a51c <_strtod_l+0x824>
 800a2e0:	2b34      	cmp	r3, #52	; 0x34
 800a2e2:	bfde      	ittt	le
 800a2e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a2e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a2ec:	4093      	lslle	r3, r2
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	bfcc      	ite	gt
 800a2f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a2f8:	ea03 0901 	andle.w	r9, r3, r1
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2300      	movs	r3, #0
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	f7f6 fbd8 	bl	8000ab8 <__aeabi_dcmpeq>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d1a6      	bne.n	800a25a <_strtod_l+0x562>
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a312:	4633      	mov	r3, r6
 800a314:	465a      	mov	r2, fp
 800a316:	4620      	mov	r0, r4
 800a318:	f001 fb6a 	bl	800b9f0 <__s2b>
 800a31c:	9009      	str	r0, [sp, #36]	; 0x24
 800a31e:	2800      	cmp	r0, #0
 800a320:	f43f af2a 	beq.w	800a178 <_strtod_l+0x480>
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	9b05      	ldr	r3, [sp, #20]
 800a328:	2a00      	cmp	r2, #0
 800a32a:	eba3 0307 	sub.w	r3, r3, r7
 800a32e:	bfa8      	it	ge
 800a330:	2300      	movge	r3, #0
 800a332:	930c      	str	r3, [sp, #48]	; 0x30
 800a334:	2500      	movs	r5, #0
 800a336:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a33a:	9312      	str	r3, [sp, #72]	; 0x48
 800a33c:	46ab      	mov	fp, r5
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	4620      	mov	r0, r4
 800a342:	6859      	ldr	r1, [r3, #4]
 800a344:	f001 faac 	bl	800b8a0 <_Balloc>
 800a348:	9005      	str	r0, [sp, #20]
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f af18 	beq.w	800a180 <_strtod_l+0x488>
 800a350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a352:	691a      	ldr	r2, [r3, #16]
 800a354:	3202      	adds	r2, #2
 800a356:	f103 010c 	add.w	r1, r3, #12
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	300c      	adds	r0, #12
 800a35e:	f000 ff19 	bl	800b194 <memcpy>
 800a362:	ec49 8b10 	vmov	d0, r8, r9
 800a366:	aa18      	add	r2, sp, #96	; 0x60
 800a368:	a917      	add	r1, sp, #92	; 0x5c
 800a36a:	4620      	mov	r0, r4
 800a36c:	f001 fe74 	bl	800c058 <__d2b>
 800a370:	ec49 8b18 	vmov	d8, r8, r9
 800a374:	9016      	str	r0, [sp, #88]	; 0x58
 800a376:	2800      	cmp	r0, #0
 800a378:	f43f af02 	beq.w	800a180 <_strtod_l+0x488>
 800a37c:	2101      	movs	r1, #1
 800a37e:	4620      	mov	r0, r4
 800a380:	f001 fbce 	bl	800bb20 <__i2b>
 800a384:	4683      	mov	fp, r0
 800a386:	2800      	cmp	r0, #0
 800a388:	f43f aefa 	beq.w	800a180 <_strtod_l+0x488>
 800a38c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a38e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a390:	2e00      	cmp	r6, #0
 800a392:	bfab      	itete	ge
 800a394:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a396:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a398:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a39a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a39e:	bfac      	ite	ge
 800a3a0:	eb06 0a03 	addge.w	sl, r6, r3
 800a3a4:	1b9f      	sublt	r7, r3, r6
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	1af6      	subs	r6, r6, r3
 800a3aa:	4416      	add	r6, r2
 800a3ac:	4ba0      	ldr	r3, [pc, #640]	; (800a630 <_strtod_l+0x938>)
 800a3ae:	3e01      	subs	r6, #1
 800a3b0:	429e      	cmp	r6, r3
 800a3b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3b6:	f280 80c4 	bge.w	800a542 <_strtod_l+0x84a>
 800a3ba:	1b9b      	subs	r3, r3, r6
 800a3bc:	2b1f      	cmp	r3, #31
 800a3be:	eba2 0203 	sub.w	r2, r2, r3
 800a3c2:	f04f 0101 	mov.w	r1, #1
 800a3c6:	f300 80b0 	bgt.w	800a52a <_strtod_l+0x832>
 800a3ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a3d4:	eb0a 0602 	add.w	r6, sl, r2
 800a3d8:	9b04      	ldr	r3, [sp, #16]
 800a3da:	45b2      	cmp	sl, r6
 800a3dc:	4417      	add	r7, r2
 800a3de:	441f      	add	r7, r3
 800a3e0:	4653      	mov	r3, sl
 800a3e2:	bfa8      	it	ge
 800a3e4:	4633      	movge	r3, r6
 800a3e6:	42bb      	cmp	r3, r7
 800a3e8:	bfa8      	it	ge
 800a3ea:	463b      	movge	r3, r7
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bfc2      	ittt	gt
 800a3f0:	1af6      	subgt	r6, r6, r3
 800a3f2:	1aff      	subgt	r7, r7, r3
 800a3f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd17      	ble.n	800a42e <_strtod_l+0x736>
 800a3fe:	4659      	mov	r1, fp
 800a400:	461a      	mov	r2, r3
 800a402:	4620      	mov	r0, r4
 800a404:	f001 fc4c 	bl	800bca0 <__pow5mult>
 800a408:	4683      	mov	fp, r0
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f43f aeb8 	beq.w	800a180 <_strtod_l+0x488>
 800a410:	4601      	mov	r1, r0
 800a412:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a414:	4620      	mov	r0, r4
 800a416:	f001 fb99 	bl	800bb4c <__multiply>
 800a41a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a41c:	2800      	cmp	r0, #0
 800a41e:	f43f aeaf 	beq.w	800a180 <_strtod_l+0x488>
 800a422:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a424:	4620      	mov	r0, r4
 800a426:	f001 fa7b 	bl	800b920 <_Bfree>
 800a42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a42c:	9316      	str	r3, [sp, #88]	; 0x58
 800a42e:	2e00      	cmp	r6, #0
 800a430:	f300 808c 	bgt.w	800a54c <_strtod_l+0x854>
 800a434:	9b08      	ldr	r3, [sp, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd08      	ble.n	800a44c <_strtod_l+0x754>
 800a43a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a43c:	9905      	ldr	r1, [sp, #20]
 800a43e:	4620      	mov	r0, r4
 800a440:	f001 fc2e 	bl	800bca0 <__pow5mult>
 800a444:	9005      	str	r0, [sp, #20]
 800a446:	2800      	cmp	r0, #0
 800a448:	f43f ae9a 	beq.w	800a180 <_strtod_l+0x488>
 800a44c:	2f00      	cmp	r7, #0
 800a44e:	dd08      	ble.n	800a462 <_strtod_l+0x76a>
 800a450:	9905      	ldr	r1, [sp, #20]
 800a452:	463a      	mov	r2, r7
 800a454:	4620      	mov	r0, r4
 800a456:	f001 fc7d 	bl	800bd54 <__lshift>
 800a45a:	9005      	str	r0, [sp, #20]
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f43f ae8f 	beq.w	800a180 <_strtod_l+0x488>
 800a462:	f1ba 0f00 	cmp.w	sl, #0
 800a466:	dd08      	ble.n	800a47a <_strtod_l+0x782>
 800a468:	4659      	mov	r1, fp
 800a46a:	4652      	mov	r2, sl
 800a46c:	4620      	mov	r0, r4
 800a46e:	f001 fc71 	bl	800bd54 <__lshift>
 800a472:	4683      	mov	fp, r0
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f ae83 	beq.w	800a180 <_strtod_l+0x488>
 800a47a:	9a05      	ldr	r2, [sp, #20]
 800a47c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a47e:	4620      	mov	r0, r4
 800a480:	f001 fcf0 	bl	800be64 <__mdiff>
 800a484:	4605      	mov	r5, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f ae7a 	beq.w	800a180 <_strtod_l+0x488>
 800a48c:	68c3      	ldr	r3, [r0, #12]
 800a48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a490:	2300      	movs	r3, #0
 800a492:	60c3      	str	r3, [r0, #12]
 800a494:	4659      	mov	r1, fp
 800a496:	f001 fcc9 	bl	800be2c <__mcmp>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	da60      	bge.n	800a560 <_strtod_l+0x868>
 800a49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a0:	ea53 0308 	orrs.w	r3, r3, r8
 800a4a4:	f040 8084 	bne.w	800a5b0 <_strtod_l+0x8b8>
 800a4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d17f      	bne.n	800a5b0 <_strtod_l+0x8b8>
 800a4b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4b4:	0d1b      	lsrs	r3, r3, #20
 800a4b6:	051b      	lsls	r3, r3, #20
 800a4b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4bc:	d978      	bls.n	800a5b0 <_strtod_l+0x8b8>
 800a4be:	696b      	ldr	r3, [r5, #20]
 800a4c0:	b913      	cbnz	r3, 800a4c8 <_strtod_l+0x7d0>
 800a4c2:	692b      	ldr	r3, [r5, #16]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	dd73      	ble.n	800a5b0 <_strtod_l+0x8b8>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f001 fc41 	bl	800bd54 <__lshift>
 800a4d2:	4659      	mov	r1, fp
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	f001 fca9 	bl	800be2c <__mcmp>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	dd68      	ble.n	800a5b0 <_strtod_l+0x8b8>
 800a4de:	9904      	ldr	r1, [sp, #16]
 800a4e0:	4a54      	ldr	r2, [pc, #336]	; (800a634 <_strtod_l+0x93c>)
 800a4e2:	464b      	mov	r3, r9
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	f000 8084 	beq.w	800a5f2 <_strtod_l+0x8fa>
 800a4ea:	ea02 0109 	and.w	r1, r2, r9
 800a4ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4f2:	dc7e      	bgt.n	800a5f2 <_strtod_l+0x8fa>
 800a4f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4f8:	f77f aeb3 	ble.w	800a262 <_strtod_l+0x56a>
 800a4fc:	4b4e      	ldr	r3, [pc, #312]	; (800a638 <_strtod_l+0x940>)
 800a4fe:	4640      	mov	r0, r8
 800a500:	4649      	mov	r1, r9
 800a502:	2200      	movs	r2, #0
 800a504:	f7f6 f870 	bl	80005e8 <__aeabi_dmul>
 800a508:	4b4a      	ldr	r3, [pc, #296]	; (800a634 <_strtod_l+0x93c>)
 800a50a:	400b      	ands	r3, r1
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	2b00      	cmp	r3, #0
 800a512:	f47f ae3f 	bne.w	800a194 <_strtod_l+0x49c>
 800a516:	2322      	movs	r3, #34	; 0x22
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	e63b      	b.n	800a194 <_strtod_l+0x49c>
 800a51c:	f04f 32ff 	mov.w	r2, #4294967295
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	ea03 0808 	and.w	r8, r3, r8
 800a528:	e6e8      	b.n	800a2fc <_strtod_l+0x604>
 800a52a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a52e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a532:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a536:	36e2      	adds	r6, #226	; 0xe2
 800a538:	fa01 f306 	lsl.w	r3, r1, r6
 800a53c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a540:	e748      	b.n	800a3d4 <_strtod_l+0x6dc>
 800a542:	2100      	movs	r1, #0
 800a544:	2301      	movs	r3, #1
 800a546:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a54a:	e743      	b.n	800a3d4 <_strtod_l+0x6dc>
 800a54c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a54e:	4632      	mov	r2, r6
 800a550:	4620      	mov	r0, r4
 800a552:	f001 fbff 	bl	800bd54 <__lshift>
 800a556:	9016      	str	r0, [sp, #88]	; 0x58
 800a558:	2800      	cmp	r0, #0
 800a55a:	f47f af6b 	bne.w	800a434 <_strtod_l+0x73c>
 800a55e:	e60f      	b.n	800a180 <_strtod_l+0x488>
 800a560:	46ca      	mov	sl, r9
 800a562:	d171      	bne.n	800a648 <_strtod_l+0x950>
 800a564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a56a:	b352      	cbz	r2, 800a5c2 <_strtod_l+0x8ca>
 800a56c:	4a33      	ldr	r2, [pc, #204]	; (800a63c <_strtod_l+0x944>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d12a      	bne.n	800a5c8 <_strtod_l+0x8d0>
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	4641      	mov	r1, r8
 800a576:	b1fb      	cbz	r3, 800a5b8 <_strtod_l+0x8c0>
 800a578:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <_strtod_l+0x93c>)
 800a57a:	ea09 0303 	and.w	r3, r9, r3
 800a57e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a582:	f04f 32ff 	mov.w	r2, #4294967295
 800a586:	d81a      	bhi.n	800a5be <_strtod_l+0x8c6>
 800a588:	0d1b      	lsrs	r3, r3, #20
 800a58a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	4299      	cmp	r1, r3
 800a594:	d118      	bne.n	800a5c8 <_strtod_l+0x8d0>
 800a596:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <_strtod_l+0x948>)
 800a598:	459a      	cmp	sl, r3
 800a59a:	d102      	bne.n	800a5a2 <_strtod_l+0x8aa>
 800a59c:	3101      	adds	r1, #1
 800a59e:	f43f adef 	beq.w	800a180 <_strtod_l+0x488>
 800a5a2:	4b24      	ldr	r3, [pc, #144]	; (800a634 <_strtod_l+0x93c>)
 800a5a4:	ea0a 0303 	and.w	r3, sl, r3
 800a5a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1a2      	bne.n	800a4fc <_strtod_l+0x804>
 800a5b6:	e5ed      	b.n	800a194 <_strtod_l+0x49c>
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5bc:	e7e9      	b.n	800a592 <_strtod_l+0x89a>
 800a5be:	4613      	mov	r3, r2
 800a5c0:	e7e7      	b.n	800a592 <_strtod_l+0x89a>
 800a5c2:	ea53 0308 	orrs.w	r3, r3, r8
 800a5c6:	d08a      	beq.n	800a4de <_strtod_l+0x7e6>
 800a5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ca:	b1e3      	cbz	r3, 800a606 <_strtod_l+0x90e>
 800a5cc:	ea13 0f0a 	tst.w	r3, sl
 800a5d0:	d0ee      	beq.n	800a5b0 <_strtod_l+0x8b8>
 800a5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d4:	9a04      	ldr	r2, [sp, #16]
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	4649      	mov	r1, r9
 800a5da:	b1c3      	cbz	r3, 800a60e <_strtod_l+0x916>
 800a5dc:	f7ff fb6e 	bl	8009cbc <sulp>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	ec51 0b18 	vmov	r0, r1, d8
 800a5e8:	f7f5 fe48 	bl	800027c <__adddf3>
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4689      	mov	r9, r1
 800a5f0:	e7de      	b.n	800a5b0 <_strtod_l+0x8b8>
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a5fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a600:	f04f 38ff 	mov.w	r8, #4294967295
 800a604:	e7d4      	b.n	800a5b0 <_strtod_l+0x8b8>
 800a606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a608:	ea13 0f08 	tst.w	r3, r8
 800a60c:	e7e0      	b.n	800a5d0 <_strtod_l+0x8d8>
 800a60e:	f7ff fb55 	bl	8009cbc <sulp>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	ec51 0b18 	vmov	r0, r1, d8
 800a61a:	f7f5 fe2d 	bl	8000278 <__aeabi_dsub>
 800a61e:	2200      	movs	r2, #0
 800a620:	2300      	movs	r3, #0
 800a622:	4680      	mov	r8, r0
 800a624:	4689      	mov	r9, r1
 800a626:	f7f6 fa47 	bl	8000ab8 <__aeabi_dcmpeq>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0c0      	beq.n	800a5b0 <_strtod_l+0x8b8>
 800a62e:	e618      	b.n	800a262 <_strtod_l+0x56a>
 800a630:	fffffc02 	.word	0xfffffc02
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	39500000 	.word	0x39500000
 800a63c:	000fffff 	.word	0x000fffff
 800a640:	7fefffff 	.word	0x7fefffff
 800a644:	0800ce58 	.word	0x0800ce58
 800a648:	4659      	mov	r1, fp
 800a64a:	4628      	mov	r0, r5
 800a64c:	f001 fd5e 	bl	800c10c <__ratio>
 800a650:	ec57 6b10 	vmov	r6, r7, d0
 800a654:	ee10 0a10 	vmov	r0, s0
 800a658:	2200      	movs	r2, #0
 800a65a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a65e:	4639      	mov	r1, r7
 800a660:	f7f6 fa3e 	bl	8000ae0 <__aeabi_dcmple>
 800a664:	2800      	cmp	r0, #0
 800a666:	d071      	beq.n	800a74c <_strtod_l+0xa54>
 800a668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d17c      	bne.n	800a768 <_strtod_l+0xa70>
 800a66e:	f1b8 0f00 	cmp.w	r8, #0
 800a672:	d15a      	bne.n	800a72a <_strtod_l+0xa32>
 800a674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d15d      	bne.n	800a738 <_strtod_l+0xa40>
 800a67c:	4b90      	ldr	r3, [pc, #576]	; (800a8c0 <_strtod_l+0xbc8>)
 800a67e:	2200      	movs	r2, #0
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fa22 	bl	8000acc <__aeabi_dcmplt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d15c      	bne.n	800a746 <_strtod_l+0xa4e>
 800a68c:	4630      	mov	r0, r6
 800a68e:	4639      	mov	r1, r7
 800a690:	4b8c      	ldr	r3, [pc, #560]	; (800a8c4 <_strtod_l+0xbcc>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 ffa8 	bl	80005e8 <__aeabi_dmul>
 800a698:	4606      	mov	r6, r0
 800a69a:	460f      	mov	r7, r1
 800a69c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a6a0:	9606      	str	r6, [sp, #24]
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a6ac:	4b86      	ldr	r3, [pc, #536]	; (800a8c8 <_strtod_l+0xbd0>)
 800a6ae:	ea0a 0303 	and.w	r3, sl, r3
 800a6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6b6:	4b85      	ldr	r3, [pc, #532]	; (800a8cc <_strtod_l+0xbd4>)
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	f040 8090 	bne.w	800a7de <_strtod_l+0xae6>
 800a6be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a6c2:	ec49 8b10 	vmov	d0, r8, r9
 800a6c6:	f001 fc57 	bl	800bf78 <__ulp>
 800a6ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6ce:	ec51 0b10 	vmov	r0, r1, d0
 800a6d2:	f7f5 ff89 	bl	80005e8 <__aeabi_dmul>
 800a6d6:	4642      	mov	r2, r8
 800a6d8:	464b      	mov	r3, r9
 800a6da:	f7f5 fdcf 	bl	800027c <__adddf3>
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4979      	ldr	r1, [pc, #484]	; (800a8c8 <_strtod_l+0xbd0>)
 800a6e2:	4a7b      	ldr	r2, [pc, #492]	; (800a8d0 <_strtod_l+0xbd8>)
 800a6e4:	4019      	ands	r1, r3
 800a6e6:	4291      	cmp	r1, r2
 800a6e8:	4680      	mov	r8, r0
 800a6ea:	d944      	bls.n	800a776 <_strtod_l+0xa7e>
 800a6ec:	ee18 2a90 	vmov	r2, s17
 800a6f0:	4b78      	ldr	r3, [pc, #480]	; (800a8d4 <_strtod_l+0xbdc>)
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d104      	bne.n	800a700 <_strtod_l+0xa08>
 800a6f6:	ee18 3a10 	vmov	r3, s16
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	f43f ad40 	beq.w	800a180 <_strtod_l+0x488>
 800a700:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a8d4 <_strtod_l+0xbdc>
 800a704:	f04f 38ff 	mov.w	r8, #4294967295
 800a708:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a70a:	4620      	mov	r0, r4
 800a70c:	f001 f908 	bl	800b920 <_Bfree>
 800a710:	9905      	ldr	r1, [sp, #20]
 800a712:	4620      	mov	r0, r4
 800a714:	f001 f904 	bl	800b920 <_Bfree>
 800a718:	4659      	mov	r1, fp
 800a71a:	4620      	mov	r0, r4
 800a71c:	f001 f900 	bl	800b920 <_Bfree>
 800a720:	4629      	mov	r1, r5
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f8fc 	bl	800b920 <_Bfree>
 800a728:	e609      	b.n	800a33e <_strtod_l+0x646>
 800a72a:	f1b8 0f01 	cmp.w	r8, #1
 800a72e:	d103      	bne.n	800a738 <_strtod_l+0xa40>
 800a730:	f1b9 0f00 	cmp.w	r9, #0
 800a734:	f43f ad95 	beq.w	800a262 <_strtod_l+0x56a>
 800a738:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a890 <_strtod_l+0xb98>
 800a73c:	4f60      	ldr	r7, [pc, #384]	; (800a8c0 <_strtod_l+0xbc8>)
 800a73e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a742:	2600      	movs	r6, #0
 800a744:	e7ae      	b.n	800a6a4 <_strtod_l+0x9ac>
 800a746:	4f5f      	ldr	r7, [pc, #380]	; (800a8c4 <_strtod_l+0xbcc>)
 800a748:	2600      	movs	r6, #0
 800a74a:	e7a7      	b.n	800a69c <_strtod_l+0x9a4>
 800a74c:	4b5d      	ldr	r3, [pc, #372]	; (800a8c4 <_strtod_l+0xbcc>)
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	2200      	movs	r2, #0
 800a754:	f7f5 ff48 	bl	80005e8 <__aeabi_dmul>
 800a758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d09c      	beq.n	800a69c <_strtod_l+0x9a4>
 800a762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a766:	e79d      	b.n	800a6a4 <_strtod_l+0x9ac>
 800a768:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a898 <_strtod_l+0xba0>
 800a76c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a770:	ec57 6b17 	vmov	r6, r7, d7
 800a774:	e796      	b.n	800a6a4 <_strtod_l+0x9ac>
 800a776:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	46ca      	mov	sl, r9
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1c2      	bne.n	800a708 <_strtod_l+0xa10>
 800a782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a788:	0d1b      	lsrs	r3, r3, #20
 800a78a:	051b      	lsls	r3, r3, #20
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d1bb      	bne.n	800a708 <_strtod_l+0xa10>
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f6 fa60 	bl	8000c58 <__aeabi_d2lz>
 800a798:	f7f5 fef8 	bl	800058c <__aeabi_l2d>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 fd68 	bl	8000278 <__aeabi_dsub>
 800a7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7ae:	ea43 0308 	orr.w	r3, r3, r8
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	d054      	beq.n	800a864 <_strtod_l+0xb6c>
 800a7ba:	a339      	add	r3, pc, #228	; (adr r3, 800a8a0 <_strtod_l+0xba8>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f6 f984 	bl	8000acc <__aeabi_dcmplt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f47f ace5 	bne.w	800a194 <_strtod_l+0x49c>
 800a7ca:	a337      	add	r3, pc, #220	; (adr r3, 800a8a8 <_strtod_l+0xbb0>)
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f998 	bl	8000b08 <__aeabi_dcmpgt>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d095      	beq.n	800a708 <_strtod_l+0xa10>
 800a7dc:	e4da      	b.n	800a194 <_strtod_l+0x49c>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	b333      	cbz	r3, 800a830 <_strtod_l+0xb38>
 800a7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7e8:	d822      	bhi.n	800a830 <_strtod_l+0xb38>
 800a7ea:	a331      	add	r3, pc, #196	; (adr r3, 800a8b0 <_strtod_l+0xbb8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f6 f974 	bl	8000ae0 <__aeabi_dcmple>
 800a7f8:	b1a0      	cbz	r0, 800a824 <_strtod_l+0xb2c>
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7f6 f9a3 	bl	8000b48 <__aeabi_d2uiz>
 800a802:	2801      	cmp	r0, #1
 800a804:	bf38      	it	cc
 800a806:	2001      	movcc	r0, #1
 800a808:	f7f5 fe74 	bl	80004f4 <__aeabi_ui2d>
 800a80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	bb23      	cbnz	r3, 800a85e <_strtod_l+0xb66>
 800a814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a818:	9010      	str	r0, [sp, #64]	; 0x40
 800a81a:	9311      	str	r3, [sp, #68]	; 0x44
 800a81c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a820:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a828:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a830:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a834:	eeb0 0a48 	vmov.f32	s0, s16
 800a838:	eef0 0a68 	vmov.f32	s1, s17
 800a83c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a840:	f001 fb9a 	bl	800bf78 <__ulp>
 800a844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a848:	ec53 2b10 	vmov	r2, r3, d0
 800a84c:	f7f5 fecc 	bl	80005e8 <__aeabi_dmul>
 800a850:	ec53 2b18 	vmov	r2, r3, d8
 800a854:	f7f5 fd12 	bl	800027c <__adddf3>
 800a858:	4680      	mov	r8, r0
 800a85a:	4689      	mov	r9, r1
 800a85c:	e78d      	b.n	800a77a <_strtod_l+0xa82>
 800a85e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a862:	e7db      	b.n	800a81c <_strtod_l+0xb24>
 800a864:	a314      	add	r3, pc, #80	; (adr r3, 800a8b8 <_strtod_l+0xbc0>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f7f6 f92f 	bl	8000acc <__aeabi_dcmplt>
 800a86e:	e7b3      	b.n	800a7d8 <_strtod_l+0xae0>
 800a870:	2300      	movs	r3, #0
 800a872:	930a      	str	r3, [sp, #40]	; 0x28
 800a874:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	f7ff ba7c 	b.w	8009d76 <_strtod_l+0x7e>
 800a87e:	2a65      	cmp	r2, #101	; 0x65
 800a880:	f43f ab75 	beq.w	8009f6e <_strtod_l+0x276>
 800a884:	2a45      	cmp	r2, #69	; 0x45
 800a886:	f43f ab72 	beq.w	8009f6e <_strtod_l+0x276>
 800a88a:	2301      	movs	r3, #1
 800a88c:	f7ff bbaa 	b.w	8009fe4 <_strtod_l+0x2ec>
 800a890:	00000000 	.word	0x00000000
 800a894:	bff00000 	.word	0xbff00000
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fdfffff 	.word	0x3fdfffff
 800a8a8:	35afe535 	.word	0x35afe535
 800a8ac:	3fe00000 	.word	0x3fe00000
 800a8b0:	ffc00000 	.word	0xffc00000
 800a8b4:	41dfffff 	.word	0x41dfffff
 800a8b8:	94a03595 	.word	0x94a03595
 800a8bc:	3fcfffff 	.word	0x3fcfffff
 800a8c0:	3ff00000 	.word	0x3ff00000
 800a8c4:	3fe00000 	.word	0x3fe00000
 800a8c8:	7ff00000 	.word	0x7ff00000
 800a8cc:	7fe00000 	.word	0x7fe00000
 800a8d0:	7c9fffff 	.word	0x7c9fffff
 800a8d4:	7fefffff 	.word	0x7fefffff

0800a8d8 <_strtod_r>:
 800a8d8:	4b01      	ldr	r3, [pc, #4]	; (800a8e0 <_strtod_r+0x8>)
 800a8da:	f7ff ba0d 	b.w	8009cf8 <_strtod_l>
 800a8de:	bf00      	nop
 800a8e0:	20000080 	.word	0x20000080

0800a8e4 <_strtol_l.constprop.0>:
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ea:	d001      	beq.n	800a8f0 <_strtol_l.constprop.0+0xc>
 800a8ec:	2b24      	cmp	r3, #36	; 0x24
 800a8ee:	d906      	bls.n	800a8fe <_strtol_l.constprop.0+0x1a>
 800a8f0:	f7ff f946 	bl	8009b80 <__errno>
 800a8f4:	2316      	movs	r3, #22
 800a8f6:	6003      	str	r3, [r0, #0]
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a9e4 <_strtol_l.constprop.0+0x100>
 800a902:	460d      	mov	r5, r1
 800a904:	462e      	mov	r6, r5
 800a906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a90a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a90e:	f017 0708 	ands.w	r7, r7, #8
 800a912:	d1f7      	bne.n	800a904 <_strtol_l.constprop.0+0x20>
 800a914:	2c2d      	cmp	r4, #45	; 0x2d
 800a916:	d132      	bne.n	800a97e <_strtol_l.constprop.0+0x9a>
 800a918:	782c      	ldrb	r4, [r5, #0]
 800a91a:	2701      	movs	r7, #1
 800a91c:	1cb5      	adds	r5, r6, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d05b      	beq.n	800a9da <_strtol_l.constprop.0+0xf6>
 800a922:	2b10      	cmp	r3, #16
 800a924:	d109      	bne.n	800a93a <_strtol_l.constprop.0+0x56>
 800a926:	2c30      	cmp	r4, #48	; 0x30
 800a928:	d107      	bne.n	800a93a <_strtol_l.constprop.0+0x56>
 800a92a:	782c      	ldrb	r4, [r5, #0]
 800a92c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a930:	2c58      	cmp	r4, #88	; 0x58
 800a932:	d14d      	bne.n	800a9d0 <_strtol_l.constprop.0+0xec>
 800a934:	786c      	ldrb	r4, [r5, #1]
 800a936:	2310      	movs	r3, #16
 800a938:	3502      	adds	r5, #2
 800a93a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a93e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a942:	f04f 0e00 	mov.w	lr, #0
 800a946:	fbb8 f9f3 	udiv	r9, r8, r3
 800a94a:	4676      	mov	r6, lr
 800a94c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a950:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a954:	f1bc 0f09 	cmp.w	ip, #9
 800a958:	d816      	bhi.n	800a988 <_strtol_l.constprop.0+0xa4>
 800a95a:	4664      	mov	r4, ip
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	dd24      	ble.n	800a9aa <_strtol_l.constprop.0+0xc6>
 800a960:	f1be 3fff 	cmp.w	lr, #4294967295
 800a964:	d008      	beq.n	800a978 <_strtol_l.constprop.0+0x94>
 800a966:	45b1      	cmp	r9, r6
 800a968:	d31c      	bcc.n	800a9a4 <_strtol_l.constprop.0+0xc0>
 800a96a:	d101      	bne.n	800a970 <_strtol_l.constprop.0+0x8c>
 800a96c:	45a2      	cmp	sl, r4
 800a96e:	db19      	blt.n	800a9a4 <_strtol_l.constprop.0+0xc0>
 800a970:	fb06 4603 	mla	r6, r6, r3, r4
 800a974:	f04f 0e01 	mov.w	lr, #1
 800a978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a97c:	e7e8      	b.n	800a950 <_strtol_l.constprop.0+0x6c>
 800a97e:	2c2b      	cmp	r4, #43	; 0x2b
 800a980:	bf04      	itt	eq
 800a982:	782c      	ldrbeq	r4, [r5, #0]
 800a984:	1cb5      	addeq	r5, r6, #2
 800a986:	e7ca      	b.n	800a91e <_strtol_l.constprop.0+0x3a>
 800a988:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a98c:	f1bc 0f19 	cmp.w	ip, #25
 800a990:	d801      	bhi.n	800a996 <_strtol_l.constprop.0+0xb2>
 800a992:	3c37      	subs	r4, #55	; 0x37
 800a994:	e7e2      	b.n	800a95c <_strtol_l.constprop.0+0x78>
 800a996:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a99a:	f1bc 0f19 	cmp.w	ip, #25
 800a99e:	d804      	bhi.n	800a9aa <_strtol_l.constprop.0+0xc6>
 800a9a0:	3c57      	subs	r4, #87	; 0x57
 800a9a2:	e7db      	b.n	800a95c <_strtol_l.constprop.0+0x78>
 800a9a4:	f04f 3eff 	mov.w	lr, #4294967295
 800a9a8:	e7e6      	b.n	800a978 <_strtol_l.constprop.0+0x94>
 800a9aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800a9ae:	d105      	bne.n	800a9bc <_strtol_l.constprop.0+0xd8>
 800a9b0:	2322      	movs	r3, #34	; 0x22
 800a9b2:	6003      	str	r3, [r0, #0]
 800a9b4:	4646      	mov	r6, r8
 800a9b6:	b942      	cbnz	r2, 800a9ca <_strtol_l.constprop.0+0xe6>
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	e79e      	b.n	800a8fa <_strtol_l.constprop.0+0x16>
 800a9bc:	b107      	cbz	r7, 800a9c0 <_strtol_l.constprop.0+0xdc>
 800a9be:	4276      	negs	r6, r6
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	d0f9      	beq.n	800a9b8 <_strtol_l.constprop.0+0xd4>
 800a9c4:	f1be 0f00 	cmp.w	lr, #0
 800a9c8:	d000      	beq.n	800a9cc <_strtol_l.constprop.0+0xe8>
 800a9ca:	1e69      	subs	r1, r5, #1
 800a9cc:	6011      	str	r1, [r2, #0]
 800a9ce:	e7f3      	b.n	800a9b8 <_strtol_l.constprop.0+0xd4>
 800a9d0:	2430      	movs	r4, #48	; 0x30
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1b1      	bne.n	800a93a <_strtol_l.constprop.0+0x56>
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	e7af      	b.n	800a93a <_strtol_l.constprop.0+0x56>
 800a9da:	2c30      	cmp	r4, #48	; 0x30
 800a9dc:	d0a5      	beq.n	800a92a <_strtol_l.constprop.0+0x46>
 800a9de:	230a      	movs	r3, #10
 800a9e0:	e7ab      	b.n	800a93a <_strtol_l.constprop.0+0x56>
 800a9e2:	bf00      	nop
 800a9e4:	0800ce81 	.word	0x0800ce81

0800a9e8 <_strtol_r>:
 800a9e8:	f7ff bf7c 	b.w	800a8e4 <_strtol_l.constprop.0>

0800a9ec <__ssputs_r>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	688e      	ldr	r6, [r1, #8]
 800a9f2:	461f      	mov	r7, r3
 800a9f4:	42be      	cmp	r6, r7
 800a9f6:	680b      	ldr	r3, [r1, #0]
 800a9f8:	4682      	mov	sl, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4690      	mov	r8, r2
 800a9fe:	d82c      	bhi.n	800aa5a <__ssputs_r+0x6e>
 800aa00:	898a      	ldrh	r2, [r1, #12]
 800aa02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa06:	d026      	beq.n	800aa56 <__ssputs_r+0x6a>
 800aa08:	6965      	ldr	r5, [r4, #20]
 800aa0a:	6909      	ldr	r1, [r1, #16]
 800aa0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa10:	eba3 0901 	sub.w	r9, r3, r1
 800aa14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa18:	1c7b      	adds	r3, r7, #1
 800aa1a:	444b      	add	r3, r9
 800aa1c:	106d      	asrs	r5, r5, #1
 800aa1e:	429d      	cmp	r5, r3
 800aa20:	bf38      	it	cc
 800aa22:	461d      	movcc	r5, r3
 800aa24:	0553      	lsls	r3, r2, #21
 800aa26:	d527      	bpl.n	800aa78 <__ssputs_r+0x8c>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7fe fc4b 	bl	80092c4 <_malloc_r>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	b360      	cbz	r0, 800aa8c <__ssputs_r+0xa0>
 800aa32:	6921      	ldr	r1, [r4, #16]
 800aa34:	464a      	mov	r2, r9
 800aa36:	f000 fbad 	bl	800b194 <memcpy>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	6126      	str	r6, [r4, #16]
 800aa48:	6165      	str	r5, [r4, #20]
 800aa4a:	444e      	add	r6, r9
 800aa4c:	eba5 0509 	sub.w	r5, r5, r9
 800aa50:	6026      	str	r6, [r4, #0]
 800aa52:	60a5      	str	r5, [r4, #8]
 800aa54:	463e      	mov	r6, r7
 800aa56:	42be      	cmp	r6, r7
 800aa58:	d900      	bls.n	800aa5c <__ssputs_r+0x70>
 800aa5a:	463e      	mov	r6, r7
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	4632      	mov	r2, r6
 800aa60:	4641      	mov	r1, r8
 800aa62:	f000 fb6b 	bl	800b13c <memmove>
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	1b9b      	subs	r3, r3, r6
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	4433      	add	r3, r6
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	2000      	movs	r0, #0
 800aa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa78:	462a      	mov	r2, r5
 800aa7a:	f001 fbbe 	bl	800c1fa <_realloc_r>
 800aa7e:	4606      	mov	r6, r0
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d1e0      	bne.n	800aa46 <__ssputs_r+0x5a>
 800aa84:	6921      	ldr	r1, [r4, #16]
 800aa86:	4650      	mov	r0, sl
 800aa88:	f7ff f8cc 	bl	8009c24 <_free_r>
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	f8ca 3000 	str.w	r3, [sl]
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	e7e9      	b.n	800aa74 <__ssputs_r+0x88>

0800aaa0 <_svfiprintf_r>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	4698      	mov	r8, r3
 800aaa6:	898b      	ldrh	r3, [r1, #12]
 800aaa8:	061b      	lsls	r3, r3, #24
 800aaaa:	b09d      	sub	sp, #116	; 0x74
 800aaac:	4607      	mov	r7, r0
 800aaae:	460d      	mov	r5, r1
 800aab0:	4614      	mov	r4, r2
 800aab2:	d50e      	bpl.n	800aad2 <_svfiprintf_r+0x32>
 800aab4:	690b      	ldr	r3, [r1, #16]
 800aab6:	b963      	cbnz	r3, 800aad2 <_svfiprintf_r+0x32>
 800aab8:	2140      	movs	r1, #64	; 0x40
 800aaba:	f7fe fc03 	bl	80092c4 <_malloc_r>
 800aabe:	6028      	str	r0, [r5, #0]
 800aac0:	6128      	str	r0, [r5, #16]
 800aac2:	b920      	cbnz	r0, 800aace <_svfiprintf_r+0x2e>
 800aac4:	230c      	movs	r3, #12
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	f04f 30ff 	mov.w	r0, #4294967295
 800aacc:	e0d0      	b.n	800ac70 <_svfiprintf_r+0x1d0>
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	616b      	str	r3, [r5, #20]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9309      	str	r3, [sp, #36]	; 0x24
 800aad6:	2320      	movs	r3, #32
 800aad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae0:	2330      	movs	r3, #48	; 0x30
 800aae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac88 <_svfiprintf_r+0x1e8>
 800aae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaea:	f04f 0901 	mov.w	r9, #1
 800aaee:	4623      	mov	r3, r4
 800aaf0:	469a      	mov	sl, r3
 800aaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf6:	b10a      	cbz	r2, 800aafc <_svfiprintf_r+0x5c>
 800aaf8:	2a25      	cmp	r2, #37	; 0x25
 800aafa:	d1f9      	bne.n	800aaf0 <_svfiprintf_r+0x50>
 800aafc:	ebba 0b04 	subs.w	fp, sl, r4
 800ab00:	d00b      	beq.n	800ab1a <_svfiprintf_r+0x7a>
 800ab02:	465b      	mov	r3, fp
 800ab04:	4622      	mov	r2, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f7ff ff6f 	bl	800a9ec <__ssputs_r>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	f000 80a9 	beq.w	800ac66 <_svfiprintf_r+0x1c6>
 800ab14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab16:	445a      	add	r2, fp
 800ab18:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 80a1 	beq.w	800ac66 <_svfiprintf_r+0x1c6>
 800ab24:	2300      	movs	r3, #0
 800ab26:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab2e:	f10a 0a01 	add.w	sl, sl, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	9307      	str	r3, [sp, #28]
 800ab36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab3c:	4654      	mov	r4, sl
 800ab3e:	2205      	movs	r2, #5
 800ab40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab44:	4850      	ldr	r0, [pc, #320]	; (800ac88 <_svfiprintf_r+0x1e8>)
 800ab46:	f7f5 fb43 	bl	80001d0 <memchr>
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	b9d8      	cbnz	r0, 800ab86 <_svfiprintf_r+0xe6>
 800ab4e:	06d0      	lsls	r0, r2, #27
 800ab50:	bf44      	itt	mi
 800ab52:	2320      	movmi	r3, #32
 800ab54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab58:	0711      	lsls	r1, r2, #28
 800ab5a:	bf44      	itt	mi
 800ab5c:	232b      	movmi	r3, #43	; 0x2b
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab62:	f89a 3000 	ldrb.w	r3, [sl]
 800ab66:	2b2a      	cmp	r3, #42	; 0x2a
 800ab68:	d015      	beq.n	800ab96 <_svfiprintf_r+0xf6>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4654      	mov	r4, sl
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f04f 0c0a 	mov.w	ip, #10
 800ab74:	4621      	mov	r1, r4
 800ab76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7a:	3b30      	subs	r3, #48	; 0x30
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d94d      	bls.n	800ac1c <_svfiprintf_r+0x17c>
 800ab80:	b1b0      	cbz	r0, 800abb0 <_svfiprintf_r+0x110>
 800ab82:	9207      	str	r2, [sp, #28]
 800ab84:	e014      	b.n	800abb0 <_svfiprintf_r+0x110>
 800ab86:	eba0 0308 	sub.w	r3, r0, r8
 800ab8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	46a2      	mov	sl, r4
 800ab94:	e7d2      	b.n	800ab3c <_svfiprintf_r+0x9c>
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	9103      	str	r1, [sp, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfbb      	ittet	lt
 800aba2:	425b      	neglt	r3, r3
 800aba4:	f042 0202 	orrlt.w	r2, r2, #2
 800aba8:	9307      	strge	r3, [sp, #28]
 800abaa:	9307      	strlt	r3, [sp, #28]
 800abac:	bfb8      	it	lt
 800abae:	9204      	strlt	r2, [sp, #16]
 800abb0:	7823      	ldrb	r3, [r4, #0]
 800abb2:	2b2e      	cmp	r3, #46	; 0x2e
 800abb4:	d10c      	bne.n	800abd0 <_svfiprintf_r+0x130>
 800abb6:	7863      	ldrb	r3, [r4, #1]
 800abb8:	2b2a      	cmp	r3, #42	; 0x2a
 800abba:	d134      	bne.n	800ac26 <_svfiprintf_r+0x186>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	1d1a      	adds	r2, r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	9203      	str	r2, [sp, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfb8      	it	lt
 800abc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800abcc:	3402      	adds	r4, #2
 800abce:	9305      	str	r3, [sp, #20]
 800abd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac98 <_svfiprintf_r+0x1f8>
 800abd4:	7821      	ldrb	r1, [r4, #0]
 800abd6:	2203      	movs	r2, #3
 800abd8:	4650      	mov	r0, sl
 800abda:	f7f5 faf9 	bl	80001d0 <memchr>
 800abde:	b138      	cbz	r0, 800abf0 <_svfiprintf_r+0x150>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	eba0 000a 	sub.w	r0, r0, sl
 800abe6:	2240      	movs	r2, #64	; 0x40
 800abe8:	4082      	lsls	r2, r0
 800abea:	4313      	orrs	r3, r2
 800abec:	3401      	adds	r4, #1
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf4:	4825      	ldr	r0, [pc, #148]	; (800ac8c <_svfiprintf_r+0x1ec>)
 800abf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abfa:	2206      	movs	r2, #6
 800abfc:	f7f5 fae8 	bl	80001d0 <memchr>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d038      	beq.n	800ac76 <_svfiprintf_r+0x1d6>
 800ac04:	4b22      	ldr	r3, [pc, #136]	; (800ac90 <_svfiprintf_r+0x1f0>)
 800ac06:	bb1b      	cbnz	r3, 800ac50 <_svfiprintf_r+0x1b0>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	3307      	adds	r3, #7
 800ac0c:	f023 0307 	bic.w	r3, r3, #7
 800ac10:	3308      	adds	r3, #8
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	4433      	add	r3, r6
 800ac18:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1a:	e768      	b.n	800aaee <_svfiprintf_r+0x4e>
 800ac1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac20:	460c      	mov	r4, r1
 800ac22:	2001      	movs	r0, #1
 800ac24:	e7a6      	b.n	800ab74 <_svfiprintf_r+0xd4>
 800ac26:	2300      	movs	r3, #0
 800ac28:	3401      	adds	r4, #1
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f04f 0c0a 	mov.w	ip, #10
 800ac32:	4620      	mov	r0, r4
 800ac34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac38:	3a30      	subs	r2, #48	; 0x30
 800ac3a:	2a09      	cmp	r2, #9
 800ac3c:	d903      	bls.n	800ac46 <_svfiprintf_r+0x1a6>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0c6      	beq.n	800abd0 <_svfiprintf_r+0x130>
 800ac42:	9105      	str	r1, [sp, #20]
 800ac44:	e7c4      	b.n	800abd0 <_svfiprintf_r+0x130>
 800ac46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7f0      	b.n	800ac32 <_svfiprintf_r+0x192>
 800ac50:	ab03      	add	r3, sp, #12
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	462a      	mov	r2, r5
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <_svfiprintf_r+0x1f4>)
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f3af 8000 	nop.w
 800ac60:	1c42      	adds	r2, r0, #1
 800ac62:	4606      	mov	r6, r0
 800ac64:	d1d6      	bne.n	800ac14 <_svfiprintf_r+0x174>
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	065b      	lsls	r3, r3, #25
 800ac6a:	f53f af2d 	bmi.w	800aac8 <_svfiprintf_r+0x28>
 800ac6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac70:	b01d      	add	sp, #116	; 0x74
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac76:	ab03      	add	r3, sp, #12
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <_svfiprintf_r+0x1f4>)
 800ac7e:	a904      	add	r1, sp, #16
 800ac80:	4638      	mov	r0, r7
 800ac82:	f000 f879 	bl	800ad78 <_printf_i>
 800ac86:	e7eb      	b.n	800ac60 <_svfiprintf_r+0x1c0>
 800ac88:	0800cf81 	.word	0x0800cf81
 800ac8c:	0800cf8b 	.word	0x0800cf8b
 800ac90:	00000000 	.word	0x00000000
 800ac94:	0800a9ed 	.word	0x0800a9ed
 800ac98:	0800cf87 	.word	0x0800cf87

0800ac9c <_printf_common>:
 800ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	4616      	mov	r6, r2
 800aca2:	4699      	mov	r9, r3
 800aca4:	688a      	ldr	r2, [r1, #8]
 800aca6:	690b      	ldr	r3, [r1, #16]
 800aca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acac:	4293      	cmp	r3, r2
 800acae:	bfb8      	it	lt
 800acb0:	4613      	movlt	r3, r2
 800acb2:	6033      	str	r3, [r6, #0]
 800acb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acb8:	4607      	mov	r7, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	b10a      	cbz	r2, 800acc2 <_printf_common+0x26>
 800acbe:	3301      	adds	r3, #1
 800acc0:	6033      	str	r3, [r6, #0]
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	0699      	lsls	r1, r3, #26
 800acc6:	bf42      	ittt	mi
 800acc8:	6833      	ldrmi	r3, [r6, #0]
 800acca:	3302      	addmi	r3, #2
 800accc:	6033      	strmi	r3, [r6, #0]
 800acce:	6825      	ldr	r5, [r4, #0]
 800acd0:	f015 0506 	ands.w	r5, r5, #6
 800acd4:	d106      	bne.n	800ace4 <_printf_common+0x48>
 800acd6:	f104 0a19 	add.w	sl, r4, #25
 800acda:	68e3      	ldr	r3, [r4, #12]
 800acdc:	6832      	ldr	r2, [r6, #0]
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	42ab      	cmp	r3, r5
 800ace2:	dc26      	bgt.n	800ad32 <_printf_common+0x96>
 800ace4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ace8:	1e13      	subs	r3, r2, #0
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	bf18      	it	ne
 800acee:	2301      	movne	r3, #1
 800acf0:	0692      	lsls	r2, r2, #26
 800acf2:	d42b      	bmi.n	800ad4c <_printf_common+0xb0>
 800acf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acf8:	4649      	mov	r1, r9
 800acfa:	4638      	mov	r0, r7
 800acfc:	47c0      	blx	r8
 800acfe:	3001      	adds	r0, #1
 800ad00:	d01e      	beq.n	800ad40 <_printf_common+0xa4>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	6922      	ldr	r2, [r4, #16]
 800ad06:	f003 0306 	and.w	r3, r3, #6
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	bf02      	ittt	eq
 800ad0e:	68e5      	ldreq	r5, [r4, #12]
 800ad10:	6833      	ldreq	r3, [r6, #0]
 800ad12:	1aed      	subeq	r5, r5, r3
 800ad14:	68a3      	ldr	r3, [r4, #8]
 800ad16:	bf0c      	ite	eq
 800ad18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad1c:	2500      	movne	r5, #0
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	bfc4      	itt	gt
 800ad22:	1a9b      	subgt	r3, r3, r2
 800ad24:	18ed      	addgt	r5, r5, r3
 800ad26:	2600      	movs	r6, #0
 800ad28:	341a      	adds	r4, #26
 800ad2a:	42b5      	cmp	r5, r6
 800ad2c:	d11a      	bne.n	800ad64 <_printf_common+0xc8>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e008      	b.n	800ad44 <_printf_common+0xa8>
 800ad32:	2301      	movs	r3, #1
 800ad34:	4652      	mov	r2, sl
 800ad36:	4649      	mov	r1, r9
 800ad38:	4638      	mov	r0, r7
 800ad3a:	47c0      	blx	r8
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d103      	bne.n	800ad48 <_printf_common+0xac>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	3501      	adds	r5, #1
 800ad4a:	e7c6      	b.n	800acda <_printf_common+0x3e>
 800ad4c:	18e1      	adds	r1, r4, r3
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	2030      	movs	r0, #48	; 0x30
 800ad52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad56:	4422      	add	r2, r4
 800ad58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad60:	3302      	adds	r3, #2
 800ad62:	e7c7      	b.n	800acf4 <_printf_common+0x58>
 800ad64:	2301      	movs	r3, #1
 800ad66:	4622      	mov	r2, r4
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	47c0      	blx	r8
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d0e6      	beq.n	800ad40 <_printf_common+0xa4>
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7d9      	b.n	800ad2a <_printf_common+0x8e>
	...

0800ad78 <_printf_i>:
 800ad78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	7e0f      	ldrb	r7, [r1, #24]
 800ad7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad80:	2f78      	cmp	r7, #120	; 0x78
 800ad82:	4691      	mov	r9, r2
 800ad84:	4680      	mov	r8, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	469a      	mov	sl, r3
 800ad8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad8e:	d807      	bhi.n	800ada0 <_printf_i+0x28>
 800ad90:	2f62      	cmp	r7, #98	; 0x62
 800ad92:	d80a      	bhi.n	800adaa <_printf_i+0x32>
 800ad94:	2f00      	cmp	r7, #0
 800ad96:	f000 80d4 	beq.w	800af42 <_printf_i+0x1ca>
 800ad9a:	2f58      	cmp	r7, #88	; 0x58
 800ad9c:	f000 80c0 	beq.w	800af20 <_printf_i+0x1a8>
 800ada0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ada4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ada8:	e03a      	b.n	800ae20 <_printf_i+0xa8>
 800adaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adae:	2b15      	cmp	r3, #21
 800adb0:	d8f6      	bhi.n	800ada0 <_printf_i+0x28>
 800adb2:	a101      	add	r1, pc, #4	; (adr r1, 800adb8 <_printf_i+0x40>)
 800adb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adb8:	0800ae11 	.word	0x0800ae11
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800ada1 	.word	0x0800ada1
 800adc4:	0800ada1 	.word	0x0800ada1
 800adc8:	0800ada1 	.word	0x0800ada1
 800adcc:	0800ada1 	.word	0x0800ada1
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ada1 	.word	0x0800ada1
 800add8:	0800ada1 	.word	0x0800ada1
 800addc:	0800ada1 	.word	0x0800ada1
 800ade0:	0800ada1 	.word	0x0800ada1
 800ade4:	0800af29 	.word	0x0800af29
 800ade8:	0800ae51 	.word	0x0800ae51
 800adec:	0800aee3 	.word	0x0800aee3
 800adf0:	0800ada1 	.word	0x0800ada1
 800adf4:	0800ada1 	.word	0x0800ada1
 800adf8:	0800af4b 	.word	0x0800af4b
 800adfc:	0800ada1 	.word	0x0800ada1
 800ae00:	0800ae51 	.word	0x0800ae51
 800ae04:	0800ada1 	.word	0x0800ada1
 800ae08:	0800ada1 	.word	0x0800ada1
 800ae0c:	0800aeeb 	.word	0x0800aeeb
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	1d1a      	adds	r2, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	602a      	str	r2, [r5, #0]
 800ae18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae20:	2301      	movs	r3, #1
 800ae22:	e09f      	b.n	800af64 <_printf_i+0x1ec>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	682b      	ldr	r3, [r5, #0]
 800ae28:	0607      	lsls	r7, r0, #24
 800ae2a:	f103 0104 	add.w	r1, r3, #4
 800ae2e:	6029      	str	r1, [r5, #0]
 800ae30:	d501      	bpl.n	800ae36 <_printf_i+0xbe>
 800ae32:	681e      	ldr	r6, [r3, #0]
 800ae34:	e003      	b.n	800ae3e <_printf_i+0xc6>
 800ae36:	0646      	lsls	r6, r0, #25
 800ae38:	d5fb      	bpl.n	800ae32 <_printf_i+0xba>
 800ae3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	da03      	bge.n	800ae4a <_printf_i+0xd2>
 800ae42:	232d      	movs	r3, #45	; 0x2d
 800ae44:	4276      	negs	r6, r6
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4a:	485a      	ldr	r0, [pc, #360]	; (800afb4 <_printf_i+0x23c>)
 800ae4c:	230a      	movs	r3, #10
 800ae4e:	e012      	b.n	800ae76 <_printf_i+0xfe>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	6820      	ldr	r0, [r4, #0]
 800ae54:	1d19      	adds	r1, r3, #4
 800ae56:	6029      	str	r1, [r5, #0]
 800ae58:	0605      	lsls	r5, r0, #24
 800ae5a:	d501      	bpl.n	800ae60 <_printf_i+0xe8>
 800ae5c:	681e      	ldr	r6, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <_printf_i+0xee>
 800ae60:	0641      	lsls	r1, r0, #25
 800ae62:	d5fb      	bpl.n	800ae5c <_printf_i+0xe4>
 800ae64:	881e      	ldrh	r6, [r3, #0]
 800ae66:	4853      	ldr	r0, [pc, #332]	; (800afb4 <_printf_i+0x23c>)
 800ae68:	2f6f      	cmp	r7, #111	; 0x6f
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2308      	moveq	r3, #8
 800ae6e:	230a      	movne	r3, #10
 800ae70:	2100      	movs	r1, #0
 800ae72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae76:	6865      	ldr	r5, [r4, #4]
 800ae78:	60a5      	str	r5, [r4, #8]
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	bfa2      	ittt	ge
 800ae7e:	6821      	ldrge	r1, [r4, #0]
 800ae80:	f021 0104 	bicge.w	r1, r1, #4
 800ae84:	6021      	strge	r1, [r4, #0]
 800ae86:	b90e      	cbnz	r6, 800ae8c <_printf_i+0x114>
 800ae88:	2d00      	cmp	r5, #0
 800ae8a:	d04b      	beq.n	800af24 <_printf_i+0x1ac>
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae92:	fb03 6711 	mls	r7, r3, r1, r6
 800ae96:	5dc7      	ldrb	r7, [r0, r7]
 800ae98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae9c:	4637      	mov	r7, r6
 800ae9e:	42bb      	cmp	r3, r7
 800aea0:	460e      	mov	r6, r1
 800aea2:	d9f4      	bls.n	800ae8e <_printf_i+0x116>
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d10b      	bne.n	800aec0 <_printf_i+0x148>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	07de      	lsls	r6, r3, #31
 800aeac:	d508      	bpl.n	800aec0 <_printf_i+0x148>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	6861      	ldr	r1, [r4, #4]
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	bfde      	ittt	le
 800aeb6:	2330      	movle	r3, #48	; 0x30
 800aeb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aec0:	1b52      	subs	r2, r2, r5
 800aec2:	6122      	str	r2, [r4, #16]
 800aec4:	f8cd a000 	str.w	sl, [sp]
 800aec8:	464b      	mov	r3, r9
 800aeca:	aa03      	add	r2, sp, #12
 800aecc:	4621      	mov	r1, r4
 800aece:	4640      	mov	r0, r8
 800aed0:	f7ff fee4 	bl	800ac9c <_printf_common>
 800aed4:	3001      	adds	r0, #1
 800aed6:	d14a      	bne.n	800af6e <_printf_i+0x1f6>
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	b004      	add	sp, #16
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	f043 0320 	orr.w	r3, r3, #32
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	4833      	ldr	r0, [pc, #204]	; (800afb8 <_printf_i+0x240>)
 800aeec:	2778      	movs	r7, #120	; 0x78
 800aeee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	6829      	ldr	r1, [r5, #0]
 800aef6:	061f      	lsls	r7, r3, #24
 800aef8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aefc:	d402      	bmi.n	800af04 <_printf_i+0x18c>
 800aefe:	065f      	lsls	r7, r3, #25
 800af00:	bf48      	it	mi
 800af02:	b2b6      	uxthmi	r6, r6
 800af04:	07df      	lsls	r7, r3, #31
 800af06:	bf48      	it	mi
 800af08:	f043 0320 	orrmi.w	r3, r3, #32
 800af0c:	6029      	str	r1, [r5, #0]
 800af0e:	bf48      	it	mi
 800af10:	6023      	strmi	r3, [r4, #0]
 800af12:	b91e      	cbnz	r6, 800af1c <_printf_i+0x1a4>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	f023 0320 	bic.w	r3, r3, #32
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	2310      	movs	r3, #16
 800af1e:	e7a7      	b.n	800ae70 <_printf_i+0xf8>
 800af20:	4824      	ldr	r0, [pc, #144]	; (800afb4 <_printf_i+0x23c>)
 800af22:	e7e4      	b.n	800aeee <_printf_i+0x176>
 800af24:	4615      	mov	r5, r2
 800af26:	e7bd      	b.n	800aea4 <_printf_i+0x12c>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	6826      	ldr	r6, [r4, #0]
 800af2c:	6961      	ldr	r1, [r4, #20]
 800af2e:	1d18      	adds	r0, r3, #4
 800af30:	6028      	str	r0, [r5, #0]
 800af32:	0635      	lsls	r5, r6, #24
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	d501      	bpl.n	800af3c <_printf_i+0x1c4>
 800af38:	6019      	str	r1, [r3, #0]
 800af3a:	e002      	b.n	800af42 <_printf_i+0x1ca>
 800af3c:	0670      	lsls	r0, r6, #25
 800af3e:	d5fb      	bpl.n	800af38 <_printf_i+0x1c0>
 800af40:	8019      	strh	r1, [r3, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	6123      	str	r3, [r4, #16]
 800af46:	4615      	mov	r5, r2
 800af48:	e7bc      	b.n	800aec4 <_printf_i+0x14c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	1d1a      	adds	r2, r3, #4
 800af4e:	602a      	str	r2, [r5, #0]
 800af50:	681d      	ldr	r5, [r3, #0]
 800af52:	6862      	ldr	r2, [r4, #4]
 800af54:	2100      	movs	r1, #0
 800af56:	4628      	mov	r0, r5
 800af58:	f7f5 f93a 	bl	80001d0 <memchr>
 800af5c:	b108      	cbz	r0, 800af62 <_printf_i+0x1ea>
 800af5e:	1b40      	subs	r0, r0, r5
 800af60:	6060      	str	r0, [r4, #4]
 800af62:	6863      	ldr	r3, [r4, #4]
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	2300      	movs	r3, #0
 800af68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6c:	e7aa      	b.n	800aec4 <_printf_i+0x14c>
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	462a      	mov	r2, r5
 800af72:	4649      	mov	r1, r9
 800af74:	4640      	mov	r0, r8
 800af76:	47d0      	blx	sl
 800af78:	3001      	adds	r0, #1
 800af7a:	d0ad      	beq.n	800aed8 <_printf_i+0x160>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	079b      	lsls	r3, r3, #30
 800af80:	d413      	bmi.n	800afaa <_printf_i+0x232>
 800af82:	68e0      	ldr	r0, [r4, #12]
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	4298      	cmp	r0, r3
 800af88:	bfb8      	it	lt
 800af8a:	4618      	movlt	r0, r3
 800af8c:	e7a6      	b.n	800aedc <_printf_i+0x164>
 800af8e:	2301      	movs	r3, #1
 800af90:	4632      	mov	r2, r6
 800af92:	4649      	mov	r1, r9
 800af94:	4640      	mov	r0, r8
 800af96:	47d0      	blx	sl
 800af98:	3001      	adds	r0, #1
 800af9a:	d09d      	beq.n	800aed8 <_printf_i+0x160>
 800af9c:	3501      	adds	r5, #1
 800af9e:	68e3      	ldr	r3, [r4, #12]
 800afa0:	9903      	ldr	r1, [sp, #12]
 800afa2:	1a5b      	subs	r3, r3, r1
 800afa4:	42ab      	cmp	r3, r5
 800afa6:	dcf2      	bgt.n	800af8e <_printf_i+0x216>
 800afa8:	e7eb      	b.n	800af82 <_printf_i+0x20a>
 800afaa:	2500      	movs	r5, #0
 800afac:	f104 0619 	add.w	r6, r4, #25
 800afb0:	e7f5      	b.n	800af9e <_printf_i+0x226>
 800afb2:	bf00      	nop
 800afb4:	0800cf92 	.word	0x0800cf92
 800afb8:	0800cfa3 	.word	0x0800cfa3

0800afbc <__sflush_r>:
 800afbc:	898a      	ldrh	r2, [r1, #12]
 800afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	4605      	mov	r5, r0
 800afc4:	0710      	lsls	r0, r2, #28
 800afc6:	460c      	mov	r4, r1
 800afc8:	d458      	bmi.n	800b07c <__sflush_r+0xc0>
 800afca:	684b      	ldr	r3, [r1, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc05      	bgt.n	800afdc <__sflush_r+0x20>
 800afd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dc02      	bgt.n	800afdc <__sflush_r+0x20>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afde:	2e00      	cmp	r6, #0
 800afe0:	d0f9      	beq.n	800afd6 <__sflush_r+0x1a>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afe8:	682f      	ldr	r7, [r5, #0]
 800afea:	6a21      	ldr	r1, [r4, #32]
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	d032      	beq.n	800b056 <__sflush_r+0x9a>
 800aff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	075a      	lsls	r2, r3, #29
 800aff6:	d505      	bpl.n	800b004 <__sflush_r+0x48>
 800aff8:	6863      	ldr	r3, [r4, #4]
 800affa:	1ac0      	subs	r0, r0, r3
 800affc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800affe:	b10b      	cbz	r3, 800b004 <__sflush_r+0x48>
 800b000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b002:	1ac0      	subs	r0, r0, r3
 800b004:	2300      	movs	r3, #0
 800b006:	4602      	mov	r2, r0
 800b008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b00a:	6a21      	ldr	r1, [r4, #32]
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b0      	blx	r6
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	d106      	bne.n	800b024 <__sflush_r+0x68>
 800b016:	6829      	ldr	r1, [r5, #0]
 800b018:	291d      	cmp	r1, #29
 800b01a:	d82b      	bhi.n	800b074 <__sflush_r+0xb8>
 800b01c:	4a29      	ldr	r2, [pc, #164]	; (800b0c4 <__sflush_r+0x108>)
 800b01e:	410a      	asrs	r2, r1
 800b020:	07d6      	lsls	r6, r2, #31
 800b022:	d427      	bmi.n	800b074 <__sflush_r+0xb8>
 800b024:	2200      	movs	r2, #0
 800b026:	6062      	str	r2, [r4, #4]
 800b028:	04d9      	lsls	r1, r3, #19
 800b02a:	6922      	ldr	r2, [r4, #16]
 800b02c:	6022      	str	r2, [r4, #0]
 800b02e:	d504      	bpl.n	800b03a <__sflush_r+0x7e>
 800b030:	1c42      	adds	r2, r0, #1
 800b032:	d101      	bne.n	800b038 <__sflush_r+0x7c>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	b903      	cbnz	r3, 800b03a <__sflush_r+0x7e>
 800b038:	6560      	str	r0, [r4, #84]	; 0x54
 800b03a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03c:	602f      	str	r7, [r5, #0]
 800b03e:	2900      	cmp	r1, #0
 800b040:	d0c9      	beq.n	800afd6 <__sflush_r+0x1a>
 800b042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b046:	4299      	cmp	r1, r3
 800b048:	d002      	beq.n	800b050 <__sflush_r+0x94>
 800b04a:	4628      	mov	r0, r5
 800b04c:	f7fe fdea 	bl	8009c24 <_free_r>
 800b050:	2000      	movs	r0, #0
 800b052:	6360      	str	r0, [r4, #52]	; 0x34
 800b054:	e7c0      	b.n	800afd8 <__sflush_r+0x1c>
 800b056:	2301      	movs	r3, #1
 800b058:	4628      	mov	r0, r5
 800b05a:	47b0      	blx	r6
 800b05c:	1c41      	adds	r1, r0, #1
 800b05e:	d1c8      	bne.n	800aff2 <__sflush_r+0x36>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0c5      	beq.n	800aff2 <__sflush_r+0x36>
 800b066:	2b1d      	cmp	r3, #29
 800b068:	d001      	beq.n	800b06e <__sflush_r+0xb2>
 800b06a:	2b16      	cmp	r3, #22
 800b06c:	d101      	bne.n	800b072 <__sflush_r+0xb6>
 800b06e:	602f      	str	r7, [r5, #0]
 800b070:	e7b1      	b.n	800afd6 <__sflush_r+0x1a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	e7ad      	b.n	800afd8 <__sflush_r+0x1c>
 800b07c:	690f      	ldr	r7, [r1, #16]
 800b07e:	2f00      	cmp	r7, #0
 800b080:	d0a9      	beq.n	800afd6 <__sflush_r+0x1a>
 800b082:	0793      	lsls	r3, r2, #30
 800b084:	680e      	ldr	r6, [r1, #0]
 800b086:	bf08      	it	eq
 800b088:	694b      	ldreq	r3, [r1, #20]
 800b08a:	600f      	str	r7, [r1, #0]
 800b08c:	bf18      	it	ne
 800b08e:	2300      	movne	r3, #0
 800b090:	eba6 0807 	sub.w	r8, r6, r7
 800b094:	608b      	str	r3, [r1, #8]
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	dd9c      	ble.n	800afd6 <__sflush_r+0x1a>
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0a0:	4643      	mov	r3, r8
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b0      	blx	r6
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dc06      	bgt.n	800b0ba <__sflush_r+0xfe>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e78e      	b.n	800afd8 <__sflush_r+0x1c>
 800b0ba:	4407      	add	r7, r0
 800b0bc:	eba8 0800 	sub.w	r8, r8, r0
 800b0c0:	e7e9      	b.n	800b096 <__sflush_r+0xda>
 800b0c2:	bf00      	nop
 800b0c4:	dfbffffe 	.word	0xdfbffffe

0800b0c8 <_fflush_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	690b      	ldr	r3, [r1, #16]
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	b913      	cbnz	r3, 800b0d8 <_fflush_r+0x10>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	b118      	cbz	r0, 800b0e2 <_fflush_r+0x1a>
 800b0da:	6a03      	ldr	r3, [r0, #32]
 800b0dc:	b90b      	cbnz	r3, 800b0e2 <_fflush_r+0x1a>
 800b0de:	f7fe fc57 	bl	8009990 <__sinit>
 800b0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0f3      	beq.n	800b0d2 <_fflush_r+0xa>
 800b0ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0ec:	07d0      	lsls	r0, r2, #31
 800b0ee:	d404      	bmi.n	800b0fa <_fflush_r+0x32>
 800b0f0:	0599      	lsls	r1, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_fflush_r+0x32>
 800b0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f6:	f7fe fd6e 	bl	8009bd6 <__retarget_lock_acquire_recursive>
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	f7ff ff5d 	bl	800afbc <__sflush_r>
 800b102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b104:	07da      	lsls	r2, r3, #31
 800b106:	4605      	mov	r5, r0
 800b108:	d4e4      	bmi.n	800b0d4 <_fflush_r+0xc>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	059b      	lsls	r3, r3, #22
 800b10e:	d4e1      	bmi.n	800b0d4 <_fflush_r+0xc>
 800b110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b112:	f7fe fd61 	bl	8009bd8 <__retarget_lock_release_recursive>
 800b116:	e7dd      	b.n	800b0d4 <_fflush_r+0xc>

0800b118 <fiprintf>:
 800b118:	b40e      	push	{r1, r2, r3}
 800b11a:	b503      	push	{r0, r1, lr}
 800b11c:	4601      	mov	r1, r0
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	4805      	ldr	r0, [pc, #20]	; (800b138 <fiprintf+0x20>)
 800b122:	f853 2b04 	ldr.w	r2, [r3], #4
 800b126:	6800      	ldr	r0, [r0, #0]
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	f001 f8cb 	bl	800c2c4 <_vfiprintf_r>
 800b12e:	b002      	add	sp, #8
 800b130:	f85d eb04 	ldr.w	lr, [sp], #4
 800b134:	b003      	add	sp, #12
 800b136:	4770      	bx	lr
 800b138:	2000007c 	.word	0x2000007c

0800b13c <memmove>:
 800b13c:	4288      	cmp	r0, r1
 800b13e:	b510      	push	{r4, lr}
 800b140:	eb01 0402 	add.w	r4, r1, r2
 800b144:	d902      	bls.n	800b14c <memmove+0x10>
 800b146:	4284      	cmp	r4, r0
 800b148:	4623      	mov	r3, r4
 800b14a:	d807      	bhi.n	800b15c <memmove+0x20>
 800b14c:	1e43      	subs	r3, r0, #1
 800b14e:	42a1      	cmp	r1, r4
 800b150:	d008      	beq.n	800b164 <memmove+0x28>
 800b152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b15a:	e7f8      	b.n	800b14e <memmove+0x12>
 800b15c:	4402      	add	r2, r0
 800b15e:	4601      	mov	r1, r0
 800b160:	428a      	cmp	r2, r1
 800b162:	d100      	bne.n	800b166 <memmove+0x2a>
 800b164:	bd10      	pop	{r4, pc}
 800b166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b16e:	e7f7      	b.n	800b160 <memmove+0x24>

0800b170 <strncmp>:
 800b170:	b510      	push	{r4, lr}
 800b172:	b16a      	cbz	r2, 800b190 <strncmp+0x20>
 800b174:	3901      	subs	r1, #1
 800b176:	1884      	adds	r4, r0, r2
 800b178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b17c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b180:	429a      	cmp	r2, r3
 800b182:	d103      	bne.n	800b18c <strncmp+0x1c>
 800b184:	42a0      	cmp	r0, r4
 800b186:	d001      	beq.n	800b18c <strncmp+0x1c>
 800b188:	2a00      	cmp	r2, #0
 800b18a:	d1f5      	bne.n	800b178 <strncmp+0x8>
 800b18c:	1ad0      	subs	r0, r2, r3
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	4610      	mov	r0, r2
 800b192:	e7fc      	b.n	800b18e <strncmp+0x1e>

0800b194 <memcpy>:
 800b194:	440a      	add	r2, r1
 800b196:	4291      	cmp	r1, r2
 800b198:	f100 33ff 	add.w	r3, r0, #4294967295
 800b19c:	d100      	bne.n	800b1a0 <memcpy+0xc>
 800b19e:	4770      	bx	lr
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1aa:	4291      	cmp	r1, r2
 800b1ac:	d1f9      	bne.n	800b1a2 <memcpy+0xe>
 800b1ae:	bd10      	pop	{r4, pc}

0800b1b0 <nan>:
 800b1b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b1b8 <nan+0x8>
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	00000000 	.word	0x00000000
 800b1bc:	7ff80000 	.word	0x7ff80000

0800b1c0 <abort>:
 800b1c0:	b508      	push	{r3, lr}
 800b1c2:	2006      	movs	r0, #6
 800b1c4:	f001 fa56 	bl	800c674 <raise>
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	f7f7 fa7f 	bl	80026cc <_exit>

0800b1ce <rshift>:
 800b1ce:	6903      	ldr	r3, [r0, #16]
 800b1d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1dc:	f100 0414 	add.w	r4, r0, #20
 800b1e0:	dd45      	ble.n	800b26e <rshift+0xa0>
 800b1e2:	f011 011f 	ands.w	r1, r1, #31
 800b1e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1ee:	d10c      	bne.n	800b20a <rshift+0x3c>
 800b1f0:	f100 0710 	add.w	r7, r0, #16
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	42b1      	cmp	r1, r6
 800b1f8:	d334      	bcc.n	800b264 <rshift+0x96>
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	1eea      	subs	r2, r5, #3
 800b200:	4296      	cmp	r6, r2
 800b202:	bf38      	it	cc
 800b204:	2300      	movcc	r3, #0
 800b206:	4423      	add	r3, r4
 800b208:	e015      	b.n	800b236 <rshift+0x68>
 800b20a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b20e:	f1c1 0820 	rsb	r8, r1, #32
 800b212:	40cf      	lsrs	r7, r1
 800b214:	f105 0e04 	add.w	lr, r5, #4
 800b218:	46a1      	mov	r9, r4
 800b21a:	4576      	cmp	r6, lr
 800b21c:	46f4      	mov	ip, lr
 800b21e:	d815      	bhi.n	800b24c <rshift+0x7e>
 800b220:	1a9a      	subs	r2, r3, r2
 800b222:	0092      	lsls	r2, r2, #2
 800b224:	3a04      	subs	r2, #4
 800b226:	3501      	adds	r5, #1
 800b228:	42ae      	cmp	r6, r5
 800b22a:	bf38      	it	cc
 800b22c:	2200      	movcc	r2, #0
 800b22e:	18a3      	adds	r3, r4, r2
 800b230:	50a7      	str	r7, [r4, r2]
 800b232:	b107      	cbz	r7, 800b236 <rshift+0x68>
 800b234:	3304      	adds	r3, #4
 800b236:	1b1a      	subs	r2, r3, r4
 800b238:	42a3      	cmp	r3, r4
 800b23a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b23e:	bf08      	it	eq
 800b240:	2300      	moveq	r3, #0
 800b242:	6102      	str	r2, [r0, #16]
 800b244:	bf08      	it	eq
 800b246:	6143      	streq	r3, [r0, #20]
 800b248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24c:	f8dc c000 	ldr.w	ip, [ip]
 800b250:	fa0c fc08 	lsl.w	ip, ip, r8
 800b254:	ea4c 0707 	orr.w	r7, ip, r7
 800b258:	f849 7b04 	str.w	r7, [r9], #4
 800b25c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b260:	40cf      	lsrs	r7, r1
 800b262:	e7da      	b.n	800b21a <rshift+0x4c>
 800b264:	f851 cb04 	ldr.w	ip, [r1], #4
 800b268:	f847 cf04 	str.w	ip, [r7, #4]!
 800b26c:	e7c3      	b.n	800b1f6 <rshift+0x28>
 800b26e:	4623      	mov	r3, r4
 800b270:	e7e1      	b.n	800b236 <rshift+0x68>

0800b272 <__hexdig_fun>:
 800b272:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b276:	2b09      	cmp	r3, #9
 800b278:	d802      	bhi.n	800b280 <__hexdig_fun+0xe>
 800b27a:	3820      	subs	r0, #32
 800b27c:	b2c0      	uxtb	r0, r0
 800b27e:	4770      	bx	lr
 800b280:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b284:	2b05      	cmp	r3, #5
 800b286:	d801      	bhi.n	800b28c <__hexdig_fun+0x1a>
 800b288:	3847      	subs	r0, #71	; 0x47
 800b28a:	e7f7      	b.n	800b27c <__hexdig_fun+0xa>
 800b28c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b290:	2b05      	cmp	r3, #5
 800b292:	d801      	bhi.n	800b298 <__hexdig_fun+0x26>
 800b294:	3827      	subs	r0, #39	; 0x27
 800b296:	e7f1      	b.n	800b27c <__hexdig_fun+0xa>
 800b298:	2000      	movs	r0, #0
 800b29a:	4770      	bx	lr

0800b29c <__gethex>:
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	4617      	mov	r7, r2
 800b2a2:	680a      	ldr	r2, [r1, #0]
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	f102 0b02 	add.w	fp, r2, #2
 800b2aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2b2:	4681      	mov	r9, r0
 800b2b4:	468a      	mov	sl, r1
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	32fe      	adds	r2, #254	; 0xfe
 800b2ba:	eb02 030b 	add.w	r3, r2, fp
 800b2be:	46d8      	mov	r8, fp
 800b2c0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b2c4:	9301      	str	r3, [sp, #4]
 800b2c6:	2830      	cmp	r0, #48	; 0x30
 800b2c8:	d0f7      	beq.n	800b2ba <__gethex+0x1e>
 800b2ca:	f7ff ffd2 	bl	800b272 <__hexdig_fun>
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d138      	bne.n	800b346 <__gethex+0xaa>
 800b2d4:	49a7      	ldr	r1, [pc, #668]	; (800b574 <__gethex+0x2d8>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4640      	mov	r0, r8
 800b2da:	f7ff ff49 	bl	800b170 <strncmp>
 800b2de:	4606      	mov	r6, r0
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d169      	bne.n	800b3b8 <__gethex+0x11c>
 800b2e4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b2e8:	465d      	mov	r5, fp
 800b2ea:	f7ff ffc2 	bl	800b272 <__hexdig_fun>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d064      	beq.n	800b3bc <__gethex+0x120>
 800b2f2:	465a      	mov	r2, fp
 800b2f4:	7810      	ldrb	r0, [r2, #0]
 800b2f6:	2830      	cmp	r0, #48	; 0x30
 800b2f8:	4690      	mov	r8, r2
 800b2fa:	f102 0201 	add.w	r2, r2, #1
 800b2fe:	d0f9      	beq.n	800b2f4 <__gethex+0x58>
 800b300:	f7ff ffb7 	bl	800b272 <__hexdig_fun>
 800b304:	2301      	movs	r3, #1
 800b306:	fab0 f480 	clz	r4, r0
 800b30a:	0964      	lsrs	r4, r4, #5
 800b30c:	465e      	mov	r6, fp
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	4642      	mov	r2, r8
 800b312:	4615      	mov	r5, r2
 800b314:	3201      	adds	r2, #1
 800b316:	7828      	ldrb	r0, [r5, #0]
 800b318:	f7ff ffab 	bl	800b272 <__hexdig_fun>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d1f8      	bne.n	800b312 <__gethex+0x76>
 800b320:	4994      	ldr	r1, [pc, #592]	; (800b574 <__gethex+0x2d8>)
 800b322:	2201      	movs	r2, #1
 800b324:	4628      	mov	r0, r5
 800b326:	f7ff ff23 	bl	800b170 <strncmp>
 800b32a:	b978      	cbnz	r0, 800b34c <__gethex+0xb0>
 800b32c:	b946      	cbnz	r6, 800b340 <__gethex+0xa4>
 800b32e:	1c6e      	adds	r6, r5, #1
 800b330:	4632      	mov	r2, r6
 800b332:	4615      	mov	r5, r2
 800b334:	3201      	adds	r2, #1
 800b336:	7828      	ldrb	r0, [r5, #0]
 800b338:	f7ff ff9b 	bl	800b272 <__hexdig_fun>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1f8      	bne.n	800b332 <__gethex+0x96>
 800b340:	1b73      	subs	r3, r6, r5
 800b342:	009e      	lsls	r6, r3, #2
 800b344:	e004      	b.n	800b350 <__gethex+0xb4>
 800b346:	2400      	movs	r4, #0
 800b348:	4626      	mov	r6, r4
 800b34a:	e7e1      	b.n	800b310 <__gethex+0x74>
 800b34c:	2e00      	cmp	r6, #0
 800b34e:	d1f7      	bne.n	800b340 <__gethex+0xa4>
 800b350:	782b      	ldrb	r3, [r5, #0]
 800b352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b356:	2b50      	cmp	r3, #80	; 0x50
 800b358:	d13d      	bne.n	800b3d6 <__gethex+0x13a>
 800b35a:	786b      	ldrb	r3, [r5, #1]
 800b35c:	2b2b      	cmp	r3, #43	; 0x2b
 800b35e:	d02f      	beq.n	800b3c0 <__gethex+0x124>
 800b360:	2b2d      	cmp	r3, #45	; 0x2d
 800b362:	d031      	beq.n	800b3c8 <__gethex+0x12c>
 800b364:	1c69      	adds	r1, r5, #1
 800b366:	f04f 0b00 	mov.w	fp, #0
 800b36a:	7808      	ldrb	r0, [r1, #0]
 800b36c:	f7ff ff81 	bl	800b272 <__hexdig_fun>
 800b370:	1e42      	subs	r2, r0, #1
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	2a18      	cmp	r2, #24
 800b376:	d82e      	bhi.n	800b3d6 <__gethex+0x13a>
 800b378:	f1a0 0210 	sub.w	r2, r0, #16
 800b37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b380:	f7ff ff77 	bl	800b272 <__hexdig_fun>
 800b384:	f100 3cff 	add.w	ip, r0, #4294967295
 800b388:	fa5f fc8c 	uxtb.w	ip, ip
 800b38c:	f1bc 0f18 	cmp.w	ip, #24
 800b390:	d91d      	bls.n	800b3ce <__gethex+0x132>
 800b392:	f1bb 0f00 	cmp.w	fp, #0
 800b396:	d000      	beq.n	800b39a <__gethex+0xfe>
 800b398:	4252      	negs	r2, r2
 800b39a:	4416      	add	r6, r2
 800b39c:	f8ca 1000 	str.w	r1, [sl]
 800b3a0:	b1dc      	cbz	r4, 800b3da <__gethex+0x13e>
 800b3a2:	9b01      	ldr	r3, [sp, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bf14      	ite	ne
 800b3a8:	f04f 0800 	movne.w	r8, #0
 800b3ac:	f04f 0806 	moveq.w	r8, #6
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	b005      	add	sp, #20
 800b3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b8:	4645      	mov	r5, r8
 800b3ba:	4626      	mov	r6, r4
 800b3bc:	2401      	movs	r4, #1
 800b3be:	e7c7      	b.n	800b350 <__gethex+0xb4>
 800b3c0:	f04f 0b00 	mov.w	fp, #0
 800b3c4:	1ca9      	adds	r1, r5, #2
 800b3c6:	e7d0      	b.n	800b36a <__gethex+0xce>
 800b3c8:	f04f 0b01 	mov.w	fp, #1
 800b3cc:	e7fa      	b.n	800b3c4 <__gethex+0x128>
 800b3ce:	230a      	movs	r3, #10
 800b3d0:	fb03 0002 	mla	r0, r3, r2, r0
 800b3d4:	e7d0      	b.n	800b378 <__gethex+0xdc>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	e7e0      	b.n	800b39c <__gethex+0x100>
 800b3da:	eba5 0308 	sub.w	r3, r5, r8
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	dc0a      	bgt.n	800b3fc <__gethex+0x160>
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	f000 fa5a 	bl	800b8a0 <_Balloc>
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	b940      	cbnz	r0, 800b402 <__gethex+0x166>
 800b3f0:	4b61      	ldr	r3, [pc, #388]	; (800b578 <__gethex+0x2dc>)
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	21e4      	movs	r1, #228	; 0xe4
 800b3f6:	4861      	ldr	r0, [pc, #388]	; (800b57c <__gethex+0x2e0>)
 800b3f8:	f7fe fbf6 	bl	8009be8 <__assert_func>
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	105b      	asrs	r3, r3, #1
 800b400:	e7ef      	b.n	800b3e2 <__gethex+0x146>
 800b402:	f100 0a14 	add.w	sl, r0, #20
 800b406:	2300      	movs	r3, #0
 800b408:	495a      	ldr	r1, [pc, #360]	; (800b574 <__gethex+0x2d8>)
 800b40a:	f8cd a004 	str.w	sl, [sp, #4]
 800b40e:	469b      	mov	fp, r3
 800b410:	45a8      	cmp	r8, r5
 800b412:	d342      	bcc.n	800b49a <__gethex+0x1fe>
 800b414:	9801      	ldr	r0, [sp, #4]
 800b416:	f840 bb04 	str.w	fp, [r0], #4
 800b41a:	eba0 000a 	sub.w	r0, r0, sl
 800b41e:	1080      	asrs	r0, r0, #2
 800b420:	6120      	str	r0, [r4, #16]
 800b422:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b426:	4658      	mov	r0, fp
 800b428:	f000 fb2c 	bl	800ba84 <__hi0bits>
 800b42c:	683d      	ldr	r5, [r7, #0]
 800b42e:	eba8 0000 	sub.w	r0, r8, r0
 800b432:	42a8      	cmp	r0, r5
 800b434:	dd59      	ble.n	800b4ea <__gethex+0x24e>
 800b436:	eba0 0805 	sub.w	r8, r0, r5
 800b43a:	4641      	mov	r1, r8
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 febb 	bl	800c1b8 <__any_on>
 800b442:	4683      	mov	fp, r0
 800b444:	b1b8      	cbz	r0, 800b476 <__gethex+0x1da>
 800b446:	f108 33ff 	add.w	r3, r8, #4294967295
 800b44a:	1159      	asrs	r1, r3, #5
 800b44c:	f003 021f 	and.w	r2, r3, #31
 800b450:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b454:	f04f 0b01 	mov.w	fp, #1
 800b458:	fa0b f202 	lsl.w	r2, fp, r2
 800b45c:	420a      	tst	r2, r1
 800b45e:	d00a      	beq.n	800b476 <__gethex+0x1da>
 800b460:	455b      	cmp	r3, fp
 800b462:	dd06      	ble.n	800b472 <__gethex+0x1d6>
 800b464:	f1a8 0102 	sub.w	r1, r8, #2
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 fea5 	bl	800c1b8 <__any_on>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d138      	bne.n	800b4e4 <__gethex+0x248>
 800b472:	f04f 0b02 	mov.w	fp, #2
 800b476:	4641      	mov	r1, r8
 800b478:	4620      	mov	r0, r4
 800b47a:	f7ff fea8 	bl	800b1ce <rshift>
 800b47e:	4446      	add	r6, r8
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	42b3      	cmp	r3, r6
 800b484:	da41      	bge.n	800b50a <__gethex+0x26e>
 800b486:	4621      	mov	r1, r4
 800b488:	4648      	mov	r0, r9
 800b48a:	f000 fa49 	bl	800b920 <_Bfree>
 800b48e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b490:	2300      	movs	r3, #0
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b498:	e78a      	b.n	800b3b0 <__gethex+0x114>
 800b49a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b49e:	2a2e      	cmp	r2, #46	; 0x2e
 800b4a0:	d014      	beq.n	800b4cc <__gethex+0x230>
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	d106      	bne.n	800b4b4 <__gethex+0x218>
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	f843 bb04 	str.w	fp, [r3], #4
 800b4ac:	f04f 0b00 	mov.w	fp, #0
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	465b      	mov	r3, fp
 800b4b4:	7828      	ldrb	r0, [r5, #0]
 800b4b6:	9303      	str	r3, [sp, #12]
 800b4b8:	f7ff fedb 	bl	800b272 <__hexdig_fun>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	f000 000f 	and.w	r0, r0, #15
 800b4c2:	4098      	lsls	r0, r3
 800b4c4:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	e7a1      	b.n	800b410 <__gethex+0x174>
 800b4cc:	45a8      	cmp	r8, r5
 800b4ce:	d8e8      	bhi.n	800b4a2 <__gethex+0x206>
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	f7ff fe4b 	bl	800b170 <strncmp>
 800b4da:	4926      	ldr	r1, [pc, #152]	; (800b574 <__gethex+0x2d8>)
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d1df      	bne.n	800b4a2 <__gethex+0x206>
 800b4e2:	e795      	b.n	800b410 <__gethex+0x174>
 800b4e4:	f04f 0b03 	mov.w	fp, #3
 800b4e8:	e7c5      	b.n	800b476 <__gethex+0x1da>
 800b4ea:	da0b      	bge.n	800b504 <__gethex+0x268>
 800b4ec:	eba5 0800 	sub.w	r8, r5, r0
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4642      	mov	r2, r8
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	f000 fc2d 	bl	800bd54 <__lshift>
 800b4fa:	eba6 0608 	sub.w	r6, r6, r8
 800b4fe:	4604      	mov	r4, r0
 800b500:	f100 0a14 	add.w	sl, r0, #20
 800b504:	f04f 0b00 	mov.w	fp, #0
 800b508:	e7ba      	b.n	800b480 <__gethex+0x1e4>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	42b3      	cmp	r3, r6
 800b50e:	dd73      	ble.n	800b5f8 <__gethex+0x35c>
 800b510:	1b9e      	subs	r6, r3, r6
 800b512:	42b5      	cmp	r5, r6
 800b514:	dc34      	bgt.n	800b580 <__gethex+0x2e4>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d023      	beq.n	800b564 <__gethex+0x2c8>
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d025      	beq.n	800b56c <__gethex+0x2d0>
 800b520:	2b01      	cmp	r3, #1
 800b522:	d115      	bne.n	800b550 <__gethex+0x2b4>
 800b524:	42b5      	cmp	r5, r6
 800b526:	d113      	bne.n	800b550 <__gethex+0x2b4>
 800b528:	2d01      	cmp	r5, #1
 800b52a:	d10b      	bne.n	800b544 <__gethex+0x2a8>
 800b52c:	9a02      	ldr	r2, [sp, #8]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	2301      	movs	r3, #1
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	f8ca 3000 	str.w	r3, [sl]
 800b53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b53c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b540:	601c      	str	r4, [r3, #0]
 800b542:	e735      	b.n	800b3b0 <__gethex+0x114>
 800b544:	1e69      	subs	r1, r5, #1
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fe36 	bl	800c1b8 <__any_on>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1ed      	bne.n	800b52c <__gethex+0x290>
 800b550:	4621      	mov	r1, r4
 800b552:	4648      	mov	r0, r9
 800b554:	f000 f9e4 	bl	800b920 <_Bfree>
 800b558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b55a:	2300      	movs	r3, #0
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b562:	e725      	b.n	800b3b0 <__gethex+0x114>
 800b564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f2      	bne.n	800b550 <__gethex+0x2b4>
 800b56a:	e7df      	b.n	800b52c <__gethex+0x290>
 800b56c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1dc      	bne.n	800b52c <__gethex+0x290>
 800b572:	e7ed      	b.n	800b550 <__gethex+0x2b4>
 800b574:	0800ce20 	.word	0x0800ce20
 800b578:	0800cfbc 	.word	0x0800cfbc
 800b57c:	0800cfcd 	.word	0x0800cfcd
 800b580:	f106 38ff 	add.w	r8, r6, #4294967295
 800b584:	f1bb 0f00 	cmp.w	fp, #0
 800b588:	d133      	bne.n	800b5f2 <__gethex+0x356>
 800b58a:	f1b8 0f00 	cmp.w	r8, #0
 800b58e:	d004      	beq.n	800b59a <__gethex+0x2fe>
 800b590:	4641      	mov	r1, r8
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fe10 	bl	800c1b8 <__any_on>
 800b598:	4683      	mov	fp, r0
 800b59a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b5a4:	f008 081f 	and.w	r8, r8, #31
 800b5a8:	fa03 f308 	lsl.w	r3, r3, r8
 800b5ac:	4213      	tst	r3, r2
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	bf18      	it	ne
 800b5b4:	f04b 0b02 	orrne.w	fp, fp, #2
 800b5b8:	1bad      	subs	r5, r5, r6
 800b5ba:	f7ff fe08 	bl	800b1ce <rshift>
 800b5be:	687e      	ldr	r6, [r7, #4]
 800b5c0:	f04f 0802 	mov.w	r8, #2
 800b5c4:	f1bb 0f00 	cmp.w	fp, #0
 800b5c8:	d04a      	beq.n	800b660 <__gethex+0x3c4>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d016      	beq.n	800b5fe <__gethex+0x362>
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d018      	beq.n	800b606 <__gethex+0x36a>
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d109      	bne.n	800b5ec <__gethex+0x350>
 800b5d8:	f01b 0f02 	tst.w	fp, #2
 800b5dc:	d006      	beq.n	800b5ec <__gethex+0x350>
 800b5de:	f8da 3000 	ldr.w	r3, [sl]
 800b5e2:	ea4b 0b03 	orr.w	fp, fp, r3
 800b5e6:	f01b 0f01 	tst.w	fp, #1
 800b5ea:	d10f      	bne.n	800b60c <__gethex+0x370>
 800b5ec:	f048 0810 	orr.w	r8, r8, #16
 800b5f0:	e036      	b.n	800b660 <__gethex+0x3c4>
 800b5f2:	f04f 0b01 	mov.w	fp, #1
 800b5f6:	e7d0      	b.n	800b59a <__gethex+0x2fe>
 800b5f8:	f04f 0801 	mov.w	r8, #1
 800b5fc:	e7e2      	b.n	800b5c4 <__gethex+0x328>
 800b5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b600:	f1c3 0301 	rsb	r3, r3, #1
 800b604:	930f      	str	r3, [sp, #60]	; 0x3c
 800b606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d0ef      	beq.n	800b5ec <__gethex+0x350>
 800b60c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b610:	f104 0214 	add.w	r2, r4, #20
 800b614:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b61e:	2300      	movs	r3, #0
 800b620:	4694      	mov	ip, r2
 800b622:	f852 1b04 	ldr.w	r1, [r2], #4
 800b626:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b62a:	d01e      	beq.n	800b66a <__gethex+0x3ce>
 800b62c:	3101      	adds	r1, #1
 800b62e:	f8cc 1000 	str.w	r1, [ip]
 800b632:	f1b8 0f02 	cmp.w	r8, #2
 800b636:	f104 0214 	add.w	r2, r4, #20
 800b63a:	d13d      	bne.n	800b6b8 <__gethex+0x41c>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	3b01      	subs	r3, #1
 800b640:	42ab      	cmp	r3, r5
 800b642:	d10b      	bne.n	800b65c <__gethex+0x3c0>
 800b644:	1169      	asrs	r1, r5, #5
 800b646:	2301      	movs	r3, #1
 800b648:	f005 051f 	and.w	r5, r5, #31
 800b64c:	fa03 f505 	lsl.w	r5, r3, r5
 800b650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b654:	421d      	tst	r5, r3
 800b656:	bf18      	it	ne
 800b658:	f04f 0801 	movne.w	r8, #1
 800b65c:	f048 0820 	orr.w	r8, r8, #32
 800b660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b662:	601c      	str	r4, [r3, #0]
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	601e      	str	r6, [r3, #0]
 800b668:	e6a2      	b.n	800b3b0 <__gethex+0x114>
 800b66a:	4290      	cmp	r0, r2
 800b66c:	f842 3c04 	str.w	r3, [r2, #-4]
 800b670:	d8d6      	bhi.n	800b620 <__gethex+0x384>
 800b672:	68a2      	ldr	r2, [r4, #8]
 800b674:	4593      	cmp	fp, r2
 800b676:	db17      	blt.n	800b6a8 <__gethex+0x40c>
 800b678:	6861      	ldr	r1, [r4, #4]
 800b67a:	4648      	mov	r0, r9
 800b67c:	3101      	adds	r1, #1
 800b67e:	f000 f90f 	bl	800b8a0 <_Balloc>
 800b682:	4682      	mov	sl, r0
 800b684:	b918      	cbnz	r0, 800b68e <__gethex+0x3f2>
 800b686:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <__gethex+0x458>)
 800b688:	4602      	mov	r2, r0
 800b68a:	2184      	movs	r1, #132	; 0x84
 800b68c:	e6b3      	b.n	800b3f6 <__gethex+0x15a>
 800b68e:	6922      	ldr	r2, [r4, #16]
 800b690:	3202      	adds	r2, #2
 800b692:	f104 010c 	add.w	r1, r4, #12
 800b696:	0092      	lsls	r2, r2, #2
 800b698:	300c      	adds	r0, #12
 800b69a:	f7ff fd7b 	bl	800b194 <memcpy>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4648      	mov	r0, r9
 800b6a2:	f000 f93d 	bl	800b920 <_Bfree>
 800b6a6:	4654      	mov	r4, sl
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	1c51      	adds	r1, r2, #1
 800b6ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b6b0:	6121      	str	r1, [r4, #16]
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6151      	str	r1, [r2, #20]
 800b6b6:	e7bc      	b.n	800b632 <__gethex+0x396>
 800b6b8:	6921      	ldr	r1, [r4, #16]
 800b6ba:	4559      	cmp	r1, fp
 800b6bc:	dd0b      	ble.n	800b6d6 <__gethex+0x43a>
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f7ff fd84 	bl	800b1ce <rshift>
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	3601      	adds	r6, #1
 800b6ca:	42b3      	cmp	r3, r6
 800b6cc:	f6ff aedb 	blt.w	800b486 <__gethex+0x1ea>
 800b6d0:	f04f 0801 	mov.w	r8, #1
 800b6d4:	e7c2      	b.n	800b65c <__gethex+0x3c0>
 800b6d6:	f015 051f 	ands.w	r5, r5, #31
 800b6da:	d0f9      	beq.n	800b6d0 <__gethex+0x434>
 800b6dc:	9b01      	ldr	r3, [sp, #4]
 800b6de:	441a      	add	r2, r3
 800b6e0:	f1c5 0520 	rsb	r5, r5, #32
 800b6e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b6e8:	f000 f9cc 	bl	800ba84 <__hi0bits>
 800b6ec:	42a8      	cmp	r0, r5
 800b6ee:	dbe6      	blt.n	800b6be <__gethex+0x422>
 800b6f0:	e7ee      	b.n	800b6d0 <__gethex+0x434>
 800b6f2:	bf00      	nop
 800b6f4:	0800cfbc 	.word	0x0800cfbc

0800b6f8 <L_shift>:
 800b6f8:	f1c2 0208 	rsb	r2, r2, #8
 800b6fc:	0092      	lsls	r2, r2, #2
 800b6fe:	b570      	push	{r4, r5, r6, lr}
 800b700:	f1c2 0620 	rsb	r6, r2, #32
 800b704:	6843      	ldr	r3, [r0, #4]
 800b706:	6804      	ldr	r4, [r0, #0]
 800b708:	fa03 f506 	lsl.w	r5, r3, r6
 800b70c:	432c      	orrs	r4, r5
 800b70e:	40d3      	lsrs	r3, r2
 800b710:	6004      	str	r4, [r0, #0]
 800b712:	f840 3f04 	str.w	r3, [r0, #4]!
 800b716:	4288      	cmp	r0, r1
 800b718:	d3f4      	bcc.n	800b704 <L_shift+0xc>
 800b71a:	bd70      	pop	{r4, r5, r6, pc}

0800b71c <__match>:
 800b71c:	b530      	push	{r4, r5, lr}
 800b71e:	6803      	ldr	r3, [r0, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b726:	b914      	cbnz	r4, 800b72e <__match+0x12>
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	2001      	movs	r0, #1
 800b72c:	bd30      	pop	{r4, r5, pc}
 800b72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b732:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b736:	2d19      	cmp	r5, #25
 800b738:	bf98      	it	ls
 800b73a:	3220      	addls	r2, #32
 800b73c:	42a2      	cmp	r2, r4
 800b73e:	d0f0      	beq.n	800b722 <__match+0x6>
 800b740:	2000      	movs	r0, #0
 800b742:	e7f3      	b.n	800b72c <__match+0x10>

0800b744 <__hexnan>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	680b      	ldr	r3, [r1, #0]
 800b74a:	6801      	ldr	r1, [r0, #0]
 800b74c:	115e      	asrs	r6, r3, #5
 800b74e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b752:	f013 031f 	ands.w	r3, r3, #31
 800b756:	b087      	sub	sp, #28
 800b758:	bf18      	it	ne
 800b75a:	3604      	addne	r6, #4
 800b75c:	2500      	movs	r5, #0
 800b75e:	1f37      	subs	r7, r6, #4
 800b760:	4682      	mov	sl, r0
 800b762:	4690      	mov	r8, r2
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	f846 5c04 	str.w	r5, [r6, #-4]
 800b76a:	46b9      	mov	r9, r7
 800b76c:	463c      	mov	r4, r7
 800b76e:	9502      	str	r5, [sp, #8]
 800b770:	46ab      	mov	fp, r5
 800b772:	784a      	ldrb	r2, [r1, #1]
 800b774:	1c4b      	adds	r3, r1, #1
 800b776:	9303      	str	r3, [sp, #12]
 800b778:	b342      	cbz	r2, 800b7cc <__hexnan+0x88>
 800b77a:	4610      	mov	r0, r2
 800b77c:	9105      	str	r1, [sp, #20]
 800b77e:	9204      	str	r2, [sp, #16]
 800b780:	f7ff fd77 	bl	800b272 <__hexdig_fun>
 800b784:	2800      	cmp	r0, #0
 800b786:	d14f      	bne.n	800b828 <__hexnan+0xe4>
 800b788:	9a04      	ldr	r2, [sp, #16]
 800b78a:	9905      	ldr	r1, [sp, #20]
 800b78c:	2a20      	cmp	r2, #32
 800b78e:	d818      	bhi.n	800b7c2 <__hexnan+0x7e>
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	459b      	cmp	fp, r3
 800b794:	dd13      	ble.n	800b7be <__hexnan+0x7a>
 800b796:	454c      	cmp	r4, r9
 800b798:	d206      	bcs.n	800b7a8 <__hexnan+0x64>
 800b79a:	2d07      	cmp	r5, #7
 800b79c:	dc04      	bgt.n	800b7a8 <__hexnan+0x64>
 800b79e:	462a      	mov	r2, r5
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff ffa8 	bl	800b6f8 <L_shift>
 800b7a8:	4544      	cmp	r4, r8
 800b7aa:	d950      	bls.n	800b84e <__hexnan+0x10a>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f1a4 0904 	sub.w	r9, r4, #4
 800b7b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7b6:	f8cd b008 	str.w	fp, [sp, #8]
 800b7ba:	464c      	mov	r4, r9
 800b7bc:	461d      	mov	r5, r3
 800b7be:	9903      	ldr	r1, [sp, #12]
 800b7c0:	e7d7      	b.n	800b772 <__hexnan+0x2e>
 800b7c2:	2a29      	cmp	r2, #41	; 0x29
 800b7c4:	d155      	bne.n	800b872 <__hexnan+0x12e>
 800b7c6:	3102      	adds	r1, #2
 800b7c8:	f8ca 1000 	str.w	r1, [sl]
 800b7cc:	f1bb 0f00 	cmp.w	fp, #0
 800b7d0:	d04f      	beq.n	800b872 <__hexnan+0x12e>
 800b7d2:	454c      	cmp	r4, r9
 800b7d4:	d206      	bcs.n	800b7e4 <__hexnan+0xa0>
 800b7d6:	2d07      	cmp	r5, #7
 800b7d8:	dc04      	bgt.n	800b7e4 <__hexnan+0xa0>
 800b7da:	462a      	mov	r2, r5
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7ff ff8a 	bl	800b6f8 <L_shift>
 800b7e4:	4544      	cmp	r4, r8
 800b7e6:	d934      	bls.n	800b852 <__hexnan+0x10e>
 800b7e8:	f1a8 0204 	sub.w	r2, r8, #4
 800b7ec:	4623      	mov	r3, r4
 800b7ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7f6:	429f      	cmp	r7, r3
 800b7f8:	d2f9      	bcs.n	800b7ee <__hexnan+0xaa>
 800b7fa:	1b3b      	subs	r3, r7, r4
 800b7fc:	f023 0303 	bic.w	r3, r3, #3
 800b800:	3304      	adds	r3, #4
 800b802:	3e03      	subs	r6, #3
 800b804:	3401      	adds	r4, #1
 800b806:	42a6      	cmp	r6, r4
 800b808:	bf38      	it	cc
 800b80a:	2304      	movcc	r3, #4
 800b80c:	4443      	add	r3, r8
 800b80e:	2200      	movs	r2, #0
 800b810:	f843 2b04 	str.w	r2, [r3], #4
 800b814:	429f      	cmp	r7, r3
 800b816:	d2fb      	bcs.n	800b810 <__hexnan+0xcc>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	b91b      	cbnz	r3, 800b824 <__hexnan+0xe0>
 800b81c:	4547      	cmp	r7, r8
 800b81e:	d126      	bne.n	800b86e <__hexnan+0x12a>
 800b820:	2301      	movs	r3, #1
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	2005      	movs	r0, #5
 800b826:	e025      	b.n	800b874 <__hexnan+0x130>
 800b828:	3501      	adds	r5, #1
 800b82a:	2d08      	cmp	r5, #8
 800b82c:	f10b 0b01 	add.w	fp, fp, #1
 800b830:	dd06      	ble.n	800b840 <__hexnan+0xfc>
 800b832:	4544      	cmp	r4, r8
 800b834:	d9c3      	bls.n	800b7be <__hexnan+0x7a>
 800b836:	2300      	movs	r3, #0
 800b838:	f844 3c04 	str.w	r3, [r4, #-4]
 800b83c:	2501      	movs	r5, #1
 800b83e:	3c04      	subs	r4, #4
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	f000 000f 	and.w	r0, r0, #15
 800b846:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b84a:	6020      	str	r0, [r4, #0]
 800b84c:	e7b7      	b.n	800b7be <__hexnan+0x7a>
 800b84e:	2508      	movs	r5, #8
 800b850:	e7b5      	b.n	800b7be <__hexnan+0x7a>
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0df      	beq.n	800b818 <__hexnan+0xd4>
 800b858:	f1c3 0320 	rsb	r3, r3, #32
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	40da      	lsrs	r2, r3
 800b862:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b866:	4013      	ands	r3, r2
 800b868:	f846 3c04 	str.w	r3, [r6, #-4]
 800b86c:	e7d4      	b.n	800b818 <__hexnan+0xd4>
 800b86e:	3f04      	subs	r7, #4
 800b870:	e7d2      	b.n	800b818 <__hexnan+0xd4>
 800b872:	2004      	movs	r0, #4
 800b874:	b007      	add	sp, #28
 800b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b87a <__ascii_mbtowc>:
 800b87a:	b082      	sub	sp, #8
 800b87c:	b901      	cbnz	r1, 800b880 <__ascii_mbtowc+0x6>
 800b87e:	a901      	add	r1, sp, #4
 800b880:	b142      	cbz	r2, 800b894 <__ascii_mbtowc+0x1a>
 800b882:	b14b      	cbz	r3, 800b898 <__ascii_mbtowc+0x1e>
 800b884:	7813      	ldrb	r3, [r2, #0]
 800b886:	600b      	str	r3, [r1, #0]
 800b888:	7812      	ldrb	r2, [r2, #0]
 800b88a:	1e10      	subs	r0, r2, #0
 800b88c:	bf18      	it	ne
 800b88e:	2001      	movne	r0, #1
 800b890:	b002      	add	sp, #8
 800b892:	4770      	bx	lr
 800b894:	4610      	mov	r0, r2
 800b896:	e7fb      	b.n	800b890 <__ascii_mbtowc+0x16>
 800b898:	f06f 0001 	mvn.w	r0, #1
 800b89c:	e7f8      	b.n	800b890 <__ascii_mbtowc+0x16>
	...

0800b8a0 <_Balloc>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	69c6      	ldr	r6, [r0, #28]
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	b976      	cbnz	r6, 800b8c8 <_Balloc+0x28>
 800b8aa:	2010      	movs	r0, #16
 800b8ac:	f7fd fcda 	bl	8009264 <malloc>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	61e0      	str	r0, [r4, #28]
 800b8b4:	b920      	cbnz	r0, 800b8c0 <_Balloc+0x20>
 800b8b6:	4b18      	ldr	r3, [pc, #96]	; (800b918 <_Balloc+0x78>)
 800b8b8:	4818      	ldr	r0, [pc, #96]	; (800b91c <_Balloc+0x7c>)
 800b8ba:	216b      	movs	r1, #107	; 0x6b
 800b8bc:	f7fe f994 	bl	8009be8 <__assert_func>
 800b8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c4:	6006      	str	r6, [r0, #0]
 800b8c6:	60c6      	str	r6, [r0, #12]
 800b8c8:	69e6      	ldr	r6, [r4, #28]
 800b8ca:	68f3      	ldr	r3, [r6, #12]
 800b8cc:	b183      	cbz	r3, 800b8f0 <_Balloc+0x50>
 800b8ce:	69e3      	ldr	r3, [r4, #28]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8d6:	b9b8      	cbnz	r0, 800b908 <_Balloc+0x68>
 800b8d8:	2101      	movs	r1, #1
 800b8da:	fa01 f605 	lsl.w	r6, r1, r5
 800b8de:	1d72      	adds	r2, r6, #5
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fee2 	bl	800c6ac <_calloc_r>
 800b8e8:	b160      	cbz	r0, 800b904 <_Balloc+0x64>
 800b8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ee:	e00e      	b.n	800b90e <_Balloc+0x6e>
 800b8f0:	2221      	movs	r2, #33	; 0x21
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fed9 	bl	800c6ac <_calloc_r>
 800b8fa:	69e3      	ldr	r3, [r4, #28]
 800b8fc:	60f0      	str	r0, [r6, #12]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e4      	bne.n	800b8ce <_Balloc+0x2e>
 800b904:	2000      	movs	r0, #0
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	6802      	ldr	r2, [r0, #0]
 800b90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b90e:	2300      	movs	r3, #0
 800b910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b914:	e7f7      	b.n	800b906 <_Balloc+0x66>
 800b916:	bf00      	nop
 800b918:	0800cd70 	.word	0x0800cd70
 800b91c:	0800d02d 	.word	0x0800d02d

0800b920 <_Bfree>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	69c6      	ldr	r6, [r0, #28]
 800b924:	4605      	mov	r5, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b976      	cbnz	r6, 800b948 <_Bfree+0x28>
 800b92a:	2010      	movs	r0, #16
 800b92c:	f7fd fc9a 	bl	8009264 <malloc>
 800b930:	4602      	mov	r2, r0
 800b932:	61e8      	str	r0, [r5, #28]
 800b934:	b920      	cbnz	r0, 800b940 <_Bfree+0x20>
 800b936:	4b09      	ldr	r3, [pc, #36]	; (800b95c <_Bfree+0x3c>)
 800b938:	4809      	ldr	r0, [pc, #36]	; (800b960 <_Bfree+0x40>)
 800b93a:	218f      	movs	r1, #143	; 0x8f
 800b93c:	f7fe f954 	bl	8009be8 <__assert_func>
 800b940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b944:	6006      	str	r6, [r0, #0]
 800b946:	60c6      	str	r6, [r0, #12]
 800b948:	b13c      	cbz	r4, 800b95a <_Bfree+0x3a>
 800b94a:	69eb      	ldr	r3, [r5, #28]
 800b94c:	6862      	ldr	r2, [r4, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b954:	6021      	str	r1, [r4, #0]
 800b956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	0800cd70 	.word	0x0800cd70
 800b960:	0800d02d 	.word	0x0800d02d

0800b964 <__multadd>:
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	690d      	ldr	r5, [r1, #16]
 800b96a:	4607      	mov	r7, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	461e      	mov	r6, r3
 800b970:	f101 0c14 	add.w	ip, r1, #20
 800b974:	2000      	movs	r0, #0
 800b976:	f8dc 3000 	ldr.w	r3, [ip]
 800b97a:	b299      	uxth	r1, r3
 800b97c:	fb02 6101 	mla	r1, r2, r1, r6
 800b980:	0c1e      	lsrs	r6, r3, #16
 800b982:	0c0b      	lsrs	r3, r1, #16
 800b984:	fb02 3306 	mla	r3, r2, r6, r3
 800b988:	b289      	uxth	r1, r1
 800b98a:	3001      	adds	r0, #1
 800b98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b990:	4285      	cmp	r5, r0
 800b992:	f84c 1b04 	str.w	r1, [ip], #4
 800b996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b99a:	dcec      	bgt.n	800b976 <__multadd+0x12>
 800b99c:	b30e      	cbz	r6, 800b9e2 <__multadd+0x7e>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	dc19      	bgt.n	800b9d8 <__multadd+0x74>
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	3101      	adds	r1, #1
 800b9aa:	f7ff ff79 	bl	800b8a0 <_Balloc>
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <__multadd+0x5a>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <__multadd+0x84>)
 800b9b6:	480d      	ldr	r0, [pc, #52]	; (800b9ec <__multadd+0x88>)
 800b9b8:	21ba      	movs	r1, #186	; 0xba
 800b9ba:	f7fe f915 	bl	8009be8 <__assert_func>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	3202      	adds	r2, #2
 800b9c2:	f104 010c 	add.w	r1, r4, #12
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7ff fbe3 	bl	800b194 <memcpy>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa5 	bl	800b920 <_Bfree>
 800b9d6:	4644      	mov	r4, r8
 800b9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9dc:	3501      	adds	r5, #1
 800b9de:	615e      	str	r6, [r3, #20]
 800b9e0:	6125      	str	r5, [r4, #16]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	0800cfbc 	.word	0x0800cfbc
 800b9ec:	0800d02d 	.word	0x0800d02d

0800b9f0 <__s2b>:
 800b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	4615      	mov	r5, r2
 800b9f8:	461f      	mov	r7, r3
 800b9fa:	2209      	movs	r2, #9
 800b9fc:	3308      	adds	r3, #8
 800b9fe:	4606      	mov	r6, r0
 800ba00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba04:	2100      	movs	r1, #0
 800ba06:	2201      	movs	r2, #1
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	db09      	blt.n	800ba20 <__s2b+0x30>
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff ff47 	bl	800b8a0 <_Balloc>
 800ba12:	b940      	cbnz	r0, 800ba26 <__s2b+0x36>
 800ba14:	4602      	mov	r2, r0
 800ba16:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <__s2b+0x8c>)
 800ba18:	4819      	ldr	r0, [pc, #100]	; (800ba80 <__s2b+0x90>)
 800ba1a:	21d3      	movs	r1, #211	; 0xd3
 800ba1c:	f7fe f8e4 	bl	8009be8 <__assert_func>
 800ba20:	0052      	lsls	r2, r2, #1
 800ba22:	3101      	adds	r1, #1
 800ba24:	e7f0      	b.n	800ba08 <__s2b+0x18>
 800ba26:	9b08      	ldr	r3, [sp, #32]
 800ba28:	6143      	str	r3, [r0, #20]
 800ba2a:	2d09      	cmp	r5, #9
 800ba2c:	f04f 0301 	mov.w	r3, #1
 800ba30:	6103      	str	r3, [r0, #16]
 800ba32:	dd16      	ble.n	800ba62 <__s2b+0x72>
 800ba34:	f104 0909 	add.w	r9, r4, #9
 800ba38:	46c8      	mov	r8, r9
 800ba3a:	442c      	add	r4, r5
 800ba3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba40:	4601      	mov	r1, r0
 800ba42:	3b30      	subs	r3, #48	; 0x30
 800ba44:	220a      	movs	r2, #10
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ff8c 	bl	800b964 <__multadd>
 800ba4c:	45a0      	cmp	r8, r4
 800ba4e:	d1f5      	bne.n	800ba3c <__s2b+0x4c>
 800ba50:	f1a5 0408 	sub.w	r4, r5, #8
 800ba54:	444c      	add	r4, r9
 800ba56:	1b2d      	subs	r5, r5, r4
 800ba58:	1963      	adds	r3, r4, r5
 800ba5a:	42bb      	cmp	r3, r7
 800ba5c:	db04      	blt.n	800ba68 <__s2b+0x78>
 800ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba62:	340a      	adds	r4, #10
 800ba64:	2509      	movs	r5, #9
 800ba66:	e7f6      	b.n	800ba56 <__s2b+0x66>
 800ba68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	3b30      	subs	r3, #48	; 0x30
 800ba70:	220a      	movs	r2, #10
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ff76 	bl	800b964 <__multadd>
 800ba78:	e7ee      	b.n	800ba58 <__s2b+0x68>
 800ba7a:	bf00      	nop
 800ba7c:	0800cfbc 	.word	0x0800cfbc
 800ba80:	0800d02d 	.word	0x0800d02d

0800ba84 <__hi0bits>:
 800ba84:	0c03      	lsrs	r3, r0, #16
 800ba86:	041b      	lsls	r3, r3, #16
 800ba88:	b9d3      	cbnz	r3, 800bac0 <__hi0bits+0x3c>
 800ba8a:	0400      	lsls	r0, r0, #16
 800ba8c:	2310      	movs	r3, #16
 800ba8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba92:	bf04      	itt	eq
 800ba94:	0200      	lsleq	r0, r0, #8
 800ba96:	3308      	addeq	r3, #8
 800ba98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba9c:	bf04      	itt	eq
 800ba9e:	0100      	lsleq	r0, r0, #4
 800baa0:	3304      	addeq	r3, #4
 800baa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800baa6:	bf04      	itt	eq
 800baa8:	0080      	lsleq	r0, r0, #2
 800baaa:	3302      	addeq	r3, #2
 800baac:	2800      	cmp	r0, #0
 800baae:	db05      	blt.n	800babc <__hi0bits+0x38>
 800bab0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bab4:	f103 0301 	add.w	r3, r3, #1
 800bab8:	bf08      	it	eq
 800baba:	2320      	moveq	r3, #32
 800babc:	4618      	mov	r0, r3
 800babe:	4770      	bx	lr
 800bac0:	2300      	movs	r3, #0
 800bac2:	e7e4      	b.n	800ba8e <__hi0bits+0xa>

0800bac4 <__lo0bits>:
 800bac4:	6803      	ldr	r3, [r0, #0]
 800bac6:	f013 0207 	ands.w	r2, r3, #7
 800baca:	d00c      	beq.n	800bae6 <__lo0bits+0x22>
 800bacc:	07d9      	lsls	r1, r3, #31
 800bace:	d422      	bmi.n	800bb16 <__lo0bits+0x52>
 800bad0:	079a      	lsls	r2, r3, #30
 800bad2:	bf49      	itett	mi
 800bad4:	085b      	lsrmi	r3, r3, #1
 800bad6:	089b      	lsrpl	r3, r3, #2
 800bad8:	6003      	strmi	r3, [r0, #0]
 800bada:	2201      	movmi	r2, #1
 800badc:	bf5c      	itt	pl
 800bade:	6003      	strpl	r3, [r0, #0]
 800bae0:	2202      	movpl	r2, #2
 800bae2:	4610      	mov	r0, r2
 800bae4:	4770      	bx	lr
 800bae6:	b299      	uxth	r1, r3
 800bae8:	b909      	cbnz	r1, 800baee <__lo0bits+0x2a>
 800baea:	0c1b      	lsrs	r3, r3, #16
 800baec:	2210      	movs	r2, #16
 800baee:	b2d9      	uxtb	r1, r3
 800baf0:	b909      	cbnz	r1, 800baf6 <__lo0bits+0x32>
 800baf2:	3208      	adds	r2, #8
 800baf4:	0a1b      	lsrs	r3, r3, #8
 800baf6:	0719      	lsls	r1, r3, #28
 800baf8:	bf04      	itt	eq
 800bafa:	091b      	lsreq	r3, r3, #4
 800bafc:	3204      	addeq	r2, #4
 800bafe:	0799      	lsls	r1, r3, #30
 800bb00:	bf04      	itt	eq
 800bb02:	089b      	lsreq	r3, r3, #2
 800bb04:	3202      	addeq	r2, #2
 800bb06:	07d9      	lsls	r1, r3, #31
 800bb08:	d403      	bmi.n	800bb12 <__lo0bits+0x4e>
 800bb0a:	085b      	lsrs	r3, r3, #1
 800bb0c:	f102 0201 	add.w	r2, r2, #1
 800bb10:	d003      	beq.n	800bb1a <__lo0bits+0x56>
 800bb12:	6003      	str	r3, [r0, #0]
 800bb14:	e7e5      	b.n	800bae2 <__lo0bits+0x1e>
 800bb16:	2200      	movs	r2, #0
 800bb18:	e7e3      	b.n	800bae2 <__lo0bits+0x1e>
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	e7e1      	b.n	800bae2 <__lo0bits+0x1e>
	...

0800bb20 <__i2b>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	2101      	movs	r1, #1
 800bb26:	f7ff febb 	bl	800b8a0 <_Balloc>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	b928      	cbnz	r0, 800bb3a <__i2b+0x1a>
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <__i2b+0x24>)
 800bb30:	4805      	ldr	r0, [pc, #20]	; (800bb48 <__i2b+0x28>)
 800bb32:	f240 1145 	movw	r1, #325	; 0x145
 800bb36:	f7fe f857 	bl	8009be8 <__assert_func>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	6144      	str	r4, [r0, #20]
 800bb3e:	6103      	str	r3, [r0, #16]
 800bb40:	bd10      	pop	{r4, pc}
 800bb42:	bf00      	nop
 800bb44:	0800cfbc 	.word	0x0800cfbc
 800bb48:	0800d02d 	.word	0x0800d02d

0800bb4c <__multiply>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4691      	mov	r9, r2
 800bb52:	690a      	ldr	r2, [r1, #16]
 800bb54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	bfb8      	it	lt
 800bb5c:	460b      	movlt	r3, r1
 800bb5e:	460c      	mov	r4, r1
 800bb60:	bfbc      	itt	lt
 800bb62:	464c      	movlt	r4, r9
 800bb64:	4699      	movlt	r9, r3
 800bb66:	6927      	ldr	r7, [r4, #16]
 800bb68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	6861      	ldr	r1, [r4, #4]
 800bb70:	eb07 060a 	add.w	r6, r7, sl
 800bb74:	42b3      	cmp	r3, r6
 800bb76:	b085      	sub	sp, #20
 800bb78:	bfb8      	it	lt
 800bb7a:	3101      	addlt	r1, #1
 800bb7c:	f7ff fe90 	bl	800b8a0 <_Balloc>
 800bb80:	b930      	cbnz	r0, 800bb90 <__multiply+0x44>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b44      	ldr	r3, [pc, #272]	; (800bc98 <__multiply+0x14c>)
 800bb86:	4845      	ldr	r0, [pc, #276]	; (800bc9c <__multiply+0x150>)
 800bb88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb8c:	f7fe f82c 	bl	8009be8 <__assert_func>
 800bb90:	f100 0514 	add.w	r5, r0, #20
 800bb94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb98:	462b      	mov	r3, r5
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4543      	cmp	r3, r8
 800bb9e:	d321      	bcc.n	800bbe4 <__multiply+0x98>
 800bba0:	f104 0314 	add.w	r3, r4, #20
 800bba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bba8:	f109 0314 	add.w	r3, r9, #20
 800bbac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbb0:	9202      	str	r2, [sp, #8]
 800bbb2:	1b3a      	subs	r2, r7, r4
 800bbb4:	3a15      	subs	r2, #21
 800bbb6:	f022 0203 	bic.w	r2, r2, #3
 800bbba:	3204      	adds	r2, #4
 800bbbc:	f104 0115 	add.w	r1, r4, #21
 800bbc0:	428f      	cmp	r7, r1
 800bbc2:	bf38      	it	cc
 800bbc4:	2204      	movcc	r2, #4
 800bbc6:	9201      	str	r2, [sp, #4]
 800bbc8:	9a02      	ldr	r2, [sp, #8]
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d80c      	bhi.n	800bbea <__multiply+0x9e>
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	dd03      	ble.n	800bbdc <__multiply+0x90>
 800bbd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d05b      	beq.n	800bc94 <__multiply+0x148>
 800bbdc:	6106      	str	r6, [r0, #16]
 800bbde:	b005      	add	sp, #20
 800bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe4:	f843 2b04 	str.w	r2, [r3], #4
 800bbe8:	e7d8      	b.n	800bb9c <__multiply+0x50>
 800bbea:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbee:	f1ba 0f00 	cmp.w	sl, #0
 800bbf2:	d024      	beq.n	800bc3e <__multiply+0xf2>
 800bbf4:	f104 0e14 	add.w	lr, r4, #20
 800bbf8:	46a9      	mov	r9, r5
 800bbfa:	f04f 0c00 	mov.w	ip, #0
 800bbfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc02:	f8d9 1000 	ldr.w	r1, [r9]
 800bc06:	fa1f fb82 	uxth.w	fp, r2
 800bc0a:	b289      	uxth	r1, r1
 800bc0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc14:	f8d9 2000 	ldr.w	r2, [r9]
 800bc18:	4461      	add	r1, ip
 800bc1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc26:	b289      	uxth	r1, r1
 800bc28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc2c:	4577      	cmp	r7, lr
 800bc2e:	f849 1b04 	str.w	r1, [r9], #4
 800bc32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc36:	d8e2      	bhi.n	800bbfe <__multiply+0xb2>
 800bc38:	9a01      	ldr	r2, [sp, #4]
 800bc3a:	f845 c002 	str.w	ip, [r5, r2]
 800bc3e:	9a03      	ldr	r2, [sp, #12]
 800bc40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc44:	3304      	adds	r3, #4
 800bc46:	f1b9 0f00 	cmp.w	r9, #0
 800bc4a:	d021      	beq.n	800bc90 <__multiply+0x144>
 800bc4c:	6829      	ldr	r1, [r5, #0]
 800bc4e:	f104 0c14 	add.w	ip, r4, #20
 800bc52:	46ae      	mov	lr, r5
 800bc54:	f04f 0a00 	mov.w	sl, #0
 800bc58:	f8bc b000 	ldrh.w	fp, [ip]
 800bc5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc60:	fb09 220b 	mla	r2, r9, fp, r2
 800bc64:	4452      	add	r2, sl
 800bc66:	b289      	uxth	r1, r1
 800bc68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc6c:	f84e 1b04 	str.w	r1, [lr], #4
 800bc70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc78:	f8be 1000 	ldrh.w	r1, [lr]
 800bc7c:	fb09 110a 	mla	r1, r9, sl, r1
 800bc80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc84:	4567      	cmp	r7, ip
 800bc86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc8a:	d8e5      	bhi.n	800bc58 <__multiply+0x10c>
 800bc8c:	9a01      	ldr	r2, [sp, #4]
 800bc8e:	50a9      	str	r1, [r5, r2]
 800bc90:	3504      	adds	r5, #4
 800bc92:	e799      	b.n	800bbc8 <__multiply+0x7c>
 800bc94:	3e01      	subs	r6, #1
 800bc96:	e79b      	b.n	800bbd0 <__multiply+0x84>
 800bc98:	0800cfbc 	.word	0x0800cfbc
 800bc9c:	0800d02d 	.word	0x0800d02d

0800bca0 <__pow5mult>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	4615      	mov	r5, r2
 800bca6:	f012 0203 	ands.w	r2, r2, #3
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	d007      	beq.n	800bcc0 <__pow5mult+0x20>
 800bcb0:	4c25      	ldr	r4, [pc, #148]	; (800bd48 <__pow5mult+0xa8>)
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcba:	f7ff fe53 	bl	800b964 <__multadd>
 800bcbe:	4607      	mov	r7, r0
 800bcc0:	10ad      	asrs	r5, r5, #2
 800bcc2:	d03d      	beq.n	800bd40 <__pow5mult+0xa0>
 800bcc4:	69f4      	ldr	r4, [r6, #28]
 800bcc6:	b97c      	cbnz	r4, 800bce8 <__pow5mult+0x48>
 800bcc8:	2010      	movs	r0, #16
 800bcca:	f7fd facb 	bl	8009264 <malloc>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	61f0      	str	r0, [r6, #28]
 800bcd2:	b928      	cbnz	r0, 800bce0 <__pow5mult+0x40>
 800bcd4:	4b1d      	ldr	r3, [pc, #116]	; (800bd4c <__pow5mult+0xac>)
 800bcd6:	481e      	ldr	r0, [pc, #120]	; (800bd50 <__pow5mult+0xb0>)
 800bcd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcdc:	f7fd ff84 	bl	8009be8 <__assert_func>
 800bce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bce4:	6004      	str	r4, [r0, #0]
 800bce6:	60c4      	str	r4, [r0, #12]
 800bce8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bcec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcf0:	b94c      	cbnz	r4, 800bd06 <__pow5mult+0x66>
 800bcf2:	f240 2171 	movw	r1, #625	; 0x271
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ff12 	bl	800bb20 <__i2b>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd02:	4604      	mov	r4, r0
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	f04f 0900 	mov.w	r9, #0
 800bd0a:	07eb      	lsls	r3, r5, #31
 800bd0c:	d50a      	bpl.n	800bd24 <__pow5mult+0x84>
 800bd0e:	4639      	mov	r1, r7
 800bd10:	4622      	mov	r2, r4
 800bd12:	4630      	mov	r0, r6
 800bd14:	f7ff ff1a 	bl	800bb4c <__multiply>
 800bd18:	4639      	mov	r1, r7
 800bd1a:	4680      	mov	r8, r0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff fdff 	bl	800b920 <_Bfree>
 800bd22:	4647      	mov	r7, r8
 800bd24:	106d      	asrs	r5, r5, #1
 800bd26:	d00b      	beq.n	800bd40 <__pow5mult+0xa0>
 800bd28:	6820      	ldr	r0, [r4, #0]
 800bd2a:	b938      	cbnz	r0, 800bd3c <__pow5mult+0x9c>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4621      	mov	r1, r4
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ff0b 	bl	800bb4c <__multiply>
 800bd36:	6020      	str	r0, [r4, #0]
 800bd38:	f8c0 9000 	str.w	r9, [r0]
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	e7e4      	b.n	800bd0a <__pow5mult+0x6a>
 800bd40:	4638      	mov	r0, r7
 800bd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd46:	bf00      	nop
 800bd48:	0800d178 	.word	0x0800d178
 800bd4c:	0800cd70 	.word	0x0800cd70
 800bd50:	0800d02d 	.word	0x0800d02d

0800bd54 <__lshift>:
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	460c      	mov	r4, r1
 800bd5a:	6849      	ldr	r1, [r1, #4]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	4607      	mov	r7, r0
 800bd66:	4691      	mov	r9, r2
 800bd68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd6c:	f108 0601 	add.w	r6, r8, #1
 800bd70:	42b3      	cmp	r3, r6
 800bd72:	db0b      	blt.n	800bd8c <__lshift+0x38>
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7ff fd93 	bl	800b8a0 <_Balloc>
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	b948      	cbnz	r0, 800bd92 <__lshift+0x3e>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <__lshift+0xd0>)
 800bd82:	4829      	ldr	r0, [pc, #164]	; (800be28 <__lshift+0xd4>)
 800bd84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd88:	f7fd ff2e 	bl	8009be8 <__assert_func>
 800bd8c:	3101      	adds	r1, #1
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	e7ee      	b.n	800bd70 <__lshift+0x1c>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f100 0114 	add.w	r1, r0, #20
 800bd98:	f100 0210 	add.w	r2, r0, #16
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	4553      	cmp	r3, sl
 800bda0:	db33      	blt.n	800be0a <__lshift+0xb6>
 800bda2:	6920      	ldr	r0, [r4, #16]
 800bda4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bda8:	f104 0314 	add.w	r3, r4, #20
 800bdac:	f019 091f 	ands.w	r9, r9, #31
 800bdb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdb8:	d02b      	beq.n	800be12 <__lshift+0xbe>
 800bdba:	f1c9 0e20 	rsb	lr, r9, #32
 800bdbe:	468a      	mov	sl, r1
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	fa00 f009 	lsl.w	r0, r0, r9
 800bdc8:	4310      	orrs	r0, r2
 800bdca:	f84a 0b04 	str.w	r0, [sl], #4
 800bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd2:	459c      	cmp	ip, r3
 800bdd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdd8:	d8f3      	bhi.n	800bdc2 <__lshift+0x6e>
 800bdda:	ebac 0304 	sub.w	r3, ip, r4
 800bdde:	3b15      	subs	r3, #21
 800bde0:	f023 0303 	bic.w	r3, r3, #3
 800bde4:	3304      	adds	r3, #4
 800bde6:	f104 0015 	add.w	r0, r4, #21
 800bdea:	4584      	cmp	ip, r0
 800bdec:	bf38      	it	cc
 800bdee:	2304      	movcc	r3, #4
 800bdf0:	50ca      	str	r2, [r1, r3]
 800bdf2:	b10a      	cbz	r2, 800bdf8 <__lshift+0xa4>
 800bdf4:	f108 0602 	add.w	r6, r8, #2
 800bdf8:	3e01      	subs	r6, #1
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	612e      	str	r6, [r5, #16]
 800bdfe:	4621      	mov	r1, r4
 800be00:	f7ff fd8e 	bl	800b920 <_Bfree>
 800be04:	4628      	mov	r0, r5
 800be06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be0e:	3301      	adds	r3, #1
 800be10:	e7c5      	b.n	800bd9e <__lshift+0x4a>
 800be12:	3904      	subs	r1, #4
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	f841 2f04 	str.w	r2, [r1, #4]!
 800be1c:	459c      	cmp	ip, r3
 800be1e:	d8f9      	bhi.n	800be14 <__lshift+0xc0>
 800be20:	e7ea      	b.n	800bdf8 <__lshift+0xa4>
 800be22:	bf00      	nop
 800be24:	0800cfbc 	.word	0x0800cfbc
 800be28:	0800d02d 	.word	0x0800d02d

0800be2c <__mcmp>:
 800be2c:	b530      	push	{r4, r5, lr}
 800be2e:	6902      	ldr	r2, [r0, #16]
 800be30:	690c      	ldr	r4, [r1, #16]
 800be32:	1b12      	subs	r2, r2, r4
 800be34:	d10e      	bne.n	800be54 <__mcmp+0x28>
 800be36:	f100 0314 	add.w	r3, r0, #20
 800be3a:	3114      	adds	r1, #20
 800be3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be4c:	42a5      	cmp	r5, r4
 800be4e:	d003      	beq.n	800be58 <__mcmp+0x2c>
 800be50:	d305      	bcc.n	800be5e <__mcmp+0x32>
 800be52:	2201      	movs	r2, #1
 800be54:	4610      	mov	r0, r2
 800be56:	bd30      	pop	{r4, r5, pc}
 800be58:	4283      	cmp	r3, r0
 800be5a:	d3f3      	bcc.n	800be44 <__mcmp+0x18>
 800be5c:	e7fa      	b.n	800be54 <__mcmp+0x28>
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	e7f7      	b.n	800be54 <__mcmp+0x28>

0800be64 <__mdiff>:
 800be64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	4606      	mov	r6, r0
 800be6c:	4611      	mov	r1, r2
 800be6e:	4620      	mov	r0, r4
 800be70:	4690      	mov	r8, r2
 800be72:	f7ff ffdb 	bl	800be2c <__mcmp>
 800be76:	1e05      	subs	r5, r0, #0
 800be78:	d110      	bne.n	800be9c <__mdiff+0x38>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7ff fd0f 	bl	800b8a0 <_Balloc>
 800be82:	b930      	cbnz	r0, 800be92 <__mdiff+0x2e>
 800be84:	4b3a      	ldr	r3, [pc, #232]	; (800bf70 <__mdiff+0x10c>)
 800be86:	4602      	mov	r2, r0
 800be88:	f240 2137 	movw	r1, #567	; 0x237
 800be8c:	4839      	ldr	r0, [pc, #228]	; (800bf74 <__mdiff+0x110>)
 800be8e:	f7fd feab 	bl	8009be8 <__assert_func>
 800be92:	2301      	movs	r3, #1
 800be94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	bfa4      	itt	ge
 800be9e:	4643      	movge	r3, r8
 800bea0:	46a0      	movge	r8, r4
 800bea2:	4630      	mov	r0, r6
 800bea4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bea8:	bfa6      	itte	ge
 800beaa:	461c      	movge	r4, r3
 800beac:	2500      	movge	r5, #0
 800beae:	2501      	movlt	r5, #1
 800beb0:	f7ff fcf6 	bl	800b8a0 <_Balloc>
 800beb4:	b920      	cbnz	r0, 800bec0 <__mdiff+0x5c>
 800beb6:	4b2e      	ldr	r3, [pc, #184]	; (800bf70 <__mdiff+0x10c>)
 800beb8:	4602      	mov	r2, r0
 800beba:	f240 2145 	movw	r1, #581	; 0x245
 800bebe:	e7e5      	b.n	800be8c <__mdiff+0x28>
 800bec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bec4:	6926      	ldr	r6, [r4, #16]
 800bec6:	60c5      	str	r5, [r0, #12]
 800bec8:	f104 0914 	add.w	r9, r4, #20
 800becc:	f108 0514 	add.w	r5, r8, #20
 800bed0:	f100 0e14 	add.w	lr, r0, #20
 800bed4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bed8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bedc:	f108 0210 	add.w	r2, r8, #16
 800bee0:	46f2      	mov	sl, lr
 800bee2:	2100      	movs	r1, #0
 800bee4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800beec:	fa11 f88b 	uxtah	r8, r1, fp
 800bef0:	b299      	uxth	r1, r3
 800bef2:	0c1b      	lsrs	r3, r3, #16
 800bef4:	eba8 0801 	sub.w	r8, r8, r1
 800bef8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800befc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf00:	fa1f f888 	uxth.w	r8, r8
 800bf04:	1419      	asrs	r1, r3, #16
 800bf06:	454e      	cmp	r6, r9
 800bf08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf0c:	f84a 3b04 	str.w	r3, [sl], #4
 800bf10:	d8e8      	bhi.n	800bee4 <__mdiff+0x80>
 800bf12:	1b33      	subs	r3, r6, r4
 800bf14:	3b15      	subs	r3, #21
 800bf16:	f023 0303 	bic.w	r3, r3, #3
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	3415      	adds	r4, #21
 800bf1e:	42a6      	cmp	r6, r4
 800bf20:	bf38      	it	cc
 800bf22:	2304      	movcc	r3, #4
 800bf24:	441d      	add	r5, r3
 800bf26:	4473      	add	r3, lr
 800bf28:	469e      	mov	lr, r3
 800bf2a:	462e      	mov	r6, r5
 800bf2c:	4566      	cmp	r6, ip
 800bf2e:	d30e      	bcc.n	800bf4e <__mdiff+0xea>
 800bf30:	f10c 0203 	add.w	r2, ip, #3
 800bf34:	1b52      	subs	r2, r2, r5
 800bf36:	f022 0203 	bic.w	r2, r2, #3
 800bf3a:	3d03      	subs	r5, #3
 800bf3c:	45ac      	cmp	ip, r5
 800bf3e:	bf38      	it	cc
 800bf40:	2200      	movcc	r2, #0
 800bf42:	4413      	add	r3, r2
 800bf44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf48:	b17a      	cbz	r2, 800bf6a <__mdiff+0x106>
 800bf4a:	6107      	str	r7, [r0, #16]
 800bf4c:	e7a4      	b.n	800be98 <__mdiff+0x34>
 800bf4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf52:	fa11 f288 	uxtah	r2, r1, r8
 800bf56:	1414      	asrs	r4, r2, #16
 800bf58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf5c:	b292      	uxth	r2, r2
 800bf5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf62:	f84e 2b04 	str.w	r2, [lr], #4
 800bf66:	1421      	asrs	r1, r4, #16
 800bf68:	e7e0      	b.n	800bf2c <__mdiff+0xc8>
 800bf6a:	3f01      	subs	r7, #1
 800bf6c:	e7ea      	b.n	800bf44 <__mdiff+0xe0>
 800bf6e:	bf00      	nop
 800bf70:	0800cfbc 	.word	0x0800cfbc
 800bf74:	0800d02d 	.word	0x0800d02d

0800bf78 <__ulp>:
 800bf78:	b082      	sub	sp, #8
 800bf7a:	ed8d 0b00 	vstr	d0, [sp]
 800bf7e:	9a01      	ldr	r2, [sp, #4]
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <__ulp+0x48>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dc08      	bgt.n	800bf9e <__ulp+0x26>
 800bf8c:	425b      	negs	r3, r3
 800bf8e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf96:	da04      	bge.n	800bfa2 <__ulp+0x2a>
 800bf98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf9c:	4113      	asrs	r3, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	e008      	b.n	800bfb4 <__ulp+0x3c>
 800bfa2:	f1a2 0314 	sub.w	r3, r2, #20
 800bfa6:	2b1e      	cmp	r3, #30
 800bfa8:	bfda      	itte	le
 800bfaa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bfae:	40da      	lsrle	r2, r3
 800bfb0:	2201      	movgt	r2, #1
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	ec41 0b10 	vmov	d0, r0, r1
 800bfbc:	b002      	add	sp, #8
 800bfbe:	4770      	bx	lr
 800bfc0:	7ff00000 	.word	0x7ff00000

0800bfc4 <__b2d>:
 800bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	6906      	ldr	r6, [r0, #16]
 800bfca:	f100 0814 	add.w	r8, r0, #20
 800bfce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfd2:	1f37      	subs	r7, r6, #4
 800bfd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7ff fd53 	bl	800ba84 <__hi0bits>
 800bfde:	f1c0 0320 	rsb	r3, r0, #32
 800bfe2:	280a      	cmp	r0, #10
 800bfe4:	600b      	str	r3, [r1, #0]
 800bfe6:	491b      	ldr	r1, [pc, #108]	; (800c054 <__b2d+0x90>)
 800bfe8:	dc15      	bgt.n	800c016 <__b2d+0x52>
 800bfea:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfee:	fa22 f30c 	lsr.w	r3, r2, ip
 800bff2:	45b8      	cmp	r8, r7
 800bff4:	ea43 0501 	orr.w	r5, r3, r1
 800bff8:	bf34      	ite	cc
 800bffa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bffe:	2300      	movcs	r3, #0
 800c000:	3015      	adds	r0, #21
 800c002:	fa02 f000 	lsl.w	r0, r2, r0
 800c006:	fa23 f30c 	lsr.w	r3, r3, ip
 800c00a:	4303      	orrs	r3, r0
 800c00c:	461c      	mov	r4, r3
 800c00e:	ec45 4b10 	vmov	d0, r4, r5
 800c012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c016:	45b8      	cmp	r8, r7
 800c018:	bf3a      	itte	cc
 800c01a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c01e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c022:	2300      	movcs	r3, #0
 800c024:	380b      	subs	r0, #11
 800c026:	d012      	beq.n	800c04e <__b2d+0x8a>
 800c028:	f1c0 0120 	rsb	r1, r0, #32
 800c02c:	fa23 f401 	lsr.w	r4, r3, r1
 800c030:	4082      	lsls	r2, r0
 800c032:	4322      	orrs	r2, r4
 800c034:	4547      	cmp	r7, r8
 800c036:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c03a:	bf8c      	ite	hi
 800c03c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c040:	2200      	movls	r2, #0
 800c042:	4083      	lsls	r3, r0
 800c044:	40ca      	lsrs	r2, r1
 800c046:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c04a:	4313      	orrs	r3, r2
 800c04c:	e7de      	b.n	800c00c <__b2d+0x48>
 800c04e:	ea42 0501 	orr.w	r5, r2, r1
 800c052:	e7db      	b.n	800c00c <__b2d+0x48>
 800c054:	3ff00000 	.word	0x3ff00000

0800c058 <__d2b>:
 800c058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c05c:	460f      	mov	r7, r1
 800c05e:	2101      	movs	r1, #1
 800c060:	ec59 8b10 	vmov	r8, r9, d0
 800c064:	4616      	mov	r6, r2
 800c066:	f7ff fc1b 	bl	800b8a0 <_Balloc>
 800c06a:	4604      	mov	r4, r0
 800c06c:	b930      	cbnz	r0, 800c07c <__d2b+0x24>
 800c06e:	4602      	mov	r2, r0
 800c070:	4b24      	ldr	r3, [pc, #144]	; (800c104 <__d2b+0xac>)
 800c072:	4825      	ldr	r0, [pc, #148]	; (800c108 <__d2b+0xb0>)
 800c074:	f240 310f 	movw	r1, #783	; 0x30f
 800c078:	f7fd fdb6 	bl	8009be8 <__assert_func>
 800c07c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c084:	bb2d      	cbnz	r5, 800c0d2 <__d2b+0x7a>
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	f1b8 0300 	subs.w	r3, r8, #0
 800c08c:	d026      	beq.n	800c0dc <__d2b+0x84>
 800c08e:	4668      	mov	r0, sp
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	f7ff fd17 	bl	800bac4 <__lo0bits>
 800c096:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c09a:	b1e8      	cbz	r0, 800c0d8 <__d2b+0x80>
 800c09c:	f1c0 0320 	rsb	r3, r0, #32
 800c0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a4:	430b      	orrs	r3, r1
 800c0a6:	40c2      	lsrs	r2, r0
 800c0a8:	6163      	str	r3, [r4, #20]
 800c0aa:	9201      	str	r2, [sp, #4]
 800c0ac:	9b01      	ldr	r3, [sp, #4]
 800c0ae:	61a3      	str	r3, [r4, #24]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	bf14      	ite	ne
 800c0b4:	2202      	movne	r2, #2
 800c0b6:	2201      	moveq	r2, #1
 800c0b8:	6122      	str	r2, [r4, #16]
 800c0ba:	b1bd      	cbz	r5, 800c0ec <__d2b+0x94>
 800c0bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0c0:	4405      	add	r5, r0
 800c0c2:	603d      	str	r5, [r7, #0]
 800c0c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0c8:	6030      	str	r0, [r6, #0]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	b003      	add	sp, #12
 800c0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0d6:	e7d6      	b.n	800c086 <__d2b+0x2e>
 800c0d8:	6161      	str	r1, [r4, #20]
 800c0da:	e7e7      	b.n	800c0ac <__d2b+0x54>
 800c0dc:	a801      	add	r0, sp, #4
 800c0de:	f7ff fcf1 	bl	800bac4 <__lo0bits>
 800c0e2:	9b01      	ldr	r3, [sp, #4]
 800c0e4:	6163      	str	r3, [r4, #20]
 800c0e6:	3020      	adds	r0, #32
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	e7e5      	b.n	800c0b8 <__d2b+0x60>
 800c0ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0f4:	6038      	str	r0, [r7, #0]
 800c0f6:	6918      	ldr	r0, [r3, #16]
 800c0f8:	f7ff fcc4 	bl	800ba84 <__hi0bits>
 800c0fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c100:	e7e2      	b.n	800c0c8 <__d2b+0x70>
 800c102:	bf00      	nop
 800c104:	0800cfbc 	.word	0x0800cfbc
 800c108:	0800d02d 	.word	0x0800d02d

0800c10c <__ratio>:
 800c10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4688      	mov	r8, r1
 800c112:	4669      	mov	r1, sp
 800c114:	4681      	mov	r9, r0
 800c116:	f7ff ff55 	bl	800bfc4 <__b2d>
 800c11a:	a901      	add	r1, sp, #4
 800c11c:	4640      	mov	r0, r8
 800c11e:	ec55 4b10 	vmov	r4, r5, d0
 800c122:	f7ff ff4f 	bl	800bfc4 <__b2d>
 800c126:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c12a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c12e:	eba3 0c02 	sub.w	ip, r3, r2
 800c132:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c136:	1a9b      	subs	r3, r3, r2
 800c138:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c13c:	ec51 0b10 	vmov	r0, r1, d0
 800c140:	2b00      	cmp	r3, #0
 800c142:	bfd6      	itet	le
 800c144:	460a      	movle	r2, r1
 800c146:	462a      	movgt	r2, r5
 800c148:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c14c:	468b      	mov	fp, r1
 800c14e:	462f      	mov	r7, r5
 800c150:	bfd4      	ite	le
 800c152:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c156:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c15a:	4620      	mov	r0, r4
 800c15c:	ee10 2a10 	vmov	r2, s0
 800c160:	465b      	mov	r3, fp
 800c162:	4639      	mov	r1, r7
 800c164:	f7f4 fb6a 	bl	800083c <__aeabi_ddiv>
 800c168:	ec41 0b10 	vmov	d0, r0, r1
 800c16c:	b003      	add	sp, #12
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c172 <__copybits>:
 800c172:	3901      	subs	r1, #1
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	1149      	asrs	r1, r1, #5
 800c178:	6914      	ldr	r4, [r2, #16]
 800c17a:	3101      	adds	r1, #1
 800c17c:	f102 0314 	add.w	r3, r2, #20
 800c180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c184:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c188:	1f05      	subs	r5, r0, #4
 800c18a:	42a3      	cmp	r3, r4
 800c18c:	d30c      	bcc.n	800c1a8 <__copybits+0x36>
 800c18e:	1aa3      	subs	r3, r4, r2
 800c190:	3b11      	subs	r3, #17
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	3211      	adds	r2, #17
 800c198:	42a2      	cmp	r2, r4
 800c19a:	bf88      	it	hi
 800c19c:	2300      	movhi	r3, #0
 800c19e:	4418      	add	r0, r3
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4288      	cmp	r0, r1
 800c1a4:	d305      	bcc.n	800c1b2 <__copybits+0x40>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}
 800c1a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1b0:	e7eb      	b.n	800c18a <__copybits+0x18>
 800c1b2:	f840 3b04 	str.w	r3, [r0], #4
 800c1b6:	e7f4      	b.n	800c1a2 <__copybits+0x30>

0800c1b8 <__any_on>:
 800c1b8:	f100 0214 	add.w	r2, r0, #20
 800c1bc:	6900      	ldr	r0, [r0, #16]
 800c1be:	114b      	asrs	r3, r1, #5
 800c1c0:	4298      	cmp	r0, r3
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	db11      	blt.n	800c1ea <__any_on+0x32>
 800c1c6:	dd0a      	ble.n	800c1de <__any_on+0x26>
 800c1c8:	f011 011f 	ands.w	r1, r1, #31
 800c1cc:	d007      	beq.n	800c1de <__any_on+0x26>
 800c1ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1d2:	fa24 f001 	lsr.w	r0, r4, r1
 800c1d6:	fa00 f101 	lsl.w	r1, r0, r1
 800c1da:	428c      	cmp	r4, r1
 800c1dc:	d10b      	bne.n	800c1f6 <__any_on+0x3e>
 800c1de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d803      	bhi.n	800c1ee <__any_on+0x36>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	bd10      	pop	{r4, pc}
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	e7f7      	b.n	800c1de <__any_on+0x26>
 800c1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1f2:	2900      	cmp	r1, #0
 800c1f4:	d0f5      	beq.n	800c1e2 <__any_on+0x2a>
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	e7f6      	b.n	800c1e8 <__any_on+0x30>

0800c1fa <_realloc_r>:
 800c1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fe:	4680      	mov	r8, r0
 800c200:	4614      	mov	r4, r2
 800c202:	460e      	mov	r6, r1
 800c204:	b921      	cbnz	r1, 800c210 <_realloc_r+0x16>
 800c206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	4611      	mov	r1, r2
 800c20c:	f7fd b85a 	b.w	80092c4 <_malloc_r>
 800c210:	b92a      	cbnz	r2, 800c21e <_realloc_r+0x24>
 800c212:	f7fd fd07 	bl	8009c24 <_free_r>
 800c216:	4625      	mov	r5, r4
 800c218:	4628      	mov	r0, r5
 800c21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21e:	f000 fa5b 	bl	800c6d8 <_malloc_usable_size_r>
 800c222:	4284      	cmp	r4, r0
 800c224:	4607      	mov	r7, r0
 800c226:	d802      	bhi.n	800c22e <_realloc_r+0x34>
 800c228:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c22c:	d812      	bhi.n	800c254 <_realloc_r+0x5a>
 800c22e:	4621      	mov	r1, r4
 800c230:	4640      	mov	r0, r8
 800c232:	f7fd f847 	bl	80092c4 <_malloc_r>
 800c236:	4605      	mov	r5, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d0ed      	beq.n	800c218 <_realloc_r+0x1e>
 800c23c:	42bc      	cmp	r4, r7
 800c23e:	4622      	mov	r2, r4
 800c240:	4631      	mov	r1, r6
 800c242:	bf28      	it	cs
 800c244:	463a      	movcs	r2, r7
 800c246:	f7fe ffa5 	bl	800b194 <memcpy>
 800c24a:	4631      	mov	r1, r6
 800c24c:	4640      	mov	r0, r8
 800c24e:	f7fd fce9 	bl	8009c24 <_free_r>
 800c252:	e7e1      	b.n	800c218 <_realloc_r+0x1e>
 800c254:	4635      	mov	r5, r6
 800c256:	e7df      	b.n	800c218 <_realloc_r+0x1e>

0800c258 <__ascii_wctomb>:
 800c258:	b149      	cbz	r1, 800c26e <__ascii_wctomb+0x16>
 800c25a:	2aff      	cmp	r2, #255	; 0xff
 800c25c:	bf85      	ittet	hi
 800c25e:	238a      	movhi	r3, #138	; 0x8a
 800c260:	6003      	strhi	r3, [r0, #0]
 800c262:	700a      	strbls	r2, [r1, #0]
 800c264:	f04f 30ff 	movhi.w	r0, #4294967295
 800c268:	bf98      	it	ls
 800c26a:	2001      	movls	r0, #1
 800c26c:	4770      	bx	lr
 800c26e:	4608      	mov	r0, r1
 800c270:	4770      	bx	lr

0800c272 <__sfputc_r>:
 800c272:	6893      	ldr	r3, [r2, #8]
 800c274:	3b01      	subs	r3, #1
 800c276:	2b00      	cmp	r3, #0
 800c278:	b410      	push	{r4}
 800c27a:	6093      	str	r3, [r2, #8]
 800c27c:	da08      	bge.n	800c290 <__sfputc_r+0x1e>
 800c27e:	6994      	ldr	r4, [r2, #24]
 800c280:	42a3      	cmp	r3, r4
 800c282:	db01      	blt.n	800c288 <__sfputc_r+0x16>
 800c284:	290a      	cmp	r1, #10
 800c286:	d103      	bne.n	800c290 <__sfputc_r+0x1e>
 800c288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c28c:	f000 b934 	b.w	800c4f8 <__swbuf_r>
 800c290:	6813      	ldr	r3, [r2, #0]
 800c292:	1c58      	adds	r0, r3, #1
 800c294:	6010      	str	r0, [r2, #0]
 800c296:	7019      	strb	r1, [r3, #0]
 800c298:	4608      	mov	r0, r1
 800c29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <__sfputs_r>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	4614      	mov	r4, r2
 800c2a8:	18d5      	adds	r5, r2, r3
 800c2aa:	42ac      	cmp	r4, r5
 800c2ac:	d101      	bne.n	800c2b2 <__sfputs_r+0x12>
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	e007      	b.n	800c2c2 <__sfputs_r+0x22>
 800c2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b6:	463a      	mov	r2, r7
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f7ff ffda 	bl	800c272 <__sfputc_r>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	d1f3      	bne.n	800c2aa <__sfputs_r+0xa>
 800c2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2c4 <_vfiprintf_r>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	b09d      	sub	sp, #116	; 0x74
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	4698      	mov	r8, r3
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	b118      	cbz	r0, 800c2dc <_vfiprintf_r+0x18>
 800c2d4:	6a03      	ldr	r3, [r0, #32]
 800c2d6:	b90b      	cbnz	r3, 800c2dc <_vfiprintf_r+0x18>
 800c2d8:	f7fd fb5a 	bl	8009990 <__sinit>
 800c2dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2de:	07d9      	lsls	r1, r3, #31
 800c2e0:	d405      	bmi.n	800c2ee <_vfiprintf_r+0x2a>
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	059a      	lsls	r2, r3, #22
 800c2e6:	d402      	bmi.n	800c2ee <_vfiprintf_r+0x2a>
 800c2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ea:	f7fd fc74 	bl	8009bd6 <__retarget_lock_acquire_recursive>
 800c2ee:	89ab      	ldrh	r3, [r5, #12]
 800c2f0:	071b      	lsls	r3, r3, #28
 800c2f2:	d501      	bpl.n	800c2f8 <_vfiprintf_r+0x34>
 800c2f4:	692b      	ldr	r3, [r5, #16]
 800c2f6:	b99b      	cbnz	r3, 800c320 <_vfiprintf_r+0x5c>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 f93a 	bl	800c574 <__swsetup_r>
 800c300:	b170      	cbz	r0, 800c320 <_vfiprintf_r+0x5c>
 800c302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c304:	07dc      	lsls	r4, r3, #31
 800c306:	d504      	bpl.n	800c312 <_vfiprintf_r+0x4e>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	b01d      	add	sp, #116	; 0x74
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c312:	89ab      	ldrh	r3, [r5, #12]
 800c314:	0598      	lsls	r0, r3, #22
 800c316:	d4f7      	bmi.n	800c308 <_vfiprintf_r+0x44>
 800c318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c31a:	f7fd fc5d 	bl	8009bd8 <__retarget_lock_release_recursive>
 800c31e:	e7f3      	b.n	800c308 <_vfiprintf_r+0x44>
 800c320:	2300      	movs	r3, #0
 800c322:	9309      	str	r3, [sp, #36]	; 0x24
 800c324:	2320      	movs	r3, #32
 800c326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c32a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32e:	2330      	movs	r3, #48	; 0x30
 800c330:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4e4 <_vfiprintf_r+0x220>
 800c334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c338:	f04f 0901 	mov.w	r9, #1
 800c33c:	4623      	mov	r3, r4
 800c33e:	469a      	mov	sl, r3
 800c340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c344:	b10a      	cbz	r2, 800c34a <_vfiprintf_r+0x86>
 800c346:	2a25      	cmp	r2, #37	; 0x25
 800c348:	d1f9      	bne.n	800c33e <_vfiprintf_r+0x7a>
 800c34a:	ebba 0b04 	subs.w	fp, sl, r4
 800c34e:	d00b      	beq.n	800c368 <_vfiprintf_r+0xa4>
 800c350:	465b      	mov	r3, fp
 800c352:	4622      	mov	r2, r4
 800c354:	4629      	mov	r1, r5
 800c356:	4630      	mov	r0, r6
 800c358:	f7ff ffa2 	bl	800c2a0 <__sfputs_r>
 800c35c:	3001      	adds	r0, #1
 800c35e:	f000 80a9 	beq.w	800c4b4 <_vfiprintf_r+0x1f0>
 800c362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c364:	445a      	add	r2, fp
 800c366:	9209      	str	r2, [sp, #36]	; 0x24
 800c368:	f89a 3000 	ldrb.w	r3, [sl]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80a1 	beq.w	800c4b4 <_vfiprintf_r+0x1f0>
 800c372:	2300      	movs	r3, #0
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c37c:	f10a 0a01 	add.w	sl, sl, #1
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	9307      	str	r3, [sp, #28]
 800c384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c388:	931a      	str	r3, [sp, #104]	; 0x68
 800c38a:	4654      	mov	r4, sl
 800c38c:	2205      	movs	r2, #5
 800c38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c392:	4854      	ldr	r0, [pc, #336]	; (800c4e4 <_vfiprintf_r+0x220>)
 800c394:	f7f3 ff1c 	bl	80001d0 <memchr>
 800c398:	9a04      	ldr	r2, [sp, #16]
 800c39a:	b9d8      	cbnz	r0, 800c3d4 <_vfiprintf_r+0x110>
 800c39c:	06d1      	lsls	r1, r2, #27
 800c39e:	bf44      	itt	mi
 800c3a0:	2320      	movmi	r3, #32
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a6:	0713      	lsls	r3, r2, #28
 800c3a8:	bf44      	itt	mi
 800c3aa:	232b      	movmi	r3, #43	; 0x2b
 800c3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b6:	d015      	beq.n	800c3e4 <_vfiprintf_r+0x120>
 800c3b8:	9a07      	ldr	r2, [sp, #28]
 800c3ba:	4654      	mov	r4, sl
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f04f 0c0a 	mov.w	ip, #10
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3c8:	3b30      	subs	r3, #48	; 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d94d      	bls.n	800c46a <_vfiprintf_r+0x1a6>
 800c3ce:	b1b0      	cbz	r0, 800c3fe <_vfiprintf_r+0x13a>
 800c3d0:	9207      	str	r2, [sp, #28]
 800c3d2:	e014      	b.n	800c3fe <_vfiprintf_r+0x13a>
 800c3d4:	eba0 0308 	sub.w	r3, r0, r8
 800c3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	46a2      	mov	sl, r4
 800c3e2:	e7d2      	b.n	800c38a <_vfiprintf_r+0xc6>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	1d19      	adds	r1, r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	9103      	str	r1, [sp, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	bfbb      	ittet	lt
 800c3f0:	425b      	neglt	r3, r3
 800c3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f6:	9307      	strge	r3, [sp, #28]
 800c3f8:	9307      	strlt	r3, [sp, #28]
 800c3fa:	bfb8      	it	lt
 800c3fc:	9204      	strlt	r2, [sp, #16]
 800c3fe:	7823      	ldrb	r3, [r4, #0]
 800c400:	2b2e      	cmp	r3, #46	; 0x2e
 800c402:	d10c      	bne.n	800c41e <_vfiprintf_r+0x15a>
 800c404:	7863      	ldrb	r3, [r4, #1]
 800c406:	2b2a      	cmp	r3, #42	; 0x2a
 800c408:	d134      	bne.n	800c474 <_vfiprintf_r+0x1b0>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	1d1a      	adds	r2, r3, #4
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	9203      	str	r2, [sp, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfb8      	it	lt
 800c416:	f04f 33ff 	movlt.w	r3, #4294967295
 800c41a:	3402      	adds	r4, #2
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4f4 <_vfiprintf_r+0x230>
 800c422:	7821      	ldrb	r1, [r4, #0]
 800c424:	2203      	movs	r2, #3
 800c426:	4650      	mov	r0, sl
 800c428:	f7f3 fed2 	bl	80001d0 <memchr>
 800c42c:	b138      	cbz	r0, 800c43e <_vfiprintf_r+0x17a>
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	eba0 000a 	sub.w	r0, r0, sl
 800c434:	2240      	movs	r2, #64	; 0x40
 800c436:	4082      	lsls	r2, r0
 800c438:	4313      	orrs	r3, r2
 800c43a:	3401      	adds	r4, #1
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c442:	4829      	ldr	r0, [pc, #164]	; (800c4e8 <_vfiprintf_r+0x224>)
 800c444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c448:	2206      	movs	r2, #6
 800c44a:	f7f3 fec1 	bl	80001d0 <memchr>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d03f      	beq.n	800c4d2 <_vfiprintf_r+0x20e>
 800c452:	4b26      	ldr	r3, [pc, #152]	; (800c4ec <_vfiprintf_r+0x228>)
 800c454:	bb1b      	cbnz	r3, 800c49e <_vfiprintf_r+0x1da>
 800c456:	9b03      	ldr	r3, [sp, #12]
 800c458:	3307      	adds	r3, #7
 800c45a:	f023 0307 	bic.w	r3, r3, #7
 800c45e:	3308      	adds	r3, #8
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c464:	443b      	add	r3, r7
 800c466:	9309      	str	r3, [sp, #36]	; 0x24
 800c468:	e768      	b.n	800c33c <_vfiprintf_r+0x78>
 800c46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c46e:	460c      	mov	r4, r1
 800c470:	2001      	movs	r0, #1
 800c472:	e7a6      	b.n	800c3c2 <_vfiprintf_r+0xfe>
 800c474:	2300      	movs	r3, #0
 800c476:	3401      	adds	r4, #1
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	4619      	mov	r1, r3
 800c47c:	f04f 0c0a 	mov.w	ip, #10
 800c480:	4620      	mov	r0, r4
 800c482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c486:	3a30      	subs	r2, #48	; 0x30
 800c488:	2a09      	cmp	r2, #9
 800c48a:	d903      	bls.n	800c494 <_vfiprintf_r+0x1d0>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0c6      	beq.n	800c41e <_vfiprintf_r+0x15a>
 800c490:	9105      	str	r1, [sp, #20]
 800c492:	e7c4      	b.n	800c41e <_vfiprintf_r+0x15a>
 800c494:	fb0c 2101 	mla	r1, ip, r1, r2
 800c498:	4604      	mov	r4, r0
 800c49a:	2301      	movs	r3, #1
 800c49c:	e7f0      	b.n	800c480 <_vfiprintf_r+0x1bc>
 800c49e:	ab03      	add	r3, sp, #12
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	462a      	mov	r2, r5
 800c4a4:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <_vfiprintf_r+0x22c>)
 800c4a6:	a904      	add	r1, sp, #16
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f3af 8000 	nop.w
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	1c78      	adds	r0, r7, #1
 800c4b2:	d1d6      	bne.n	800c462 <_vfiprintf_r+0x19e>
 800c4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4b6:	07d9      	lsls	r1, r3, #31
 800c4b8:	d405      	bmi.n	800c4c6 <_vfiprintf_r+0x202>
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	059a      	lsls	r2, r3, #22
 800c4be:	d402      	bmi.n	800c4c6 <_vfiprintf_r+0x202>
 800c4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4c2:	f7fd fb89 	bl	8009bd8 <__retarget_lock_release_recursive>
 800c4c6:	89ab      	ldrh	r3, [r5, #12]
 800c4c8:	065b      	lsls	r3, r3, #25
 800c4ca:	f53f af1d 	bmi.w	800c308 <_vfiprintf_r+0x44>
 800c4ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4d0:	e71c      	b.n	800c30c <_vfiprintf_r+0x48>
 800c4d2:	ab03      	add	r3, sp, #12
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	462a      	mov	r2, r5
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <_vfiprintf_r+0x22c>)
 800c4da:	a904      	add	r1, sp, #16
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7fe fc4b 	bl	800ad78 <_printf_i>
 800c4e2:	e7e4      	b.n	800c4ae <_vfiprintf_r+0x1ea>
 800c4e4:	0800cf81 	.word	0x0800cf81
 800c4e8:	0800cf8b 	.word	0x0800cf8b
 800c4ec:	00000000 	.word	0x00000000
 800c4f0:	0800c2a1 	.word	0x0800c2a1
 800c4f4:	0800cf87 	.word	0x0800cf87

0800c4f8 <__swbuf_r>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	460e      	mov	r6, r1
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	4605      	mov	r5, r0
 800c500:	b118      	cbz	r0, 800c50a <__swbuf_r+0x12>
 800c502:	6a03      	ldr	r3, [r0, #32]
 800c504:	b90b      	cbnz	r3, 800c50a <__swbuf_r+0x12>
 800c506:	f7fd fa43 	bl	8009990 <__sinit>
 800c50a:	69a3      	ldr	r3, [r4, #24]
 800c50c:	60a3      	str	r3, [r4, #8]
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	071a      	lsls	r2, r3, #28
 800c512:	d525      	bpl.n	800c560 <__swbuf_r+0x68>
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	b31b      	cbz	r3, 800c560 <__swbuf_r+0x68>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	6922      	ldr	r2, [r4, #16]
 800c51c:	1a98      	subs	r0, r3, r2
 800c51e:	6963      	ldr	r3, [r4, #20]
 800c520:	b2f6      	uxtb	r6, r6
 800c522:	4283      	cmp	r3, r0
 800c524:	4637      	mov	r7, r6
 800c526:	dc04      	bgt.n	800c532 <__swbuf_r+0x3a>
 800c528:	4621      	mov	r1, r4
 800c52a:	4628      	mov	r0, r5
 800c52c:	f7fe fdcc 	bl	800b0c8 <_fflush_r>
 800c530:	b9e0      	cbnz	r0, 800c56c <__swbuf_r+0x74>
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	3b01      	subs	r3, #1
 800c536:	60a3      	str	r3, [r4, #8]
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	6022      	str	r2, [r4, #0]
 800c53e:	701e      	strb	r6, [r3, #0]
 800c540:	6962      	ldr	r2, [r4, #20]
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	429a      	cmp	r2, r3
 800c546:	d004      	beq.n	800c552 <__swbuf_r+0x5a>
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	07db      	lsls	r3, r3, #31
 800c54c:	d506      	bpl.n	800c55c <__swbuf_r+0x64>
 800c54e:	2e0a      	cmp	r6, #10
 800c550:	d104      	bne.n	800c55c <__swbuf_r+0x64>
 800c552:	4621      	mov	r1, r4
 800c554:	4628      	mov	r0, r5
 800c556:	f7fe fdb7 	bl	800b0c8 <_fflush_r>
 800c55a:	b938      	cbnz	r0, 800c56c <__swbuf_r+0x74>
 800c55c:	4638      	mov	r0, r7
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c560:	4621      	mov	r1, r4
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f806 	bl	800c574 <__swsetup_r>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d0d5      	beq.n	800c518 <__swbuf_r+0x20>
 800c56c:	f04f 37ff 	mov.w	r7, #4294967295
 800c570:	e7f4      	b.n	800c55c <__swbuf_r+0x64>
	...

0800c574 <__swsetup_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4b2a      	ldr	r3, [pc, #168]	; (800c620 <__swsetup_r+0xac>)
 800c578:	4605      	mov	r5, r0
 800c57a:	6818      	ldr	r0, [r3, #0]
 800c57c:	460c      	mov	r4, r1
 800c57e:	b118      	cbz	r0, 800c588 <__swsetup_r+0x14>
 800c580:	6a03      	ldr	r3, [r0, #32]
 800c582:	b90b      	cbnz	r3, 800c588 <__swsetup_r+0x14>
 800c584:	f7fd fa04 	bl	8009990 <__sinit>
 800c588:	89a3      	ldrh	r3, [r4, #12]
 800c58a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c58e:	0718      	lsls	r0, r3, #28
 800c590:	d422      	bmi.n	800c5d8 <__swsetup_r+0x64>
 800c592:	06d9      	lsls	r1, r3, #27
 800c594:	d407      	bmi.n	800c5a6 <__swsetup_r+0x32>
 800c596:	2309      	movs	r3, #9
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a4:	e034      	b.n	800c610 <__swsetup_r+0x9c>
 800c5a6:	0758      	lsls	r0, r3, #29
 800c5a8:	d512      	bpl.n	800c5d0 <__swsetup_r+0x5c>
 800c5aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ac:	b141      	cbz	r1, 800c5c0 <__swsetup_r+0x4c>
 800c5ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b2:	4299      	cmp	r1, r3
 800c5b4:	d002      	beq.n	800c5bc <__swsetup_r+0x48>
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f7fd fb34 	bl	8009c24 <_free_r>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	6363      	str	r3, [r4, #52]	; 0x34
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5c6:	81a3      	strh	r3, [r4, #12]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	6063      	str	r3, [r4, #4]
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f043 0308 	orr.w	r3, r3, #8
 800c5d6:	81a3      	strh	r3, [r4, #12]
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	b94b      	cbnz	r3, 800c5f0 <__swsetup_r+0x7c>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5e6:	d003      	beq.n	800c5f0 <__swsetup_r+0x7c>
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f000 f8a2 	bl	800c734 <__smakebuf_r>
 800c5f0:	89a0      	ldrh	r0, [r4, #12]
 800c5f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5f6:	f010 0301 	ands.w	r3, r0, #1
 800c5fa:	d00a      	beq.n	800c612 <__swsetup_r+0x9e>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60a3      	str	r3, [r4, #8]
 800c600:	6963      	ldr	r3, [r4, #20]
 800c602:	425b      	negs	r3, r3
 800c604:	61a3      	str	r3, [r4, #24]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	b943      	cbnz	r3, 800c61c <__swsetup_r+0xa8>
 800c60a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c60e:	d1c4      	bne.n	800c59a <__swsetup_r+0x26>
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	0781      	lsls	r1, r0, #30
 800c614:	bf58      	it	pl
 800c616:	6963      	ldrpl	r3, [r4, #20]
 800c618:	60a3      	str	r3, [r4, #8]
 800c61a:	e7f4      	b.n	800c606 <__swsetup_r+0x92>
 800c61c:	2000      	movs	r0, #0
 800c61e:	e7f7      	b.n	800c610 <__swsetup_r+0x9c>
 800c620:	2000007c 	.word	0x2000007c

0800c624 <_raise_r>:
 800c624:	291f      	cmp	r1, #31
 800c626:	b538      	push	{r3, r4, r5, lr}
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	d904      	bls.n	800c638 <_raise_r+0x14>
 800c62e:	2316      	movs	r3, #22
 800c630:	6003      	str	r3, [r0, #0]
 800c632:	f04f 30ff 	mov.w	r0, #4294967295
 800c636:	bd38      	pop	{r3, r4, r5, pc}
 800c638:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c63a:	b112      	cbz	r2, 800c642 <_raise_r+0x1e>
 800c63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c640:	b94b      	cbnz	r3, 800c656 <_raise_r+0x32>
 800c642:	4620      	mov	r0, r4
 800c644:	f000 f830 	bl	800c6a8 <_getpid_r>
 800c648:	462a      	mov	r2, r5
 800c64a:	4601      	mov	r1, r0
 800c64c:	4620      	mov	r0, r4
 800c64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c652:	f000 b817 	b.w	800c684 <_kill_r>
 800c656:	2b01      	cmp	r3, #1
 800c658:	d00a      	beq.n	800c670 <_raise_r+0x4c>
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	d103      	bne.n	800c666 <_raise_r+0x42>
 800c65e:	2316      	movs	r3, #22
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	2001      	movs	r0, #1
 800c664:	e7e7      	b.n	800c636 <_raise_r+0x12>
 800c666:	2400      	movs	r4, #0
 800c668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c66c:	4628      	mov	r0, r5
 800c66e:	4798      	blx	r3
 800c670:	2000      	movs	r0, #0
 800c672:	e7e0      	b.n	800c636 <_raise_r+0x12>

0800c674 <raise>:
 800c674:	4b02      	ldr	r3, [pc, #8]	; (800c680 <raise+0xc>)
 800c676:	4601      	mov	r1, r0
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	f7ff bfd3 	b.w	800c624 <_raise_r>
 800c67e:	bf00      	nop
 800c680:	2000007c 	.word	0x2000007c

0800c684 <_kill_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4d07      	ldr	r5, [pc, #28]	; (800c6a4 <_kill_r+0x20>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	4611      	mov	r1, r2
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	f7f6 f80b 	bl	80026ac <_kill>
 800c696:	1c43      	adds	r3, r0, #1
 800c698:	d102      	bne.n	800c6a0 <_kill_r+0x1c>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	b103      	cbz	r3, 800c6a0 <_kill_r+0x1c>
 800c69e:	6023      	str	r3, [r4, #0]
 800c6a0:	bd38      	pop	{r3, r4, r5, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20000a20 	.word	0x20000a20

0800c6a8 <_getpid_r>:
 800c6a8:	f7f5 bff8 	b.w	800269c <_getpid>

0800c6ac <_calloc_r>:
 800c6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ae:	fba1 2402 	umull	r2, r4, r1, r2
 800c6b2:	b94c      	cbnz	r4, 800c6c8 <_calloc_r+0x1c>
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	9201      	str	r2, [sp, #4]
 800c6b8:	f7fc fe04 	bl	80092c4 <_malloc_r>
 800c6bc:	9a01      	ldr	r2, [sp, #4]
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b930      	cbnz	r0, 800c6d0 <_calloc_r+0x24>
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bd30      	pop	{r4, r5, pc}
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	6002      	str	r2, [r0, #0]
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	e7f8      	b.n	800c6c2 <_calloc_r+0x16>
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f7fd f9f6 	bl	8009ac2 <memset>
 800c6d6:	e7f4      	b.n	800c6c2 <_calloc_r+0x16>

0800c6d8 <_malloc_usable_size_r>:
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f18      	subs	r0, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfbc      	itt	lt
 800c6e2:	580b      	ldrlt	r3, [r1, r0]
 800c6e4:	18c0      	addlt	r0, r0, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <__swhatbuf_r>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	b096      	sub	sp, #88	; 0x58
 800c6f4:	4615      	mov	r5, r2
 800c6f6:	461e      	mov	r6, r3
 800c6f8:	da0d      	bge.n	800c716 <__swhatbuf_r+0x2e>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c700:	f04f 0100 	mov.w	r1, #0
 800c704:	bf0c      	ite	eq
 800c706:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c70a:	2340      	movne	r3, #64	; 0x40
 800c70c:	2000      	movs	r0, #0
 800c70e:	6031      	str	r1, [r6, #0]
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	b016      	add	sp, #88	; 0x58
 800c714:	bd70      	pop	{r4, r5, r6, pc}
 800c716:	466a      	mov	r2, sp
 800c718:	f000 f848 	bl	800c7ac <_fstat_r>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dbec      	blt.n	800c6fa <__swhatbuf_r+0x12>
 800c720:	9901      	ldr	r1, [sp, #4]
 800c722:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c726:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c72a:	4259      	negs	r1, r3
 800c72c:	4159      	adcs	r1, r3
 800c72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c732:	e7eb      	b.n	800c70c <__swhatbuf_r+0x24>

0800c734 <__smakebuf_r>:
 800c734:	898b      	ldrh	r3, [r1, #12]
 800c736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c738:	079d      	lsls	r5, r3, #30
 800c73a:	4606      	mov	r6, r0
 800c73c:	460c      	mov	r4, r1
 800c73e:	d507      	bpl.n	800c750 <__smakebuf_r+0x1c>
 800c740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	2301      	movs	r3, #1
 800c74a:	6163      	str	r3, [r4, #20]
 800c74c:	b002      	add	sp, #8
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	ab01      	add	r3, sp, #4
 800c752:	466a      	mov	r2, sp
 800c754:	f7ff ffc8 	bl	800c6e8 <__swhatbuf_r>
 800c758:	9900      	ldr	r1, [sp, #0]
 800c75a:	4605      	mov	r5, r0
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7fc fdb1 	bl	80092c4 <_malloc_r>
 800c762:	b948      	cbnz	r0, 800c778 <__smakebuf_r+0x44>
 800c764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d4ef      	bmi.n	800c74c <__smakebuf_r+0x18>
 800c76c:	f023 0303 	bic.w	r3, r3, #3
 800c770:	f043 0302 	orr.w	r3, r3, #2
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	e7e3      	b.n	800c740 <__smakebuf_r+0xc>
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	6020      	str	r0, [r4, #0]
 800c77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c780:	81a3      	strh	r3, [r4, #12]
 800c782:	9b00      	ldr	r3, [sp, #0]
 800c784:	6163      	str	r3, [r4, #20]
 800c786:	9b01      	ldr	r3, [sp, #4]
 800c788:	6120      	str	r0, [r4, #16]
 800c78a:	b15b      	cbz	r3, 800c7a4 <__smakebuf_r+0x70>
 800c78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c790:	4630      	mov	r0, r6
 800c792:	f000 f81d 	bl	800c7d0 <_isatty_r>
 800c796:	b128      	cbz	r0, 800c7a4 <__smakebuf_r+0x70>
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	f023 0303 	bic.w	r3, r3, #3
 800c79e:	f043 0301 	orr.w	r3, r3, #1
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	431d      	orrs	r5, r3
 800c7a8:	81a5      	strh	r5, [r4, #12]
 800c7aa:	e7cf      	b.n	800c74c <__smakebuf_r+0x18>

0800c7ac <_fstat_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d07      	ldr	r5, [pc, #28]	; (800c7cc <_fstat_r+0x20>)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4608      	mov	r0, r1
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	f7f5 ffd6 	bl	800276a <_fstat>
 800c7be:	1c43      	adds	r3, r0, #1
 800c7c0:	d102      	bne.n	800c7c8 <_fstat_r+0x1c>
 800c7c2:	682b      	ldr	r3, [r5, #0]
 800c7c4:	b103      	cbz	r3, 800c7c8 <_fstat_r+0x1c>
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000a20 	.word	0x20000a20

0800c7d0 <_isatty_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_isatty_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7f5 ffd5 	bl	800278a <_isatty>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_isatty_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_isatty_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	20000a20 	.word	0x20000a20

0800c7f0 <_init>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	bf00      	nop
 800c7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7f6:	bc08      	pop	{r3}
 800c7f8:	469e      	mov	lr, r3
 800c7fa:	4770      	bx	lr

0800c7fc <_fini>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	bf00      	nop
 800c800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c802:	bc08      	pop	{r3}
 800c804:	469e      	mov	lr, r3
 800c806:	4770      	bx	lr
